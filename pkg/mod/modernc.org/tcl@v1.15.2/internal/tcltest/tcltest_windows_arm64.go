// Code generated by 'ccgo -DTCL_BROKEN_MAINARGS -export-defines "" -ignore-object tclsh.res.o -lmodernc.org/tcl/lib -nocapi -o internal/tcltest/tcltest_windows_amd64.go -trace-translation-units --load-config "" -save-config "" /tmp/go-generate-271272855/cdb.json tcltests.exe', DO NOT EDIT.

package main

import (
	"math"
	"reflect"
	"sync/atomic"
	"unsafe"

	"modernc.org/libc"
	"modernc.org/libc/sys/types"
	"modernc.org/tcl/lib"
)

var _ = math.Pi
var _ reflect.Kind
var _ atomic.Value
var _ unsafe.Pointer
var _ *libc.TLS
var _ types.Size_t

func main() { libc.Start(main1) }

const (
	ABORTDOC                                                               = 2
	ABOVE_NORMAL_PRIORITY_CLASS                                            = 0x8000
	ABSOLUTE                                                               = 1
	ACCESS_ALLOWED_ACE_TYPE                                                = 0
	ACCESS_ALLOWED_CALLBACK_ACE_TYPE                                       = 9
	ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE                                = 11
	ACCESS_ALLOWED_COMPOUND_ACE_TYPE                                       = 4
	ACCESS_ALLOWED_OBJECT_ACE_TYPE                                         = 5
	ACCESS_DENIED_ACE_TYPE                                                 = 1
	ACCESS_DENIED_CALLBACK_ACE_TYPE                                        = 10
	ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE                                 = 12
	ACCESS_DENIED_OBJECT_ACE_TYPE                                          = 6
	ACCESS_DS_OBJECT_TYPE_NAME_A                                           = "Directory Service Object"
	ACCESS_DS_SOURCE_A                                                     = "DS"
	ACCESS_FILTERKEYS                                                      = 0x0002
	ACCESS_MAX_LEVEL                                                       = 4
	ACCESS_MAX_MS_ACE_TYPE                                                 = 8
	ACCESS_MAX_MS_OBJECT_ACE_TYPE                                          = 8
	ACCESS_MAX_MS_V2_ACE_TYPE                                              = 3
	ACCESS_MAX_MS_V3_ACE_TYPE                                              = 4
	ACCESS_MAX_MS_V4_ACE_TYPE                                              = 8
	ACCESS_MAX_MS_V5_ACE_TYPE                                              = 19
	ACCESS_MIN_MS_ACE_TYPE                                                 = 0
	ACCESS_MIN_MS_OBJECT_ACE_TYPE                                          = 5
	ACCESS_MOUSEKEYS                                                       = 0x0003
	ACCESS_OBJECT_GUID                                                     = 0
	ACCESS_PROPERTY_GUID                                                   = 2
	ACCESS_PROPERTY_SET_GUID                                               = 1
	ACCESS_REASON_DATA_MASK                                                = 0x0000ffff
	ACCESS_REASON_EXDATA_MASK                                              = 0x7f000000
	ACCESS_REASON_STAGING_MASK                                             = 0x80000000
	ACCESS_REASON_TYPE_MASK                                                = 0x00ff0000
	ACCESS_STICKYKEYS                                                      = 0x0001
	ACCESS_SYSTEM_SECURITY                                                 = 16777216
	ACE_INHERITED_OBJECT_TYPE_PRESENT                                      = 0x2
	ACE_OBJECT_TYPE_PRESENT                                                = 0x1
	ACL_REVISION                                                           = 2
	ACL_REVISION1                                                          = 1
	ACL_REVISION2                                                          = 2
	ACL_REVISION3                                                          = 3
	ACL_REVISION4                                                          = 4
	ACL_REVISION_DS                                                        = 4
	ACPI_PPM_HARDWARE_ALL                                                  = 0xfe
	ACPI_PPM_SOFTWARE_ALL                                                  = 0xfc
	ACPI_PPM_SOFTWARE_ANY                                                  = 0xfd
	ACTCTX_FLAG_APPLICATION_NAME_VALID                                     = 32
	ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID                                   = 4
	ACTCTX_FLAG_HMODULE_VALID                                              = 128
	ACTCTX_FLAG_LANGID_VALID                                               = 2
	ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID                               = 1
	ACTCTX_FLAG_RESOURCE_NAME_VALID                                        = 8
	ACTCTX_FLAG_SET_PROCESS_DEFAULT                                        = 16
	ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF                                      = 64
	ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED                           = 1
	ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF                               = 4
	ACTIVATION_CONTEXT_PATH_TYPE_NONE                                      = 1
	ACTIVATION_CONTEXT_PATH_TYPE_URL                                       = 3
	ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE                                = 2
	ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS                        = 10
	ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION                        = 1
	ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES                              = 9
	ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO                          = 11
	ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION                   = 5
	ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION                      = 7
	ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION                      = 4
	ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION                = 6
	ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION                             = 2
	ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE                  = 8
	ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION                    = 3
	AC_LINE_BACKUP_POWER                                                   = 0x02
	AC_LINE_OFFLINE                                                        = 0x00
	AC_LINE_ONLINE                                                         = 0x01
	AC_LINE_UNKNOWN                                                        = 0xff
	AC_SRC_ALPHA                                                           = 0x01
	AC_SRC_OVER                                                            = 0x00
	ADDRESS_TAG_BIT                                                        = 0x40000000000
	AD_CLOCKWISE                                                           = 2
	AD_COUNTERCLOCKWISE                                                    = 1
	AF_12844                                                               = 25
	AF_APPLETALK                                                           = 16
	AF_ATM                                                                 = 22
	AF_BAN                                                                 = 21
	AF_BTH                                                                 = 32
	AF_CCITT                                                               = 10
	AF_CHAOS                                                               = 5
	AF_CLUSTER                                                             = 24
	AF_DATAKIT                                                             = 9
	AF_DECnet                                                              = 12
	AF_DLI                                                                 = 13
	AF_ECMA                                                                = 8
	AF_FIREFOX                                                             = 19
	AF_HYLINK                                                              = 15
	AF_ICLFXBM                                                             = 31
	AF_IMPLINK                                                             = 3
	AF_INET                                                                = 2
	AF_INET6                                                               = 23
	AF_IPX                                                                 = 6
	AF_IRDA                                                                = 26
	AF_ISO                                                                 = 7
	AF_LAT                                                                 = 14
	AF_MAX                                                                 = 33
	AF_NETBIOS                                                             = 17
	AF_NETDES                                                              = 28
	AF_NS                                                                  = 6
	AF_OSI                                                                 = 7
	AF_PUP                                                                 = 4
	AF_SNA                                                                 = 11
	AF_TCNMESSAGE                                                          = 30
	AF_TCNPROCESS                                                          = 29
	AF_UNIX                                                                = 1
	AF_UNKNOWN1                                                            = 20
	AF_UNSPEC                                                              = 0
	AF_VOICEVIEW                                                           = 18
	AI_CANONNAME                                                           = 0x00000002
	AI_NUMERICHOST                                                         = 0x00000004
	AI_PASSIVE                                                             = 0x00000001
	ALERT_SYSTEM_CRITICAL                                                  = 5
	ALERT_SYSTEM_ERROR                                                     = 3
	ALERT_SYSTEM_INFORMATIONAL                                             = 1
	ALERT_SYSTEM_QUERY                                                     = 4
	ALERT_SYSTEM_WARNING                                                   = 2
	ALIGNMENT_MACHINE                                                      = 0
	ALTERNATE                                                              = 1
	ALTNUMPAD_BIT                                                          = 0x4000000
	ANSI_CHARSET                                                           = 0
	ANSI_FIXED_FONT                                                        = 11
	ANSI_VAR_FONT                                                          = 12
	ANTIALIASED_QUALITY                                                    = 4
	ANYSIZE_ARRAY                                                          = 1
	APIENTRY                                                               = 0
	APIPRIVATE                                                             = 0
	API_SET_EXTENSION_NAME_A                                               = "EXT-"
	API_SET_LOAD_SCHEMA_ORDINAL                                            = 1
	API_SET_LOOKUP_ORDINAL                                                 = 2
	API_SET_PREFIX_NAME_A                                                  = "API-"
	API_SET_RELEASE_SCHEMA_ORDINAL                                         = 3
	API_SET_SCHEMA_VERSION                                                 = 2
	API_SET_SECTION_NAME                                                   = ".apiset"
	APPCOMMAND_BASS_BOOST                                                  = 20
	APPCOMMAND_BASS_DOWN                                                   = 19
	APPCOMMAND_BASS_UP                                                     = 21
	APPCOMMAND_BROWSER_BACKWARD                                            = 1
	APPCOMMAND_BROWSER_FAVORITES                                           = 6
	APPCOMMAND_BROWSER_FORWARD                                             = 2
	APPCOMMAND_BROWSER_HOME                                                = 7
	APPCOMMAND_BROWSER_REFRESH                                             = 3
	APPCOMMAND_BROWSER_SEARCH                                              = 5
	APPCOMMAND_BROWSER_STOP                                                = 4
	APPCOMMAND_CLOSE                                                       = 31
	APPCOMMAND_COPY                                                        = 36
	APPCOMMAND_CORRECTION_LIST                                             = 45
	APPCOMMAND_CUT                                                         = 37
	APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE                           = 43
	APPCOMMAND_FIND                                                        = 28
	APPCOMMAND_FORWARD_MAIL                                                = 40
	APPCOMMAND_HELP                                                        = 27
	APPCOMMAND_LAUNCH_APP1                                                 = 17
	APPCOMMAND_LAUNCH_APP2                                                 = 18
	APPCOMMAND_LAUNCH_MAIL                                                 = 15
	APPCOMMAND_LAUNCH_MEDIA_SELECT                                         = 16
	APPCOMMAND_MEDIA_CHANNEL_DOWN                                          = 52
	APPCOMMAND_MEDIA_CHANNEL_UP                                            = 51
	APPCOMMAND_MEDIA_FAST_FORWARD                                          = 49
	APPCOMMAND_MEDIA_NEXTTRACK                                             = 11
	APPCOMMAND_MEDIA_PAUSE                                                 = 47
	APPCOMMAND_MEDIA_PLAY                                                  = 46
	APPCOMMAND_MEDIA_PLAY_PAUSE                                            = 14
	APPCOMMAND_MEDIA_PREVIOUSTRACK                                         = 12
	APPCOMMAND_MEDIA_RECORD                                                = 48
	APPCOMMAND_MEDIA_REWIND                                                = 50
	APPCOMMAND_MEDIA_STOP                                                  = 13
	APPCOMMAND_MICROPHONE_VOLUME_DOWN                                      = 25
	APPCOMMAND_MICROPHONE_VOLUME_MUTE                                      = 24
	APPCOMMAND_MICROPHONE_VOLUME_UP                                        = 26
	APPCOMMAND_MIC_ON_OFF_TOGGLE                                           = 44
	APPCOMMAND_NEW                                                         = 29
	APPCOMMAND_OPEN                                                        = 30
	APPCOMMAND_PASTE                                                       = 38
	APPCOMMAND_PRINT                                                       = 33
	APPCOMMAND_REDO                                                        = 35
	APPCOMMAND_REPLY_TO_MAIL                                               = 39
	APPCOMMAND_SAVE                                                        = 32
	APPCOMMAND_SEND_MAIL                                                   = 41
	APPCOMMAND_SPELL_CHECK                                                 = 42
	APPCOMMAND_TREBLE_DOWN                                                 = 22
	APPCOMMAND_TREBLE_UP                                                   = 23
	APPCOMMAND_UNDO                                                        = 34
	APPCOMMAND_VOLUME_DOWN                                                 = 9
	APPCOMMAND_VOLUME_MUTE                                                 = 8
	APPCOMMAND_VOLUME_UP                                                   = 10
	APPLICATION_ERROR_MASK                                                 = 0x20000000
	APPLICATION_VERIFIER_ACCESS_VIOLATION                                  = 0x0002
	APPLICATION_VERIFIER_BAD_HEAP_HANDLE                                   = 0x0005
	APPLICATION_VERIFIER_COM_API_IN_DLLMAIN                                = 0x0401
	APPLICATION_VERIFIER_COM_CF_SUCCESS_WITH_NULL                          = 0x040A
	APPLICATION_VERIFIER_COM_ERROR                                         = 0x0400
	APPLICATION_VERIFIER_COM_GCO_SUCCESS_WITH_NULL                         = 0x040B
	APPLICATION_VERIFIER_COM_HOLDING_LOCKS_ON_CALL                         = 0x0410
	APPLICATION_VERIFIER_COM_NULL_DACL                                     = 0x0406
	APPLICATION_VERIFIER_COM_OBJECT_IN_FREED_MEMORY                        = 0x040C
	APPLICATION_VERIFIER_COM_OBJECT_IN_UNLOADED_DLL                        = 0x040D
	APPLICATION_VERIFIER_COM_SMUGGLED_PROXY                                = 0x0409
	APPLICATION_VERIFIER_COM_SMUGGLED_WRAPPER                              = 0x0408
	APPLICATION_VERIFIER_COM_UNBALANCED_COINIT                             = 0x0403
	APPLICATION_VERIFIER_COM_UNBALANCED_OLEINIT                            = 0x0404
	APPLICATION_VERIFIER_COM_UNBALANCED_SWC                                = 0x0405
	APPLICATION_VERIFIER_COM_UNHANDLED_EXCEPTION                           = 0x0402
	APPLICATION_VERIFIER_COM_UNSAFE_IMPERSONATION                          = 0x0407
	APPLICATION_VERIFIER_COM_VTBL_IN_FREED_MEMORY                          = 0x040E
	APPLICATION_VERIFIER_COM_VTBL_IN_UNLOADED_DLL                          = 0x040F
	APPLICATION_VERIFIER_CONTINUABLE_BREAK                                 = 0x10000000
	APPLICATION_VERIFIER_CORRUPTED_FREED_HEAP_BLOCK                        = 0x000E
	APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK                              = 0x0008
	APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_END_STAMP                    = 0x0011
	APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_EXCEPTION_RAISED_FOR_HEADER  = 0x000B
	APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_EXCEPTION_RAISED_FOR_PROBING = 0x000C
	APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_HEADER                       = 0x000D
	APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_PREFIX                       = 0x0012
	APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_START_STAMP                  = 0x0010
	APPLICATION_VERIFIER_CORRUPTED_HEAP_BLOCK_SUFFIX                       = 0x000F
	APPLICATION_VERIFIER_CORRUPTED_HEAP_LIST                               = 0x0014
	APPLICATION_VERIFIER_DESTROY_PROCESS_HEAP                              = 0x0009
	APPLICATION_VERIFIER_DOUBLE_FREE                                       = 0x0007
	APPLICATION_VERIFIER_EXIT_THREAD_OWNS_LOCK                             = 0x0200
	APPLICATION_VERIFIER_EXTREME_SIZE_REQUEST                              = 0x0004
	APPLICATION_VERIFIER_FIRST_CHANCE_ACCESS_VIOLATION                     = 0x0013
	APPLICATION_VERIFIER_INCORRECT_WAIT_CALL                               = 0x0302
	APPLICATION_VERIFIER_INTERNAL_ERROR                                    = 0x80000000
	APPLICATION_VERIFIER_INTERNAL_WARNING                                  = 0x40000000
	APPLICATION_VERIFIER_INVALID_ALLOCMEM                                  = 0x0601
	APPLICATION_VERIFIER_INVALID_EXIT_PROCESS_CALL                         = 0x0102
	APPLICATION_VERIFIER_INVALID_FREEMEM                                   = 0x0600
	APPLICATION_VERIFIER_INVALID_HANDLE                                    = 0x0300
	APPLICATION_VERIFIER_INVALID_MAPVIEW                                   = 0x0602
	APPLICATION_VERIFIER_INVALID_TLS_VALUE                                 = 0x0301
	APPLICATION_VERIFIER_LOCK_ALREADY_INITIALIZED                          = 0x0211
	APPLICATION_VERIFIER_LOCK_CORRUPTED                                    = 0x0205
	APPLICATION_VERIFIER_LOCK_DOUBLE_INITIALIZE                            = 0x0203
	APPLICATION_VERIFIER_LOCK_INVALID_LOCK_COUNT                           = 0x0208
	APPLICATION_VERIFIER_LOCK_INVALID_OWNER                                = 0x0206
	APPLICATION_VERIFIER_LOCK_INVALID_RECURSION_COUNT                      = 0x0207
	APPLICATION_VERIFIER_LOCK_IN_FREED_HEAP                                = 0x0202
	APPLICATION_VERIFIER_LOCK_IN_FREED_MEMORY                              = 0x0204
	APPLICATION_VERIFIER_LOCK_IN_FREED_VMEM                                = 0x0212
	APPLICATION_VERIFIER_LOCK_IN_UNLOADED_DLL                              = 0x0201
	APPLICATION_VERIFIER_LOCK_IN_UNMAPPED_MEM                              = 0x0213
	APPLICATION_VERIFIER_LOCK_NOT_INITIALIZED                              = 0x0210
	APPLICATION_VERIFIER_LOCK_OVER_RELEASED                                = 0x0209
	APPLICATION_VERIFIER_NO_BREAK                                          = 0x20000000
	APPLICATION_VERIFIER_NULL_HANDLE                                       = 0x0303
	APPLICATION_VERIFIER_PROBE_FREE_MEM                                    = 0x0604
	APPLICATION_VERIFIER_PROBE_GUARD_PAGE                                  = 0x0605
	APPLICATION_VERIFIER_PROBE_INVALID_ADDRESS                             = 0x0603
	APPLICATION_VERIFIER_PROBE_INVALID_START_OR_SIZE                       = 0x0607
	APPLICATION_VERIFIER_PROBE_NULL                                        = 0x0606
	APPLICATION_VERIFIER_RPC_ERROR                                         = 0x0500
	APPLICATION_VERIFIER_SIZE_HEAP_UNEXPECTED_EXCEPTION                    = 0x0618
	APPLICATION_VERIFIER_STACK_OVERFLOW                                    = 0x0101
	APPLICATION_VERIFIER_SWITCHED_HEAP_HANDLE                              = 0x0006
	APPLICATION_VERIFIER_TERMINATE_THREAD_CALL                             = 0x0100
	APPLICATION_VERIFIER_THREAD_NOT_LOCK_OWNER                             = 0x0214
	APPLICATION_VERIFIER_UNEXPECTED_EXCEPTION                              = 0x000A
	APPLICATION_VERIFIER_UNKNOWN_ERROR                                     = 0x0001
	APPLICATION_VERIFIER_UNSYNCHRONIZED_ACCESS                             = 0x0003
	APPLICATION_VERIFIER_WAIT_IN_DLLMAIN                                   = 0x0304
	APPMODEL_ERROR_NO_APPLICATION                                          = 15703
	APPMODEL_ERROR_NO_PACKAGE                                              = 15700
	APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT                                = 15702
	APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT                                 = 15701
	APP_LOCAL_DEVICE_ID_SIZE                                               = 32
	ARABIC_CHARSET                                                         = 178
	ARW_BOTTOMLEFT                                                         = 0
	ARW_BOTTOMRIGHT                                                        = 1
	ARW_DOWN                                                               = 4
	ARW_HIDE                                                               = 8
	ARW_LEFT                                                               = 0
	ARW_RIGHT                                                              = 0
	ARW_STARTMASK                                                          = 3
	ARW_STARTRIGHT                                                         = 1
	ARW_STARTTOP                                                           = 2
	ARW_TOPLEFT                                                            = 2
	ARW_TOPRIGHT                                                           = 3
	ARW_UP                                                                 = 4
	ASPECTX                                                                = 40
	ASPECTXY                                                               = 44
	ASPECTY                                                                = 42
	ASPECT_FILTERING                                                       = 0x0001
	ATF_ONOFFFEEDBACK                                                      = 0x00000002
	ATF_TIMEOUTON                                                          = 0x00000001
	ATOM_FLAG_GLOBAL                                                       = 0x2
	ATTRIBUTE_SECURITY_INFORMATION                                         = 32
	ATTR_CONVERTED                                                         = 0x02
	ATTR_FIXEDCONVERTED                                                    = 0x05
	ATTR_INPUT                                                             = 0x00
	ATTR_INPUT_ERROR                                                       = 0x04
	ATTR_TARGET_CONVERTED                                                  = 0x01
	ATTR_TARGET_NOTCONVERTED                                               = 0x03
	AUDIT_ALLOW_NO_PRIVILEGE                                               = 0x1
	AW_ACTIVATE                                                            = 0x00020000
	AW_BLEND                                                               = 0x00080000
	AW_CENTER                                                              = 0x00000010
	AW_HIDE                                                                = 0x00010000
	AW_HOR_NEGATIVE                                                        = 0x00000002
	AW_HOR_POSITIVE                                                        = 0x00000001
	AW_SLIDE                                                               = 0x00040000
	AW_VER_NEGATIVE                                                        = 0x00000008
	AW_VER_POSITIVE                                                        = 0x00000004
	BACKGROUND_BLUE                                                        = 0x10
	BACKGROUND_GREEN                                                       = 0x20
	BACKGROUND_INTENSITY                                                   = 0x80
	BACKGROUND_RED                                                         = 0x40
	BACKUP_ALTERNATE_DATA                                                  = 0x00000004
	BACKUP_DATA                                                            = 0x00000001
	BACKUP_EA_DATA                                                         = 0x00000002
	BACKUP_INVALID                                                         = 0x00000000
	BACKUP_LINK                                                            = 0x00000005
	BACKUP_OBJECT_ID                                                       = 0x00000007
	BACKUP_PROPERTY_DATA                                                   = 0x00000006
	BACKUP_REPARSE_DATA                                                    = 0x00000008
	BACKUP_SECURITY_DATA                                                   = 0x00000003
	BACKUP_SECURITY_INFORMATION                                            = 65536
	BACKUP_SPARSE_BLOCK                                                    = 0x00000009
	BACKUP_TXFS_DATA                                                       = 0x0000000a
	BALTIC_CHARSET                                                         = 186
	BANDINFO                                                               = 24
	BASETYPES                                                              = 0
	BASE_PROTOCOL                                                          = 1
	BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE                               = 0x10000
	BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE                                = 0x1
	BASE_SEARCH_PATH_INVALID_FLAGS                                         = -98306
	BASE_SEARCH_PATH_PERMANENT                                             = 0x8000
	BATTERY_DISCHARGE_FLAGS_ENABLE                                         = 0x80000000
	BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK                                 = 0x00000007
	BATTERY_FLAG_CHARGING                                                  = 0x08
	BATTERY_FLAG_CRITICAL                                                  = 0x04
	BATTERY_FLAG_HIGH                                                      = 0x01
	BATTERY_FLAG_LOW                                                       = 0x02
	BATTERY_FLAG_NO_BATTERY                                                = 0x80
	BATTERY_FLAG_UNKNOWN                                                   = 0xff
	BATTERY_LIFE_UNKNOWN                                                   = 0xffffffff
	BATTERY_PERCENTAGE_UNKNOWN                                             = 0xff
	BDR_INNER                                                              = 12
	BDR_OUTER                                                              = 3
	BDR_RAISED                                                             = 5
	BDR_RAISEDINNER                                                        = 0x0004
	BDR_RAISEDOUTER                                                        = 0x0001
	BDR_SUNKEN                                                             = 10
	BDR_SUNKENINNER                                                        = 0x0008
	BDR_SUNKENOUTER                                                        = 0x0002
	BEGIN_PATH                                                             = 4096
	BELOW_NORMAL_PRIORITY_CLASS                                            = 0x4000
	BF_ADJUST                                                              = 0x2000
	BF_BOTTOM                                                              = 0x0008
	BF_BOTTOMLEFT                                                          = 9
	BF_BOTTOMRIGHT                                                         = 12
	BF_DIAGONAL                                                            = 0x0010
	BF_DIAGONAL_ENDBOTTOMLEFT                                              = 25
	BF_DIAGONAL_ENDBOTTOMRIGHT                                             = 28
	BF_DIAGONAL_ENDTOPLEFT                                                 = 19
	BF_DIAGONAL_ENDTOPRIGHT                                                = 22
	BF_FLAT                                                                = 0x4000
	BF_LEFT                                                                = 0x0001
	BF_MIDDLE                                                              = 0x0800
	BF_MONO                                                                = 0x8000
	BF_RECT                                                                = 15
	BF_RIGHT                                                               = 0x0004
	BF_SOFT                                                                = 0x1000
	BF_TOP                                                                 = 0x0002
	BF_TOPLEFT                                                             = 3
	BF_TOPRIGHT                                                            = 6
	BG_FLUSH_SCHEDULED                                                     = 128
	BIGENDIAN                                                              = 0x0000
	BITSPIXEL                                                              = 12
	BI_BITFIELDS                                                           = 3
	BI_JPEG                                                                = 4
	BI_PNG                                                                 = 5
	BI_RGB                                                                 = 0
	BI_RLE4                                                                = 2
	BI_RLE8                                                                = 1
	BKMODE_LAST                                                            = 2
	BLACKONWHITE                                                           = 1
	BLACK_BRUSH                                                            = 4
	BLACK_PEN                                                              = 7
	BLTALIGNMENT                                                           = 119
	BM_CLICK                                                               = 0x00F5
	BM_GETCHECK                                                            = 0x00F0
	BM_GETIMAGE                                                            = 0x00F6
	BM_GETSTATE                                                            = 0x00F2
	BM_SETCHECK                                                            = 0x00F1
	BM_SETIMAGE                                                            = 0x00F7
	BM_SETSTATE                                                            = 0x00F3
	BM_SETSTYLE                                                            = 0x00F4
	BN_CLICKED                                                             = 0
	BN_DBLCLK                                                              = 5
	BN_DISABLE                                                             = 4
	BN_DOUBLECLICKED                                                       = 5
	BN_HILITE                                                              = 2
	BN_H_                                                                  = 0
	BN_KILLFOCUS                                                           = 7
	BN_PAINT                                                               = 1
	BN_PUSHED                                                              = 2
	BN_SETFOCUS                                                            = 6
	BN_UNHILITE                                                            = 3
	BN_UNPUSHED                                                            = 3
	BROADCAST_QUERY_DENY                                                   = 0x424D5144
	BSF_ALLOWSFW                                                           = 0x00000080
	BSF_FLUSHDISK                                                          = 0x00000004
	BSF_FORCEIFHUNG                                                        = 0x00000020
	BSF_IGNORECURRENTTASK                                                  = 0x00000002
	BSF_LUID                                                               = 0x00000400
	BSF_NOHANG                                                             = 0x00000008
	BSF_NOTIMEOUTIFNOTHUNG                                                 = 0x00000040
	BSF_POSTMESSAGE                                                        = 0x00000010
	BSF_QUERY                                                              = 0x00000001
	BSF_RETURNHDESK                                                        = 0x00000200
	BSF_SENDNOTIFYMESSAGE                                                  = 0x00000100
	BSM_ALLCOMPONENTS                                                      = 0x00000000
	BSM_ALLDESKTOPS                                                        = 0x00000010
	BSM_APPLICATIONS                                                       = 0x00000008
	BSM_INSTALLABLEDRIVERS                                                 = 0x00000004
	BSM_NETDRIVER                                                          = 0x00000002
	BSM_VXDS                                                               = 0x00000001
	BST_CHECKED                                                            = 0x0001
	BST_FOCUS                                                              = 0x0008
	BST_INDETERMINATE                                                      = 0x0002
	BST_PUSHED                                                             = 0x0004
	BST_UNCHECKED                                                          = 0x0000
	BS_3STATE                                                              = 5
	BS_AUTO3STATE                                                          = 6
	BS_AUTOCHECKBOX                                                        = 3
	BS_AUTORADIOBUTTON                                                     = 9
	BS_BITMAP                                                              = 128
	BS_BOTTOM                                                              = 2048
	BS_CENTER                                                              = 768
	BS_CHECKBOX                                                            = 2
	BS_DEFPUSHBUTTON                                                       = 1
	BS_DIBPATTERN                                                          = 5
	BS_DIBPATTERN8X8                                                       = 8
	BS_DIBPATTERNPT                                                        = 6
	BS_FLAT                                                                = 32768
	BS_GROUPBOX                                                            = 7
	BS_HATCHED                                                             = 2
	BS_HOLLOW                                                              = 1
	BS_ICON                                                                = 64
	BS_INDEXED                                                             = 4
	BS_LEFT                                                                = 256
	BS_LEFTTEXT                                                            = 32
	BS_MONOPATTERN                                                         = 9
	BS_MULTILINE                                                           = 8192
	BS_NOTIFY                                                              = 16384
	BS_NULL                                                                = 1
	BS_OWNERDRAW                                                           = 11
	BS_PATTERN                                                             = 3
	BS_PATTERN8X8                                                          = 7
	BS_PUSHBOX                                                             = 10
	BS_PUSHBUTTON                                                          = 0
	BS_PUSHLIKE                                                            = 4096
	BS_RADIOBUTTON                                                         = 4
	BS_RIGHT                                                               = 512
	BS_RIGHTBUTTON                                                         = 32
	BS_SOLID                                                               = 0
	BS_TEXT                                                                = 0
	BS_TOP                                                                 = 1024
	BS_TYPEMASK                                                            = 15
	BS_USERBUTTON                                                          = 8
	BS_VCENTER                                                             = 3072
	BUFFER_PADDING                                                         = 16
	BUFSIZ                                                                 = 512
	BUILD_tcl                                                              = 1
	C1_ALPHA                                                               = 0x0100
	C1_BLANK                                                               = 0x0040
	C1_CNTRL                                                               = 0x0020
	C1_DEFINED                                                             = 0x0200
	C1_DIGIT                                                               = 0x0004
	C1_LOWER                                                               = 0x0002
	C1_PUNCT                                                               = 0x0010
	C1_SPACE                                                               = 0x0008
	C1_UPPER                                                               = 0x0001
	C1_XDIGIT                                                              = 0x0080
	C2_ARABICNUMBER                                                        = 0x0006
	C2_BLOCKSEPARATOR                                                      = 0x0008
	C2_COMMONSEPARATOR                                                     = 0x0007
	C2_EUROPENUMBER                                                        = 0x0003
	C2_EUROPESEPARATOR                                                     = 0x0004
	C2_EUROPETERMINATOR                                                    = 0x0005
	C2_LEFTTORIGHT                                                         = 0x0001
	C2_NOTAPPLICABLE                                                       = 0x0000
	C2_OTHERNEUTRAL                                                        = 0x000b
	C2_RIGHTTOLEFT                                                         = 0x0002
	C2_SEGMENTSEPARATOR                                                    = 0x0009
	C2_WHITESPACE                                                          = 0x000a
	C3_ALPHA                                                               = 0x8000
	C3_DIACRITIC                                                           = 0x0002
	C3_FULLWIDTH                                                           = 0x0080
	C3_HALFWIDTH                                                           = 0x0040
	C3_HIGHSURROGATE                                                       = 0x0800
	C3_HIRAGANA                                                            = 0x0020
	C3_IDEOGRAPH                                                           = 0x0100
	C3_KASHIDA                                                             = 0x0200
	C3_KATAKANA                                                            = 0x0010
	C3_LEXICAL                                                             = 0x0400
	C3_LOWSURROGATE                                                        = 0x1000
	C3_NONSPACING                                                          = 0x0001
	C3_NOTAPPLICABLE                                                       = 0x0000
	C3_SYMBOL                                                              = 0x0008
	C3_VOWELMARK                                                           = 0x0004
	CACHE_E_FIRST                                                          = 2147746160
	CACHE_E_LAST                                                           = 2147746175
	CACHE_FULLY_ASSOCIATIVE                                                = 0xFF
	CACHE_S_FIRST                                                          = 262512
	CACHE_S_LAST                                                           = 262527
	CALERT_SYSTEM                                                          = 6
	CALLBACK                                                               = 0
	CALLBACK_CHUNK_FINISHED                                                = 0x0
	CALLBACK_STREAM_SWITCH                                                 = 0x1
	CAL_GREGORIAN                                                          = 1
	CAL_GREGORIAN_ARABIC                                                   = 10
	CAL_GREGORIAN_ME_FRENCH                                                = 9
	CAL_GREGORIAN_US                                                       = 2
	CAL_GREGORIAN_XLIT_ENGLISH                                             = 11
	CAL_GREGORIAN_XLIT_FRENCH                                              = 12
	CAL_HEBREW                                                             = 8
	CAL_HIJRI                                                              = 6
	CAL_ICALINTVALUE                                                       = 0x00000001
	CAL_ITWODIGITYEARMAX                                                   = 0x00000030
	CAL_IYEAROFFSETRANGE                                                   = 0x00000003
	CAL_JAPAN                                                              = 3
	CAL_KOREA                                                              = 5
	CAL_NOUSEROVERRIDE                                                     = 2147483648
	CAL_RETURN_NUMBER                                                      = 536870912
	CAL_SABBREVDAYNAME1                                                    = 0x0000000e
	CAL_SABBREVDAYNAME2                                                    = 0x0000000f
	CAL_SABBREVDAYNAME3                                                    = 0x00000010
	CAL_SABBREVDAYNAME4                                                    = 0x00000011
	CAL_SABBREVDAYNAME5                                                    = 0x00000012
	CAL_SABBREVDAYNAME6                                                    = 0x00000013
	CAL_SABBREVDAYNAME7                                                    = 0x00000014
	CAL_SABBREVMONTHNAME1                                                  = 0x00000022
	CAL_SABBREVMONTHNAME10                                                 = 0x0000002b
	CAL_SABBREVMONTHNAME11                                                 = 0x0000002c
	CAL_SABBREVMONTHNAME12                                                 = 0x0000002d
	CAL_SABBREVMONTHNAME13                                                 = 0x0000002e
	CAL_SABBREVMONTHNAME2                                                  = 0x00000023
	CAL_SABBREVMONTHNAME3                                                  = 0x00000024
	CAL_SABBREVMONTHNAME4                                                  = 0x00000025
	CAL_SABBREVMONTHNAME5                                                  = 0x00000026
	CAL_SABBREVMONTHNAME6                                                  = 0x00000027
	CAL_SABBREVMONTHNAME7                                                  = 0x00000028
	CAL_SABBREVMONTHNAME8                                                  = 0x00000029
	CAL_SABBREVMONTHNAME9                                                  = 0x0000002a
	CAL_SCALNAME                                                           = 0x00000002
	CAL_SDAYNAME1                                                          = 0x00000007
	CAL_SDAYNAME2                                                          = 0x00000008
	CAL_SDAYNAME3                                                          = 0x00000009
	CAL_SDAYNAME4                                                          = 0x0000000a
	CAL_SDAYNAME5                                                          = 0x0000000b
	CAL_SDAYNAME6                                                          = 0x0000000c
	CAL_SDAYNAME7                                                          = 0x0000000d
	CAL_SERASTRING                                                         = 0x00000004
	CAL_SLONGDATE                                                          = 0x00000006
	CAL_SMONTHNAME1                                                        = 0x00000015
	CAL_SMONTHNAME10                                                       = 0x0000001e
	CAL_SMONTHNAME11                                                       = 0x0000001f
	CAL_SMONTHNAME12                                                       = 0x00000020
	CAL_SMONTHNAME13                                                       = 0x00000021
	CAL_SMONTHNAME2                                                        = 0x00000016
	CAL_SMONTHNAME3                                                        = 0x00000017
	CAL_SMONTHNAME4                                                        = 0x00000018
	CAL_SMONTHNAME5                                                        = 0x00000019
	CAL_SMONTHNAME6                                                        = 0x0000001a
	CAL_SMONTHNAME7                                                        = 0x0000001b
	CAL_SMONTHNAME8                                                        = 0x0000001c
	CAL_SMONTHNAME9                                                        = 0x0000001d
	CAL_SSHORTDATE                                                         = 0x00000005
	CAL_SYEARMONTH                                                         = 0x0000002f
	CAL_TAIWAN                                                             = 4
	CAL_THAI                                                               = 7
	CAL_UMALQURA                                                           = 23
	CAL_USE_CP_ACP                                                         = 1073741824
	CANCELED                                                               = 0x1000
	CAPSLOCK_ON                                                            = 0x80
	CAT_E_FIRST                                                            = 2147746144
	CAT_E_LAST                                                             = 2147746145
	CA_LOG_FILTER                                                          = 0x0002
	CA_NEGATIVE                                                            = 0x0001
	CBM_INIT                                                               = 4
	CBN_CLOSEUP                                                            = 8
	CBN_DBLCLK                                                             = 2
	CBN_DROPDOWN                                                           = 7
	CBN_EDITCHANGE                                                         = 5
	CBN_EDITUPDATE                                                         = 6
	CBN_ERRSPACE                                                           = -1
	CBN_KILLFOCUS                                                          = 4
	CBN_SELCHANGE                                                          = 1
	CBN_SELENDCANCEL                                                       = 10
	CBN_SELENDOK                                                           = 9
	CBN_SETFOCUS                                                           = 3
	CBR_110                                                                = 110
	CBR_115200                                                             = 115200
	CBR_1200                                                               = 1200
	CBR_128000                                                             = 128000
	CBR_14400                                                              = 14400
	CBR_19200                                                              = 19200
	CBR_2400                                                               = 2400
	CBR_256000                                                             = 256000
	CBR_300                                                                = 300
	CBR_38400                                                              = 38400
	CBR_4800                                                               = 4800
	CBR_56000                                                              = 56000
	CBR_57600                                                              = 57600
	CBR_600                                                                = 600
	CBR_9600                                                               = 9600
	CBS_AUTOHSCROLL                                                        = 64
	CBS_DISABLENOSCROLL                                                    = 2048
	CBS_DROPDOWN                                                           = 2
	CBS_DROPDOWNLIST                                                       = 3
	CBS_HASSTRINGS                                                         = 512
	CBS_LOWERCASE                                                          = 16384
	CBS_NOINTEGRALHEIGHT                                                   = 1024
	CBS_OEMCONVERT                                                         = 128
	CBS_OWNERDRAWFIXED                                                     = 16
	CBS_OWNERDRAWVARIABLE                                                  = 32
	CBS_SIMPLE                                                             = 1
	CBS_SORT                                                               = 256
	CBS_UPPERCASE                                                          = 8192
	CB_ADDSTRING                                                           = 0x0143
	CB_DELETESTRING                                                        = 0x0144
	CB_DIR                                                                 = 0x0145
	CB_ERR                                                                 = -1
	CB_ERRSPACE                                                            = -2
	CB_FINDSTRING                                                          = 0x014C
	CB_FINDSTRINGEXACT                                                     = 0x0158
	CB_GETCOMBOBOXINFO                                                     = 0x0164
	CB_GETCOUNT                                                            = 0x0146
	CB_GETCURSEL                                                           = 0x0147
	CB_GETDROPPEDCONTROLRECT                                               = 0x0152
	CB_GETDROPPEDSTATE                                                     = 0x0157
	CB_GETDROPPEDWIDTH                                                     = 0x015f
	CB_GETEDITSEL                                                          = 0x0140
	CB_GETEXTENDEDUI                                                       = 0x0156
	CB_GETHORIZONTALEXTENT                                                 = 0x015d
	CB_GETITEMDATA                                                         = 0x0150
	CB_GETITEMHEIGHT                                                       = 0x0154
	CB_GETLBTEXT                                                           = 0x0148
	CB_GETLBTEXTLEN                                                        = 0x0149
	CB_GETLOCALE                                                           = 0x015A
	CB_GETTOPINDEX                                                         = 0x015b
	CB_INITSTORAGE                                                         = 0x0161
	CB_INSERTSTRING                                                        = 0x014A
	CB_LIMITTEXT                                                           = 0x0141
	CB_MSGMAX                                                              = 0x0165
	CB_OKAY                                                                = 0
	CB_RESETCONTENT                                                        = 0x014B
	CB_SELECTSTRING                                                        = 0x014D
	CB_SETCURSEL                                                           = 0x014E
	CB_SETDROPPEDWIDTH                                                     = 0x0160
	CB_SETEDITSEL                                                          = 0x0142
	CB_SETEXTENDEDUI                                                       = 0x0155
	CB_SETHORIZONTALEXTENT                                                 = 0x015e
	CB_SETITEMDATA                                                         = 0x0151
	CB_SETITEMHEIGHT                                                       = 0x0153
	CB_SETLOCALE                                                           = 0x0159
	CB_SETTOPINDEX                                                         = 0x015c
	CB_SHOWDROPDOWN                                                        = 0x014F
	CCHDEVICENAME                                                          = 32
	CCHFORMNAME                                                            = 32
	CCHILDREN_SCROLLBAR                                                    = 5
	CCHILDREN_TITLEBAR                                                     = 5
	CC_CHORD                                                               = 4
	CC_CIRCLES                                                             = 1
	CC_ELLIPSES                                                            = 8
	CC_INTERIORS                                                           = 128
	CC_NONE                                                                = 0
	CC_PIE                                                                 = 2
	CC_ROUNDRECT                                                           = 256
	CC_STYLED                                                              = 32
	CC_WIDE                                                                = 16
	CC_WIDESTYLED                                                          = 64
	CDECL                                                                  = 0
	CDS_FULLSCREEN                                                         = 0x00000004
	CDS_GLOBAL                                                             = 0x00000008
	CDS_NORESET                                                            = 0x10000000
	CDS_RESET                                                              = 0x40000000
	CDS_RESET_EX                                                           = 0x20000000
	CDS_SET_PRIMARY                                                        = 0x00000010
	CDS_TEST                                                               = 0x00000002
	CDS_UPDATEREGISTRY                                                     = 0x00000001
	CDS_VIDEOPARAMETERS                                                    = 0x00000020
	CE_BREAK                                                               = 0x10
	CE_DNS                                                                 = 0x800
	CE_FRAME                                                               = 0x8
	CE_IOE                                                                 = 0x400
	CE_MODE                                                                = 0x8000
	CE_OOP                                                                 = 0x1000
	CE_OVERRUN                                                             = 0x2
	CE_PTO                                                                 = 0x200
	CE_RXOVER                                                              = 0x1
	CE_RXPARITY                                                            = 0x4
	CE_TXFULL                                                              = 0x100
	CFG_CALL_TARGET_CONVERT_EXPORT_SUPPRESSED_TO_VALID                     = 0x04
	CFG_CALL_TARGET_PROCESSED                                              = 0x02
	CFG_CALL_TARGET_VALID                                                  = 0x01
	CFS_CANDIDATEPOS                                                       = 0x0040
	CFS_DEFAULT                                                            = 0x0000
	CFS_EXCLUDE                                                            = 0x0080
	CFS_FORCE_POSITION                                                     = 0x0020
	CFS_POINT                                                              = 0x0002
	CFS_RECT                                                               = 0x0001
	CF_ACCEPT                                                              = 0x0000
	CF_BITMAP                                                              = 2
	CF_DEFER                                                               = 0x0002
	CF_DIB                                                                 = 8
	CF_DIBV5                                                               = 17
	CF_DIF                                                                 = 5
	CF_DSPBITMAP                                                           = 0x0082
	CF_DSPENHMETAFILE                                                      = 0x008E
	CF_DSPMETAFILEPICT                                                     = 0x0083
	CF_DSPTEXT                                                             = 0x0081
	CF_ENHMETAFILE                                                         = 14
	CF_GDIOBJFIRST                                                         = 0x0300
	CF_GDIOBJLAST                                                          = 0x03FF
	CF_HDROP                                                               = 15
	CF_LOCALE                                                              = 16
	CF_MAX                                                                 = 18
	CF_METAFILEPICT                                                        = 3
	CF_OEMTEXT                                                             = 7
	CF_OWNERDISPLAY                                                        = 0x0080
	CF_PALETTE                                                             = 9
	CF_PENDATA                                                             = 10
	CF_PRIVATEFIRST                                                        = 0x0200
	CF_PRIVATELAST                                                         = 0x02FF
	CF_REJECT                                                              = 0x0001
	CF_RIFF                                                                = 11
	CF_SYLK                                                                = 4
	CF_TEXT                                                                = 1
	CF_TIFF                                                                = 6
	CF_UNICODETEXT                                                         = 13
	CF_WAVE                                                                = 12
	CHANNELBUFFER_DEFAULT_SIZE                                             = 4096
	CHANNEL_BLOCKED                                                        = 2048
	CHANNEL_CLOSED                                                         = 256
	CHANNEL_CLOSEDWRITE                                                    = 2097152
	CHANNEL_DEAD                                                           = 8192
	CHANNEL_EOF                                                            = 512
	CHANNEL_INCLOSE                                                        = 524288
	CHANNEL_LINEBUFFERED                                                   = 16
	CHANNEL_NEED_MORE_DATA                                                 = 16384
	CHANNEL_NONBLOCKING                                                    = 8
	CHANNEL_RAW_MODE                                                       = 65536
	CHANNEL_STICKY_EOF                                                     = 1024
	CHANNEL_UNBUFFERED                                                     = 32
	CHAR_BIT                                                               = 8
	CHAR_MAX                                                               = 127
	CHAR_MIN                                                               = -128
	CHECKJPEGFORMAT                                                        = 4119
	CHECKPNGFORMAT                                                         = 4120
	CHILDID_SELF                                                           = 0
	CHINESEBIG5_CHARSET                                                    = 136
	CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION                          = 1
	CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1                       = 1
	CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS                                  = 0xffff0000
	CLAIM_SECURITY_ATTRIBUTE_DISABLED                                      = 0x0010
	CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT                           = 0x0008
	CLAIM_SECURITY_ATTRIBUTE_MANDATORY                                     = 0x0020
	CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE                               = 0x0001
	CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN                                  = 0x06
	CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN                                     = 0x04
	CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64                                    = 0x01
	CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID                                  = 0x00
	CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING                             = 0x10
	CLAIM_SECURITY_ATTRIBUTE_TYPE_SID                                      = 0x05
	CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING                                   = 0x03
	CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64                                   = 0x02
	CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY                             = 0x0004
	CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS                                   = 63
	CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE                          = 0x0002
	CLASSFACTORY_E_FIRST                                                   = 2147746064
	CLASSFACTORY_E_LAST                                                    = 2147746079
	CLASSFACTORY_S_FIRST                                                   = 262416
	CLASSFACTORY_S_LAST                                                    = 262431
	CLEARTYPE_NATURAL_QUALITY                                              = 6
	CLEARTYPE_QUALITY                                                      = 5
	CLIENTSITE_E_FIRST                                                     = 2147746192
	CLIENTSITE_E_LAST                                                      = 2147746207
	CLIENTSITE_S_FIRST                                                     = 262544
	CLIENTSITE_S_LAST                                                      = 262559
	CLIPBRD_E_FIRST                                                        = 2147746256
	CLIPBRD_E_LAST                                                         = 2147746271
	CLIPBRD_S_FIRST                                                        = 262608
	CLIPBRD_S_LAST                                                         = 262623
	CLIPCAPS                                                               = 36
	CLIP_CHARACTER_PRECIS                                                  = 1
	CLIP_DEFAULT_PRECIS                                                    = 0
	CLIP_EMBEDDED                                                          = 128
	CLIP_LH_ANGLES                                                         = 16
	CLIP_MASK                                                              = 0xf
	CLIP_STROKE_PRECIS                                                     = 2
	CLIP_TO_PATH                                                           = 4097
	CLIP_TT_ALWAYS                                                         = 32
	CLK_TCK                                                                = 1000
	CLL_END                                                                = -1
	CLOCKS_PER_SEC                                                         = 1000
	CLOCK_MONOTONIC                                                        = 1
	CLOCK_PROCESS_CPUTIME_ID                                               = 2
	CLOCK_REALTIME                                                         = 0
	CLOCK_THREAD_CPUTIME_ID                                                = 3
	CLOSECHANNEL                                                           = 4112
	CLRBREAK                                                               = 9
	CLRDTR                                                                 = 6
	CLRRTS                                                                 = 4
	CLR_INVALID                                                            = 0xFFFFFFFF
	CLSID_DEFINED                                                          = 0
	CMD_COMPILES_EXPANDED                                                  = 0x08
	CMD_DEAD                                                               = 0x40
	CMD_HAS_EXEC_TRACES                                                    = 0x04
	CMD_IS_DELETED                                                         = 0x01
	CMD_REDEF_IN_PROGRESS                                                  = 0x10
	CMD_TRACE_ACTIVE                                                       = 0x02
	CMD_VIA_RESOLVER                                                       = 0x20
	CM_CMYK_COLOR                                                          = 0x00000004
	CM_DEVICE_ICM                                                          = 0x00000001
	CM_GAMMA_RAMP                                                          = 0x00000002
	CM_IN_GAMUT                                                            = 0
	CM_NONE                                                                = 0x00000000
	CM_OUT_OF_GAMUT                                                        = 255
	CM_SERVICE_MEASURED_BOOT_LOAD                                          = 0x00000020
	CM_SERVICE_NETWORK_BOOT_LOAD                                           = 0x00000001
	CM_SERVICE_SD_DISK_BOOT_LOAD                                           = 0x00000008
	CM_SERVICE_USB3_DISK_BOOT_LOAD                                         = 0x00000010
	CM_SERVICE_USB_DISK_BOOT_LOAD                                          = 0x00000004
	CM_SERVICE_VALID_PROMOTION_MASK                                        = 255
	CM_SERVICE_VERIFIER_BOOT_LOAD                                          = 0x00000040
	CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD                                      = 0x00000002
	CM_SERVICE_WINPE_BOOT_LOAD                                             = 0x00000080
	COLORMATCHTOTARGET_EMBEDED                                             = 0x00000001
	COLORMGMTCAPS                                                          = 121
	COLORONCOLOR                                                           = 3
	COLORRES                                                               = 108
	COLOR_3DDKSHADOW                                                       = 21
	COLOR_3DFACE                                                           = 15
	COLOR_3DHIGHLIGHT                                                      = 20
	COLOR_3DHILIGHT                                                        = 20
	COLOR_3DLIGHT                                                          = 22
	COLOR_3DSHADOW                                                         = 16
	COLOR_ACTIVEBORDER                                                     = 10
	COLOR_ACTIVECAPTION                                                    = 2
	COLOR_APPWORKSPACE                                                     = 12
	COLOR_BACKGROUND                                                       = 1
	COLOR_BTNFACE                                                          = 15
	COLOR_BTNHIGHLIGHT                                                     = 20
	COLOR_BTNHILIGHT                                                       = 20
	COLOR_BTNSHADOW                                                        = 16
	COLOR_BTNTEXT                                                          = 18
	COLOR_CAPTIONTEXT                                                      = 9
	COLOR_DESKTOP                                                          = 1
	COLOR_GRADIENTACTIVECAPTION                                            = 27
	COLOR_GRADIENTINACTIVECAPTION                                          = 28
	COLOR_GRAYTEXT                                                         = 17
	COLOR_HIGHLIGHT                                                        = 13
	COLOR_HIGHLIGHTTEXT                                                    = 14
	COLOR_HOTLIGHT                                                         = 26
	COLOR_INACTIVEBORDER                                                   = 11
	COLOR_INACTIVECAPTION                                                  = 3
	COLOR_INACTIVECAPTIONTEXT                                              = 19
	COLOR_INFOBK                                                           = 24
	COLOR_INFOTEXT                                                         = 23
	COLOR_MENU                                                             = 4
	COLOR_MENUBAR                                                          = 30
	COLOR_MENUHILIGHT                                                      = 29
	COLOR_MENUTEXT                                                         = 7
	COLOR_SCROLLBAR                                                        = 0
	COLOR_WINDOW                                                           = 5
	COLOR_WINDOWFRAME                                                      = 6
	COLOR_WINDOWTEXT                                                       = 8
	COMMON_LVB_GRID_HORIZONTAL                                             = 0x400
	COMMON_LVB_GRID_LVERTICAL                                              = 0x800
	COMMON_LVB_GRID_RVERTICAL                                              = 0x1000
	COMMON_LVB_LEADING_BYTE                                                = 0x100
	COMMON_LVB_REVERSE_VIDEO                                               = 0x4000
	COMMON_LVB_SBCSDBCS                                                    = 0x300
	COMMON_LVB_TRAILING_BYTE                                               = 0x200
	COMMON_LVB_UNDERSCORE                                                  = 0x8000
	COMPLEXREGION                                                          = 3
	COMPRESSION_ENGINE_HIBER                                               = 512
	COMPRESSION_ENGINE_MAXIMUM                                             = 256
	COMPRESSION_ENGINE_STANDARD                                            = 0
	COMPRESSION_FORMAT_DEFAULT                                             = 1
	COMPRESSION_FORMAT_LZNT1                                               = 2
	COMPRESSION_FORMAT_NONE                                                = 0
	COMPRESSION_FORMAT_XPRESS                                              = 3
	COMPRESSION_FORMAT_XPRESS_HUFF                                         = 4
	CONCURRENCYSAL_HXX                                                     = 0
	CONDITION_VARIABLE_LOCKMODE_SHARED                                     = 1
	CONNDLG_CONN_POINT                                                     = 0x00000002
	CONNDLG_HIDE_BOX                                                       = 0x00000008
	CONNDLG_NOT_PERSIST                                                    = 0x00000020
	CONNDLG_PERSIST                                                        = 0x00000010
	CONNDLG_RO_PATH                                                        = 0x00000001
	CONNDLG_USE_MRU                                                        = 0x00000004
	CONNECT_CMD_SAVECRED                                                   = 0x00001000
	CONNECT_COMMANDLINE                                                    = 0x00000800
	CONNECT_CURRENT_MEDIA                                                  = 0x00000200
	CONNECT_DEFERRED                                                       = 0x00000400
	CONNECT_INTERACTIVE                                                    = 0x00000008
	CONNECT_LOCALDRIVE                                                     = 0x00000100
	CONNECT_NEED_DRIVE                                                     = 0x00000020
	CONNECT_PROMPT                                                         = 0x00000010
	CONNECT_REDIRECT                                                       = 0x00000080
	CONNECT_REFCOUNT                                                       = 0x00000040
	CONNECT_RESERVED                                                       = 0xFF000000
	CONNECT_TEMPORARY                                                      = 0x00000004
	CONNECT_UPDATE_PROFILE                                                 = 0x00000001
	CONNECT_UPDATE_RECENT                                                  = 0x00000002
	CONSOLE_APPLICATION_16BIT                                              = 0x0000
	CONSOLE_CARET_SELECTION                                                = 0x0001
	CONSOLE_CARET_VISIBLE                                                  = 0x0002
	CONSOLE_FULLSCREEN                                                     = 1
	CONSOLE_FULLSCREEN_HARDWARE                                            = 2
	CONSOLE_FULLSCREEN_MODE                                                = 1
	CONSOLE_MOUSE_DOWN                                                     = 0x8
	CONSOLE_MOUSE_SELECTION                                                = 0x4
	CONSOLE_NO_SELECTION                                                   = 0x0
	CONSOLE_SELECTION_IN_PROGRESS                                          = 0x1
	CONSOLE_SELECTION_NOT_EMPTY                                            = 0x2
	CONSOLE_TEXTMODE_BUFFER                                                = 1
	CONSOLE_WINDOWED_MODE                                                  = 2
	CONTAINER_INHERIT_ACE                                                  = 2
	CONTEXT_ALL                                                            = 1048607
	CONTEXT_AMD64                                                          = 0x100000
	CONTEXT_CONTROL                                                        = 1048577
	CONTEXT_DEBUG_REGISTERS                                                = 1048592
	CONTEXT_EXCEPTION_ACTIVE                                               = 0x8000000
	CONTEXT_EXCEPTION_REPORTING                                            = 0x80000000
	CONTEXT_EXCEPTION_REQUEST                                              = 0x40000000
	CONTEXT_E_FIRST                                                        = 2147803136
	CONTEXT_E_LAST                                                         = 2147803183
	CONTEXT_FLOATING_POINT                                                 = 1048584
	CONTEXT_FULL                                                           = 1048587
	CONTEXT_INTEGER                                                        = 1048578
	CONTEXT_SEGMENTS                                                       = 1048580
	CONTEXT_SERVICE_ACTIVE                                                 = 0x10000000
	CONTEXT_S_FIRST                                                        = 319488
	CONTEXT_S_LAST                                                         = 319535
	CONVERT10_E_FIRST                                                      = 2147746240
	CONVERT10_E_LAST                                                       = 2147746255
	CONVERT10_S_FIRST                                                      = 262592
	CONVERT10_S_LAST                                                       = 262607
	COPY_FILE_ALLOW_DECRYPTED_DESTINATION                                  = 0x8
	COPY_FILE_FAIL_IF_EXISTS                                               = 0x1
	COPY_FILE_OPEN_SOURCE_FOR_WRITE                                        = 0x4
	COPY_FILE_RESTARTABLE                                                  = 0x2
	CORE_PARKING_POLICY_CHANGE_IDEAL                                       = 0
	CORE_PARKING_POLICY_CHANGE_MAX                                         = 3
	CORE_PARKING_POLICY_CHANGE_MULTISTEP                                   = 3
	CORE_PARKING_POLICY_CHANGE_ROCKET                                      = 2
	CORE_PARKING_POLICY_CHANGE_SINGLE                                      = 1
	CO_E_FIRST                                                             = 2147746288
	CO_E_LAST                                                              = 2147746303
	CO_S_FIRST                                                             = 262640
	CO_S_LAST                                                              = 262655
	CPS_CANCEL                                                             = 0x0004
	CPS_COMPLETE                                                           = 0x0001
	CPS_CONVERT                                                            = 0x0002
	CPS_REVERT                                                             = 0x0003
	CP_ACP                                                                 = 0
	CP_INSTALLED                                                           = 0x00000001
	CP_MACCP                                                               = 2
	CP_NONE                                                                = 0
	CP_OEMCP                                                               = 1
	CP_RECTANGLE                                                           = 1
	CP_REGION                                                              = 2
	CP_SUPPORTED                                                           = 0x00000002
	CP_SYMBOL                                                              = 42
	CP_THREAD_ACP                                                          = 3
	CP_UTF7                                                                = 65000
	CP_UTF8                                                                = 65001
	CREATECOLORSPACE_EMBEDED                                               = 0x00000001
	CREATE_ALWAYS                                                          = 2
	CREATE_BOUNDARY_DESCRIPTOR_ADD_APPCONTAINER_SID                        = 0x1
	CREATE_BREAKAWAY_FROM_JOB                                              = 0x1000000
	CREATE_DEFAULT_ERROR_MODE                                              = 0x4000000
	CREATE_FORCEDOS                                                        = 0x2000
	CREATE_FOR_DIR                                                         = 2
	CREATE_FOR_IMPORT                                                      = 1
	CREATE_IGNORE_SYSTEM_DEFAULT                                           = 0x80000000
	CREATE_NEW                                                             = 1
	CREATE_NEW_CONSOLE                                                     = 0x10
	CREATE_NEW_PROCESS_GROUP                                               = 0x200
	CREATE_NO_WINDOW                                                       = 0x8000000
	CREATE_PRESERVE_CODE_AUTHZ_LEVEL                                       = 0x2000000
	CREATE_PROCESS_DEBUG_EVENT                                             = 3
	CREATE_PROTECTED_PROCESS                                               = 0x40000
	CREATE_SEPARATE_WOW_VDM                                                = 0x800
	CREATE_SHARED_WOW_VDM                                                  = 0x1000
	CREATE_SUSPENDED                                                       = 0x4
	CREATE_THREAD_DEBUG_EVENT                                              = 2
	CREATE_UNICODE_ENVIRONMENT                                             = 0x400
	CRITICAL_SECTION_NO_DEBUG_INFO                                         = 16777216
	CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO                                      = 0x00000002
	CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY                                     = 0x00000001
	CRM_PROTOCOL_MAXIMUM_OPTION                                            = 0x00000003
	CSOUND_SYSTEM                                                          = 16
	CSTR_EQUAL                                                             = 2
	CSTR_GREATER_THAN                                                      = 3
	CSTR_LESS_THAN                                                         = 1
	CS_BYTEALIGNCLIENT                                                     = 0x1000
	CS_BYTEALIGNWINDOW                                                     = 0x2000
	CS_CLASSDC                                                             = 0x0040
	CS_DBLCLKS                                                             = 0x0008
	CS_DELETE_TRANSFORM                                                    = 3
	CS_DISABLE                                                             = 2
	CS_DROPSHADOW                                                          = 0x00020000
	CS_ENABLE                                                              = 1
	CS_E_FIRST                                                             = 2147746148
	CS_E_LAST                                                              = 2147746159
	CS_GLOBALCLASS                                                         = 0x4000
	CS_HREDRAW                                                             = 0x0002
	CS_IME                                                                 = 0x00010000
	CS_INSERTCHAR                                                          = 0x2000
	CS_NOCLOSE                                                             = 0x0200
	CS_NOMOVECARET                                                         = 0x4000
	CS_OWNDC                                                               = 0x0020
	CS_PARENTDC                                                            = 0x0080
	CS_SAVEBITS                                                            = 0x0800
	CS_VREDRAW                                                             = 0x0001
	CTLCOLOR_BTN                                                           = 3
	CTLCOLOR_DLG                                                           = 4
	CTLCOLOR_EDIT                                                          = 1
	CTLCOLOR_LISTBOX                                                       = 2
	CTLCOLOR_MAX                                                           = 7
	CTLCOLOR_MSGBOX                                                        = 0
	CTLCOLOR_SCROLLBAR                                                     = 5
	CTLCOLOR_STATIC                                                        = 6
	CTRL_BREAK_EVENT                                                       = 1
	CTRL_CLOSE_EVENT                                                       = 2
	CTRL_C_EVENT                                                           = 0
	CTRL_LOGOFF_EVENT                                                      = 5
	CTRL_SHUTDOWN_EVENT                                                    = 6
	CTRY_ALBANIA                                                           = 355
	CTRY_ALGERIA                                                           = 213
	CTRY_ARGENTINA                                                         = 54
	CTRY_ARMENIA                                                           = 374
	CTRY_AUSTRALIA                                                         = 61
	CTRY_AUSTRIA                                                           = 43
	CTRY_AZERBAIJAN                                                        = 994
	CTRY_BAHRAIN                                                           = 973
	CTRY_BELARUS                                                           = 375
	CTRY_BELGIUM                                                           = 32
	CTRY_BELIZE                                                            = 501
	CTRY_BOLIVIA                                                           = 591
	CTRY_BRAZIL                                                            = 55
	CTRY_BRUNEI_DARUSSALAM                                                 = 673
	CTRY_BULGARIA                                                          = 359
	CTRY_CANADA                                                            = 2
	CTRY_CARIBBEAN                                                         = 1
	CTRY_CHILE                                                             = 56
	CTRY_COLOMBIA                                                          = 57
	CTRY_COSTA_RICA                                                        = 506
	CTRY_CROATIA                                                           = 385
	CTRY_CZECH                                                             = 420
	CTRY_DEFAULT                                                           = 0
	CTRY_DENMARK                                                           = 45
	CTRY_DOMINICAN_REPUBLIC                                                = 1
	CTRY_ECUADOR                                                           = 593
	CTRY_EGYPT                                                             = 20
	CTRY_EL_SALVADOR                                                       = 503
	CTRY_ESTONIA                                                           = 372
	CTRY_FAEROE_ISLANDS                                                    = 298
	CTRY_FINLAND                                                           = 358
	CTRY_FRANCE                                                            = 33
	CTRY_GEORGIA                                                           = 995
	CTRY_GERMANY                                                           = 49
	CTRY_GREECE                                                            = 30
	CTRY_GUATEMALA                                                         = 502
	CTRY_HONDURAS                                                          = 504
	CTRY_HONG_KONG                                                         = 852
	CTRY_HUNGARY                                                           = 36
	CTRY_ICELAND                                                           = 354
	CTRY_INDIA                                                             = 91
	CTRY_INDONESIA                                                         = 62
	CTRY_IRAN                                                              = 981
	CTRY_IRAQ                                                              = 964
	CTRY_IRELAND                                                           = 353
	CTRY_ISRAEL                                                            = 972
	CTRY_ITALY                                                             = 39
	CTRY_JAMAICA                                                           = 1
	CTRY_JAPAN                                                             = 81
	CTRY_JORDAN                                                            = 962
	CTRY_KAZAKSTAN                                                         = 7
	CTRY_KENYA                                                             = 254
	CTRY_KUWAIT                                                            = 965
	CTRY_KYRGYZSTAN                                                        = 996
	CTRY_LATVIA                                                            = 371
	CTRY_LEBANON                                                           = 961
	CTRY_LIBYA                                                             = 218
	CTRY_LIECHTENSTEIN                                                     = 41
	CTRY_LITHUANIA                                                         = 370
	CTRY_LUXEMBOURG                                                        = 352
	CTRY_MACAU                                                             = 853
	CTRY_MACEDONIA                                                         = 389
	CTRY_MALAYSIA                                                          = 60
	CTRY_MALDIVES                                                          = 960
	CTRY_MEXICO                                                            = 52
	CTRY_MONACO                                                            = 33
	CTRY_MONGOLIA                                                          = 976
	CTRY_MOROCCO                                                           = 212
	CTRY_NETHERLANDS                                                       = 31
	CTRY_NEW_ZEALAND                                                       = 64
	CTRY_NICARAGUA                                                         = 505
	CTRY_NORWAY                                                            = 47
	CTRY_OMAN                                                              = 968
	CTRY_PAKISTAN                                                          = 92
	CTRY_PANAMA                                                            = 507
	CTRY_PARAGUAY                                                          = 595
	CTRY_PERU                                                              = 51
	CTRY_PHILIPPINES                                                       = 63
	CTRY_POLAND                                                            = 48
	CTRY_PORTUGAL                                                          = 351
	CTRY_PRCHINA                                                           = 86
	CTRY_PUERTO_RICO                                                       = 1
	CTRY_QATAR                                                             = 974
	CTRY_ROMANIA                                                           = 40
	CTRY_RUSSIA                                                            = 7
	CTRY_SAUDI_ARABIA                                                      = 966
	CTRY_SERBIA                                                            = 381
	CTRY_SINGAPORE                                                         = 65
	CTRY_SLOVAK                                                            = 421
	CTRY_SLOVENIA                                                          = 386
	CTRY_SOUTH_AFRICA                                                      = 27
	CTRY_SOUTH_KOREA                                                       = 82
	CTRY_SPAIN                                                             = 34
	CTRY_SWEDEN                                                            = 46
	CTRY_SWITZERLAND                                                       = 41
	CTRY_SYRIA                                                             = 963
	CTRY_TAIWAN                                                            = 886
	CTRY_TATARSTAN                                                         = 7
	CTRY_THAILAND                                                          = 66
	CTRY_TRINIDAD_Y_TOBAGO                                                 = 1
	CTRY_TUNISIA                                                           = 216
	CTRY_TURKEY                                                            = 90
	CTRY_UAE                                                               = 971
	CTRY_UKRAINE                                                           = 380
	CTRY_UNITED_KINGDOM                                                    = 44
	CTRY_UNITED_STATES                                                     = 1
	CTRY_URUGUAY                                                           = 598
	CTRY_UZBEKISTAN                                                        = 7
	CTRY_VENEZUELA                                                         = 58
	CTRY_VIET_NAM                                                          = 84
	CTRY_YEMEN                                                             = 967
	CTRY_ZIMBABWE                                                          = 263
	CT_CTYPE1                                                              = 0x00000001
	CT_CTYPE2                                                              = 0x00000002
	CT_CTYPE3                                                              = 0x00000004
	CURRENT_IMPORT_REDIRECTION_VERSION                                     = 1
	CURSOR_SHOWING                                                         = 0x00000001
	CURVECAPS                                                              = 28
	CWF_CREATE_ONLY                                                        = 0x00000001
	CWP_ALL                                                                = 0x0000
	CWP_SKIPDISABLED                                                       = 0x0002
	CWP_SKIPINVISIBLE                                                      = 0x0001
	CWP_SKIPTRANSPARENT                                                    = 0x0004
	CW_DEFAULT                                                             = 524319
	DACL_SECURITY_INFORMATION                                              = 4
	DATA_E_FIRST                                                           = 2147746096
	DATA_E_LAST                                                            = 2147746111
	DATA_S_FIRST                                                           = 262448
	DATA_S_LAST                                                            = 262463
	DATE_LONGDATE                                                          = 0x00000002
	DATE_LTRREADING                                                        = 0x00000010
	DATE_RTLREADING                                                        = 0x00000020
	DATE_SHORTDATE                                                         = 0x00000001
	DATE_USE_ALT_CALENDAR                                                  = 0x00000004
	DATE_YEARMONTH                                                         = 0x00000008
	DBL_DECIMAL_DIG                                                        = 17
	DBL_DIG                                                                = 15
	DBL_HAS_SUBNORM                                                        = 1
	DBL_MANT_DIG                                                           = 53
	DBL_MAX_10_EXP                                                         = 308
	DBL_MAX_EXP                                                            = 1024
	DBL_MIN_10_EXP                                                         = -307
	DBL_MIN_EXP                                                            = -1021
	DCBA_FACEDOWNCENTER                                                    = 0x0101
	DCBA_FACEDOWNLEFT                                                      = 0x0102
	DCBA_FACEDOWNNONE                                                      = 0x0100
	DCBA_FACEDOWNRIGHT                                                     = 0x0103
	DCBA_FACEUPCENTER                                                      = 0x0001
	DCBA_FACEUPLEFT                                                        = 0x0002
	DCBA_FACEUPNONE                                                        = 0x0000
	DCBA_FACEUPRIGHT                                                       = 0x0003
	DCB_ACCUMULATE                                                         = 0x0002
	DCB_DIRTY                                                              = 2
	DCB_DISABLE                                                            = 0x0008
	DCB_ENABLE                                                             = 0x0004
	DCB_RESET                                                              = 0x0001
	DCB_SET                                                                = 3
	DCTT_BITMAP                                                            = 1
	DCTT_DOWNLOAD                                                          = 2
	DCTT_DOWNLOAD_OUTLINE                                                  = 8
	DCTT_SUBDEV                                                            = 4
	DCX_CACHE                                                              = 2
	DCX_CLIPCHILDREN                                                       = 8
	DCX_CLIPSIBLINGS                                                       = 16
	DCX_EXCLUDERGN                                                         = 64
	DCX_EXCLUDEUPDATE                                                      = 256
	DCX_INTERSECTRGN                                                       = 128
	DCX_INTERSECTUPDATE                                                    = 512
	DCX_LOCKWINDOWUPDATE                                                   = 1024
	DCX_NORESETATTRS                                                       = 4
	DCX_PARENTCLIP                                                         = 32
	DCX_VALIDATE                                                           = 2097152
	DCX_WINDOW                                                             = 1
	DC_ACTIVE                                                              = 0x0001
	DC_BINADJUST                                                           = 19
	DC_BINNAMES                                                            = 12
	DC_BINS                                                                = 6
	DC_BRUSH                                                               = 18
	DC_BUTTONS                                                             = 0x1000
	DC_COLLATE                                                             = 22
	DC_COLORDEVICE                                                         = 32
	DC_COPIES                                                              = 18
	DC_DATATYPE_PRODUCED                                                   = 21
	DC_DRIVER                                                              = 11
	DC_DUPLEX                                                              = 7
	DC_EMF_COMPLIANT                                                       = 20
	DC_ENUMRESOLUTIONS                                                     = 13
	DC_EXTRA                                                               = 9
	DC_FIELDS                                                              = 1
	DC_FILEDEPENDENCIES                                                    = 14
	DC_GRADIENT                                                            = 0x0020
	DC_HASDEFID                                                            = 0x534B
	DC_ICON                                                                = 0x0004
	DC_INBUTTON                                                            = 0x0010
	DC_MANUFACTURER                                                        = 23
	DC_MAXEXTENT                                                           = 5
	DC_MEDIAREADY                                                          = 29
	DC_MEDIATYPENAMES                                                      = 34
	DC_MEDIATYPES                                                          = 35
	DC_MINEXTENT                                                           = 4
	DC_MODEL                                                               = 24
	DC_NUP                                                                 = 33
	DC_ORIENTATION                                                         = 17
	DC_PAPERNAMES                                                          = 16
	DC_PAPERS                                                              = 2
	DC_PAPERSIZE                                                           = 3
	DC_PEN                                                                 = 19
	DC_PERSONALITY                                                         = 25
	DC_PRINTERMEM                                                          = 28
	DC_PRINTRATE                                                           = 26
	DC_PRINTRATEPPM                                                        = 31
	DC_PRINTRATEUNIT                                                       = 27
	DC_SIZE                                                                = 8
	DC_SMALLCAP                                                            = 0x0002
	DC_STAPLE                                                              = 30
	DC_TEXT                                                                = 0x0008
	DC_TRUETYPE                                                            = 15
	DC_VERSION                                                             = 10
	DDD_EXACT_MATCH_ON_REMOVE                                              = 0x00000004
	DDD_LUID_BROADCAST_DRIVE                                               = 0x00000010
	DDD_NO_BROADCAST_SYSTEM                                                = 0x00000008
	DDD_RAW_TARGET_PATH                                                    = 0x00000001
	DDD_REMOVE_DEFINITION                                                  = 0x00000002
	DDL_ARCHIVE                                                            = 0x0020
	DDL_DIRECTORY                                                          = 0x0010
	DDL_DRIVES                                                             = 0x4000
	DDL_EXCLUSIVE                                                          = 0x8000
	DDL_HIDDEN                                                             = 0x0002
	DDL_POSTMSGS                                                           = 0x2000
	DDL_READONLY                                                           = 0x0001
	DDL_READWRITE                                                          = 0x0000
	DDL_SYSTEM                                                             = 0x0004
	DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION                        = 1
	DEBUG_ONLY_THIS_PROCESS                                                = 0x2
	DEBUG_PROCESS                                                          = 0x1
	DECIMAL_DIG                                                            = 21
	DECLSPEC_ADDRSAFE                                                      = 0
	DECLSPEC_DEPRECATED_DDK                                                = 0
	DECLSPEC_NOVTABLE                                                      = 0
	DEFAULT_CHARSET                                                        = 1
	DEFAULT_GUI_FONT                                                       = 17
	DEFAULT_PALETTE                                                        = 15
	DEFAULT_PITCH                                                          = 0
	DEFAULT_QUALITY                                                        = 0
	DEFAULT_UNREACHABLE                                                    = 0
	DEFINED_LPUINT                                                         = 0
	DELETE                                                                 = 65536
	DELETED                                                                = 1
	DEPRECATE_SUPPORTED                                                    = 0
	DESKTOPHORZRES                                                         = 118
	DESKTOPVERTRES                                                         = 117
	DESKTOP_CREATEMENU                                                     = 4
	DESKTOP_CREATEWINDOW                                                   = 2
	DESKTOP_ENUMERATE                                                      = 64
	DESKTOP_HOOKCONTROL                                                    = 8
	DESKTOP_JOURNALPLAYBACK                                                = 32
	DESKTOP_JOURNALRECORD                                                  = 16
	DESKTOP_READOBJECTS                                                    = 1
	DESKTOP_SWITCHDESKTOP                                                  = 256
	DESKTOP_WRITEOBJECTS                                                   = 128
	DETACHED_PROCESS                                                       = 0x8
	DEVICEDATA                                                             = 19
	DEVICE_DEFAULT_FONT                                                    = 14
	DEVICE_FONTTYPE                                                        = 0x002
	DEVICE_NOTIFY_ALL_INTERFACE_CLASSES                                    = 0x00000004
	DEVICE_NOTIFY_SERVICE_HANDLE                                           = 0x00000001
	DEVICE_NOTIFY_WINDOW_HANDLE                                            = 0x00000000
	DFCS_ADJUSTRECT                                                        = 0x2000
	DFCS_BUTTON3STATE                                                      = 0x0008
	DFCS_BUTTONCHECK                                                       = 0x0000
	DFCS_BUTTONPUSH                                                        = 0x0010
	DFCS_BUTTONRADIO                                                       = 0x0004
	DFCS_BUTTONRADIOIMAGE                                                  = 0x0001
	DFCS_BUTTONRADIOMASK                                                   = 0x0002
	DFCS_CAPTIONCLOSE                                                      = 0x0000
	DFCS_CAPTIONHELP                                                       = 0x0004
	DFCS_CAPTIONMAX                                                        = 0x0002
	DFCS_CAPTIONMIN                                                        = 0x0001
	DFCS_CAPTIONRESTORE                                                    = 0x0003
	DFCS_CHECKED                                                           = 0x0400
	DFCS_FLAT                                                              = 0x4000
	DFCS_HOT                                                               = 0x1000
	DFCS_INACTIVE                                                          = 0x0100
	DFCS_MENUARROW                                                         = 0x0000
	DFCS_MENUARROWRIGHT                                                    = 0x0004
	DFCS_MENUBULLET                                                        = 0x0002
	DFCS_MENUCHECK                                                         = 0x0001
	DFCS_MONO                                                              = 0x8000
	DFCS_PUSHED                                                            = 0x0200
	DFCS_SCROLLCOMBOBOX                                                    = 0x0005
	DFCS_SCROLLDOWN                                                        = 0x0001
	DFCS_SCROLLLEFT                                                        = 0x0002
	DFCS_SCROLLRIGHT                                                       = 0x0003
	DFCS_SCROLLSIZEGRIP                                                    = 0x0008
	DFCS_SCROLLSIZEGRIPRIGHT                                               = 0x0010
	DFCS_SCROLLUP                                                          = 0x0000
	DFCS_TRANSPARENT                                                       = 0x0800
	DFC_BUTTON                                                             = 4
	DFC_CAPTION                                                            = 1
	DFC_MENU                                                               = 2
	DFC_POPUPMENU                                                          = 5
	DFC_SCROLL                                                             = 3
	DF_ALLOWOTHERACCOUNTHOOK                                               = 1
	DIAGNOSTIC_REASON_DETAILED_STRING                                      = 0x00000002
	DIAGNOSTIC_REASON_INVALID_FLAGS                                        = -2147483652
	DIAGNOSTIC_REASON_NOT_SPECIFIED                                        = 0x80000000
	DIAGNOSTIC_REASON_SIMPLE_STRING                                        = 0x00000001
	DIAGNOSTIC_REASON_VERSION                                              = 0
	DIALOPTION_BILLING                                                     = 0x00000040
	DIALOPTION_DIALTONE                                                    = 0x00000100
	DIALOPTION_QUIET                                                       = 0x00000080
	DIB_PAL_COLORS                                                         = 1
	DIB_RGB_COLORS                                                         = 0
	DICT_PATH_CREATE                                                       = 5
	DICT_PATH_EXISTS                                                       = 2
	DICT_PATH_READ                                                         = 0
	DICT_PATH_UPDATE                                                       = 1
	DIFFERENCE                                                             = 11
	DIGIT_BIT                                                              = 28
	DISABLE_MAX_PRIVILEGE                                                  = 0x1
	DISABLE_NEWLINE_AUTO_RETURN                                            = 0x8
	DISCHARGE_POLICY_CRITICAL                                              = 0
	DISCHARGE_POLICY_LOW                                                   = 1
	DISC_NO_FORCE                                                          = 0x00000040
	DISC_UPDATE_PROFILE                                                    = 0x00000001
	DISPLAY_DEVICE_ACTIVE                                                  = 0x00000001
	DISPLAY_DEVICE_ATTACHED                                                = 0x00000002
	DISPLAY_DEVICE_ATTACHED_TO_DESKTOP                                     = 0x00000001
	DISPLAY_DEVICE_DISCONNECT                                              = 0x02000000
	DISPLAY_DEVICE_MIRRORING_DRIVER                                        = 0x00000008
	DISPLAY_DEVICE_MODESPRUNED                                             = 0x08000000
	DISPLAY_DEVICE_MULTI_DRIVER                                            = 0x00000002
	DISPLAY_DEVICE_PRIMARY_DEVICE                                          = 0x00000004
	DISPLAY_DEVICE_RDPUDD                                                  = 0x01000000
	DISPLAY_DEVICE_REMOTE                                                  = 0x04000000
	DISPLAY_DEVICE_REMOVABLE                                               = 0x00000020
	DISPLAY_DEVICE_TS_COMPATIBLE                                           = 0x00200000
	DISPLAY_DEVICE_VGA_COMPATIBLE                                          = 0x00000010
	DISP_CHANGE_BADDUALVIEW                                                = -6
	DISP_CHANGE_BADFLAGS                                                   = -4
	DISP_CHANGE_BADMODE                                                    = -2
	DISP_CHANGE_BADPARAM                                                   = -5
	DISP_CHANGE_FAILED                                                     = -1
	DISP_CHANGE_NOTUPDATED                                                 = -3
	DISP_CHANGE_RESTART                                                    = 1
	DISP_CHANGE_SUCCESSFUL                                                 = 0
	DI_APPBANDING                                                          = 0x00000001
	DI_COMPAT                                                              = 0x0004
	DI_DEFAULTSIZE                                                         = 0x0008
	DI_IMAGE                                                               = 0x0002
	DI_MASK                                                                = 0x0001
	DI_NOMIRROR                                                            = 0x0010
	DI_NORMAL                                                              = 0x0003
	DI_ROPS_READ_DESTINATION                                               = 0x00000002
	DKGRAY_BRUSH                                                           = 3
	DLGC_BUTTON                                                            = 0x2000
	DLGC_DEFPUSHBUTTON                                                     = 0x0010
	DLGC_HASSETSEL                                                         = 0x0008
	DLGC_RADIOBUTTON                                                       = 0x0040
	DLGC_STATIC                                                            = 0x0100
	DLGC_UNDEFPUSHBUTTON                                                   = 0x0020
	DLGC_WANTALLKEYS                                                       = 0x0004
	DLGC_WANTARROWS                                                        = 0x0001
	DLGC_WANTCHARS                                                         = 0x0080
	DLGC_WANTMESSAGE                                                       = 0x0004
	DLGC_WANTTAB                                                           = 0x0002
	DLGWINDOWEXTRA                                                         = 30
	DLL_PROCESS_ATTACH                                                     = 1
	DLL_PROCESS_DETACH                                                     = 0
	DLL_PROCESS_VERIFIER                                                   = 4
	DLL_THREAD_ATTACH                                                      = 2
	DLL_THREAD_DETACH                                                      = 3
	DMBIN_AUTO                                                             = 7
	DMBIN_CASSETTE                                                         = 14
	DMBIN_ENVELOPE                                                         = 5
	DMBIN_ENVMANUAL                                                        = 6
	DMBIN_FIRST                                                            = 1
	DMBIN_FORMSOURCE                                                       = 15
	DMBIN_LARGECAPACITY                                                    = 11
	DMBIN_LARGEFMT                                                         = 10
	DMBIN_LAST                                                             = 15
	DMBIN_LOWER                                                            = 2
	DMBIN_MANUAL                                                           = 4
	DMBIN_MIDDLE                                                           = 3
	DMBIN_ONLYONE                                                          = 1
	DMBIN_SMALLFMT                                                         = 9
	DMBIN_TRACTOR                                                          = 8
	DMBIN_UPPER                                                            = 1
	DMBIN_USER                                                             = 256
	DMCOLLATE_FALSE                                                        = 0
	DMCOLLATE_TRUE                                                         = 1
	DMCOLOR_COLOR                                                          = 2
	DMCOLOR_MONOCHROME                                                     = 1
	DMDFO_CENTER                                                           = 2
	DMDFO_DEFAULT                                                          = 0
	DMDFO_STRETCH                                                          = 1
	DMDISPLAYFLAGS_TEXTMODE                                                = 0x00000004
	DMDITHER_COARSE                                                        = 2
	DMDITHER_ERRORDIFFUSION                                                = 5
	DMDITHER_FINE                                                          = 3
	DMDITHER_GRAYSCALE                                                     = 10
	DMDITHER_LINEART                                                       = 4
	DMDITHER_NONE                                                          = 1
	DMDITHER_RESERVED6                                                     = 6
	DMDITHER_RESERVED7                                                     = 7
	DMDITHER_RESERVED8                                                     = 8
	DMDITHER_RESERVED9                                                     = 9
	DMDITHER_USER                                                          = 256
	DMDO_180                                                               = 2
	DMDO_270                                                               = 3
	DMDO_90                                                                = 1
	DMDO_DEFAULT                                                           = 0
	DMDUP_HORIZONTAL                                                       = 3
	DMDUP_SIMPLEX                                                          = 1
	DMDUP_VERTICAL                                                         = 2
	DMICMMETHOD_DEVICE                                                     = 4
	DMICMMETHOD_DRIVER                                                     = 3
	DMICMMETHOD_NONE                                                       = 1
	DMICMMETHOD_SYSTEM                                                     = 2
	DMICMMETHOD_USER                                                       = 256
	DMICM_ABS_COLORIMETRIC                                                 = 4
	DMICM_COLORIMETRIC                                                     = 3
	DMICM_CONTRAST                                                         = 2
	DMICM_SATURATE                                                         = 1
	DMICM_USER                                                             = 256
	DMMEDIA_GLOSSY                                                         = 3
	DMMEDIA_STANDARD                                                       = 1
	DMMEDIA_TRANSPARENCY                                                   = 2
	DMMEDIA_USER                                                           = 256
	DMNUP_ONEUP                                                            = 2
	DMNUP_SYSTEM                                                           = 1
	DMORIENT_LANDSCAPE                                                     = 2
	DMORIENT_PORTRAIT                                                      = 1
	DMPAPER_10X11                                                          = 45
	DMPAPER_10X14                                                          = 16
	DMPAPER_11X17                                                          = 17
	DMPAPER_12X11                                                          = 90
	DMPAPER_15X11                                                          = 46
	DMPAPER_9X11                                                           = 44
	DMPAPER_A2                                                             = 66
	DMPAPER_A3                                                             = 8
	DMPAPER_A3_EXTRA                                                       = 63
	DMPAPER_A3_EXTRA_TRANSVERSE                                            = 68
	DMPAPER_A3_ROTATED                                                     = 76
	DMPAPER_A3_TRANSVERSE                                                  = 67
	DMPAPER_A4                                                             = 9
	DMPAPER_A4SMALL                                                        = 10
	DMPAPER_A4_EXTRA                                                       = 53
	DMPAPER_A4_PLUS                                                        = 60
	DMPAPER_A4_ROTATED                                                     = 77
	DMPAPER_A4_TRANSVERSE                                                  = 55
	DMPAPER_A5                                                             = 11
	DMPAPER_A5_EXTRA                                                       = 64
	DMPAPER_A5_ROTATED                                                     = 78
	DMPAPER_A5_TRANSVERSE                                                  = 61
	DMPAPER_A6                                                             = 70
	DMPAPER_A6_ROTATED                                                     = 83
	DMPAPER_A_PLUS                                                         = 57
	DMPAPER_B4                                                             = 12
	DMPAPER_B4_JIS_ROTATED                                                 = 79
	DMPAPER_B5                                                             = 13
	DMPAPER_B5_EXTRA                                                       = 65
	DMPAPER_B5_JIS_ROTATED                                                 = 80
	DMPAPER_B5_TRANSVERSE                                                  = 62
	DMPAPER_B6_JIS                                                         = 88
	DMPAPER_B6_JIS_ROTATED                                                 = 89
	DMPAPER_B_PLUS                                                         = 58
	DMPAPER_CSHEET                                                         = 24
	DMPAPER_DBL_JAPANESE_POSTCARD                                          = 69
	DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED                                  = 82
	DMPAPER_DSHEET                                                         = 25
	DMPAPER_ENV_10                                                         = 20
	DMPAPER_ENV_11                                                         = 21
	DMPAPER_ENV_12                                                         = 22
	DMPAPER_ENV_14                                                         = 23
	DMPAPER_ENV_9                                                          = 19
	DMPAPER_ENV_B4                                                         = 33
	DMPAPER_ENV_B5                                                         = 34
	DMPAPER_ENV_B6                                                         = 35
	DMPAPER_ENV_C3                                                         = 29
	DMPAPER_ENV_C4                                                         = 30
	DMPAPER_ENV_C5                                                         = 28
	DMPAPER_ENV_C6                                                         = 31
	DMPAPER_ENV_C65                                                        = 32
	DMPAPER_ENV_DL                                                         = 27
	DMPAPER_ENV_INVITE                                                     = 47
	DMPAPER_ENV_ITALY                                                      = 36
	DMPAPER_ENV_MONARCH                                                    = 37
	DMPAPER_ENV_PERSONAL                                                   = 38
	DMPAPER_ESHEET                                                         = 26
	DMPAPER_EXECUTIVE                                                      = 7
	DMPAPER_FANFOLD_LGL_GERMAN                                             = 41
	DMPAPER_FANFOLD_STD_GERMAN                                             = 40
	DMPAPER_FANFOLD_US                                                     = 39
	DMPAPER_FIRST                                                          = 1
	DMPAPER_FOLIO                                                          = 14
	DMPAPER_ISO_B4                                                         = 42
	DMPAPER_JAPANESE_POSTCARD                                              = 43
	DMPAPER_JAPANESE_POSTCARD_ROTATED                                      = 81
	DMPAPER_JENV_CHOU3                                                     = 73
	DMPAPER_JENV_CHOU3_ROTATED                                             = 86
	DMPAPER_JENV_CHOU4                                                     = 74
	DMPAPER_JENV_CHOU4_ROTATED                                             = 87
	DMPAPER_JENV_KAKU2                                                     = 71
	DMPAPER_JENV_KAKU2_ROTATED                                             = 84
	DMPAPER_JENV_KAKU3                                                     = 72
	DMPAPER_JENV_KAKU3_ROTATED                                             = 85
	DMPAPER_JENV_YOU4                                                      = 91
	DMPAPER_JENV_YOU4_ROTATED                                              = 92
	DMPAPER_LAST                                                           = 118
	DMPAPER_LEDGER                                                         = 4
	DMPAPER_LEGAL                                                          = 5
	DMPAPER_LEGAL_EXTRA                                                    = 51
	DMPAPER_LETTER                                                         = 1
	DMPAPER_LETTERSMALL                                                    = 2
	DMPAPER_LETTER_EXTRA                                                   = 50
	DMPAPER_LETTER_EXTRA_TRANSVERSE                                        = 56
	DMPAPER_LETTER_PLUS                                                    = 59
	DMPAPER_LETTER_ROTATED                                                 = 75
	DMPAPER_LETTER_TRANSVERSE                                              = 54
	DMPAPER_NOTE                                                           = 18
	DMPAPER_P16K                                                           = 93
	DMPAPER_P16K_ROTATED                                                   = 106
	DMPAPER_P32K                                                           = 94
	DMPAPER_P32KBIG                                                        = 95
	DMPAPER_P32KBIG_ROTATED                                                = 108
	DMPAPER_P32K_ROTATED                                                   = 107
	DMPAPER_PENV_1                                                         = 96
	DMPAPER_PENV_10                                                        = 105
	DMPAPER_PENV_10_ROTATED                                                = 118
	DMPAPER_PENV_1_ROTATED                                                 = 109
	DMPAPER_PENV_2                                                         = 97
	DMPAPER_PENV_2_ROTATED                                                 = 110
	DMPAPER_PENV_3                                                         = 98
	DMPAPER_PENV_3_ROTATED                                                 = 111
	DMPAPER_PENV_4                                                         = 99
	DMPAPER_PENV_4_ROTATED                                                 = 112
	DMPAPER_PENV_5                                                         = 100
	DMPAPER_PENV_5_ROTATED                                                 = 113
	DMPAPER_PENV_6                                                         = 101
	DMPAPER_PENV_6_ROTATED                                                 = 114
	DMPAPER_PENV_7                                                         = 102
	DMPAPER_PENV_7_ROTATED                                                 = 115
	DMPAPER_PENV_8                                                         = 103
	DMPAPER_PENV_8_ROTATED                                                 = 116
	DMPAPER_PENV_9                                                         = 104
	DMPAPER_PENV_9_ROTATED                                                 = 117
	DMPAPER_QUARTO                                                         = 15
	DMPAPER_RESERVED_48                                                    = 48
	DMPAPER_RESERVED_49                                                    = 49
	DMPAPER_STATEMENT                                                      = 6
	DMPAPER_TABLOID                                                        = 3
	DMPAPER_TABLOID_EXTRA                                                  = 52
	DMPAPER_USER                                                           = 256
	DMRES_DRAFT                                                            = -1
	DMRES_HIGH                                                             = -4
	DMRES_LOW                                                              = -2
	DMRES_MEDIUM                                                           = -3
	DMTT_BITMAP                                                            = 1
	DMTT_DOWNLOAD                                                          = 2
	DMTT_DOWNLOAD_OUTLINE                                                  = 4
	DMTT_SUBDEV                                                            = 3
	DM_BITSPERPEL                                                          = 262144
	DM_COLLATE                                                             = 32768
	DM_COLOR                                                               = 2048
	DM_COPIES                                                              = 256
	DM_COPY                                                                = 2
	DM_DEFAULTSOURCE                                                       = 512
	DM_DISPLAYFIXEDOUTPUT                                                  = 536870912
	DM_DISPLAYFLAGS                                                        = 2097152
	DM_DISPLAYFREQUENCY                                                    = 4194304
	DM_DISPLAYORIENTATION                                                  = 128
	DM_DITHERTYPE                                                          = 67108864
	DM_DUPLEX                                                              = 4096
	DM_FORMNAME                                                            = 65536
	DM_GETDEFID                                                            = 1024
	DM_ICMINTENT                                                           = 16777216
	DM_ICMMETHOD                                                           = 8388608
	DM_INTERLACED                                                          = 0x00000002
	DM_IN_BUFFER                                                           = 8
	DM_IN_PROMPT                                                           = 4
	DM_LOGPIXELS                                                           = 131072
	DM_MEDIATYPE                                                           = 33554432
	DM_MODIFY                                                              = 8
	DM_NUP                                                                 = 64
	DM_ORIENTATION                                                         = 1
	DM_OUT_BUFFER                                                          = 2
	DM_OUT_DEFAULT                                                         = 1
	DM_PANNINGHEIGHT                                                       = 268435456
	DM_PANNINGWIDTH                                                        = 134217728
	DM_PAPERLENGTH                                                         = 4
	DM_PAPERSIZE                                                           = 2
	DM_PAPERWIDTH                                                          = 8
	DM_PELSHEIGHT                                                          = 1048576
	DM_PELSWIDTH                                                           = 524288
	DM_POSITION                                                            = 32
	DM_PRINTQUALITY                                                        = 1024
	DM_PROMPT                                                              = 4
	DM_REPOSITION                                                          = 1026
	DM_SCALE                                                               = 16
	DM_SETDEFID                                                            = 1025
	DM_SPECVERSION                                                         = 0x0401
	DM_TTOPTION                                                            = 16384
	DM_UPDATE                                                              = 1
	DM_YRESOLUTION                                                         = 8192
	DNS_ERROR_AUTOZONE_ALREADY_EXISTS                                      = 9610
	DNS_ERROR_AXFR                                                         = 9752
	DNS_ERROR_BAD_PACKET                                                   = 9502
	DNS_ERROR_CANNOT_FIND_ROOT_HINTS                                       = 9564
	DNS_ERROR_CNAME_COLLISION                                              = 9709
	DNS_ERROR_CNAME_LOOP                                                   = 9707
	DNS_ERROR_DATABASE_BASE                                                = 9700
	DNS_ERROR_DATAFILE_BASE                                                = 9650
	DNS_ERROR_DATAFILE_OPEN_FAILURE                                        = 9653
	DNS_ERROR_DATAFILE_PARSING                                             = 9655
	DNS_ERROR_DP_ALREADY_ENLISTED                                          = 9904
	DNS_ERROR_DP_ALREADY_EXISTS                                            = 9902
	DNS_ERROR_DP_BASE                                                      = 9900
	DNS_ERROR_DP_DOES_NOT_EXIST                                            = 9901
	DNS_ERROR_DP_FSMO_ERROR                                                = 9906
	DNS_ERROR_DP_NOT_AVAILABLE                                             = 9905
	DNS_ERROR_DP_NOT_ENLISTED                                              = 9903
	DNS_ERROR_DS_UNAVAILABLE                                               = 9717
	DNS_ERROR_DS_ZONE_ALREADY_EXISTS                                       = 9718
	DNS_ERROR_FILE_WRITEBACK_FAILED                                        = 9654
	DNS_ERROR_FORWARDER_ALREADY_EXISTS                                     = 9619
	DNS_ERROR_GENERAL_API_BASE                                             = 9550
	DNS_ERROR_INCONSISTENT_ROOT_HINTS                                      = 9565
	DNS_ERROR_INVALID_DATA                                                 = 13
	DNS_ERROR_INVALID_DATAFILE_NAME                                        = 9652
	DNS_ERROR_INVALID_IP_ADDRESS                                           = 9552
	DNS_ERROR_INVALID_NAME                                                 = 123
	DNS_ERROR_INVALID_NAME_CHAR                                            = 9560
	DNS_ERROR_INVALID_PROPERTY                                             = 9553
	DNS_ERROR_INVALID_TYPE                                                 = 9551
	DNS_ERROR_INVALID_ZONE_OPERATION                                       = 9603
	DNS_ERROR_INVALID_ZONE_TYPE                                            = 9611
	DNS_ERROR_MASK                                                         = 0x00002328
	DNS_ERROR_NAME_DOES_NOT_EXIST                                          = 9714
	DNS_ERROR_NAME_NOT_IN_ZONE                                             = 9706
	DNS_ERROR_NBSTAT_INIT_FAILED                                           = 9617
	DNS_ERROR_NEED_SECONDARY_ADDRESSES                                     = 9614
	DNS_ERROR_NEED_WINS_SERVERS                                            = 9616
	DNS_ERROR_NODE_CREATION_FAILED                                         = 9703
	DNS_ERROR_NODE_IS_CNAME                                                = 9708
	DNS_ERROR_NON_RFC_NAME                                                 = 9556
	DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER                                   = 9562
	DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION                                 = 9563
	DNS_ERROR_NOT_UNIQUE                                                   = 9555
	DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE                                       = 9719
	DNS_ERROR_NO_CREATE_CACHE_DATA                                         = 9713
	DNS_ERROR_NO_DNS_SERVERS                                               = 9852
	DNS_ERROR_NO_MEMORY                                                    = 14
	DNS_ERROR_NO_PACKET                                                    = 9503
	DNS_ERROR_NO_TCPIP                                                     = 9851
	DNS_ERROR_NO_ZONE_INFO                                                 = 9602
	DNS_ERROR_NUMERIC_NAME                                                 = 9561
	DNS_ERROR_OPERATION_BASE                                               = 9750
	DNS_ERROR_PACKET_FMT_BASE                                              = 9500
	DNS_ERROR_PRIMARY_REQUIRES_DATAFILE                                    = 9651
	DNS_ERROR_RCODE                                                        = 9504
	DNS_ERROR_RCODE_BADKEY                                                 = 9017
	DNS_ERROR_RCODE_BADSIG                                                 = 9016
	DNS_ERROR_RCODE_BADTIME                                                = 9018
	DNS_ERROR_RCODE_FORMAT_ERROR                                           = 9001
	DNS_ERROR_RCODE_LAST                                                   = 9018
	DNS_ERROR_RCODE_NAME_ERROR                                             = 9003
	DNS_ERROR_RCODE_NOTAUTH                                                = 9009
	DNS_ERROR_RCODE_NOTZONE                                                = 9010
	DNS_ERROR_RCODE_NOT_IMPLEMENTED                                        = 9004
	DNS_ERROR_RCODE_NO_ERROR                                               = 0
	DNS_ERROR_RCODE_NXRRSET                                                = 9008
	DNS_ERROR_RCODE_REFUSED                                                = 9005
	DNS_ERROR_RCODE_SERVER_FAILURE                                         = 9002
	DNS_ERROR_RCODE_YXDOMAIN                                               = 9006
	DNS_ERROR_RCODE_YXRRSET                                                = 9007
	DNS_ERROR_RECORD_ALREADY_EXISTS                                        = 9711
	DNS_ERROR_RECORD_DOES_NOT_EXIST                                        = 9701
	DNS_ERROR_RECORD_FORMAT                                                = 9702
	DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT                                     = 9710
	DNS_ERROR_RECORD_TIMED_OUT                                             = 9705
	DNS_ERROR_RESPONSE_CODES_BASE                                          = 9000
	DNS_ERROR_SECONDARY_DATA                                               = 9712
	DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP                                 = 9612
	DNS_ERROR_SECURE_BASE                                                  = 9800
	DNS_ERROR_SETUP_BASE                                                   = 9850
	DNS_ERROR_SOA_DELETE_INVALID                                           = 9618
	DNS_ERROR_TRY_AGAIN_LATER                                              = 9554
	DNS_ERROR_UNKNOWN_RECORD_TYPE                                          = 9704
	DNS_ERROR_UNSECURE_PACKET                                              = 9505
	DNS_ERROR_WINS_INIT_FAILED                                             = 9615
	DNS_ERROR_ZONE_ALREADY_EXISTS                                          = 9609
	DNS_ERROR_ZONE_BASE                                                    = 9600
	DNS_ERROR_ZONE_CONFIGURATION_ERROR                                     = 9604
	DNS_ERROR_ZONE_CREATION_FAILED                                         = 9608
	DNS_ERROR_ZONE_DOES_NOT_EXIST                                          = 9601
	DNS_ERROR_ZONE_HAS_NO_NS_RECORDS                                       = 9606
	DNS_ERROR_ZONE_HAS_NO_SOA_RECORD                                       = 9605
	DNS_ERROR_ZONE_IS_SHUTDOWN                                             = 9621
	DNS_ERROR_ZONE_LOCKED                                                  = 9607
	DNS_ERROR_ZONE_NOT_SECONDARY                                           = 9613
	DNS_ERROR_ZONE_REQUIRES_MASTER_IP                                      = 9620
	DNS_INFO_ADDED_LOCAL_WINS                                              = 9753
	DNS_INFO_AXFR_COMPLETE                                                 = 9751
	DNS_INFO_NO_RECORDS                                                    = 9501
	DNS_STATUS_CONTINUE_NEEDED                                             = 9801
	DNS_STATUS_DOTTED_NAME                                                 = 9558
	DNS_STATUS_FQDN                                                        = 9557
	DNS_STATUS_PACKET_UNSECURE                                             = 9505
	DNS_STATUS_SINGLE_PART_NAME                                            = 9559
	DNS_WARNING_DOMAIN_UNDELETED                                           = 9716
	DNS_WARNING_PTR_CREATE_FAILED                                          = 9715
	DOCKINFO_DOCKED                                                        = 2
	DOCKINFO_UNDOCKED                                                      = 1
	DOCKINFO_USER_DOCKED                                                   = 6
	DOCKINFO_USER_SUPPLIED                                                 = 4
	DOCKINFO_USER_UNDOCKED                                                 = 5
	DOF_DIRECTORY                                                          = 0x8003
	DOF_DOCUMENT                                                           = 0x8002
	DOF_EXECUTABLE                                                         = 0x8001
	DOF_MULTIPLE                                                           = 0x8004
	DOF_PROGMAN                                                            = 0x0001
	DOF_SHELLDATA                                                          = 0x0002
	DOMAIN                                                                 = 1
	DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS                         = 579
	DOMAIN_ALIAS_RID_ACCOUNT_OPS                                           = 548
	DOMAIN_ALIAS_RID_ADMINS                                                = 544
	DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS                                   = 560
	DOMAIN_ALIAS_RID_BACKUP_OPS                                            = 551
	DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP                            = 571
	DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP                             = 574
	DOMAIN_ALIAS_RID_CRYPTO_OPERATORS                                      = 569
	DOMAIN_ALIAS_RID_DCOM_USERS                                            = 562
	DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP                               = 573
	DOMAIN_ALIAS_RID_GUESTS                                                = 546
	DOMAIN_ALIAS_RID_HYPER_V_ADMINS                                        = 578
	DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS                        = 557
	DOMAIN_ALIAS_RID_IUSERS                                                = 568
	DOMAIN_ALIAS_RID_LOGGING_USERS                                         = 559
	DOMAIN_ALIAS_RID_MONITORING_USERS                                      = 558
	DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS                             = 556
	DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP                        = 572
	DOMAIN_ALIAS_RID_POWER_USERS                                           = 547
	DOMAIN_ALIAS_RID_PREW2KCOMPACCESS                                      = 554
	DOMAIN_ALIAS_RID_PRINT_OPS                                             = 550
	DOMAIN_ALIAS_RID_RAS_SERVERS                                           = 553
	DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS                                  = 576
	DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS                                = 577
	DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS                             = 575
	DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS                                  = 555
	DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS                               = 580
	DOMAIN_ALIAS_RID_REPLICATOR                                            = 552
	DOMAIN_ALIAS_RID_SYSTEM_OPS                                            = 549
	DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS                                    = 561
	DOMAIN_ALIAS_RID_USERS                                                 = 545
	DOMAIN_GROUP_RID_ADMINS                                                = 512
	DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS                    = 497
	DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED                      = 496
	DOMAIN_GROUP_RID_CERT_ADMINS                                           = 517
	DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS                                 = 522
	DOMAIN_GROUP_RID_COMPUTERS                                             = 515
	DOMAIN_GROUP_RID_CONTROLLERS                                           = 516
	DOMAIN_GROUP_RID_ENTERPRISE_ADMINS                                     = 519
	DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS                = 498
	DOMAIN_GROUP_RID_GUESTS                                                = 514
	DOMAIN_GROUP_RID_POLICY_ADMINS                                         = 520
	DOMAIN_GROUP_RID_READONLY_CONTROLLERS                                  = 521
	DOMAIN_GROUP_RID_SCHEMA_ADMINS                                         = 518
	DOMAIN_GROUP_RID_USERS                                                 = 513
	DOMAIN_USER_RID_ADMIN                                                  = 500
	DOMAIN_USER_RID_GUEST                                                  = 501
	DOMAIN_USER_RID_KRBTGT                                                 = 502
	DOMAIN_USER_RID_MAX                                                    = 999
	DONT_COMPILE_CMDS_INLINE                                               = 0x20
	DONT_RESOLVE_DLL_REFERENCES                                            = 0x1
	DOUBLE_CLICK                                                           = 0x2
	DOWNLOADFACE                                                           = 514
	DOWNLOADHEADER                                                         = 4111
	DO_DROPFILE                                                            = 1162627398
	DO_PRINTFILE                                                           = 1414419024
	DRAFTMODE                                                              = 7
	DRAFT_QUALITY                                                          = 1
	DRAGDROP_E_FIRST                                                       = 2147746048
	DRAGDROP_E_LAST                                                        = 2147746063
	DRAGDROP_S_FIRST                                                       = 262400
	DRAGDROP_S_LAST                                                        = 262415
	DRAWPATTERNRECT                                                        = 25
	DRIVERSPECS_H                                                          = 0
	DRIVERVERSION                                                          = 0
	DRIVE_CDROM                                                            = 5
	DRIVE_FIXED                                                            = 3
	DRIVE_NO_ROOT_DIR                                                      = 1
	DRIVE_RAMDISK                                                          = 6
	DRIVE_REMOTE                                                           = 4
	DRIVE_REMOVABLE                                                        = 2
	DRIVE_UNKNOWN                                                          = 0
	DSS_DISABLED                                                           = 0x0020
	DSS_HIDEPREFIX                                                         = 0x0200
	DSS_MONO                                                               = 0x0080
	DSS_NORMAL                                                             = 0x0000
	DSS_PREFIXONLY                                                         = 0x0400
	DSS_RIGHT                                                              = 0x8000
	DSS_UNION                                                              = 0x0010
	DST_BITMAP                                                             = 0x0004
	DST_COMPLEX                                                            = 0x0000
	DST_ICON                                                               = 0x0003
	DST_PREFIXTEXT                                                         = 0x0002
	DST_TEXT                                                               = 0x0001
	DS_3DLOOK                                                              = 4
	DS_ABSALIGN                                                            = 1
	DS_CENTER                                                              = 2048
	DS_CENTERMOUSE                                                         = 4096
	DS_CONTEXTHELP                                                         = 8192
	DS_CONTROL                                                             = 1024
	DS_FIXEDSYS                                                            = 8
	DS_LOCALEDIT                                                           = 32
	DS_MODALFRAME                                                          = 128
	DS_NOFAILCREATE                                                        = 16
	DS_NOIDLEMSG                                                           = 256
	DS_SETFONT                                                             = 64
	DS_SETFOREGROUND                                                       = 512
	DS_SHELLFONT                                                           = 72
	DS_SYSMODAL                                                            = 2
	DS_S_SUCCESS                                                           = 0
	DTR_CONTROL_DISABLE                                                    = 0x0
	DTR_CONTROL_ENABLE                                                     = 0x1
	DTR_CONTROL_HANDSHAKE                                                  = 0x2
	DT_BOTTOM                                                              = 0x00000008
	DT_CALCRECT                                                            = 0x00000400
	DT_CENTER                                                              = 0x00000001
	DT_CHARSTREAM                                                          = 4
	DT_DISPFILE                                                            = 6
	DT_EDITCONTROL                                                         = 0x00002000
	DT_END_ELLIPSIS                                                        = 0x00008000
	DT_EXPANDTABS                                                          = 0x00000040
	DT_EXTERNALLEADING                                                     = 0x00000200
	DT_HIDEPREFIX                                                          = 0x00100000
	DT_INTERNAL                                                            = 0x00001000
	DT_LEFT                                                                = 0x00000000
	DT_METAFILE                                                            = 5
	DT_MODIFYSTRING                                                        = 0x00010000
	DT_NOCLIP                                                              = 0x00000100
	DT_NOFULLWIDTHCHARBREAK                                                = 0x00080000
	DT_NOPREFIX                                                            = 0x00000800
	DT_PATH_ELLIPSIS                                                       = 0x00004000
	DT_PLOTTER                                                             = 0
	DT_PREFIXONLY                                                          = 0x00200000
	DT_RASCAMERA                                                           = 3
	DT_RASDISPLAY                                                          = 1
	DT_RASPRINTER                                                          = 2
	DT_RIGHT                                                               = 0x00000002
	DT_RTLREADING                                                          = 0x00020000
	DT_SINGLELINE                                                          = 0x00000020
	DT_TABSTOP                                                             = 0x00000080
	DT_TOP                                                                 = 0x00000000
	DT_VCENTER                                                             = 0x00000004
	DT_WORDBREAK                                                           = 0x00000010
	DT_WORD_ELLIPSIS                                                       = 0x00040000
	DUMMYSTRUCTNAME                                                        = 0
	DUMMYSTRUCTNAME1                                                       = 0
	DUMMYSTRUCTNAME2                                                       = 0
	DUMMYSTRUCTNAME3                                                       = 0
	DUMMYSTRUCTNAME4                                                       = 0
	DUMMYSTRUCTNAME5                                                       = 0
	DUMMYUNIONNAME                                                         = 0
	DUMMYUNIONNAME1                                                        = 0
	DUMMYUNIONNAME2                                                        = 0
	DUMMYUNIONNAME3                                                        = 0
	DUMMYUNIONNAME4                                                        = 0
	DUMMYUNIONNAME5                                                        = 0
	DUMMYUNIONNAME6                                                        = 0
	DUMMYUNIONNAME7                                                        = 0
	DUMMYUNIONNAME8                                                        = 0
	DUMMYUNIONNAME9                                                        = 0
	DUPLICATE_CLOSE_SOURCE                                                 = 0x00000001
	DUPLICATE_SAME_ACCESS                                                  = 0x00000002
	DWLP_MSGRESULT                                                         = 0
	E2BIG                                                                  = 7
	EACCES                                                                 = 13
	EADDRINUSE                                                             = 100
	EADDRNOTAVAIL                                                          = 101
	EAFNOSUPPORT                                                           = 102
	EAGAIN                                                                 = 11
	EAI_AGAIN                                                              = 11002
	EAI_BADFLAGS                                                           = 10022
	EAI_FAIL                                                               = 11003
	EAI_FAMILY                                                             = 10047
	EAI_MEMORY                                                             = 8
	EAI_NODATA                                                             = 11004
	EAI_NONAME                                                             = 11001
	EAI_SERVICE                                                            = 10109
	EAI_SOCKTYPE                                                           = 10044
	EALREADY                                                               = 103
	EASTEUROPE_CHARSET                                                     = 238
	EBADF                                                                  = 9
	EBADMSG                                                                = 104
	EBUSY                                                                  = 16
	ECANCELED                                                              = 105
	ECHILD                                                                 = 10
	ECONNABORTED                                                           = 106
	ECONNREFUSED                                                           = 107
	ECONNRESET                                                             = 108
	EC_LEFTMARGIN                                                          = 0x0001
	EC_RIGHTMARGIN                                                         = 0x0002
	EC_USEFONTINFO                                                         = 0xffff
	EDD_GET_DEVICE_INTERFACE_NAME                                          = 0x00000001
	EDEADLK                                                                = 36
	EDESTADDRREQ                                                           = 109
	EDGE_BUMP                                                              = 9
	EDGE_ETCHED                                                            = 6
	EDGE_RAISED                                                            = 5
	EDGE_SUNKEN                                                            = 10
	EDOM                                                                   = 33
	EDQUOT                                                                 = 245
	EDS_RAWMODE                                                            = 0x00000002
	EDS_ROTATEDMODE                                                        = 0x00000004
	EEXIST                                                                 = 17
	EFAULT                                                                 = 14
	EFBIG                                                                  = 27
	EFSRPC_SECURE_ONLY                                                     = 8
	EFS_USE_RECOVERY_KEYS                                                  = 1
	EHOSTDOWN                                                              = 243
	EHOSTUNREACH                                                           = 110
	EIDRM                                                                  = 111
	EILSEQ                                                                 = 42
	EIMES_CANCELCOMPSTRINFOCUS                                             = 0x0002
	EIMES_COMPLETECOMPSTRKILLFOCUS                                         = 0x0004
	EIMES_GETCOMPSTRATONCE                                                 = 0x0001
	EINPROGRESS                                                            = 112
	EINTR                                                                  = 4
	EINVAL                                                                 = 22
	EIO                                                                    = 5
	EISCONN                                                                = 113
	EISDIR                                                                 = 21
	ELF_CULTURE_LATIN                                                      = 0
	ELF_VENDOR_SIZE                                                        = 4
	ELF_VERSION                                                            = 0
	ELOOP                                                                  = 114
	EMARCH_ENC_I17_IC_INST_WORD_POS_X                                      = 12
	EMARCH_ENC_I17_IC_INST_WORD_X                                          = 3
	EMARCH_ENC_I17_IC_SIZE_X                                               = 1
	EMARCH_ENC_I17_IC_VAL_POS_X                                            = 21
	EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X                                  = 14
	EMARCH_ENC_I17_IMM41a_INST_WORD_X                                      = 1
	EMARCH_ENC_I17_IMM41a_SIZE_X                                           = 10
	EMARCH_ENC_I17_IMM41a_VAL_POS_X                                        = 22
	EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X                                  = 24
	EMARCH_ENC_I17_IMM41b_INST_WORD_X                                      = 1
	EMARCH_ENC_I17_IMM41b_SIZE_X                                           = 8
	EMARCH_ENC_I17_IMM41b_VAL_POS_X                                        = 32
	EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X                                  = 0
	EMARCH_ENC_I17_IMM41c_INST_WORD_X                                      = 2
	EMARCH_ENC_I17_IMM41c_SIZE_X                                           = 23
	EMARCH_ENC_I17_IMM41c_VAL_POS_X                                        = 40
	EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X                                   = 13
	EMARCH_ENC_I17_IMM5C_INST_WORD_X                                       = 3
	EMARCH_ENC_I17_IMM5C_SIZE_X                                            = 5
	EMARCH_ENC_I17_IMM5C_VAL_POS_X                                         = 16
	EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X                                   = 4
	EMARCH_ENC_I17_IMM7B_INST_WORD_X                                       = 3
	EMARCH_ENC_I17_IMM7B_SIZE_X                                            = 7
	EMARCH_ENC_I17_IMM7B_VAL_POS_X                                         = 0
	EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X                                   = 18
	EMARCH_ENC_I17_IMM9D_INST_WORD_X                                       = 3
	EMARCH_ENC_I17_IMM9D_SIZE_X                                            = 9
	EMARCH_ENC_I17_IMM9D_VAL_POS_X                                         = 7
	EMARCH_ENC_I17_SIGN_INST_WORD_POS_X                                    = 27
	EMARCH_ENC_I17_SIGN_INST_WORD_X                                        = 3
	EMARCH_ENC_I17_SIGN_SIZE_X                                             = 1
	EMARCH_ENC_I17_SIGN_VAL_POS_X                                          = 63
	EMFILE                                                                 = 24
	EMLINK                                                                 = 31
	EMR_ABORTPATH                                                          = 68
	EMR_ALPHABLEND                                                         = 114
	EMR_ANGLEARC                                                           = 41
	EMR_ARC                                                                = 45
	EMR_ARCTO                                                              = 55
	EMR_BEGINPATH                                                          = 59
	EMR_BITBLT                                                             = 76
	EMR_CHORD                                                              = 46
	EMR_CLOSEFIGURE                                                        = 61
	EMR_COLORCORRECTPALETTE                                                = 111
	EMR_COLORMATCHTOTARGETW                                                = 121
	EMR_CREATEBRUSHINDIRECT                                                = 39
	EMR_CREATECOLORSPACE                                                   = 99
	EMR_CREATECOLORSPACEW                                                  = 122
	EMR_CREATEDIBPATTERNBRUSHPT                                            = 94
	EMR_CREATEMONOBRUSH                                                    = 93
	EMR_CREATEPALETTE                                                      = 49
	EMR_CREATEPEN                                                          = 38
	EMR_DELETECOLORSPACE                                                   = 101
	EMR_DELETEOBJECT                                                       = 40
	EMR_ELLIPSE                                                            = 42
	EMR_ENDPATH                                                            = 60
	EMR_EOF                                                                = 14
	EMR_EXCLUDECLIPRECT                                                    = 29
	EMR_EXTCREATEFONTINDIRECTW                                             = 82
	EMR_EXTCREATEPEN                                                       = 95
	EMR_EXTFLOODFILL                                                       = 53
	EMR_EXTSELECTCLIPRGN                                                   = 75
	EMR_EXTTEXTOUTA                                                        = 83
	EMR_EXTTEXTOUTW                                                        = 84
	EMR_FILLPATH                                                           = 62
	EMR_FILLRGN                                                            = 71
	EMR_FLATTENPATH                                                        = 65
	EMR_FRAMERGN                                                           = 72
	EMR_GDICOMMENT                                                         = 70
	EMR_GLSBOUNDEDRECORD                                                   = 103
	EMR_GLSRECORD                                                          = 102
	EMR_GRADIENTFILL                                                       = 118
	EMR_HEADER                                                             = 1
	EMR_INTERSECTCLIPRECT                                                  = 30
	EMR_INVERTRGN                                                          = 73
	EMR_LINETO                                                             = 54
	EMR_MASKBLT                                                            = 78
	EMR_MAX                                                                = 122
	EMR_MIN                                                                = 1
	EMR_MODIFYWORLDTRANSFORM                                               = 36
	EMR_MOVETOEX                                                           = 27
	EMR_OFFSETCLIPRGN                                                      = 26
	EMR_PAINTRGN                                                           = 74
	EMR_PIE                                                                = 47
	EMR_PIXELFORMAT                                                        = 104
	EMR_PLGBLT                                                             = 79
	EMR_POLYBEZIER                                                         = 2
	EMR_POLYBEZIER16                                                       = 85
	EMR_POLYBEZIERTO                                                       = 5
	EMR_POLYBEZIERTO16                                                     = 88
	EMR_POLYDRAW                                                           = 56
	EMR_POLYDRAW16                                                         = 92
	EMR_POLYGON                                                            = 3
	EMR_POLYGON16                                                          = 86
	EMR_POLYLINE                                                           = 4
	EMR_POLYLINE16                                                         = 87
	EMR_POLYLINETO                                                         = 6
	EMR_POLYLINETO16                                                       = 89
	EMR_POLYPOLYGON                                                        = 8
	EMR_POLYPOLYGON16                                                      = 91
	EMR_POLYPOLYLINE                                                       = 7
	EMR_POLYPOLYLINE16                                                     = 90
	EMR_POLYTEXTOUTA                                                       = 96
	EMR_POLYTEXTOUTW                                                       = 97
	EMR_REALIZEPALETTE                                                     = 52
	EMR_RECTANGLE                                                          = 43
	EMR_RESERVED_105                                                       = 105
	EMR_RESERVED_106                                                       = 106
	EMR_RESERVED_107                                                       = 107
	EMR_RESERVED_108                                                       = 108
	EMR_RESERVED_109                                                       = 109
	EMR_RESERVED_110                                                       = 110
	EMR_RESERVED_117                                                       = 117
	EMR_RESERVED_119                                                       = 119
	EMR_RESERVED_120                                                       = 120
	EMR_RESIZEPALETTE                                                      = 51
	EMR_RESTOREDC                                                          = 34
	EMR_ROUNDRECT                                                          = 44
	EMR_SAVEDC                                                             = 33
	EMR_SCALEVIEWPORTEXTEX                                                 = 31
	EMR_SCALEWINDOWEXTEX                                                   = 32
	EMR_SELECTCLIPPATH                                                     = 67
	EMR_SELECTOBJECT                                                       = 37
	EMR_SELECTPALETTE                                                      = 48
	EMR_SETARCDIRECTION                                                    = 57
	EMR_SETBKCOLOR                                                         = 25
	EMR_SETBKMODE                                                          = 18
	EMR_SETBRUSHORGEX                                                      = 13
	EMR_SETCOLORADJUSTMENT                                                 = 23
	EMR_SETCOLORSPACE                                                      = 100
	EMR_SETDIBITSTODEVICE                                                  = 80
	EMR_SETICMMODE                                                         = 98
	EMR_SETICMPROFILEA                                                     = 112
	EMR_SETICMPROFILEW                                                     = 113
	EMR_SETLAYOUT                                                          = 115
	EMR_SETMAPMODE                                                         = 17
	EMR_SETMAPPERFLAGS                                                     = 16
	EMR_SETMETARGN                                                         = 28
	EMR_SETMITERLIMIT                                                      = 58
	EMR_SETPALETTEENTRIES                                                  = 50
	EMR_SETPIXELV                                                          = 15
	EMR_SETPOLYFILLMODE                                                    = 19
	EMR_SETROP2                                                            = 20
	EMR_SETSTRETCHBLTMODE                                                  = 21
	EMR_SETTEXTALIGN                                                       = 22
	EMR_SETTEXTCOLOR                                                       = 24
	EMR_SETVIEWPORTEXTEX                                                   = 11
	EMR_SETVIEWPORTORGEX                                                   = 12
	EMR_SETWINDOWEXTEX                                                     = 9
	EMR_SETWINDOWORGEX                                                     = 10
	EMR_SETWORLDTRANSFORM                                                  = 35
	EMR_STRETCHBLT                                                         = 77
	EMR_STRETCHDIBITS                                                      = 81
	EMR_STROKEANDFILLPATH                                                  = 63
	EMR_STROKEPATH                                                         = 64
	EMR_TRANSPARENTBLT                                                     = 116
	EMR_WIDENPATH                                                          = 66
	EMSGSIZE                                                               = 115
	EMSIS_COMPOSITIONSTRING                                                = 0x0001
	EM_CANUNDO                                                             = 0x00C6
	EM_CHARFROMPOS                                                         = 0x00D7
	EM_EMPTYUNDOBUFFER                                                     = 0x00CD
	EM_FMTLINES                                                            = 0x00C8
	EM_GETFIRSTVISIBLELINE                                                 = 0x00CE
	EM_GETHANDLE                                                           = 0x00BD
	EM_GETIMESTATUS                                                        = 0x00D9
	EM_GETLIMITTEXT                                                        = 0x00D5
	EM_GETLINE                                                             = 0x00C4
	EM_GETLINECOUNT                                                        = 0x00BA
	EM_GETMARGINS                                                          = 0x00D4
	EM_GETMODIFY                                                           = 0x00B8
	EM_GETPASSWORDCHAR                                                     = 0x00D2
	EM_GETRECT                                                             = 0x00B2
	EM_GETSEL                                                              = 0x00B0
	EM_GETTHUMB                                                            = 0x00BE
	EM_GETWORDBREAKPROC                                                    = 0x00D1
	EM_LIMITTEXT                                                           = 0x00C5
	EM_LINEFROMCHAR                                                        = 0x00C9
	EM_LINEINDEX                                                           = 0x00BB
	EM_LINELENGTH                                                          = 0x00C1
	EM_LINESCROLL                                                          = 0x00B6
	EM_POSFROMCHAR                                                         = 0x00D6
	EM_REPLACESEL                                                          = 0x00C2
	EM_SCROLL                                                              = 0x00B5
	EM_SCROLLCARET                                                         = 0x00B7
	EM_SETHANDLE                                                           = 0x00BC
	EM_SETIMESTATUS                                                        = 0x00D8
	EM_SETLIMITTEXT                                                        = 197
	EM_SETMARGINS                                                          = 0x00D3
	EM_SETMODIFY                                                           = 0x00B9
	EM_SETPASSWORDCHAR                                                     = 0x00CC
	EM_SETREADONLY                                                         = 0x00CF
	EM_SETRECT                                                             = 0x00B3
	EM_SETRECTNP                                                           = 0x00B4
	EM_SETSEL                                                              = 0x00B1
	EM_SETTABSTOPS                                                         = 0x00CB
	EM_SETWORDBREAKPROC                                                    = 0x00D0
	EM_UNDO                                                                = 0x00C7
	ENABLEDUPLEX                                                           = 28
	ENABLEPAIRKERNING                                                      = 769
	ENABLERELATIVEWIDTHS                                                   = 768
	ENABLE_AUTO_POSITION                                                   = 0x100
	ENABLE_ECHO_INPUT                                                      = 0x4
	ENABLE_EXTENDED_FLAGS                                                  = 0x80
	ENABLE_INSERT_MODE                                                     = 0x20
	ENABLE_LINE_INPUT                                                      = 0x2
	ENABLE_LVB_GRID_WORLDWIDE                                              = 0x10
	ENABLE_MOUSE_INPUT                                                     = 0x10
	ENABLE_PROCESSED_INPUT                                                 = 0x1
	ENABLE_PROCESSED_OUTPUT                                                = 0x1
	ENABLE_QUICK_EDIT_MODE                                                 = 0x40
	ENABLE_VIRTUAL_TERMINAL_INPUT                                          = 0x200
	ENABLE_VIRTUAL_TERMINAL_PROCESSING                                     = 0x4
	ENABLE_WINDOW_INPUT                                                    = 0x8
	ENABLE_WRAP_AT_EOL_OUTPUT                                              = 0x2
	ENAMETOOLONG                                                           = 38
	ENCAPSULATED_POSTSCRIPT                                                = 4116
	ENDDOC                                                                 = 11
	ENDSESSION_CLOSEAPP                                                    = 0x00000001
	ENDSESSION_CRITICAL                                                    = 0x40000000
	ENDSESSION_LOGOFF                                                      = 0x80000000
	END_PATH                                                               = 4098
	ENETDOWN                                                               = 116
	ENETRESET                                                              = 117
	ENETUNREACH                                                            = 118
	ENFILE                                                                 = 23
	ENHANCED_KEY                                                           = 0x100
	ENHMETA_SIGNATURE                                                      = 0x464D4520
	ENHMETA_STOCK_OBJECT                                                   = 0x80000000
	ENLISTMENT_ALL_ACCESS                                                  = 983071
	ENLISTMENT_GENERIC_EXECUTE                                             = 131100
	ENLISTMENT_GENERIC_READ                                                = 131073
	ENLISTMENT_GENERIC_WRITE                                               = 131102
	ENLISTMENT_MAXIMUM_OPTION                                              = 0x00000001
	ENLISTMENT_QUERY_INFORMATION                                           = 1
	ENLISTMENT_RECOVER                                                     = 4
	ENLISTMENT_SET_INFORMATION                                             = 2
	ENLISTMENT_SUBORDINATE_RIGHTS                                          = 8
	ENLISTMENT_SUPERIOR                                                    = 0x00000001
	ENLISTMENT_SUPERIOR_RIGHTS                                             = 0x10
	ENOBUFS                                                                = 119
	ENODATA                                                                = 120
	ENODEV                                                                 = 19
	ENOENT                                                                 = 2
	ENOEXEC                                                                = 8
	ENOFILE                                                                = 2
	ENOLCK                                                                 = 39
	ENOLINK                                                                = 121
	ENOMEM                                                                 = 12
	ENOMSG                                                                 = 122
	ENOPROTOOPT                                                            = 123
	ENOSPC                                                                 = 28
	ENOSR                                                                  = 124
	ENOSTR                                                                 = 125
	ENOSYS                                                                 = 40
	ENOTCONN                                                               = 126
	ENOTDIR                                                                = 20
	ENOTEMPTY                                                              = 41
	ENOTRECOVERABLE                                                        = 127
	ENOTSOCK                                                               = 128
	ENOTSUP                                                                = 129
	ENOTTY                                                                 = 25
	ENSEMBLE_COMPILE                                                       = 0x4
	ENSEMBLE_DEAD                                                          = 0x1
	ENUMPAPERBINS                                                          = 31
	ENUMPAPERMETRICS                                                       = 34
	ENUM_ALL_CALENDARS                                                     = 0xffffffff
	ENUM_E_FIRST                                                           = 2147746224
	ENUM_E_LAST                                                            = 2147746239
	ENUM_S_FIRST                                                           = 262576
	ENUM_S_LAST                                                            = 262591
	ENXIO                                                                  = 6
	EN_ALIGN_LTR_EC                                                        = 0x0700
	EN_ALIGN_RTL_EC                                                        = 0x0701
	EN_CHANGE                                                              = 0x0300
	EN_ERRSPACE                                                            = 0x0500
	EN_HSCROLL                                                             = 0x0601
	EN_KILLFOCUS                                                           = 0x0200
	EN_MAXTEXT                                                             = 0x0501
	EN_SETFOCUS                                                            = 0x0100
	EN_UPDATE                                                              = 0x0400
	EN_VSCROLL                                                             = 0x0602
	EOF                                                                    = -1
	EOPNOTSUPP                                                             = 130
	EOTHER                                                                 = 131
	EOVERFLOW                                                              = 132
	EOWNERDEAD                                                             = 133
	EPERM                                                                  = 1
	EPFNOSUPPORT                                                           = 96
	EPIPE                                                                  = 32
	EPROTO                                                                 = 134
	EPROTONOSUPPORT                                                        = 135
	EPROTOTYPE                                                             = 136
	EPSPRINTING                                                            = 33
	EPS_SIGNATURE                                                          = 0x46535045
	EPT_S_CANT_CREATE                                                      = 1899
	EPT_S_CANT_PERFORM_OP                                                  = 1752
	EPT_S_INVALID_ENTRY                                                    = 1751
	EPT_S_NOT_REGISTERED                                                   = 1753
	ERANGE                                                                 = 34
	EREMOTE                                                                = 66
	EROFS                                                                  = 30
	ERROR                                                                  = 0
	ERROR_ABANDONED_WAIT_0                                                 = 735
	ERROR_ABANDONED_WAIT_63                                                = 736
	ERROR_ACCESS_DENIED                                                    = 5
	ERROR_ACCESS_DISABLED_BY_POLICY                                        = 1260
	ERROR_ACCESS_DISABLED_WEBBLADE                                         = 1277
	ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER                                  = 1278
	ERROR_ACCOUNT_DISABLED                                                 = 1331
	ERROR_ACCOUNT_EXPIRED                                                  = 1793
	ERROR_ACCOUNT_LOCKED_OUT                                               = 1909
	ERROR_ACCOUNT_RESTRICTION                                              = 1327
	ERROR_ACTIVATION_COUNT_EXCEEDED                                        = 7059
	ERROR_ACTIVE_CONNECTIONS                                               = 2402
	ERROR_ADAP_HDW_ERR                                                     = 57
	ERROR_ADDRESS_ALREADY_ASSOCIATED                                       = 1227
	ERROR_ADDRESS_NOT_ASSOCIATED                                           = 1228
	ERROR_ADVANCED_INSTALLER_FAILED                                        = 14099
	ERROR_ALERTED                                                          = 739
	ERROR_ALIAS_EXISTS                                                     = 1379
	ERROR_ALLOTTED_SPACE_EXCEEDED                                          = 1344
	ERROR_ALL_NODES_NOT_AVAILABLE                                          = 5037
	ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED                                    = 1933
	ERROR_ALREADY_ASSIGNED                                                 = 85
	ERROR_ALREADY_EXISTS                                                   = 183
	ERROR_ALREADY_FIBER                                                    = 1280
	ERROR_ALREADY_INITIALIZED                                              = 1247
	ERROR_ALREADY_REGISTERED                                               = 1242
	ERROR_ALREADY_RUNNING_LKG                                              = 1074
	ERROR_ALREADY_THREAD                                                   = 1281
	ERROR_ALREADY_WAITING                                                  = 1904
	ERROR_AMBIGUOUS_SYSTEM_DEVICE                                          = 15250
	ERROR_API_UNAVAILABLE                                                  = 15841
	ERROR_APPHELP_BLOCK                                                    = 1259
	ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN                                  = 15624
	ERROR_APP_WRONG_OS                                                     = 1151
	ERROR_ARENA_TRASHED                                                    = 7
	ERROR_ARITHMETIC_OVERFLOW                                              = 534
	ERROR_ATOMIC_LOCKS_NOT_SUPPORTED                                       = 174
	ERROR_AUTHENTICATION_FIREWALL_FAILED                                   = 1935
	ERROR_AUTHIP_FAILURE                                                   = 1469
	ERROR_AUTODATASEG_EXCEEDS_64k                                          = 199
	ERROR_BADDB                                                            = 1009
	ERROR_BADKEY                                                           = 1010
	ERROR_BAD_ARGUMENTS                                                    = 160
	ERROR_BAD_COMMAND                                                      = 22
	ERROR_BAD_CONFIGURATION                                                = 1610
	ERROR_BAD_DESCRIPTOR_FORMAT                                            = 1361
	ERROR_BAD_DEVICE                                                       = 1200
	ERROR_BAD_DEV_TYPE                                                     = 66
	ERROR_BAD_DRIVER                                                       = 2001
	ERROR_BAD_DRIVER_LEVEL                                                 = 119
	ERROR_BAD_ENVIRONMENT                                                  = 10
	ERROR_BAD_EXE_FORMAT                                                   = 193
	ERROR_BAD_FILE_TYPE                                                    = 222
	ERROR_BAD_FORMAT                                                       = 11
	ERROR_BAD_IMPERSONATION_LEVEL                                          = 1346
	ERROR_BAD_INHERITANCE_ACL                                              = 1340
	ERROR_BAD_LENGTH                                                       = 24
	ERROR_BAD_LOGON_SESSION_STATE                                          = 1365
	ERROR_BAD_NETPATH                                                      = 53
	ERROR_BAD_NET_NAME                                                     = 67
	ERROR_BAD_NET_RESP                                                     = 58
	ERROR_BAD_PATHNAME                                                     = 161
	ERROR_BAD_PIPE                                                         = 230
	ERROR_BAD_PROFILE                                                      = 1206
	ERROR_BAD_PROVIDER                                                     = 1204
	ERROR_BAD_QUERY_SYNTAX                                                 = 1615
	ERROR_BAD_RECOVERY_POLICY                                              = 6012
	ERROR_BAD_REM_ADAP                                                     = 60
	ERROR_BAD_THREADID_ADDR                                                = 159
	ERROR_BAD_TOKEN_TYPE                                                   = 1349
	ERROR_BAD_UNIT                                                         = 20
	ERROR_BAD_USERNAME                                                     = 2202
	ERROR_BAD_USER_PROFILE                                                 = 1253
	ERROR_BAD_VALIDATION_CLASS                                             = 1348
	ERROR_BEGINNING_OF_MEDIA                                               = 1102
	ERROR_BOOT_ALREADY_ACCEPTED                                            = 1076
	ERROR_BROKEN_PIPE                                                      = 109
	ERROR_BUFFER_OVERFLOW                                                  = 111
	ERROR_BUSY                                                             = 170
	ERROR_BUSY_DRIVE                                                       = 142
	ERROR_BUS_RESET                                                        = 1111
	ERROR_CALLBACK_SUPPLIED_INVALID_DATA                                   = 1273
	ERROR_CALL_NOT_IMPLEMENTED                                             = 120
	ERROR_CANCELLED                                                        = 1223
	ERROR_CANCEL_VIOLATION                                                 = 173
	ERROR_CANNOT_COPY                                                      = 266
	ERROR_CANNOT_DETECT_DRIVER_FAILURE                                     = 1080
	ERROR_CANNOT_DETECT_PROCESS_ABORT                                      = 1081
	ERROR_CANNOT_FIND_WND_CLASS                                            = 1407
	ERROR_CANNOT_IMPERSONATE                                               = 1368
	ERROR_CANNOT_MAKE                                                      = 82
	ERROR_CANNOT_OPEN_PROFILE                                              = 1205
	ERROR_CANNOT_SWITCH_RUNLEVEL                                           = 15400
	ERROR_CANTOPEN                                                         = 1011
	ERROR_CANTREAD                                                         = 1012
	ERROR_CANTWRITE                                                        = 1013
	ERROR_CANT_ACCESS_DOMAIN_INFO                                          = 1351
	ERROR_CANT_ACCESS_FILE                                                 = 1920
	ERROR_CANT_DELETE_LAST_ITEM                                            = 4335
	ERROR_CANT_DISABLE_MANDATORY                                           = 1310
	ERROR_CANT_EVICT_ACTIVE_NODE                                           = 5009
	ERROR_CANT_OPEN_ANONYMOUS                                              = 1347
	ERROR_CANT_RESOLVE_FILENAME                                            = 1921
	ERROR_CAN_NOT_COMPLETE                                                 = 1003
	ERROR_CAN_NOT_DEL_LOCAL_WINS                                           = 4001
	ERROR_CHECKOUT_REQUIRED                                                = 221
	ERROR_CHILD_MUST_BE_VOLATILE                                           = 1021
	ERROR_CHILD_NOT_COMPLETE                                               = 129
	ERROR_CHILD_WINDOW_MENU                                                = 1436
	ERROR_CIRCULAR_DEPENDENCY                                              = 1059
	ERROR_CLASS_ALREADY_EXISTS                                             = 1410
	ERROR_CLASS_DOES_NOT_EXIST                                             = 1411
	ERROR_CLASS_HAS_WINDOWS                                                = 1412
	ERROR_CLEANER_CARTRIDGE_INSTALLED                                      = 4340
	ERROR_CLEANER_CARTRIDGE_SPENT                                          = 4333
	ERROR_CLEANER_SLOT_NOT_SET                                             = 4332
	ERROR_CLEANER_SLOT_SET                                                 = 4331
	ERROR_CLIPBOARD_NOT_OPEN                                               = 1418
	ERROR_CLIPPING_NOT_SUPPORTED                                           = 2005
	ERROR_CLUSCFG_ALREADY_COMMITTED                                        = 5901
	ERROR_CLUSCFG_ROLLBACK_FAILED                                          = 5902
	ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT                        = 5903
	ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND                                    = 5032
	ERROR_CLUSTERLOG_CORRUPT                                               = 5029
	ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE                                       = 5031
	ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE                                      = 5033
	ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE                                = 5030
	ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME                             = 5900
	ERROR_CLUSTER_DATABASE_SEQMISMATCH                                     = 5083
	ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP                                    = 5896
	ERROR_CLUSTER_GUM_NOT_LOCKER                                           = 5085
	ERROR_CLUSTER_INCOMPATIBLE_VERSIONS                                    = 5075
	ERROR_CLUSTER_INSTANCE_ID_MISMATCH                                     = 5893
	ERROR_CLUSTER_INVALID_NETWORK                                          = 5054
	ERROR_CLUSTER_INVALID_NETWORK_PROVIDER                                 = 5049
	ERROR_CLUSTER_INVALID_NODE                                             = 5039
	ERROR_CLUSTER_INVALID_REQUEST                                          = 5048
	ERROR_CLUSTER_IPADDR_IN_USE                                            = 5057
	ERROR_CLUSTER_JOIN_ABORTED                                             = 5074
	ERROR_CLUSTER_JOIN_IN_PROGRESS                                         = 5041
	ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS                                     = 5053
	ERROR_CLUSTER_LAST_INTERNAL_NETWORK                                    = 5066
	ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND                                     = 5043
	ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED                             = 5076
	ERROR_CLUSTER_MEMBERSHIP_HALT                                          = 5892
	ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE                                 = 5890
	ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME                            = 5905
	ERROR_CLUSTER_NETINTERFACE_EXISTS                                      = 5046
	ERROR_CLUSTER_NETINTERFACE_NOT_FOUND                                   = 5047
	ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE                                  = 5064
	ERROR_CLUSTER_NETWORK_ALREADY_ONLINE                                   = 5063
	ERROR_CLUSTER_NETWORK_EXISTS                                           = 5044
	ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS                                   = 5067
	ERROR_CLUSTER_NETWORK_NOT_FOUND                                        = 5045
	ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP                                 = 5894
	ERROR_CLUSTER_NETWORK_NOT_INTERNAL                                     = 5060
	ERROR_CLUSTER_NODE_ALREADY_DOWN                                        = 5062
	ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT                                = 5088
	ERROR_CLUSTER_NODE_ALREADY_MEMBER                                      = 5065
	ERROR_CLUSTER_NODE_ALREADY_UP                                          = 5061
	ERROR_CLUSTER_NODE_DOWN                                                = 5050
	ERROR_CLUSTER_NODE_EXISTS                                              = 5040
	ERROR_CLUSTER_NODE_NOT_FOUND                                           = 5042
	ERROR_CLUSTER_NODE_NOT_MEMBER                                          = 5052
	ERROR_CLUSTER_NODE_NOT_PAUSED                                          = 5058
	ERROR_CLUSTER_NODE_NOT_READY                                           = 5072
	ERROR_CLUSTER_NODE_PAUSED                                              = 5070
	ERROR_CLUSTER_NODE_SHUTTING_DOWN                                       = 5073
	ERROR_CLUSTER_NODE_UNREACHABLE                                         = 5051
	ERROR_CLUSTER_NODE_UP                                                  = 5056
	ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED                               = 5081
	ERROR_CLUSTER_NO_SECURITY_CONTEXT                                      = 5059
	ERROR_CLUSTER_OLD_VERSION                                              = 5904
	ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST                                    = 5082
	ERROR_CLUSTER_PARAMETER_MISMATCH                                       = 5897
	ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH                              = 5895
	ERROR_CLUSTER_QUORUMLOG_NOT_FOUND                                      = 5891
	ERROR_CLUSTER_RESNAME_NOT_FOUND                                        = 5080
	ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND                                  = 5078
	ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED                                    = 5079
	ERROR_CLUSTER_SHUTTING_DOWN                                            = 5022
	ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED                                    = 5077
	ERROR_CLUSTER_WRONG_OS_VERSION                                         = 5899
	ERROR_COLORSPACE_MISMATCH                                              = 2021
	ERROR_COMMITMENT_LIMIT                                                 = 1455
	ERROR_COM_TASK_STOP_PENDING                                            = 15501
	ERROR_CONNECTED_OTHER_PASSWORD                                         = 2108
	ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT                                 = 2109
	ERROR_CONNECTION_ABORTED                                               = 1236
	ERROR_CONNECTION_ACTIVE                                                = 1230
	ERROR_CONNECTION_COUNT_LIMIT                                           = 1238
	ERROR_CONNECTION_INVALID                                               = 1229
	ERROR_CONNECTION_REFUSED                                               = 1225
	ERROR_CONNECTION_UNAVAIL                                               = 1201
	ERROR_CONTEXT_EXPIRED                                                  = 1931
	ERROR_CONTINUE                                                         = 1246
	ERROR_CONTROLLING_IEPORT                                               = 4329
	ERROR_CONTROL_ID_NOT_FOUND                                             = 1421
	ERROR_CORE_RESOURCE                                                    = 5026
	ERROR_COUNTER_TIMEOUT                                                  = 1121
	ERROR_CRC                                                              = 23
	ERROR_CREATE_FAILED                                                    = 1631
	ERROR_CSCSHARE_OFFLINE                                                 = 1262
	ERROR_CTX_BAD_VIDEO_MODE                                               = 7025
	ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY                                   = 7005
	ERROR_CTX_CLIENT_LICENSE_IN_USE                                        = 7052
	ERROR_CTX_CLIENT_LICENSE_NOT_SET                                       = 7053
	ERROR_CTX_CLIENT_QUERY_TIMEOUT                                         = 7040
	ERROR_CTX_CLOSE_PENDING                                                = 7007
	ERROR_CTX_CONSOLE_CONNECT                                              = 7042
	ERROR_CTX_CONSOLE_DISCONNECT                                           = 7041
	ERROR_CTX_GRAPHICS_INVALID                                             = 7035
	ERROR_CTX_INVALID_MODEMNAME                                            = 7010
	ERROR_CTX_INVALID_PD                                                   = 7002
	ERROR_CTX_INVALID_WD                                                   = 7049
	ERROR_CTX_LICENSE_CLIENT_INVALID                                       = 7055
	ERROR_CTX_LICENSE_EXPIRED                                              = 7056
	ERROR_CTX_LICENSE_NOT_AVAILABLE                                        = 7054
	ERROR_CTX_LOGON_DISABLED                                               = 7037
	ERROR_CTX_MODEM_INF_NOT_FOUND                                          = 7009
	ERROR_CTX_MODEM_RESPONSE_BUSY                                          = 7015
	ERROR_CTX_MODEM_RESPONSE_ERROR                                         = 7011
	ERROR_CTX_MODEM_RESPONSE_NO_CARRIER                                    = 7013
	ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE                                   = 7014
	ERROR_CTX_MODEM_RESPONSE_TIMEOUT                                       = 7012
	ERROR_CTX_MODEM_RESPONSE_VOICE                                         = 7016
	ERROR_CTX_NOT_CONSOLE                                                  = 7038
	ERROR_CTX_NO_OUTBUF                                                    = 7008
	ERROR_CTX_PD_NOT_FOUND                                                 = 7003
	ERROR_CTX_SERVICE_NAME_COLLISION                                       = 7006
	ERROR_CTX_SHADOW_DENIED                                                = 7044
	ERROR_CTX_SHADOW_DISABLED                                              = 7051
	ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE                                  = 7058
	ERROR_CTX_SHADOW_INVALID                                               = 7050
	ERROR_CTX_SHADOW_NOT_RUNNING                                           = 7057
	ERROR_CTX_TD_ERROR                                                     = 7017
	ERROR_CTX_WD_NOT_FOUND                                                 = 7004
	ERROR_CTX_WINSTATION_ACCESS_DENIED                                     = 7045
	ERROR_CTX_WINSTATION_ALREADY_EXISTS                                    = 7023
	ERROR_CTX_WINSTATION_BUSY                                              = 7024
	ERROR_CTX_WINSTATION_NAME_INVALID                                      = 7001
	ERROR_CTX_WINSTATION_NOT_FOUND                                         = 7022
	ERROR_CURRENT_DIRECTORY                                                = 16
	ERROR_CURRENT_DOMAIN_NOT_ALLOWED                                       = 1399
	ERROR_DATABASE_BACKUP_CORRUPT                                          = 5087
	ERROR_DATABASE_DOES_NOT_EXIST                                          = 1065
	ERROR_DATABASE_FAILURE                                                 = 4313
	ERROR_DATABASE_FULL                                                    = 4314
	ERROR_DATATYPE_MISMATCH                                                = 1629
	ERROR_DC_NOT_FOUND                                                     = 1425
	ERROR_DDE_FAIL                                                         = 1156
	ERROR_DEBUGGER_INACTIVE                                                = 1284
	ERROR_DECRYPTION_FAILED                                                = 6001
	ERROR_DELAY_LOAD_FAILED                                                = 1285
	ERROR_DELETE_PENDING                                                   = 303
	ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED                   = 15621
	ERROR_DELETING_ICM_XFORM                                               = 2019
	ERROR_DEPENDENCY_ALREADY_EXISTS                                        = 5003
	ERROR_DEPENDENCY_NOT_ALLOWED                                           = 5069
	ERROR_DEPENDENCY_NOT_FOUND                                             = 5002
	ERROR_DEPENDENT_RESOURCE_EXISTS                                        = 5001
	ERROR_DEPENDENT_SERVICES_RUNNING                                       = 1051
	ERROR_DEPLOYMENT_BLOCKED_BY_POLICY                                     = 15617
	ERROR_DESTINATION_ELEMENT_FULL                                         = 1161
	ERROR_DESTROY_OBJECT_OF_OTHER_THREAD                                   = 1435
	ERROR_DEVICE_ALREADY_REMEMBERED                                        = 1202
	ERROR_DEVICE_DOOR_OPEN                                                 = 1166
	ERROR_DEVICE_IN_USE                                                    = 2404
	ERROR_DEVICE_NOT_AVAILABLE                                             = 4319
	ERROR_DEVICE_NOT_CONNECTED                                             = 1167
	ERROR_DEVICE_NOT_PARTITIONED                                           = 1107
	ERROR_DEVICE_REINITIALIZATION_NEEDED                                   = 1164
	ERROR_DEVICE_REMOVED                                                   = 1617
	ERROR_DEVICE_REQUIRES_CLEANING                                         = 1165
	ERROR_DEV_NOT_EXIST                                                    = 55
	ERROR_DHCP_ADDRESS_CONFLICT                                            = 4100
	ERROR_DIFFERENT_SERVICE_ACCOUNT                                        = 1079
	ERROR_DIRECTORY                                                        = 267
	ERROR_DIRECT_ACCESS_HANDLE                                             = 130
	ERROR_DIR_EFS_DISALLOWED                                               = 6010
	ERROR_DIR_NOT_EMPTY                                                    = 145
	ERROR_DIR_NOT_ROOT                                                     = 144
	ERROR_DISCARDED                                                        = 157
	ERROR_DISK_CHANGE                                                      = 107
	ERROR_DISK_CORRUPT                                                     = 1393
	ERROR_DISK_FULL                                                        = 112
	ERROR_DISK_OPERATION_FAILED                                            = 1127
	ERROR_DISK_RECALIBRATE_FAILED                                          = 1126
	ERROR_DISK_RESET_FAILED                                                = 1128
	ERROR_DISK_TOO_FRAGMENTED                                              = 302
	ERROR_DLL_INIT_FAILED                                                  = 1114
	ERROR_DLL_NOT_FOUND                                                    = 1157
	ERROR_DOMAIN_CONTROLLER_EXISTS                                         = 1250
	ERROR_DOMAIN_CONTROLLER_NOT_FOUND                                      = 1908
	ERROR_DOMAIN_EXISTS                                                    = 1356
	ERROR_DOMAIN_LIMIT_EXCEEDED                                            = 1357
	ERROR_DOMAIN_TRUST_INCONSISTENT                                        = 1810
	ERROR_DOWNGRADE_DETECTED                                               = 1265
	ERROR_DRIVER_BLOCKED                                                   = 1275
	ERROR_DRIVE_LOCKED                                                     = 108
	ERROR_DRIVE_MEDIA_MISMATCH                                             = 4303
	ERROR_DS_ADD_REPLICA_INHIBITED                                         = 8302
	ERROR_DS_ADMIN_LIMIT_EXCEEDED                                          = 8228
	ERROR_DS_AFFECTS_MULTIPLE_DSAS                                         = 8249
	ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER                                 = 8578
	ERROR_DS_ALIASED_OBJ_MISSING                                           = 8334
	ERROR_DS_ALIAS_DEREF_PROBLEM                                           = 8244
	ERROR_DS_ALIAS_POINTS_TO_ALIAS                                         = 8336
	ERROR_DS_ALIAS_PROBLEM                                                 = 8241
	ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS                                     = 8205
	ERROR_DS_ATTRIBUTE_OWNED_BY_SAM                                        = 8346
	ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED                                      = 8204
	ERROR_DS_ATT_ALREADY_EXISTS                                            = 8318
	ERROR_DS_ATT_IS_NOT_ON_OBJ                                             = 8310
	ERROR_DS_ATT_NOT_DEF_FOR_CLASS                                         = 8317
	ERROR_DS_ATT_NOT_DEF_IN_SCHEMA                                         = 8303
	ERROR_DS_ATT_SCHEMA_REQ_ID                                             = 8399
	ERROR_DS_ATT_SCHEMA_REQ_SYNTAX                                         = 8416
	ERROR_DS_ATT_VAL_ALREADY_EXISTS                                        = 8323
	ERROR_DS_AUTHORIZATION_FAILED                                          = 8599
	ERROR_DS_AUTH_METHOD_NOT_SUPPORTED                                     = 8231
	ERROR_DS_AUTH_UNKNOWN                                                  = 8234
	ERROR_DS_AUX_CLS_TEST_FAIL                                             = 8389
	ERROR_DS_BACKLINK_WITHOUT_LINK                                         = 8482
	ERROR_DS_BAD_ATT_SCHEMA_SYNTAX                                         = 8400
	ERROR_DS_BAD_HIERARCHY_FILE                                            = 8425
	ERROR_DS_BAD_INSTANCE_TYPE                                             = 8313
	ERROR_DS_BAD_NAME_SYNTAX                                               = 8335
	ERROR_DS_BAD_RDN_ATT_ID_SYNTAX                                         = 8392
	ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED                                  = 8426
	ERROR_DS_BUSY                                                          = 8206
	ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD                                 = 8585
	ERROR_DS_CANT_ADD_ATT_VALUES                                           = 8320
	ERROR_DS_CANT_ADD_SYSTEM_ONLY                                          = 8358
	ERROR_DS_CANT_ADD_TO_GC                                                = 8550
	ERROR_DS_CANT_CACHE_ATT                                                = 8401
	ERROR_DS_CANT_CACHE_CLASS                                              = 8402
	ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC                                   = 8553
	ERROR_DS_CANT_CREATE_UNDER_SCHEMA                                      = 8510
	ERROR_DS_CANT_DELETE                                                   = 8398
	ERROR_DS_CANT_DELETE_DSA_OBJ                                           = 8340
	ERROR_DS_CANT_DEL_MASTER_CROSSREF                                      = 8375
	ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC                                 = 8604
	ERROR_DS_CANT_DEREF_ALIAS                                              = 8337
	ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN                            = 8603
	ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF                            = 8589
	ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN                                   = 8537
	ERROR_DS_CANT_FIND_DSA_OBJ                                             = 8419
	ERROR_DS_CANT_FIND_EXPECTED_NC                                         = 8420
	ERROR_DS_CANT_FIND_NC_IN_CACHE                                         = 8421
	ERROR_DS_CANT_MIX_MASTER_AND_REPS                                      = 8331
	ERROR_DS_CANT_MOD_OBJ_CLASS                                            = 8215
	ERROR_DS_CANT_MOD_PRIMARYGROUPID                                       = 8506
	ERROR_DS_CANT_MOD_SYSTEM_ONLY                                          = 8369
	ERROR_DS_CANT_MOVE_ACCOUNT_GROUP                                       = 8498
	ERROR_DS_CANT_MOVE_APP_BASIC_GROUP                                     = 8608
	ERROR_DS_CANT_MOVE_APP_QUERY_GROUP                                     = 8609
	ERROR_DS_CANT_MOVE_DELETED_OBJECT                                      = 8489
	ERROR_DS_CANT_MOVE_RESOURCE_GROUP                                      = 8499
	ERROR_DS_CANT_ON_NON_LEAF                                              = 8213
	ERROR_DS_CANT_ON_RDN                                                   = 8214
	ERROR_DS_CANT_REMOVE_ATT_CACHE                                         = 8403
	ERROR_DS_CANT_REMOVE_CLASS_CACHE                                       = 8404
	ERROR_DS_CANT_REM_MISSING_ATT                                          = 8324
	ERROR_DS_CANT_REM_MISSING_ATT_VAL                                      = 8325
	ERROR_DS_CANT_REPLACE_HIDDEN_REC                                       = 8424
	ERROR_DS_CANT_RETRIEVE_ATTS                                            = 8481
	ERROR_DS_CANT_RETRIEVE_CHILD                                           = 8422
	ERROR_DS_CANT_RETRIEVE_DN                                              = 8405
	ERROR_DS_CANT_RETRIEVE_INSTANCE                                        = 8407
	ERROR_DS_CANT_RETRIEVE_SD                                              = 8526
	ERROR_DS_CANT_START                                                    = 8531
	ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ                                 = 8560
	ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS                               = 8493
	ERROR_DS_CHILDREN_EXIST                                                = 8332
	ERROR_DS_CLASS_MUST_BE_CONCRETE                                        = 8359
	ERROR_DS_CLASS_NOT_DSA                                                 = 8343
	ERROR_DS_CLIENT_LOOP                                                   = 8259
	ERROR_DS_CODE_INCONSISTENCY                                            = 8408
	ERROR_DS_COMPARE_FALSE                                                 = 8229
	ERROR_DS_COMPARE_TRUE                                                  = 8230
	ERROR_DS_CONFIDENTIALITY_REQUIRED                                      = 8237
	ERROR_DS_CONFIG_PARAM_MISSING                                          = 8427
	ERROR_DS_CONSTRAINT_VIOLATION                                          = 8239
	ERROR_DS_CONSTRUCTED_ATT_MOD                                           = 8475
	ERROR_DS_CONTROL_NOT_FOUND                                             = 8258
	ERROR_DS_COULDNT_CONTACT_FSMO                                          = 8367
	ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE                      = 8503
	ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE                                  = 8502
	ERROR_DS_COULDNT_UPDATE_SPNS                                           = 8525
	ERROR_DS_COUNTING_AB_INDICES_FAILED                                    = 8428
	ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD                                     = 8491
	ERROR_DS_CROSS_DOM_MOVE_ERROR                                          = 8216
	ERROR_DS_CROSS_NC_DN_RENAME                                            = 8368
	ERROR_DS_CROSS_REF_BUSY                                                = 8602
	ERROR_DS_CROSS_REF_EXISTS                                              = 8374
	ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE                                     = 8495
	ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2                                  = 8586
	ERROR_DS_DATABASE_ERROR                                                = 8409
	ERROR_DS_DECODING_ERROR                                                = 8253
	ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED                              = 8536
	ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST                              = 8535
	ERROR_DS_DIFFERENT_REPL_EPOCHS                                         = 8593
	ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER                                = 8615
	ERROR_DS_DNS_LOOKUP_FAILURE                                            = 8524
	ERROR_DS_DOMAIN_RENAME_IN_PROGRESS                                     = 8612
	ERROR_DS_DOMAIN_VERSION_TOO_HIGH                                       = 8564
	ERROR_DS_DOMAIN_VERSION_TOO_LOW                                        = 8566
	ERROR_DS_DRA_ABANDON_SYNC                                              = 8462
	ERROR_DS_DRA_ACCESS_DENIED                                             = 8453
	ERROR_DS_DRA_BAD_DN                                                    = 8439
	ERROR_DS_DRA_BAD_INSTANCE_TYPE                                         = 8445
	ERROR_DS_DRA_BAD_NC                                                    = 8440
	ERROR_DS_DRA_BUSY                                                      = 8438
	ERROR_DS_DRA_CONNECTION_FAILED                                         = 8444
	ERROR_DS_DRA_DB_ERROR                                                  = 8451
	ERROR_DS_DRA_DN_EXISTS                                                 = 8441
	ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT                                   = 8544
	ERROR_DS_DRA_EXTN_CONNECTION_FAILED                                    = 8466
	ERROR_DS_DRA_GENERIC                                                   = 8436
	ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET                                  = 8464
	ERROR_DS_DRA_INCONSISTENT_DIT                                          = 8443
	ERROR_DS_DRA_INTERNAL_ERROR                                            = 8442
	ERROR_DS_DRA_INVALID_PARAMETER                                         = 8437
	ERROR_DS_DRA_MAIL_PROBLEM                                              = 8447
	ERROR_DS_DRA_MISSING_PARENT                                            = 8460
	ERROR_DS_DRA_NAME_COLLISION                                            = 8458
	ERROR_DS_DRA_NOT_SUPPORTED                                             = 8454
	ERROR_DS_DRA_NO_REPLICA                                                = 8452
	ERROR_DS_DRA_OBJ_IS_REP_SOURCE                                         = 8450
	ERROR_DS_DRA_OBJ_NC_MISMATCH                                           = 8545
	ERROR_DS_DRA_OUT_OF_MEM                                                = 8446
	ERROR_DS_DRA_OUT_SCHEDULE_WINDOW                                       = 8617
	ERROR_DS_DRA_PREEMPTED                                                 = 8461
	ERROR_DS_DRA_REF_ALREADY_EXISTS                                        = 8448
	ERROR_DS_DRA_REF_NOT_FOUND                                             = 8449
	ERROR_DS_DRA_REPL_PENDING                                              = 8477
	ERROR_DS_DRA_RPC_CANCELLED                                             = 8455
	ERROR_DS_DRA_SCHEMA_CONFLICT                                           = 8543
	ERROR_DS_DRA_SCHEMA_INFO_SHIP                                          = 8542
	ERROR_DS_DRA_SCHEMA_MISMATCH                                           = 8418
	ERROR_DS_DRA_SHUTDOWN                                                  = 8463
	ERROR_DS_DRA_SINK_DISABLED                                             = 8457
	ERROR_DS_DRA_SOURCE_DISABLED                                           = 8456
	ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA                                 = 8465
	ERROR_DS_DRA_SOURCE_REINSTALLED                                        = 8459
	ERROR_DS_DRS_EXTENSIONS_CHANGED                                        = 8594
	ERROR_DS_DSA_MUST_BE_INT_MASTER                                        = 8342
	ERROR_DS_DST_DOMAIN_NOT_NATIVE                                         = 8496
	ERROR_DS_DST_NC_MISMATCH                                               = 8486
	ERROR_DS_DS_REQUIRED                                                   = 8478
	ERROR_DS_DUPLICATE_ID_FOUND                                            = 8605
	ERROR_DS_DUP_LDAP_DISPLAY_NAME                                         = 8382
	ERROR_DS_DUP_LINK_ID                                                   = 8468
	ERROR_DS_DUP_MAPI_ID                                                   = 8380
	ERROR_DS_DUP_MSDS_INTID                                                = 8597
	ERROR_DS_DUP_OID                                                       = 8379
	ERROR_DS_DUP_RDN                                                       = 8378
	ERROR_DS_DUP_SCHEMA_ID_GUID                                            = 8381
	ERROR_DS_ENCODING_ERROR                                                = 8252
	ERROR_DS_EPOCH_MISMATCH                                                = 8483
	ERROR_DS_EXISTING_AD_CHILD_NC                                          = 8613
	ERROR_DS_EXISTS_IN_AUX_CLS                                             = 8393
	ERROR_DS_EXISTS_IN_MAY_HAVE                                            = 8386
	ERROR_DS_EXISTS_IN_MUST_HAVE                                           = 8385
	ERROR_DS_EXISTS_IN_POSS_SUP                                            = 8395
	ERROR_DS_EXISTS_IN_RDNATTID                                            = 8598
	ERROR_DS_EXISTS_IN_SUB_CLS                                             = 8394
	ERROR_DS_FILTER_UNKNOWN                                                = 8254
	ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS                                  = 8555
	ERROR_DS_FOREST_VERSION_TOO_HIGH                                       = 8563
	ERROR_DS_FOREST_VERSION_TOO_LOW                                        = 8565
	ERROR_DS_GCVERIFY_ERROR                                                = 8417
	ERROR_DS_GC_NOT_AVAILABLE                                              = 8217
	ERROR_DS_GC_REQUIRED                                                   = 8547
	ERROR_DS_GENERIC_ERROR                                                 = 8341
	ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER                           = 8519
	ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER                                 = 8516
	ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER                             = 8517
	ERROR_DS_GOVERNSID_MISSING                                             = 8410
	ERROR_DS_GROUP_CONVERSION_ERROR                                        = 8607
	ERROR_DS_HAVE_PRIMARY_MEMBERS                                          = 8521
	ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED                                 = 8429
	ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD                                       = 8507
	ERROR_DS_ILLEGAL_MOD_OPERATION                                         = 8311
	ERROR_DS_ILLEGAL_SUPERIOR                                              = 8345
	ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION                                   = 8492
	ERROR_DS_INAPPROPRIATE_AUTH                                            = 8233
	ERROR_DS_INAPPROPRIATE_MATCHING                                        = 8238
	ERROR_DS_INCOMPATIBLE_CONTROLS_USED                                    = 8574
	ERROR_DS_INCOMPATIBLE_VERSION                                          = 8567
	ERROR_DS_INCORRECT_ROLE_OWNER                                          = 8210
	ERROR_DS_INIT_FAILURE                                                  = 8532
	ERROR_DS_INIT_FAILURE_CONSOLE                                          = 8561
	ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE                             = 8512
	ERROR_DS_INSTALL_NO_SRC_SCH_VERSION                                    = 8511
	ERROR_DS_INSTALL_SCHEMA_MISMATCH                                       = 8467
	ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT                            = 8606
	ERROR_DS_INSUFF_ACCESS_RIGHTS                                          = 8344
	ERROR_DS_INTERNAL_FAILURE                                              = 8430
	ERROR_DS_INVALID_ATTRIBUTE_SYNTAX                                      = 8203
	ERROR_DS_INVALID_DMD                                                   = 8360
	ERROR_DS_INVALID_DN_SYNTAX                                             = 8242
	ERROR_DS_INVALID_GROUP_TYPE                                            = 8513
	ERROR_DS_INVALID_LDAP_DISPLAY_NAME                                     = 8479
	ERROR_DS_INVALID_NAME_FOR_SPN                                          = 8554
	ERROR_DS_INVALID_ROLE_OWNER                                            = 8366
	ERROR_DS_INVALID_SCRIPT                                                = 8600
	ERROR_DS_INVALID_SEARCH_FLAG                                           = 8500
	ERROR_DS_IS_LEAF                                                       = 8243
	ERROR_DS_KEY_NOT_UNIQUE                                                = 8527
	ERROR_DS_LDAP_SEND_QUEUE_FULL                                          = 8616
	ERROR_DS_LINK_ID_NOT_AVAILABLE                                         = 8577
	ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER                      = 8520
	ERROR_DS_LOCAL_ERROR                                                   = 8251
	ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY                                    = 8548
	ERROR_DS_LOOP_DETECT                                                   = 8246
	ERROR_DS_LOW_DSA_VERSION                                               = 8568
	ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4                                = 8572
	ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED                                = 8557
	ERROR_DS_MASTERDSA_REQUIRED                                            = 8314
	ERROR_DS_MAX_OBJ_SIZE_EXCEEDED                                         = 8304
	ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY                                  = 8201
	ERROR_DS_MISSING_EXPECTED_ATT                                          = 8411
	ERROR_DS_MISSING_FSMO_SETTINGS                                         = 8434
	ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER                              = 8497
	ERROR_DS_MISSING_REQUIRED_ATT                                          = 8316
	ERROR_DS_MISSING_SUPREF                                                = 8406
	ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG                                   = 8581
	ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE                          = 8579
	ERROR_DS_MODIFYDN_WRONG_GRANDPARENT                                    = 8582
	ERROR_DS_MUST_BE_RUN_ON_DST_DC                                         = 8558
	ERROR_DS_NAME_ERROR_DOMAIN_ONLY                                        = 8473
	ERROR_DS_NAME_ERROR_NOT_FOUND                                          = 8470
	ERROR_DS_NAME_ERROR_NOT_UNIQUE                                         = 8471
	ERROR_DS_NAME_ERROR_NO_MAPPING                                         = 8472
	ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING                             = 8474
	ERROR_DS_NAME_ERROR_RESOLVING                                          = 8469
	ERROR_DS_NAME_ERROR_TRUST_REFERRAL                                     = 8583
	ERROR_DS_NAME_NOT_UNIQUE                                               = 8571
	ERROR_DS_NAME_REFERENCE_INVALID                                        = 8373
	ERROR_DS_NAME_TOO_LONG                                                 = 8348
	ERROR_DS_NAME_TOO_MANY_PARTS                                           = 8347
	ERROR_DS_NAME_TYPE_UNKNOWN                                             = 8351
	ERROR_DS_NAME_UNPARSEABLE                                              = 8350
	ERROR_DS_NAME_VALUE_TOO_LONG                                           = 8349
	ERROR_DS_NAMING_MASTER_GC                                              = 8523
	ERROR_DS_NAMING_VIOLATION                                              = 8247
	ERROR_DS_NCNAME_MISSING_CR_REF                                         = 8412
	ERROR_DS_NCNAME_MUST_BE_NC                                             = 8357
	ERROR_DS_NC_MUST_HAVE_NC_PARENT                                        = 8494
	ERROR_DS_NC_STILL_HAS_DSAS                                             = 8546
	ERROR_DS_NONEXISTENT_MAY_HAVE                                          = 8387
	ERROR_DS_NONEXISTENT_MUST_HAVE                                         = 8388
	ERROR_DS_NONEXISTENT_POSS_SUP                                          = 8390
	ERROR_DS_NONSAFE_SCHEMA_CHANGE                                         = 8508
	ERROR_DS_NON_BASE_SEARCH                                               = 8480
	ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX                                     = 8377
	ERROR_DS_NOT_AN_OBJECT                                                 = 8352
	ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC                                    = 8487
	ERROR_DS_NOT_CLOSEST                                                   = 8588
	ERROR_DS_NOT_INSTALLED                                                 = 8200
	ERROR_DS_NOT_ON_BACKLINK                                               = 8362
	ERROR_DS_NOT_SUPPORTED                                                 = 8256
	ERROR_DS_NOT_SUPPORTED_SORT_ORDER                                      = 8570
	ERROR_DS_NO_ATTRIBUTE_OR_VALUE                                         = 8202
	ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN                            = 8569
	ERROR_DS_NO_CHAINED_EVAL                                               = 8328
	ERROR_DS_NO_CHAINING                                                   = 8327
	ERROR_DS_NO_CHECKPOINT_WITH_PDC                                        = 8551
	ERROR_DS_NO_CROSSREF_FOR_NC                                            = 8363
	ERROR_DS_NO_DELETED_NAME                                               = 8355
	ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS                                    = 8549
	ERROR_DS_NO_MORE_RIDS                                                  = 8209
	ERROR_DS_NO_MSDS_INTID                                                 = 8596
	ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN                            = 8514
	ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN                             = 8515
	ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC                                   = 8580
	ERROR_DS_NO_PARENT_OBJECT                                              = 8329
	ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION                                  = 8533
	ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA                                      = 8306
	ERROR_DS_NO_REF_DOMAIN                                                 = 8575
	ERROR_DS_NO_REQUESTED_ATTS_FOUND                                       = 8308
	ERROR_DS_NO_RESULTS_RETURNED                                           = 8257
	ERROR_DS_NO_RIDS_ALLOCATED                                             = 8208
	ERROR_DS_NO_SUCH_OBJECT                                                = 8240
	ERROR_DS_NO_TREE_DELETE_ABOVE_NC                                       = 8501
	ERROR_DS_NTDSCRIPT_PROCESS_ERROR                                       = 8592
	ERROR_DS_NTDSCRIPT_SYNTAX_ERROR                                        = 8591
	ERROR_DS_OBJECT_BEING_REMOVED                                          = 8339
	ERROR_DS_OBJECT_CLASS_REQUIRED                                         = 8315
	ERROR_DS_OBJECT_RESULTS_TOO_LARGE                                      = 8248
	ERROR_DS_OBJ_CLASS_NOT_DEFINED                                         = 8371
	ERROR_DS_OBJ_CLASS_NOT_SUBCLASS                                        = 8372
	ERROR_DS_OBJ_CLASS_VIOLATION                                           = 8212
	ERROR_DS_OBJ_GUID_EXISTS                                               = 8361
	ERROR_DS_OBJ_NOT_FOUND                                                 = 8333
	ERROR_DS_OBJ_STRING_NAME_EXISTS                                        = 8305
	ERROR_DS_OBJ_TOO_LARGE                                                 = 8312
	ERROR_DS_OFFSET_RANGE_ERROR                                            = 8262
	ERROR_DS_OPERATIONS_ERROR                                              = 8224
	ERROR_DS_OUT_OF_SCOPE                                                  = 8338
	ERROR_DS_OUT_OF_VERSION_STORE                                          = 8573
	ERROR_DS_PARAM_ERROR                                                   = 8255
	ERROR_DS_PARENT_IS_AN_ALIAS                                            = 8330
	ERROR_DS_PDC_OPERATION_IN_PROGRESS                                     = 8490
	ERROR_DS_PROTOCOL_ERROR                                                = 8225
	ERROR_DS_RANGE_CONSTRAINT                                              = 8322
	ERROR_DS_RDN_DOESNT_MATCH_SCHEMA                                       = 8307
	ERROR_DS_RECALCSCHEMA_FAILED                                           = 8396
	ERROR_DS_REFERRAL                                                      = 8235
	ERROR_DS_REFERRAL_LIMIT_EXCEEDED                                       = 8260
	ERROR_DS_REFUSING_FSMO_ROLES                                           = 8433
	ERROR_DS_REMOTE_CROSSREF_OP_FAILED                                     = 8601
	ERROR_DS_REPLICATOR_ONLY                                               = 8370
	ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR                 = 8595
	ERROR_DS_REPL_LIFETIME_EXCEEDED                                        = 8614
	ERROR_DS_RESERVED_LINK_ID                                              = 8576
	ERROR_DS_RIDMGR_INIT_ERROR                                             = 8211
	ERROR_DS_ROLE_NOT_VERIFIED                                             = 8610
	ERROR_DS_ROOT_CANT_BE_SUBREF                                           = 8326
	ERROR_DS_ROOT_MUST_BE_NC                                               = 8301
	ERROR_DS_ROOT_REQUIRES_CLASS_TOP                                       = 8432
	ERROR_DS_SAM_INIT_FAILURE                                              = 8504
	ERROR_DS_SAM_INIT_FAILURE_CONSOLE                                      = 8562
	ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY                                       = 8530
	ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD                                     = 8529
	ERROR_DS_SCHEMA_ALLOC_FAILED                                           = 8415
	ERROR_DS_SCHEMA_NOT_LOADED                                             = 8414
	ERROR_DS_SCHEMA_UPDATE_DISALLOWED                                      = 8509
	ERROR_DS_SECURITY_CHECKING_ERROR                                       = 8413
	ERROR_DS_SECURITY_ILLEGAL_MODIFY                                       = 8423
	ERROR_DS_SEC_DESC_INVALID                                              = 8354
	ERROR_DS_SEC_DESC_TOO_SHORT                                            = 8353
	ERROR_DS_SEMANTIC_ATT_TEST                                             = 8383
	ERROR_DS_SENSITIVE_GROUP_VIOLATION                                     = 8505
	ERROR_DS_SERVER_DOWN                                                   = 8250
	ERROR_DS_SHUTTING_DOWN                                                 = 8364
	ERROR_DS_SINGLE_USER_MODE_FAILED                                       = 8590
	ERROR_DS_SINGLE_VALUE_CONSTRAINT                                       = 8321
	ERROR_DS_SIZELIMIT_EXCEEDED                                            = 8227
	ERROR_DS_SORT_CONTROL_MISSING                                          = 8261
	ERROR_DS_SOURCE_AUDITING_NOT_ENABLED                                   = 8552
	ERROR_DS_SOURCE_DOMAIN_IN_FOREST                                       = 8534
	ERROR_DS_SRC_AND_DST_NC_IDENTICAL                                      = 8485
	ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH                             = 8540
	ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER                                 = 8559
	ERROR_DS_SRC_GUID_MISMATCH                                             = 8488
	ERROR_DS_SRC_NAME_MISMATCH                                             = 8484
	ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER                                     = 8538
	ERROR_DS_SRC_SID_EXISTS_IN_FOREST                                      = 8539
	ERROR_DS_STRING_SD_CONVERSION_FAILED                                   = 8522
	ERROR_DS_STRONG_AUTH_REQUIRED                                          = 8232
	ERROR_DS_SUBREF_MUST_HAVE_PARENT                                       = 8356
	ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD                                    = 8376
	ERROR_DS_SUB_CLS_TEST_FAIL                                             = 8391
	ERROR_DS_SYNTAX_MISMATCH                                               = 8384
	ERROR_DS_THREAD_LIMIT_EXCEEDED                                         = 8587
	ERROR_DS_TIMELIMIT_EXCEEDED                                            = 8226
	ERROR_DS_TREE_DELETE_NOT_FINISHED                                      = 8397
	ERROR_DS_UNABLE_TO_SURRENDER_ROLES                                     = 8435
	ERROR_DS_UNAVAILABLE                                                   = 8207
	ERROR_DS_UNAVAILABLE_CRIT_EXTENSION                                    = 8236
	ERROR_DS_UNICODEPWD_NOT_IN_QUOTES                                      = 8556
	ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER                              = 8518
	ERROR_DS_UNKNOWN_ERROR                                                 = 8431
	ERROR_DS_UNKNOWN_OPERATION                                             = 8365
	ERROR_DS_UNWILLING_TO_PERFORM                                          = 8245
	ERROR_DS_USER_BUFFER_TO_SMALL                                          = 8309
	ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL                               = 8611
	ERROR_DS_WRONG_LINKED_ATT_SYNTAX                                       = 8528
	ERROR_DS_WRONG_OM_OBJ_CLASS                                            = 8476
	ERROR_DUPLICATE_SERVICE_NAME                                           = 1078
	ERROR_DUPLICATE_TAG                                                    = 2014
	ERROR_DUP_DOMAINNAME                                                   = 1221
	ERROR_DUP_NAME                                                         = 52
	ERROR_DYNLINK_FROM_INVALID_RING                                        = 196
	ERROR_EAS_DIDNT_FIT                                                    = 275
	ERROR_EAS_NOT_SUPPORTED                                                = 282
	ERROR_EA_ACCESS_DENIED                                                 = 994
	ERROR_EA_FILE_CORRUPT                                                  = 276
	ERROR_EA_LIST_INCONSISTENT                                             = 255
	ERROR_EA_TABLE_FULL                                                    = 277
	ERROR_EC_CIRCULAR_FORWARDING                                           = 15082
	ERROR_EC_CREDSTORE_FULL                                                = 15083
	ERROR_EC_CRED_NOT_FOUND                                                = 15084
	ERROR_EC_LOG_DISABLED                                                  = 15081
	ERROR_EC_NO_ACTIVE_CHANNEL                                             = 15085
	ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE                                  = 15080
	ERROR_EFS_ALG_BLOB_TOO_BIG                                             = 6013
	ERROR_EFS_DISABLED                                                     = 6015
	ERROR_EFS_SERVER_NOT_TRUSTED                                           = 6011
	ERROR_EFS_VERSION_NOT_SUPPORT                                          = 6016
	ERROR_EMPTY                                                            = 4306
	ERROR_ENCRYPTION_FAILED                                                = 6000
	ERROR_END_OF_MEDIA                                                     = 1100
	ERROR_ENVVAR_NOT_FOUND                                                 = 203
	ERROR_EOM_OVERFLOW                                                     = 1129
	ERROR_EVENTLOG_CANT_START                                              = 1501
	ERROR_EVENTLOG_FILE_CHANGED                                            = 1503
	ERROR_EVENTLOG_FILE_CORRUPT                                            = 1500
	ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY                                 = 15036
	ERROR_EVT_CHANNEL_CANNOT_ACTIVATE                                      = 15025
	ERROR_EVT_CHANNEL_NOT_FOUND                                            = 15007
	ERROR_EVT_CONFIGURATION_ERROR                                          = 15010
	ERROR_EVT_EVENT_DEFINITION_NOT_FOUND                                   = 15032
	ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND                                     = 15003
	ERROR_EVT_FILTER_ALREADYSCOPED                                         = 15014
	ERROR_EVT_FILTER_INVARG                                                = 15016
	ERROR_EVT_FILTER_INVTEST                                               = 15017
	ERROR_EVT_FILTER_INVTYPE                                               = 15018
	ERROR_EVT_FILTER_NOTELTSET                                             = 15015
	ERROR_EVT_FILTER_OUT_OF_RANGE                                          = 15038
	ERROR_EVT_FILTER_PARSEERR                                              = 15019
	ERROR_EVT_FILTER_TOO_COMPLEX                                           = 15026
	ERROR_EVT_FILTER_UNEXPECTEDTOKEN                                       = 15021
	ERROR_EVT_FILTER_UNSUPPORTEDOP                                         = 15020
	ERROR_EVT_INVALID_CHANNEL_PATH                                         = 15000
	ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE                               = 15023
	ERROR_EVT_INVALID_EVENT_DATA                                           = 15005
	ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL                = 15022
	ERROR_EVT_INVALID_PUBLISHER_NAME                                       = 15004
	ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE                             = 15024
	ERROR_EVT_INVALID_QUERY                                                = 15001
	ERROR_EVT_MALFORMED_XML_TEXT                                           = 15008
	ERROR_EVT_MAX_INSERTS_REACHED                                          = 15031
	ERROR_EVT_MESSAGE_ID_NOT_FOUND                                         = 15028
	ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND                                     = 15033
	ERROR_EVT_MESSAGE_NOT_FOUND                                            = 15027
	ERROR_EVT_NON_VALIDATING_MSXML                                         = 15013
	ERROR_EVT_PUBLISHER_DISABLED                                           = 15037
	ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND                                 = 15002
	ERROR_EVT_QUERY_RESULT_INVALID_POSITION                                = 15012
	ERROR_EVT_QUERY_RESULT_STALE                                           = 15011
	ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL                               = 15009
	ERROR_EVT_UNRESOLVED_PARAMETER_INSERT                                  = 15030
	ERROR_EVT_UNRESOLVED_VALUE_INSERT                                      = 15029
	ERROR_EVT_VERSION_TOO_NEW                                              = 15035
	ERROR_EVT_VERSION_TOO_OLD                                              = 15034
	ERROR_EXCEPTION_IN_SERVICE                                             = 1064
	ERROR_EXCL_SEM_ALREADY_OWNED                                           = 101
	ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY                                  = 217
	ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY                           = 218
	ERROR_EXE_MACHINE_TYPE_MISMATCH                                        = 216
	ERROR_EXE_MARKED_INVALID                                               = 192
	ERROR_EXTENDED_ERROR                                                   = 1208
	ERROR_FAILED_SERVICE_CONTROLLER_CONNECT                                = 1063
	ERROR_FAIL_I24                                                         = 83
	ERROR_FILEMARK_DETECTED                                                = 1101
	ERROR_FILENAME_EXCED_RANGE                                             = 206
	ERROR_FILE_CHECKED_OUT                                                 = 220
	ERROR_FILE_CORRUPT                                                     = 1392
	ERROR_FILE_ENCRYPTED                                                   = 6002
	ERROR_FILE_EXISTS                                                      = 80
	ERROR_FILE_INVALID                                                     = 1006
	ERROR_FILE_NOT_ENCRYPTED                                               = 6007
	ERROR_FILE_NOT_FOUND                                                   = 2
	ERROR_FILE_OFFLINE                                                     = 4350
	ERROR_FILE_READ_ONLY                                                   = 6009
	ERROR_FILE_TOO_LARGE                                                   = 223
	ERROR_FLOPPY_BAD_REGISTERS                                             = 1125
	ERROR_FLOPPY_ID_MARK_NOT_FOUND                                         = 1122
	ERROR_FLOPPY_UNKNOWN_ERROR                                             = 1124
	ERROR_FLOPPY_WRONG_CYLINDER                                            = 1123
	ERROR_FORMS_AUTH_REQUIRED                                              = 224
	ERROR_FULLSCREEN_MODE                                                  = 1007
	ERROR_FULL_BACKUP                                                      = 4004
	ERROR_FUNCTION_FAILED                                                  = 1627
	ERROR_FUNCTION_NOT_CALLED                                              = 1626
	ERROR_GENERIC_COMMAND_FAILED                                           = 14109
	ERROR_GENERIC_NOT_MAPPED                                               = 1360
	ERROR_GEN_FAILURE                                                      = 31
	ERROR_GLOBAL_ONLY_HOOK                                                 = 1429
	ERROR_GPIO_CLIENT_INFORMATION_INVALID                                  = 15322
	ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE                                   = 15326
	ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED                                  = 15327
	ERROR_GPIO_INVALID_REGISTRATION_PACKET                                 = 15324
	ERROR_GPIO_OPERATION_DENIED                                            = 15325
	ERROR_GPIO_VERSION_NOT_SUPPORTED                                       = 15323
	ERROR_GRACEFUL_DISCONNECT                                              = 1226
	ERROR_GROUP_EXISTS                                                     = 1318
	ERROR_GROUP_NOT_AVAILABLE                                              = 5012
	ERROR_GROUP_NOT_FOUND                                                  = 5013
	ERROR_GROUP_NOT_ONLINE                                                 = 5014
	ERROR_HANDLE_DISK_FULL                                                 = 39
	ERROR_HANDLE_EOF                                                       = 38
	ERROR_HASH_NOT_PRESENT                                                 = 15301
	ERROR_HASH_NOT_SUPPORTED                                               = 15300
	ERROR_HOOK_NEEDS_HMOD                                                  = 1428
	ERROR_HOOK_NOT_INSTALLED                                               = 1431
	ERROR_HOOK_TYPE_NOT_ALLOWED                                            = 1458
	ERROR_HOST_DOWN                                                        = 1256
	ERROR_HOST_NODE_NOT_AVAILABLE                                          = 5005
	ERROR_HOST_NODE_NOT_GROUP_OWNER                                        = 5016
	ERROR_HOST_NODE_NOT_RESOURCE_OWNER                                     = 5015
	ERROR_HOST_UNREACHABLE                                                 = 1232
	ERROR_HOTKEY_ALREADY_REGISTERED                                        = 1409
	ERROR_HOTKEY_NOT_REGISTERED                                            = 1419
	ERROR_HWNDS_HAVE_DIFF_PARENT                                           = 1441
	ERROR_ICM_NOT_ENABLED                                                  = 2018
	ERROR_IEPORT_FULL                                                      = 4341
	ERROR_ILLEGAL_ELEMENT_ADDRESS                                          = 1162
	ERROR_ILL_FORMED_PASSWORD                                              = 1324
	ERROR_INCORRECT_ADDRESS                                                = 1241
	ERROR_INCORRECT_SIZE                                                   = 1462
	ERROR_INC_BACKUP                                                       = 4003
	ERROR_INDEX_ABSENT                                                     = 1611
	ERROR_INDIGENOUS_TYPE                                                  = 4338
	ERROR_INFLOOP_IN_RELOC_CHAIN                                           = 202
	ERROR_INSTALL_ALREADY_RUNNING                                          = 1618
	ERROR_INSTALL_CANCEL                                                   = 15608
	ERROR_INSTALL_DEREGISTRATION_FAILURE                                   = 15607
	ERROR_INSTALL_FAILED                                                   = 15609
	ERROR_INSTALL_FAILURE                                                  = 1603
	ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING                             = 15626
	ERROR_INSTALL_INVALID_PACKAGE                                          = 15602
	ERROR_INSTALL_LANGUAGE_UNSUPPORTED                                     = 1623
	ERROR_INSTALL_LOG_FAILURE                                              = 1622
	ERROR_INSTALL_NETWORK_FAILURE                                          = 15605
	ERROR_INSTALL_NOTUSED                                                  = 1634
	ERROR_INSTALL_OPEN_PACKAGE_FAILED                                      = 15600
	ERROR_INSTALL_OUT_OF_DISK_SPACE                                        = 15604
	ERROR_INSTALL_PACKAGE_DOWNGRADE                                        = 15622
	ERROR_INSTALL_PACKAGE_INVALID                                          = 1620
	ERROR_INSTALL_PACKAGE_NOT_FOUND                                        = 15601
	ERROR_INSTALL_PACKAGE_OPEN_FAILED                                      = 1619
	ERROR_INSTALL_PACKAGE_REJECTED                                         = 1625
	ERROR_INSTALL_PACKAGE_VERSION                                          = 1613
	ERROR_INSTALL_PLATFORM_UNSUPPORTED                                     = 1633
	ERROR_INSTALL_POLICY_FAILURE                                           = 15615
	ERROR_INSTALL_PREREQUISITE_FAILED                                      = 15613
	ERROR_INSTALL_REGISTRATION_FAILURE                                     = 15606
	ERROR_INSTALL_REMOTE_DISALLOWED                                        = 1640
	ERROR_INSTALL_REMOTE_PROHIBITED                                        = 1645
	ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED                                = 15603
	ERROR_INSTALL_SERVICE_FAILURE                                          = 1601
	ERROR_INSTALL_SOURCE_ABSENT                                            = 1612
	ERROR_INSTALL_SUSPEND                                                  = 1604
	ERROR_INSTALL_TEMP_UNWRITABLE                                          = 1632
	ERROR_INSTALL_TRANSFORM_FAILURE                                        = 1624
	ERROR_INSTALL_TRANSFORM_REJECTED                                       = 1644
	ERROR_INSTALL_UI_FAILURE                                               = 1621
	ERROR_INSTALL_USEREXIT                                                 = 1602
	ERROR_INSUFFICIENT_BUFFER                                              = 122
	ERROR_INTERNAL_DB_CORRUPTION                                           = 1358
	ERROR_INTERNAL_DB_ERROR                                                = 1383
	ERROR_INTERNAL_ERROR                                                   = 1359
	ERROR_INVALID_ACCEL_HANDLE                                             = 1403
	ERROR_INVALID_ACCESS                                                   = 12
	ERROR_INVALID_ACCOUNT_NAME                                             = 1315
	ERROR_INVALID_ACL                                                      = 1336
	ERROR_INVALID_ADDRESS                                                  = 487
	ERROR_INVALID_AT_INTERRUPT_TIME                                        = 104
	ERROR_INVALID_BLOCK                                                    = 9
	ERROR_INVALID_BLOCK_LENGTH                                             = 1106
	ERROR_INVALID_CATEGORY                                                 = 117
	ERROR_INVALID_CLEANER                                                  = 4310
	ERROR_INVALID_CMM                                                      = 2010
	ERROR_INVALID_COLORINDEX                                               = 2022
	ERROR_INVALID_COLORSPACE                                               = 2017
	ERROR_INVALID_COMBOBOX_MESSAGE                                         = 1422
	ERROR_INVALID_COMMAND_LINE                                             = 1639
	ERROR_INVALID_COMPUTERNAME                                             = 1210
	ERROR_INVALID_CURSOR_HANDLE                                            = 1402
	ERROR_INVALID_DATA                                                     = 13
	ERROR_INVALID_DATATYPE                                                 = 1804
	ERROR_INVALID_DLL                                                      = 1154
	ERROR_INVALID_DOMAINNAME                                               = 1212
	ERROR_INVALID_DOMAIN_ROLE                                              = 1354
	ERROR_INVALID_DOMAIN_STATE                                             = 1353
	ERROR_INVALID_DRIVE                                                    = 15
	ERROR_INVALID_DRIVE_OBJECT                                             = 4321
	ERROR_INVALID_DWP_HANDLE                                               = 1405
	ERROR_INVALID_EA_HANDLE                                                = 278
	ERROR_INVALID_EA_NAME                                                  = 254
	ERROR_INVALID_EDIT_HEIGHT                                              = 1424
	ERROR_INVALID_ENVIRONMENT                                              = 1805
	ERROR_INVALID_EVENTNAME                                                = 1211
	ERROR_INVALID_EVENT_COUNT                                              = 151
	ERROR_INVALID_EXE_SIGNATURE                                            = 191
	ERROR_INVALID_FIELD                                                    = 1616
	ERROR_INVALID_FILTER_PROC                                              = 1427
	ERROR_INVALID_FLAGS                                                    = 1004
	ERROR_INVALID_FLAG_NUMBER                                              = 186
	ERROR_INVALID_FORM_NAME                                                = 1902
	ERROR_INVALID_FORM_SIZE                                                = 1903
	ERROR_INVALID_FUNCTION                                                 = 1
	ERROR_INVALID_GROUPNAME                                                = 1209
	ERROR_INVALID_GROUP_ATTRIBUTES                                         = 1345
	ERROR_INVALID_GW_COMMAND                                               = 1443
	ERROR_INVALID_HANDLE                                                   = 6
	ERROR_INVALID_HANDLE_STATE                                             = 1609
	ERROR_INVALID_HOOK_FILTER                                              = 1426
	ERROR_INVALID_HOOK_HANDLE                                              = 1404
	ERROR_INVALID_ICON_HANDLE                                              = 1414
	ERROR_INVALID_ID_AUTHORITY                                             = 1343
	ERROR_INVALID_IMPORT_OF_NON_DLL                                        = 1276
	ERROR_INVALID_INDEX                                                    = 1413
	ERROR_INVALID_KEYBOARD_HANDLE                                          = 1457
	ERROR_INVALID_LB_MESSAGE                                               = 1432
	ERROR_INVALID_LEVEL                                                    = 124
	ERROR_INVALID_LIBRARY                                                  = 4301
	ERROR_INVALID_LIST_FORMAT                                              = 153
	ERROR_INVALID_LOGON_HOURS                                              = 1328
	ERROR_INVALID_LOGON_TYPE                                               = 1367
	ERROR_INVALID_MEDIA                                                    = 4300
	ERROR_INVALID_MEDIA_POOL                                               = 4302
	ERROR_INVALID_MEMBER                                                   = 1388
	ERROR_INVALID_MENU_HANDLE                                              = 1401
	ERROR_INVALID_MESSAGE                                                  = 1002
	ERROR_INVALID_MESSAGEDEST                                              = 1218
	ERROR_INVALID_MESSAGENAME                                              = 1217
	ERROR_INVALID_MINALLOCSIZE                                             = 195
	ERROR_INVALID_MODULETYPE                                               = 190
	ERROR_INVALID_MONITOR_HANDLE                                           = 1461
	ERROR_INVALID_MSGBOX_STYLE                                             = 1438
	ERROR_INVALID_NAME                                                     = 123
	ERROR_INVALID_NETNAME                                                  = 1214
	ERROR_INVALID_OPERATION                                                = 4317
	ERROR_INVALID_OPERATION_ON_QUORUM                                      = 5068
	ERROR_INVALID_OPLOCK_PROTOCOL                                          = 301
	ERROR_INVALID_ORDINAL                                                  = 182
	ERROR_INVALID_OWNER                                                    = 1307
	ERROR_INVALID_PARAMETER                                                = 87
	ERROR_INVALID_PASSWORD                                                 = 86
	ERROR_INVALID_PASSWORDNAME                                             = 1216
	ERROR_INVALID_PIXEL_FORMAT                                             = 2000
	ERROR_INVALID_PRIMARY_GROUP                                            = 1308
	ERROR_INVALID_PRINTER_COMMAND                                          = 1803
	ERROR_INVALID_PRINTER_NAME                                             = 1801
	ERROR_INVALID_PRINTER_STATE                                            = 1906
	ERROR_INVALID_PRINT_MONITOR                                            = 3007
	ERROR_INVALID_PRIORITY                                                 = 1800
	ERROR_INVALID_PROFILE                                                  = 2011
	ERROR_INVALID_REPARSE_DATA                                             = 4392
	ERROR_INVALID_RUNLEVEL_SETTING                                         = 15401
	ERROR_INVALID_SCROLLBAR_RANGE                                          = 1448
	ERROR_INVALID_SECURITY_DESCR                                           = 1338
	ERROR_INVALID_SEGDPL                                                   = 198
	ERROR_INVALID_SEGMENT_NUMBER                                           = 180
	ERROR_INVALID_SEPARATOR_FILE                                           = 1799
	ERROR_INVALID_SERVER_STATE                                             = 1352
	ERROR_INVALID_SERVICENAME                                              = 1213
	ERROR_INVALID_SERVICE_ACCOUNT                                          = 1057
	ERROR_INVALID_SERVICE_CONTROL                                          = 1052
	ERROR_INVALID_SERVICE_LOCK                                             = 1071
	ERROR_INVALID_SHARENAME                                                = 1215
	ERROR_INVALID_SHOWWIN_COMMAND                                          = 1449
	ERROR_INVALID_SID                                                      = 1337
	ERROR_INVALID_SIGNAL_NUMBER                                            = 209
	ERROR_INVALID_SPI_VALUE                                                = 1439
	ERROR_INVALID_STACKSEG                                                 = 189
	ERROR_INVALID_STAGED_SIGNATURE                                         = 15620
	ERROR_INVALID_STARTING_CODESEG                                         = 188
	ERROR_INVALID_STATE                                                    = 5023
	ERROR_INVALID_SUB_AUTHORITY                                            = 1335
	ERROR_INVALID_TABLE                                                    = 1628
	ERROR_INVALID_TARGET_HANDLE                                            = 114
	ERROR_INVALID_THREAD_ID                                                = 1444
	ERROR_INVALID_TIME                                                     = 1901
	ERROR_INVALID_TOKEN                                                    = 315
	ERROR_INVALID_TRANSFORM                                                = 2020
	ERROR_INVALID_USER_BUFFER                                              = 1784
	ERROR_INVALID_VERIFY_SWITCH                                            = 118
	ERROR_INVALID_WINDOW_HANDLE                                            = 1400
	ERROR_INVALID_WINDOW_STYLE                                             = 2002
	ERROR_INVALID_WORKSTATION                                              = 1329
	ERROR_IOPL_NOT_ENABLED                                                 = 197
	ERROR_IO_DEVICE                                                        = 1117
	ERROR_IO_INCOMPLETE                                                    = 996
	ERROR_IO_PENDING                                                       = 997
	ERROR_IPSEC_AUTH_FIREWALL_DROP                                         = 13917
	ERROR_IPSEC_BAD_SPI                                                    = 13910
	ERROR_IPSEC_CLEAR_TEXT_DROP                                            = 13916
	ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND                                  = 13014
	ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND                                = 13013
	ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND                                = 13015
	ERROR_IPSEC_DOSP_BLOCK                                                 = 13925
	ERROR_IPSEC_DOSP_INVALID_PACKET                                        = 13927
	ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED                                    = 13930
	ERROR_IPSEC_DOSP_MAX_ENTRIES                                           = 13929
	ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES                           = 13932
	ERROR_IPSEC_DOSP_NOT_INSTALLED                                         = 13931
	ERROR_IPSEC_DOSP_RECEIVED_MULTICAST                                    = 13926
	ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED                                   = 13928
	ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED                                  = 13860
	ERROR_IPSEC_IKE_ATTRIB_FAIL                                            = 13802
	ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE                                  = 13905
	ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY              = 13907
	ERROR_IPSEC_IKE_AUTH_FAIL                                              = 13801
	ERROR_IPSEC_IKE_BENIGN_REINIT                                          = 13878
	ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH                             = 13887
	ERROR_IPSEC_IKE_CGA_AUTH_FAILED                                        = 13892
	ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS                                   = 13902
	ERROR_IPSEC_IKE_CRL_FAILED                                             = 13817
	ERROR_IPSEC_IKE_DECRYPT                                                = 13867
	ERROR_IPSEC_IKE_DH_FAIL                                                = 13822
	ERROR_IPSEC_IKE_DH_FAILURE                                             = 13864
	ERROR_IPSEC_IKE_DOS_COOKIE_SENT                                        = 13890
	ERROR_IPSEC_IKE_DROP_NO_RESPONSE                                       = 13813
	ERROR_IPSEC_IKE_ENCRYPT                                                = 13866
	ERROR_IPSEC_IKE_ERROR                                                  = 13816
	ERROR_IPSEC_IKE_FAILQUERYSSP                                           = 13854
	ERROR_IPSEC_IKE_FAILSSPINIT                                            = 13853
	ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR                               = 13804
	ERROR_IPSEC_IKE_GETSPIFAIL                                             = 13857
	ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE                            = 13899
	ERROR_IPSEC_IKE_INVALID_AUTH_ALG                                       = 13874
	ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD                                   = 13889
	ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN                                    = 13881
	ERROR_IPSEC_IKE_INVALID_CERT_TYPE                                      = 13819
	ERROR_IPSEC_IKE_INVALID_COOKIE                                         = 13846
	ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG                                    = 13873
	ERROR_IPSEC_IKE_INVALID_FILTER                                         = 13858
	ERROR_IPSEC_IKE_INVALID_GROUP                                          = 13865
	ERROR_IPSEC_IKE_INVALID_HASH                                           = 13870
	ERROR_IPSEC_IKE_INVALID_HASH_ALG                                       = 13871
	ERROR_IPSEC_IKE_INVALID_HASH_SIZE                                      = 13872
	ERROR_IPSEC_IKE_INVALID_HEADER                                         = 13824
	ERROR_IPSEC_IKE_INVALID_KEY_USAGE                                      = 13818
	ERROR_IPSEC_IKE_INVALID_MM_FOR_QM                                      = 13894
	ERROR_IPSEC_IKE_INVALID_PAYLOAD                                        = 13843
	ERROR_IPSEC_IKE_INVALID_POLICY                                         = 13861
	ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY                      = 13879
	ERROR_IPSEC_IKE_INVALID_SIG                                            = 13875
	ERROR_IPSEC_IKE_INVALID_SIGNATURE                                      = 13826
	ERROR_IPSEC_IKE_INVALID_SITUATION                                      = 13863
	ERROR_IPSEC_IKE_KERBEROS_ERROR                                         = 13827
	ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL                                  = 13898
	ERROR_IPSEC_IKE_LOAD_FAILED                                            = 13876
	ERROR_IPSEC_IKE_LOAD_SOFT_SA                                           = 13844
	ERROR_IPSEC_IKE_MM_ACQUIRE_DROP                                        = 13809
	ERROR_IPSEC_IKE_MM_DELAY_DROP                                          = 13814
	ERROR_IPSEC_IKE_MM_EXPIRED                                             = 13885
	ERROR_IPSEC_IKE_MM_LIMIT                                               = 13882
	ERROR_IPSEC_IKE_NEGOTIATION_DISABLED                                   = 13883
	ERROR_IPSEC_IKE_NEGOTIATION_PENDING                                    = 13803
	ERROR_IPSEC_IKE_NEG_STATUS_BEGIN                                       = 13800
	ERROR_IPSEC_IKE_NEG_STATUS_END                                         = 13897
	ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END                                = 13909
	ERROR_IPSEC_IKE_NOTCBPRIV                                              = 13851
	ERROR_IPSEC_IKE_NO_CERT                                                = 13806
	ERROR_IPSEC_IKE_NO_MM_POLICY                                           = 13850
	ERROR_IPSEC_IKE_NO_PEER_CERT                                           = 13847
	ERROR_IPSEC_IKE_NO_POLICY                                              = 13825
	ERROR_IPSEC_IKE_NO_PRIVATE_KEY                                         = 13820
	ERROR_IPSEC_IKE_NO_PUBLIC_KEY                                          = 13828
	ERROR_IPSEC_IKE_OUT_OF_MEMORY                                          = 13859
	ERROR_IPSEC_IKE_PEER_CRL_FAILED                                        = 13848
	ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE                             = 13904
	ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID                                = 13886
	ERROR_IPSEC_IKE_POLICY_CHANGE                                          = 13849
	ERROR_IPSEC_IKE_POLICY_MATCH                                           = 13868
	ERROR_IPSEC_IKE_PROCESS_ERR                                            = 13829
	ERROR_IPSEC_IKE_PROCESS_ERR_CERT                                       = 13835
	ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ                                   = 13836
	ERROR_IPSEC_IKE_PROCESS_ERR_DELETE                                     = 13841
	ERROR_IPSEC_IKE_PROCESS_ERR_HASH                                       = 13837
	ERROR_IPSEC_IKE_PROCESS_ERR_ID                                         = 13834
	ERROR_IPSEC_IKE_PROCESS_ERR_KE                                         = 13833
	ERROR_IPSEC_IKE_PROCESS_ERR_NATOA                                      = 13893
	ERROR_IPSEC_IKE_PROCESS_ERR_NONCE                                      = 13839
	ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY                                     = 13840
	ERROR_IPSEC_IKE_PROCESS_ERR_PROP                                       = 13831
	ERROR_IPSEC_IKE_PROCESS_ERR_SA                                         = 13830
	ERROR_IPSEC_IKE_PROCESS_ERR_SIG                                        = 13838
	ERROR_IPSEC_IKE_PROCESS_ERR_TRANS                                      = 13832
	ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR                                     = 13842
	ERROR_IPSEC_IKE_QM_ACQUIRE_DROP                                        = 13810
	ERROR_IPSEC_IKE_QM_DELAY_DROP                                          = 13815
	ERROR_IPSEC_IKE_QM_EXPIRED                                             = 13895
	ERROR_IPSEC_IKE_QM_LIMIT                                               = 13884
	ERROR_IPSEC_IKE_QUEUE_DROP_MM                                          = 13811
	ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM                                       = 13812
	ERROR_IPSEC_IKE_RATELIMIT_DROP                                         = 13903
	ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING                             = 13900
	ERROR_IPSEC_IKE_RPC_DELETE                                             = 13877
	ERROR_IPSEC_IKE_SA_DELETED                                             = 13807
	ERROR_IPSEC_IKE_SA_REAPED                                              = 13808
	ERROR_IPSEC_IKE_SECLOADFAIL                                            = 13852
	ERROR_IPSEC_IKE_SHUTTING_DOWN                                          = 13891
	ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN                                      = 13845
	ERROR_IPSEC_IKE_SRVACQFAIL                                             = 13855
	ERROR_IPSEC_IKE_SRVQUERYCRED                                           = 13856
	ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE          = 13908
	ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE                      = 13906
	ERROR_IPSEC_IKE_TIMED_OUT                                              = 13805
	ERROR_IPSEC_IKE_TOO_MANY_FILTERS                                       = 13896
	ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID                                  = 13888
	ERROR_IPSEC_IKE_UNKNOWN_DOI                                            = 13862
	ERROR_IPSEC_IKE_UNSUPPORTED_ID                                         = 13869
	ERROR_IPSEC_INTEGRITY_CHECK_FAILED                                     = 13915
	ERROR_IPSEC_INVALID_PACKET                                             = 13914
	ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING               = 13901
	ERROR_IPSEC_MM_AUTH_EXISTS                                             = 13010
	ERROR_IPSEC_MM_AUTH_IN_USE                                             = 13012
	ERROR_IPSEC_MM_AUTH_NOT_FOUND                                          = 13011
	ERROR_IPSEC_MM_AUTH_PENDING_DELETION                                   = 13022
	ERROR_IPSEC_MM_FILTER_EXISTS                                           = 13006
	ERROR_IPSEC_MM_FILTER_NOT_FOUND                                        = 13007
	ERROR_IPSEC_MM_FILTER_PENDING_DELETION                                 = 13018
	ERROR_IPSEC_MM_POLICY_EXISTS                                           = 13003
	ERROR_IPSEC_MM_POLICY_IN_USE                                           = 13005
	ERROR_IPSEC_MM_POLICY_NOT_FOUND                                        = 13004
	ERROR_IPSEC_MM_POLICY_PENDING_DELETION                                 = 13021
	ERROR_IPSEC_QM_POLICY_EXISTS                                           = 13000
	ERROR_IPSEC_QM_POLICY_IN_USE                                           = 13002
	ERROR_IPSEC_QM_POLICY_NOT_FOUND                                        = 13001
	ERROR_IPSEC_QM_POLICY_PENDING_DELETION                                 = 13023
	ERROR_IPSEC_REPLAY_CHECK_FAILED                                        = 13913
	ERROR_IPSEC_SA_LIFETIME_EXPIRED                                        = 13911
	ERROR_IPSEC_THROTTLE_DROP                                              = 13918
	ERROR_IPSEC_TRANSPORT_FILTER_EXISTS                                    = 13008
	ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND                                 = 13009
	ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION                          = 13019
	ERROR_IPSEC_TUNNEL_FILTER_EXISTS                                       = 13016
	ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND                                    = 13017
	ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION                             = 13020
	ERROR_IPSEC_WRONG_SA                                                   = 13912
	ERROR_IRQ_BUSY                                                         = 1119
	ERROR_IS_JOINED                                                        = 134
	ERROR_IS_JOIN_PATH                                                     = 147
	ERROR_IS_JOIN_TARGET                                                   = 133
	ERROR_IS_SUBSTED                                                       = 135
	ERROR_IS_SUBST_PATH                                                    = 146
	ERROR_IS_SUBST_TARGET                                                  = 149
	ERROR_ITERATED_DATA_EXCEEDS_64k                                        = 194
	ERROR_JOIN_TO_JOIN                                                     = 138
	ERROR_JOIN_TO_SUBST                                                    = 140
	ERROR_JOURNAL_DELETE_IN_PROGRESS                                       = 1178
	ERROR_JOURNAL_ENTRY_DELETED                                            = 1181
	ERROR_JOURNAL_HOOK_SET                                                 = 1430
	ERROR_JOURNAL_NOT_ACTIVE                                               = 1179
	ERROR_KERNEL_APC                                                       = 738
	ERROR_KEY_DELETED                                                      = 1018
	ERROR_KEY_HAS_CHILDREN                                                 = 1020
	ERROR_KM_DRIVER_BLOCKED                                                = 1930
	ERROR_LABEL_TOO_LONG                                                   = 154
	ERROR_LAST_ADMIN                                                       = 1322
	ERROR_LB_WITHOUT_TABSTOPS                                              = 1434
	ERROR_LIBRARY_FULL                                                     = 4322
	ERROR_LIBRARY_OFFLINE                                                  = 4305
	ERROR_LICENSE_QUOTA_EXCEEDED                                           = 1395
	ERROR_LISTBOX_ID_NOT_FOUND                                             = 1416
	ERROR_LM_CROSS_ENCRYPTION_REQUIRED                                     = 1390
	ERROR_LOCAL_USER_SESSION_KEY                                           = 1303
	ERROR_LOCKED                                                           = 212
	ERROR_LOCK_FAILED                                                      = 167
	ERROR_LOCK_VIOLATION                                                   = 33
	ERROR_LOGIN_TIME_RESTRICTION                                           = 1239
	ERROR_LOGIN_WKSTA_RESTRICTION                                          = 1240
	ERROR_LOGON_FAILURE                                                    = 1326
	ERROR_LOGON_NOT_GRANTED                                                = 1380
	ERROR_LOGON_SESSION_COLLISION                                          = 1366
	ERROR_LOGON_SESSION_EXISTS                                             = 1363
	ERROR_LOGON_TYPE_NOT_GRANTED                                           = 1385
	ERROR_LOG_FILE_FULL                                                    = 1502
	ERROR_LUIDS_EXHAUSTED                                                  = 1334
	ERROR_MACHINE_LOCKED                                                   = 1271
	ERROR_MAGAZINE_NOT_PRESENT                                             = 1163
	ERROR_MALFORMED_SUBSTITUTION_STRING                                    = 14094
	ERROR_MAPPED_ALIGNMENT                                                 = 1132
	ERROR_MAX_THRDS_REACHED                                                = 164
	ERROR_MCA_INTERNAL_ERROR                                               = 15205
	ERROR_MCA_INVALID_CAPABILITIES_STRING                                  = 15200
	ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED                             = 15206
	ERROR_MCA_INVALID_VCP_VERSION                                          = 15201
	ERROR_MCA_MCCS_VERSION_MISMATCH                                        = 15203
	ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION                          = 15202
	ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE                                = 15207
	ERROR_MCA_UNSUPPORTED_MCCS_VERSION                                     = 15204
	ERROR_MEDIA_CHANGED                                                    = 1110
	ERROR_MEDIA_INCOMPATIBLE                                               = 4315
	ERROR_MEDIA_NOT_AVAILABLE                                              = 4318
	ERROR_MEDIA_OFFLINE                                                    = 4304
	ERROR_MEDIA_UNAVAILABLE                                                = 4308
	ERROR_MEDIUM_NOT_ACCESSIBLE                                            = 4323
	ERROR_MEMBERS_PRIMARY_GROUP                                            = 1374
	ERROR_MEMBER_IN_ALIAS                                                  = 1378
	ERROR_MEMBER_IN_GROUP                                                  = 1320
	ERROR_MEMBER_NOT_IN_ALIAS                                              = 1377
	ERROR_MEMBER_NOT_IN_GROUP                                              = 1321
	ERROR_MENU_ITEM_NOT_FOUND                                              = 1456
	ERROR_MESSAGE_EXCEEDS_MAX_SIZE                                         = 4336
	ERROR_MESSAGE_SYNC_ONLY                                                = 1159
	ERROR_METAFILE_NOT_SUPPORTED                                           = 2003
	ERROR_META_EXPANSION_TOO_LONG                                          = 208
	ERROR_MOD_NOT_FOUND                                                    = 126
	ERROR_MORE_DATA                                                        = 234
	ERROR_MORE_WRITES                                                      = 1120
	ERROR_MRM_AUTOMERGE_ENABLED                                            = 15139
	ERROR_MRM_DUPLICATE_ENTRY                                              = 15119
	ERROR_MRM_DUPLICATE_MAP_NAME                                           = 15118
	ERROR_MRM_FILEPATH_TOO_LONG                                            = 15121
	ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE                                = 15138
	ERROR_MRM_INVALID_FILE_TYPE                                            = 15112
	ERROR_MRM_INVALID_PRICONFIG                                            = 15111
	ERROR_MRM_INVALID_PRI_FILE                                             = 15126
	ERROR_MRM_INVALID_QUALIFIER_OPERATOR                                   = 15137
	ERROR_MRM_INVALID_QUALIFIER_VALUE                                      = 15114
	ERROR_MRM_INVALID_RESOURCE_IDENTIFIER                                  = 15120
	ERROR_MRM_MAP_NOT_FOUND                                                = 15135
	ERROR_MRM_NAMED_RESOURCE_NOT_FOUND                                     = 15127
	ERROR_MRM_NO_CANDIDATE                                                 = 15115
	ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE                                = 15116
	ERROR_MRM_RESOURCE_TYPE_MISMATCH                                       = 15117
	ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE                       = 15110
	ERROR_MRM_TOO_MANY_RESOURCES                                           = 15140
	ERROR_MRM_UNKNOWN_QUALIFIER                                            = 15113
	ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE                                   = 15122
	ERROR_MRM_UNSUPPORTED_PROFILE_TYPE                                     = 15136
	ERROR_MR_MID_NOT_FOUND                                                 = 317
	ERROR_MUI_FILE_NOT_FOUND                                               = 15100
	ERROR_MUI_FILE_NOT_LOADED                                              = 15105
	ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME                             = 15108
	ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED                            = 15107
	ERROR_MUI_INVALID_FILE                                                 = 15101
	ERROR_MUI_INVALID_LOCALE_NAME                                          = 15103
	ERROR_MUI_INVALID_RC_CONFIG                                            = 15102
	ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME                                = 15104
	ERROR_MUTUAL_AUTH_FAILED                                               = 1397
	ERROR_NEEDS_REMEDIATION                                                = 15612
	ERROR_NEGATIVE_SEEK                                                    = 131
	ERROR_NESTING_NOT_ALLOWED                                              = 215
	ERROR_NETLOGON_NOT_STARTED                                             = 1792
	ERROR_NETNAME_DELETED                                                  = 64
	ERROR_NETWORK_ACCESS_DENIED                                            = 65
	ERROR_NETWORK_BUSY                                                     = 54
	ERROR_NETWORK_NOT_AVAILABLE                                            = 5035
	ERROR_NETWORK_UNREACHABLE                                              = 1231
	ERROR_NET_WRITE_FAULT                                                  = 88
	ERROR_NOACCESS                                                         = 998
	ERROR_NODE_CANNOT_BE_CLUSTERED                                         = 5898
	ERROR_NODE_CANT_HOST_RESOURCE                                          = 5071
	ERROR_NODE_NOT_AVAILABLE                                               = 5036
	ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT                                = 1807
	ERROR_NOLOGON_SERVER_TRUST_ACCOUNT                                     = 1809
	ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT                                = 1808
	ERROR_NONE_MAPPED                                                      = 1332
	ERROR_NONPAGED_SYSTEM_RESOURCES                                        = 1451
	ERROR_NON_ACCOUNT_SID                                                  = 1257
	ERROR_NON_DOMAIN_SID                                                   = 1258
	ERROR_NON_MDICHILD_WINDOW                                              = 1445
	ERROR_NOTIFY_ENUM_DIR                                                  = 1022
	ERROR_NOT_ALL_ASSIGNED                                                 = 1300
	ERROR_NOT_AUTHENTICATED                                                = 1244
	ERROR_NOT_A_REPARSE_POINT                                              = 4390
	ERROR_NOT_CHILD_WINDOW                                                 = 1442
	ERROR_NOT_CONNECTED                                                    = 2250
	ERROR_NOT_CONTAINER                                                    = 1207
	ERROR_NOT_DOS_DISK                                                     = 26
	ERROR_NOT_EMPTY                                                        = 4307
	ERROR_NOT_ENOUGH_MEMORY                                                = 8
	ERROR_NOT_ENOUGH_QUOTA                                                 = 1816
	ERROR_NOT_ENOUGH_SERVER_MEMORY                                         = 1130
	ERROR_NOT_EXPORT_FORMAT                                                = 6008
	ERROR_NOT_FOUND                                                        = 1168
	ERROR_NOT_GUI_PROCESS                                                  = 1471
	ERROR_NOT_JOINED                                                       = 136
	ERROR_NOT_LOCKED                                                       = 158
	ERROR_NOT_LOGGED_ON                                                    = 1245
	ERROR_NOT_LOGON_PROCESS                                                = 1362
	ERROR_NOT_OWNER                                                        = 288
	ERROR_NOT_QUORUM_CAPABLE                                               = 5021
	ERROR_NOT_QUORUM_CLASS                                                 = 5025
	ERROR_NOT_READY                                                        = 21
	ERROR_NOT_REGISTRY_FILE                                                = 1017
	ERROR_NOT_SAFEBOOT_SERVICE                                             = 1084
	ERROR_NOT_SAME_DEVICE                                                  = 17
	ERROR_NOT_SUBSTED                                                      = 137
	ERROR_NOT_SUPPORTED                                                    = 50
	ERROR_NOT_SUPPORTED_ON_SBS                                             = 1254
	ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER                                 = 8584
	ERROR_NO_ASSOCIATION                                                   = 1155
	ERROR_NO_BROWSER_SERVERS_FOUND                                         = 6118
	ERROR_NO_DATA                                                          = 232
	ERROR_NO_DATA_DETECTED                                                 = 1104
	ERROR_NO_EFS                                                           = 6004
	ERROR_NO_IMPERSONATION_TOKEN                                           = 1309
	ERROR_NO_INHERITANCE                                                   = 1391
	ERROR_NO_LOGON_SERVERS                                                 = 1311
	ERROR_NO_LOG_SPACE                                                     = 1019
	ERROR_NO_MATCH                                                         = 1169
	ERROR_NO_MEDIA_IN_DRIVE                                                = 1112
	ERROR_NO_MORE_DEVICES                                                  = 1248
	ERROR_NO_MORE_FILES                                                    = 18
	ERROR_NO_MORE_ITEMS                                                    = 259
	ERROR_NO_MORE_SEARCH_HANDLES                                           = 113
	ERROR_NO_MORE_USER_HANDLES                                             = 1158
	ERROR_NO_NETWORK                                                       = 1222
	ERROR_NO_NET_OR_BAD_PATH                                               = 1203
	ERROR_NO_NVRAM_RESOURCES                                               = 1470
	ERROR_NO_PROC_SLOTS                                                    = 89
	ERROR_NO_PROMOTION_ACTIVE                                              = 8222
	ERROR_NO_QUOTAS_FOR_ACCOUNT                                            = 1302
	ERROR_NO_RECOVERY_POLICY                                               = 6003
	ERROR_NO_RECOVERY_PROGRAM                                              = 1082
	ERROR_NO_SCROLLBARS                                                    = 1447
	ERROR_NO_SECURITY_ON_OBJECT                                            = 1350
	ERROR_NO_SHUTDOWN_IN_PROGRESS                                          = 1116
	ERROR_NO_SIGNAL_SENT                                                   = 205
	ERROR_NO_SITENAME                                                      = 1919
	ERROR_NO_SPOOL_SPACE                                                   = 62
	ERROR_NO_SUCH_ALIAS                                                    = 1376
	ERROR_NO_SUCH_DOMAIN                                                   = 1355
	ERROR_NO_SUCH_GROUP                                                    = 1319
	ERROR_NO_SUCH_LOGON_SESSION                                            = 1312
	ERROR_NO_SUCH_MEMBER                                                   = 1387
	ERROR_NO_SUCH_PACKAGE                                                  = 1364
	ERROR_NO_SUCH_PRIVILEGE                                                = 1313
	ERROR_NO_SUCH_SITE                                                     = 1249
	ERROR_NO_SUCH_USER                                                     = 1317
	ERROR_NO_SUPPORTING_DRIVES                                             = 4339
	ERROR_NO_SYSTEM_MENU                                                   = 1437
	ERROR_NO_SYSTEM_RESOURCES                                              = 1450
	ERROR_NO_TOKEN                                                         = 1008
	ERROR_NO_TRACKING_SERVICE                                              = 1172
	ERROR_NO_TRUST_LSA_SECRET                                              = 1786
	ERROR_NO_TRUST_SAM_ACCOUNT                                             = 1787
	ERROR_NO_UNICODE_TRANSLATION                                           = 1113
	ERROR_NO_USER_KEYS                                                     = 6006
	ERROR_NO_USER_SESSION_KEY                                              = 1394
	ERROR_NO_VOLUME_ID                                                     = 1173
	ERROR_NO_VOLUME_LABEL                                                  = 125
	ERROR_NO_WILDCARD_CHARACTERS                                           = 1417
	ERROR_NT_CROSS_ENCRYPTION_REQUIRED                                     = 1386
	ERROR_NULL_LM_PASSWORD                                                 = 1304
	ERROR_OBJECT_ALREADY_EXISTS                                            = 5010
	ERROR_OBJECT_IN_LIST                                                   = 5011
	ERROR_OBJECT_NOT_FOUND                                                 = 4312
	ERROR_OLD_WIN_VERSION                                                  = 1150
	ERROR_ONLY_IF_CONNECTED                                                = 1251
	ERROR_OPEN_FAILED                                                      = 110
	ERROR_OPEN_FILES                                                       = 2401
	ERROR_OPERATION_ABORTED                                                = 995
	ERROR_OPLOCK_NOT_GRANTED                                               = 300
	ERROR_OUTOFMEMORY                                                      = 14
	ERROR_OUT_OF_PAPER                                                     = 28
	ERROR_OUT_OF_STRUCTURES                                                = 84
	ERROR_OVERRIDE_NOCHANGES                                               = 1252
	ERROR_PACKAGES_IN_USE                                                  = 15618
	ERROR_PACKAGE_ALREADY_EXISTS                                           = 15611
	ERROR_PACKAGE_REPOSITORY_CORRUPTED                                     = 15614
	ERROR_PACKAGE_UPDATING                                                 = 15616
	ERROR_PAGED_SYSTEM_RESOURCES                                           = 1452
	ERROR_PAGEFILE_QUOTA                                                   = 1454
	ERROR_PARAMETER_QUOTA_EXCEEDED                                         = 1283
	ERROR_PARTIAL_COPY                                                     = 299
	ERROR_PARTITION_FAILURE                                                = 1105
	ERROR_PASSWORD_EXPIRED                                                 = 1330
	ERROR_PASSWORD_MUST_CHANGE                                             = 1907
	ERROR_PASSWORD_RESTRICTION                                             = 1325
	ERROR_PATCH_PACKAGE_INVALID                                            = 1636
	ERROR_PATCH_PACKAGE_OPEN_FAILED                                        = 1635
	ERROR_PATCH_PACKAGE_REJECTED                                           = 1643
	ERROR_PATCH_PACKAGE_UNSUPPORTED                                        = 1637
	ERROR_PATCH_TARGET_NOT_FOUND                                           = 1642
	ERROR_PATH_BUSY                                                        = 148
	ERROR_PATH_NOT_FOUND                                                   = 3
	ERROR_PER_USER_TRUST_QUOTA_EXCEEDED                                    = 1932
	ERROR_PIPE_BUSY                                                        = 231
	ERROR_PIPE_CONNECTED                                                   = 535
	ERROR_PIPE_LISTENING                                                   = 536
	ERROR_PIPE_LOCAL                                                       = 229
	ERROR_PIPE_NOT_CONNECTED                                               = 233
	ERROR_PKINIT_FAILURE                                                   = 1263
	ERROR_POINT_NOT_FOUND                                                  = 1171
	ERROR_POLICY_OBJECT_NOT_FOUND                                          = 8219
	ERROR_POLICY_ONLY_IN_DS                                                = 8220
	ERROR_POPUP_ALREADY_ACTIVE                                             = 1446
	ERROR_PORT_UNREACHABLE                                                 = 1234
	ERROR_POSSIBLE_DEADLOCK                                                = 1131
	ERROR_POTENTIAL_FILE_FOUND                                             = 1180
	ERROR_PRINTER_ALREADY_EXISTS                                           = 1802
	ERROR_PRINTER_DELETED                                                  = 1905
	ERROR_PRINTER_DRIVER_ALREADY_INSTALLED                                 = 1795
	ERROR_PRINTER_DRIVER_BLOCKED                                           = 3014
	ERROR_PRINTER_DRIVER_IN_USE                                            = 3001
	ERROR_PRINTER_DRIVER_WARNED                                            = 3013
	ERROR_PRINTER_HAS_JOBS_QUEUED                                          = 3009
	ERROR_PRINTER_NOT_FOUND                                                = 3012
	ERROR_PRINTQ_FULL                                                      = 61
	ERROR_PRINT_CANCELLED                                                  = 63
	ERROR_PRINT_MONITOR_ALREADY_INSTALLED                                  = 3006
	ERROR_PRINT_MONITOR_IN_USE                                             = 3008
	ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED                                = 3005
	ERROR_PRIVATE_DIALOG_INDEX                                             = 1415
	ERROR_PRIVILEGE_NOT_HELD                                               = 1314
	ERROR_PROCESS_ABORTED                                                  = 1067
	ERROR_PROC_NOT_FOUND                                                   = 127
	ERROR_PRODUCT_UNINSTALLED                                              = 1614
	ERROR_PRODUCT_VERSION                                                  = 1638
	ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE                               = 2015
	ERROR_PROFILE_NOT_FOUND                                                = 2016
	ERROR_PROMOTION_ACTIVE                                                 = 8221
	ERROR_PROTOCOL_UNREACHABLE                                             = 1233
	ERROR_QUORUMLOG_OPEN_FAILED                                            = 5028
	ERROR_QUORUM_DISK_NOT_FOUND                                            = 5086
	ERROR_QUORUM_OWNER_ALIVE                                               = 5034
	ERROR_QUORUM_RESOURCE                                                  = 5020
	ERROR_QUORUM_RESOURCE_ONLINE_FAILED                                    = 5027
	ERROR_READ_FAULT                                                       = 30
	ERROR_RECOVERY_FAILURE                                                 = 1279
	ERROR_RECOVERY_FILE_CORRUPT                                            = 15619
	ERROR_REC_NON_EXISTENT                                                 = 4005
	ERROR_REDIRECTOR_HAS_OPEN_HANDLES                                      = 1794
	ERROR_REDIR_PAUSED                                                     = 72
	ERROR_REGISTRY_CORRUPT                                                 = 1015
	ERROR_REGISTRY_IO_FAILED                                               = 1016
	ERROR_REGISTRY_RECOVERED                                               = 1014
	ERROR_REG_NAT_CONSUMPTION                                              = 1261
	ERROR_RELOC_CHAIN_XEEDS_SEGLIM                                         = 201
	ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED                                 = 1936
	ERROR_REMOTE_SESSION_LIMIT_EXCEEDED                                    = 1220
	ERROR_REMOTE_STORAGE_MEDIA_ERROR                                       = 4352
	ERROR_REMOTE_STORAGE_NOT_ACTIVE                                        = 4351
	ERROR_REMOVE_FAILED                                                    = 15610
	ERROR_REM_NOT_LIST                                                     = 51
	ERROR_REPARSE_ATTRIBUTE_CONFLICT                                       = 4391
	ERROR_REPARSE_TAG_INVALID                                              = 4393
	ERROR_REPARSE_TAG_MISMATCH                                             = 4394
	ERROR_REQUEST_ABORTED                                                  = 1235
	ERROR_REQUEST_REFUSED                                                  = 4320
	ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION                               = 1459
	ERROR_REQ_NOT_ACCEP                                                    = 71
	ERROR_RESILIENCY_FILE_CORRUPT                                          = 15625
	ERROR_RESMON_CREATE_FAILED                                             = 5017
	ERROR_RESMON_INVALID_STATE                                             = 5084
	ERROR_RESMON_ONLINE_FAILED                                             = 5018
	ERROR_RESOURCE_DATA_NOT_FOUND                                          = 1812
	ERROR_RESOURCE_DISABLED                                                = 4309
	ERROR_RESOURCE_ENUM_USER_STOP                                          = 15106
	ERROR_RESOURCE_FAILED                                                  = 5038
	ERROR_RESOURCE_LANG_NOT_FOUND                                          = 1815
	ERROR_RESOURCE_NAME_NOT_FOUND                                          = 1814
	ERROR_RESOURCE_NOT_AVAILABLE                                           = 5006
	ERROR_RESOURCE_NOT_FOUND                                               = 5007
	ERROR_RESOURCE_NOT_ONLINE                                              = 5004
	ERROR_RESOURCE_NOT_PRESENT                                             = 4316
	ERROR_RESOURCE_ONLINE                                                  = 5019
	ERROR_RESOURCE_PROPERTIES_STORED                                       = 5024
	ERROR_RESOURCE_PROPERTY_UNCHANGEABLE                                   = 5089
	ERROR_RESOURCE_TYPE_NOT_FOUND                                          = 1813
	ERROR_RESTART_APPLICATION                                              = 1467
	ERROR_RETRY                                                            = 1237
	ERROR_REVISION_MISMATCH                                                = 1306
	ERROR_RING2SEG_MUST_BE_MOVABLE                                         = 200
	ERROR_RING2_STACK_IN_USE                                               = 207
	ERROR_RMODE_APP                                                        = 1153
	ERROR_RPL_NOT_ALLOWED                                                  = 4006
	ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT                                    = 15403
	ERROR_RUNLEVEL_SWITCH_IN_PROGRESS                                      = 15404
	ERROR_RUNLEVEL_SWITCH_TIMEOUT                                          = 15402
	ERROR_RXACT_COMMIT_FAILURE                                             = 1370
	ERROR_RXACT_INVALID_STATE                                              = 1369
	ERROR_SAME_DRIVE                                                       = 143
	ERROR_SAM_INIT_FAILURE                                                 = 8541
	ERROR_SCOPE_NOT_FOUND                                                  = 318
	ERROR_SCREEN_ALREADY_LOCKED                                            = 1440
	ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED                             = 15321
	ERROR_SECRET_TOO_LONG                                                  = 1382
	ERROR_SECTOR_NOT_FOUND                                                 = 27
	ERROR_SEEK                                                             = 25
	ERROR_SEEK_ON_DEVICE                                                   = 132
	ERROR_SEM_IS_SET                                                       = 102
	ERROR_SEM_NOT_FOUND                                                    = 187
	ERROR_SEM_OWNER_DIED                                                   = 105
	ERROR_SEM_TIMEOUT                                                      = 121
	ERROR_SEM_USER_LIMIT                                                   = 106
	ERROR_SERIAL_NO_DEVICE                                                 = 1118
	ERROR_SERVER_DISABLED                                                  = 1341
	ERROR_SERVER_HAS_OPEN_HANDLES                                          = 1811
	ERROR_SERVER_NOT_DISABLED                                              = 1342
	ERROR_SERVER_SHUTDOWN_IN_PROGRESS                                      = 1255
	ERROR_SERVICES_FAILED_AUTOSTART                                        = 15405
	ERROR_SERVICE_ALREADY_RUNNING                                          = 1056
	ERROR_SERVICE_CANNOT_ACCEPT_CTRL                                       = 1061
	ERROR_SERVICE_DATABASE_LOCKED                                          = 1055
	ERROR_SERVICE_DEPENDENCY_DELETED                                       = 1075
	ERROR_SERVICE_DEPENDENCY_FAIL                                          = 1068
	ERROR_SERVICE_DISABLED                                                 = 1058
	ERROR_SERVICE_DOES_NOT_EXIST                                           = 1060
	ERROR_SERVICE_EXISTS                                                   = 1073
	ERROR_SERVICE_LOGON_FAILED                                             = 1069
	ERROR_SERVICE_MARKED_FOR_DELETE                                        = 1072
	ERROR_SERVICE_NEVER_STARTED                                            = 1077
	ERROR_SERVICE_NOT_ACTIVE                                               = 1062
	ERROR_SERVICE_NOT_FOUND                                                = 1243
	ERROR_SERVICE_NOT_IN_EXE                                               = 1083
	ERROR_SERVICE_NO_THREAD                                                = 1054
	ERROR_SERVICE_REQUEST_TIMEOUT                                          = 1053
	ERROR_SERVICE_SPECIFIC_ERROR                                           = 1066
	ERROR_SERVICE_START_HANG                                               = 1070
	ERROR_SESSION_CREDENTIAL_CONFLICT                                      = 1219
	ERROR_SETCOUNT_ON_BAD_LB                                               = 1433
	ERROR_SETMARK_DETECTED                                                 = 1103
	ERROR_SET_NOT_FOUND                                                    = 1170
	ERROR_SET_POWER_STATE_FAILED                                           = 1141
	ERROR_SET_POWER_STATE_VETOED                                           = 1140
	ERROR_SEVERITY_ERROR                                                   = 0xC0000000
	ERROR_SEVERITY_INFORMATIONAL                                           = 0x40000000
	ERROR_SEVERITY_SUCCESS                                                 = 0x00000000
	ERROR_SEVERITY_WARNING                                                 = 0x80000000
	ERROR_SHARED_POLICY                                                    = 8218
	ERROR_SHARING_BUFFER_EXCEEDED                                          = 36
	ERROR_SHARING_PAUSED                                                   = 70
	ERROR_SHARING_VIOLATION                                                = 32
	ERROR_SHUTDOWN_CLUSTER                                                 = 5008
	ERROR_SHUTDOWN_IN_PROGRESS                                             = 1115
	ERROR_SIGNAL_PENDING                                                   = 162
	ERROR_SIGNAL_REFUSED                                                   = 156
	ERROR_SINGLE_INSTANCE_APP                                              = 1152
	ERROR_SMARTCARD_SUBSYSTEM_FAILURE                                      = 1264
	ERROR_SMI_PRIMITIVE_INSTALLER_FAILED                                   = 14108
	ERROR_SOME_NOT_MAPPED                                                  = 1301
	ERROR_SOURCE_ELEMENT_EMPTY                                             = 1160
	ERROR_SPECIAL_ACCOUNT                                                  = 1371
	ERROR_SPECIAL_GROUP                                                    = 1372
	ERROR_SPECIAL_USER                                                     = 1373
	ERROR_SPL_NO_ADDJOB                                                    = 3004
	ERROR_SPL_NO_STARTDOC                                                  = 3003
	ERROR_SPOOL_FILE_NOT_FOUND                                             = 3002
	ERROR_STACK_BUFFER_OVERRUN                                             = 1282
	ERROR_STACK_OVERFLOW                                                   = 1001
	ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED                = 15815
	ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED                         = 15818
	ERROR_STATE_CREATE_CONTAINER_FAILED                                    = 15805
	ERROR_STATE_DELETE_CONTAINER_FAILED                                    = 15806
	ERROR_STATE_DELETE_SETTING_FAILED                                      = 15809
	ERROR_STATE_ENUMERATE_CONTAINER_FAILED                                 = 15813
	ERROR_STATE_ENUMERATE_SETTINGS_FAILED                                  = 15814
	ERROR_STATE_GET_VERSION_FAILED                                         = 15801
	ERROR_STATE_LOAD_STORE_FAILED                                          = 15800
	ERROR_STATE_OPEN_CONTAINER_FAILED                                      = 15804
	ERROR_STATE_QUERY_SETTING_FAILED                                       = 15810
	ERROR_STATE_READ_COMPOSITE_SETTING_FAILED                              = 15811
	ERROR_STATE_READ_SETTING_FAILED                                        = 15807
	ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED                           = 15817
	ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED                          = 15816
	ERROR_STATE_SET_VERSION_FAILED                                         = 15802
	ERROR_STATE_STRUCTURED_RESET_FAILED                                    = 15803
	ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED                             = 15812
	ERROR_STATE_WRITE_SETTING_FAILED                                       = 15808
	ERROR_STATIC_INIT                                                      = 4002
	ERROR_SUBST_TO_JOIN                                                    = 141
	ERROR_SUBST_TO_SUBST                                                   = 139
	ERROR_SUCCESS                                                          = 0
	ERROR_SUCCESS_REBOOT_INITIATED                                         = 1641
	ERROR_SUCCESS_REBOOT_REQUIRED                                          = 3010
	ERROR_SUCCESS_RESTART_REQUIRED                                         = 3011
	ERROR_SWAPERROR                                                        = 999
	ERROR_SXS_ACTIVATION_CONTEXT_DISABLED                                  = 14006
	ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT                                 = 14103
	ERROR_SXS_ASSEMBLY_MISSING                                             = 14081
	ERROR_SXS_ASSEMBLY_NOT_FOUND                                           = 14003
	ERROR_SXS_ASSEMBLY_NOT_LOCKED                                          = 14097
	ERROR_SXS_CANT_GEN_ACTCTX                                              = 14001
	ERROR_SXS_COMPONENT_STORE_CORRUPT                                      = 14098
	ERROR_SXS_CORRUPTION                                                   = 14083
	ERROR_SXS_CORRUPT_ACTIVATION_STACK                                     = 14082
	ERROR_SXS_DUPLICATE_ASSEMBLY_NAME                                      = 14027
	ERROR_SXS_DUPLICATE_CLSID                                              = 14023
	ERROR_SXS_DUPLICATE_DLL_NAME                                           = 14021
	ERROR_SXS_DUPLICATE_IID                                                = 14024
	ERROR_SXS_DUPLICATE_PROGID                                             = 14026
	ERROR_SXS_DUPLICATE_TLBID                                              = 14025
	ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME                                   = 14022
	ERROR_SXS_EARLY_DEACTIVATION                                           = 14084
	ERROR_SXS_FILE_HASH_MISMATCH                                           = 14028
	ERROR_SXS_FILE_HASH_MISSING                                            = 14110
	ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY                                    = 14104
	ERROR_SXS_IDENTITIES_DIFFERENT                                         = 14102
	ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE                                 = 14092
	ERROR_SXS_IDENTITY_PARSE_ERROR                                         = 14093
	ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN                                   = 14095
	ERROR_SXS_INVALID_ACTCTXDATA_FORMAT                                    = 14002
	ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE                          = 14017
	ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME                     = 14080
	ERROR_SXS_INVALID_DEACTIVATION                                         = 14085
	ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME                              = 14091
	ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE                             = 14090
	ERROR_SXS_INVALID_XML_NAMESPACE_URI                                    = 14014
	ERROR_SXS_KEY_NOT_FOUND                                                = 14007
	ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED                       = 14016
	ERROR_SXS_MANIFEST_FORMAT_ERROR                                        = 14004
	ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT                = 14101
	ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE                  = 14019
	ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE                  = 14018
	ERROR_SXS_MANIFEST_PARSE_ERROR                                         = 14005
	ERROR_SXS_MANIFEST_TOO_BIG                                             = 14105
	ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE                          = 14079
	ERROR_SXS_MULTIPLE_DEACTIVATION                                        = 14086
	ERROR_SXS_POLICY_PARSE_ERROR                                           = 14029
	ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT               = 14020
	ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET                                  = 14011
	ERROR_SXS_PROCESS_TERMINATION_REQUESTED                                = 14087
	ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING                              = 14078
	ERROR_SXS_PROTECTION_CATALOG_NOT_VALID                                 = 14076
	ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT                              = 14075
	ERROR_SXS_PROTECTION_RECOVERY_FAILED                                   = 14074
	ERROR_SXS_RELEASE_ACTIVATION_CONTEXT                                   = 14088
	ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED                       = 14015
	ERROR_SXS_SECTION_NOT_FOUND                                            = 14000
	ERROR_SXS_SETTING_NOT_REGISTERED                                       = 14106
	ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY                      = 14089
	ERROR_SXS_THREAD_QUERIES_DISABLED                                      = 14010
	ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE                               = 14107
	ERROR_SXS_UNKNOWN_ENCODING                                             = 14013
	ERROR_SXS_UNKNOWN_ENCODING_GROUP                                       = 14012
	ERROR_SXS_UNTRANSLATABLE_HRESULT                                       = 14077
	ERROR_SXS_VERSION_CONFLICT                                             = 14008
	ERROR_SXS_WRONG_SECTION_TYPE                                           = 14009
	ERROR_SXS_XML_E_BADCHARDATA                                            = 14036
	ERROR_SXS_XML_E_BADCHARINSTRING                                        = 14034
	ERROR_SXS_XML_E_BADNAMECHAR                                            = 14033
	ERROR_SXS_XML_E_BADPEREFINSUBSET                                       = 14059
	ERROR_SXS_XML_E_BADSTARTNAMECHAR                                       = 14032
	ERROR_SXS_XML_E_BADXMLCASE                                             = 14069
	ERROR_SXS_XML_E_BADXMLDECL                                             = 14056
	ERROR_SXS_XML_E_COMMENTSYNTAX                                          = 14031
	ERROR_SXS_XML_E_DUPLICATEATTRIBUTE                                     = 14053
	ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE                                    = 14045
	ERROR_SXS_XML_E_EXPECTINGTAGEND                                        = 14038
	ERROR_SXS_XML_E_INCOMPLETE_ENCODING                                    = 14043
	ERROR_SXS_XML_E_INTERNALERROR                                          = 14041
	ERROR_SXS_XML_E_INVALIDATROOTLEVEL                                     = 14055
	ERROR_SXS_XML_E_INVALIDENCODING                                        = 14067
	ERROR_SXS_XML_E_INVALIDSWITCH                                          = 14068
	ERROR_SXS_XML_E_INVALID_DECIMAL                                        = 14047
	ERROR_SXS_XML_E_INVALID_HEXIDECIMAL                                    = 14048
	ERROR_SXS_XML_E_INVALID_STANDALONE                                     = 14070
	ERROR_SXS_XML_E_INVALID_UNICODE                                        = 14049
	ERROR_SXS_XML_E_INVALID_VERSION                                        = 14072
	ERROR_SXS_XML_E_MISSINGEQUALS                                          = 14073
	ERROR_SXS_XML_E_MISSINGQUOTE                                           = 14030
	ERROR_SXS_XML_E_MISSINGROOT                                            = 14057
	ERROR_SXS_XML_E_MISSINGSEMICOLON                                       = 14039
	ERROR_SXS_XML_E_MISSINGWHITESPACE                                      = 14037
	ERROR_SXS_XML_E_MISSING_PAREN                                          = 14044
	ERROR_SXS_XML_E_MULTIPLEROOTS                                          = 14054
	ERROR_SXS_XML_E_MULTIPLE_COLONS                                        = 14046
	ERROR_SXS_XML_E_RESERVEDNAMESPACE                                      = 14066
	ERROR_SXS_XML_E_UNBALANCEDPAREN                                        = 14040
	ERROR_SXS_XML_E_UNCLOSEDCDATA                                          = 14065
	ERROR_SXS_XML_E_UNCLOSEDCOMMENT                                        = 14063
	ERROR_SXS_XML_E_UNCLOSEDDECL                                           = 14064
	ERROR_SXS_XML_E_UNCLOSEDENDTAG                                         = 14061
	ERROR_SXS_XML_E_UNCLOSEDSTARTTAG                                       = 14060
	ERROR_SXS_XML_E_UNCLOSEDSTRING                                         = 14062
	ERROR_SXS_XML_E_UNCLOSEDTAG                                            = 14052
	ERROR_SXS_XML_E_UNEXPECTEDENDTAG                                       = 14051
	ERROR_SXS_XML_E_UNEXPECTEDEOF                                          = 14058
	ERROR_SXS_XML_E_UNEXPECTED_STANDALONE                                  = 14071
	ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE                                  = 14042
	ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK                               = 14050
	ERROR_SXS_XML_E_XMLDECLSYNTAX                                          = 14035
	ERROR_SYMLINK_CLASS_DISABLED                                           = 1463
	ERROR_SYMLINK_NOT_SUPPORTED                                            = 1464
	ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED                                 = 1274
	ERROR_SYSTEM_DEVICE_NOT_FOUND                                          = 15299
	ERROR_SYSTEM_NEEDS_REMEDIATION                                         = 15623
	ERROR_SYSTEM_TRACE                                                     = 150
	ERROR_TAG_NOT_FOUND                                                    = 2012
	ERROR_TAG_NOT_PRESENT                                                  = 2013
	ERROR_THREAD_1_INACTIVE                                                = 210
	ERROR_TIMEOUT                                                          = 1460
	ERROR_TIME_SKEW                                                        = 1398
	ERROR_TLW_WITH_WSCHILD                                                 = 1406
	ERROR_TOKEN_ALREADY_IN_USE                                             = 1375
	ERROR_TOO_MANY_CMDS                                                    = 56
	ERROR_TOO_MANY_CONTEXT_IDS                                             = 1384
	ERROR_TOO_MANY_LINKS                                                   = 1142
	ERROR_TOO_MANY_LUIDS_REQUESTED                                         = 1333
	ERROR_TOO_MANY_MODULES                                                 = 214
	ERROR_TOO_MANY_MUXWAITERS                                              = 152
	ERROR_TOO_MANY_NAMES                                                   = 68
	ERROR_TOO_MANY_OPEN_FILES                                              = 4
	ERROR_TOO_MANY_POSTS                                                   = 298
	ERROR_TOO_MANY_SECRETS                                                 = 1381
	ERROR_TOO_MANY_SEMAPHORES                                              = 100
	ERROR_TOO_MANY_SEM_REQUESTS                                            = 103
	ERROR_TOO_MANY_SESS                                                    = 69
	ERROR_TOO_MANY_SIDS                                                    = 1389
	ERROR_TOO_MANY_TCBS                                                    = 155
	ERROR_TRANSFORM_NOT_SUPPORTED                                          = 2004
	ERROR_TRANSPORT_FULL                                                   = 4328
	ERROR_TRUSTED_DOMAIN_FAILURE                                           = 1788
	ERROR_TRUSTED_RELATIONSHIP_FAILURE                                     = 1789
	ERROR_TRUST_FAILURE                                                    = 1790
	ERROR_UNABLE_TO_CLEAN                                                  = 4311
	ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA                                    = 4330
	ERROR_UNABLE_TO_INVENTORY_DRIVE                                        = 4325
	ERROR_UNABLE_TO_INVENTORY_SLOT                                         = 4326
	ERROR_UNABLE_TO_INVENTORY_TRANSPORT                                    = 4327
	ERROR_UNABLE_TO_LOAD_MEDIUM                                            = 4324
	ERROR_UNABLE_TO_LOCK_MEDIA                                             = 1108
	ERROR_UNABLE_TO_MOVE_REPLACEMENT                                       = 1176
	ERROR_UNABLE_TO_MOVE_REPLACEMENT_2                                     = 1177
	ERROR_UNABLE_TO_REMOVE_REPLACED                                        = 1175
	ERROR_UNABLE_TO_UNLOAD_MEDIA                                           = 1109
	ERROR_UNEXPECTED_OMID                                                  = 4334
	ERROR_UNEXP_NET_ERR                                                    = 59
	ERROR_UNIDENTIFIED_ERROR                                               = 1287
	ERROR_UNKNOWN_COMPONENT                                                = 1607
	ERROR_UNKNOWN_FEATURE                                                  = 1606
	ERROR_UNKNOWN_PORT                                                     = 1796
	ERROR_UNKNOWN_PRINTER_DRIVER                                           = 1797
	ERROR_UNKNOWN_PRINTPROCESSOR                                           = 1798
	ERROR_UNKNOWN_PRINT_MONITOR                                            = 3000
	ERROR_UNKNOWN_PRODUCT                                                  = 1605
	ERROR_UNKNOWN_PROPERTY                                                 = 1608
	ERROR_UNKNOWN_REVISION                                                 = 1305
	ERROR_UNMAPPED_SUBSTITUTION_STRING                                     = 14096
	ERROR_UNRECOGNIZED_MEDIA                                               = 1785
	ERROR_UNRECOGNIZED_VOLUME                                              = 1005
	ERROR_UNSUPPORTED_TYPE                                                 = 1630
	ERROR_USER_APC                                                         = 737
	ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED                                 = 1934
	ERROR_USER_EXISTS                                                      = 1316
	ERROR_USER_MAPPED_FILE                                                 = 1224
	ERROR_VC_DISCONNECTED                                                  = 240
	ERROR_VDM_DISALLOWED                                                   = 1286
	ERROR_VOLUME_CONTAINS_SYS_FILES                                        = 4337
	ERROR_VOLUME_NOT_SIS_ENABLED                                           = 4500
	ERROR_VOLUME_NOT_SUPPORT_EFS                                           = 6014
	ERROR_WAIT_1                                                           = 731
	ERROR_WAIT_2                                                           = 732
	ERROR_WAIT_3                                                           = 733
	ERROR_WAIT_63                                                          = 734
	ERROR_WAIT_NO_CHILDREN                                                 = 128
	ERROR_WAKE_SYSTEM                                                      = 730
	ERROR_WINDOW_NOT_COMBOBOX                                              = 1423
	ERROR_WINDOW_NOT_DIALOG                                                = 1420
	ERROR_WINDOW_OF_OTHER_THREAD                                           = 1408
	ERROR_WINS_INTERNAL                                                    = 4000
	ERROR_WMI_ALREADY_DISABLED                                             = 4212
	ERROR_WMI_ALREADY_ENABLED                                              = 4206
	ERROR_WMI_DP_FAILED                                                    = 4209
	ERROR_WMI_DP_NOT_FOUND                                                 = 4204
	ERROR_WMI_GUID_DISCONNECTED                                            = 4207
	ERROR_WMI_GUID_NOT_FOUND                                               = 4200
	ERROR_WMI_INSTANCE_NOT_FOUND                                           = 4201
	ERROR_WMI_INVALID_MOF                                                  = 4210
	ERROR_WMI_INVALID_REGINFO                                              = 4211
	ERROR_WMI_ITEMID_NOT_FOUND                                             = 4202
	ERROR_WMI_READ_ONLY                                                    = 4213
	ERROR_WMI_SERVER_UNAVAILABLE                                           = 4208
	ERROR_WMI_SET_FAILURE                                                  = 4214
	ERROR_WMI_TRY_AGAIN                                                    = 4203
	ERROR_WMI_UNRESOLVED_INSTANCE_REF                                      = 4205
	ERROR_WORKING_SET_QUOTA                                                = 1453
	ERROR_WRITE_FAULT                                                      = 29
	ERROR_WRITE_PROTECT                                                    = 19
	ERROR_WRONG_COMPARTMENT                                                = 1468
	ERROR_WRONG_DISK                                                       = 34
	ERROR_WRONG_EFS                                                        = 6005
	ERROR_WRONG_PASSWORD                                                   = 1323
	ERROR_WRONG_TARGET_NAME                                                = 1396
	ERROR_XMLDSIG_ERROR                                                    = 1466
	ERROR_XML_ENCODING_MISMATCH                                            = 14100
	ERROR_XML_PARSE_ERROR                                                  = 1465
	ERR_ALREADY_LOGGED                                                     = 4
	ERR_LEGACY_COPY                                                        = 0x800
	ESB_DISABLE_BOTH                                                       = 0x0003
	ESB_DISABLE_DOWN                                                       = 0x0002
	ESB_DISABLE_LEFT                                                       = 0x0001
	ESB_DISABLE_LTUP                                                       = 1
	ESB_DISABLE_RIGHT                                                      = 0x0002
	ESB_DISABLE_RTDN                                                       = 2
	ESB_DISABLE_UP                                                         = 0x0001
	ESB_ENABLE_BOTH                                                        = 0x0000
	ESHUTDOWN                                                              = 241
	ESOCKTNOSUPPORT                                                        = 240
	ESPIPE                                                                 = 29
	ESRCH                                                                  = 3
	ESTALE                                                                 = 246
	ES_AUTOHSCROLL                                                         = 128
	ES_AUTOVSCROLL                                                         = 64
	ES_CENTER                                                              = 1
	ES_LEFT                                                                = 0
	ES_LOWERCASE                                                           = 16
	ES_MULTILINE                                                           = 4
	ES_NOHIDESEL                                                           = 256
	ES_NUMBER                                                              = 8192
	ES_OEMCONVERT                                                          = 1024
	ES_PASSWORD                                                            = 32
	ES_READONLY                                                            = 2048
	ES_RIGHT                                                               = 2
	ES_UPPERCASE                                                           = 8
	ES_WANTRETURN                                                          = 4096
	ETIME                                                                  = 137
	ETIMEDOUT                                                              = 138
	ETOOMANYREFS                                                           = 242
	ETO_CLIPPED                                                            = 0x0004
	ETO_GLYPH_INDEX                                                        = 0x0010
	ETO_IGNORELANGUAGE                                                     = 0x1000
	ETO_NUMERICSLATIN                                                      = 0x0800
	ETO_NUMERICSLOCAL                                                      = 0x0400
	ETO_OPAQUE                                                             = 0x0002
	ETO_PDY                                                                = 0x2000
	ETO_RTLREADING                                                         = 0x0080
	ETXTBSY                                                                = 139
	EUSERS                                                                 = 244
	EVENPARITY                                                             = 2
	EVENTLOG_AUDIT_FAILURE                                                 = 0x0010
	EVENTLOG_AUDIT_SUCCESS                                                 = 0x0008
	EVENTLOG_BACKWARDS_READ                                                = 0x0008
	EVENTLOG_END_ALL_PAIRED_EVENTS                                         = 0x0004
	EVENTLOG_END_PAIRED_EVENT                                              = 0x0002
	EVENTLOG_ERROR_TYPE                                                    = 0x0001
	EVENTLOG_FORWARDS_READ                                                 = 0x0004
	EVENTLOG_FULL_INFO                                                     = 0
	EVENTLOG_INFORMATION_TYPE                                              = 0x0004
	EVENTLOG_PAIRED_EVENT_ACTIVE                                           = 0x0008
	EVENTLOG_PAIRED_EVENT_INACTIVE                                         = 0x0010
	EVENTLOG_SEEK_READ                                                     = 0x0002
	EVENTLOG_SEQUENTIAL_READ                                               = 0x0001
	EVENTLOG_START_PAIRED_EVENT                                            = 0x0001
	EVENTLOG_SUCCESS                                                       = 0x0000
	EVENTLOG_WARNING_TYPE                                                  = 0x0002
	EVENT_ALL_ACCESS                                                       = 2031619
	EVENT_CONSOLE_CARET                                                    = 0x4001
	EVENT_CONSOLE_END_APPLICATION                                          = 0x4007
	EVENT_CONSOLE_LAYOUT                                                   = 0x4005
	EVENT_CONSOLE_START_APPLICATION                                        = 0x4006
	EVENT_CONSOLE_UPDATE_REGION                                            = 0x4002
	EVENT_CONSOLE_UPDATE_SCROLL                                            = 0x4004
	EVENT_CONSOLE_UPDATE_SIMPLE                                            = 0x4003
	EVENT_E_FIRST                                                          = 2147746304
	EVENT_E_LAST                                                           = 2147746335
	EVENT_MAX                                                              = 0x7FFFFFFF
	EVENT_MIN                                                              = 0x00000001
	EVENT_MODIFY_STATE                                                     = 0x0002
	EVENT_OBJECT_ACCELERATORCHANGE                                         = 0x8012
	EVENT_OBJECT_CREATE                                                    = 0x8000
	EVENT_OBJECT_DEFACTIONCHANGE                                           = 0x8011
	EVENT_OBJECT_DESCRIPTIONCHANGE                                         = 0x800D
	EVENT_OBJECT_DESTROY                                                   = 0x8001
	EVENT_OBJECT_FOCUS                                                     = 0x8005
	EVENT_OBJECT_HELPCHANGE                                                = 0x8010
	EVENT_OBJECT_HIDE                                                      = 0x8003
	EVENT_OBJECT_LOCATIONCHANGE                                            = 0x800B
	EVENT_OBJECT_NAMECHANGE                                                = 0x800C
	EVENT_OBJECT_PARENTCHANGE                                              = 0x800F
	EVENT_OBJECT_REORDER                                                   = 0x8004
	EVENT_OBJECT_SELECTION                                                 = 0x8006
	EVENT_OBJECT_SELECTIONADD                                              = 0x8007
	EVENT_OBJECT_SELECTIONREMOVE                                           = 0x8008
	EVENT_OBJECT_SELECTIONWITHIN                                           = 0x8009
	EVENT_OBJECT_SHOW                                                      = 0x8002
	EVENT_OBJECT_STATECHANGE                                               = 0x800A
	EVENT_OBJECT_VALUECHANGE                                               = 0x800E
	EVENT_SYSTEM_ALERT                                                     = 0x0002
	EVENT_SYSTEM_CAPTUREEND                                                = 0x0009
	EVENT_SYSTEM_CAPTURESTART                                              = 0x0008
	EVENT_SYSTEM_CONTEXTHELPEND                                            = 0x000D
	EVENT_SYSTEM_CONTEXTHELPSTART                                          = 0x000C
	EVENT_SYSTEM_DIALOGEND                                                 = 0x0011
	EVENT_SYSTEM_DIALOGSTART                                               = 0x0010
	EVENT_SYSTEM_DRAGDROPEND                                               = 0x000F
	EVENT_SYSTEM_DRAGDROPSTART                                             = 0x000E
	EVENT_SYSTEM_FOREGROUND                                                = 0x0003
	EVENT_SYSTEM_MENUEND                                                   = 0x0005
	EVENT_SYSTEM_MENUPOPUPEND                                              = 0x0007
	EVENT_SYSTEM_MENUPOPUPSTART                                            = 0x0006
	EVENT_SYSTEM_MENUSTART                                                 = 0x0004
	EVENT_SYSTEM_MINIMIZEEND                                               = 0x0017
	EVENT_SYSTEM_MINIMIZESTART                                             = 0x0016
	EVENT_SYSTEM_MOVESIZEEND                                               = 0x000B
	EVENT_SYSTEM_MOVESIZESTART                                             = 0x000A
	EVENT_SYSTEM_SCROLLINGEND                                              = 0x0013
	EVENT_SYSTEM_SCROLLINGSTART                                            = 0x0012
	EVENT_SYSTEM_SOUND                                                     = 0x0001
	EVENT_SYSTEM_SWITCHEND                                                 = 0x0015
	EVENT_SYSTEM_SWITCHSTART                                               = 0x0014
	EVENT_S_FIRST                                                          = 262656
	EVENT_S_LAST                                                           = 262687
	EV_BREAK                                                               = 0x40
	EV_CTS                                                                 = 0x8
	EV_DSR                                                                 = 0x10
	EV_ERR                                                                 = 0x80
	EV_EVENT1                                                              = 0x800
	EV_EVENT2                                                              = 0x1000
	EV_PERR                                                                = 0x200
	EV_RING                                                                = 0x100
	EV_RLSD                                                                = 0x20
	EV_RX80FULL                                                            = 0x400
	EV_RXCHAR                                                              = 0x1
	EV_RXFLAG                                                              = 0x2
	EV_TXEMPTY                                                             = 0x4
	EWOULDBLOCK                                                            = 140
	EWX_ARSO                                                               = 0x04000000
	EWX_BOOTOPTIONS                                                        = 0x01000000
	EWX_CHECK_SAFE_FOR_SERVER                                              = 0x08000000
	EWX_FORCE                                                              = 0x00000004
	EWX_FORCEIFHUNG                                                        = 0x00000010
	EWX_HYBRID_SHUTDOWN                                                    = 0x00400000
	EWX_LOGOFF                                                             = 0x00000000
	EWX_POWEROFF                                                           = 0x00000008
	EWX_QUICKRESOLVE                                                       = 0x00000020
	EWX_REBOOT                                                             = 0x00000002
	EWX_SHUTDOWN                                                           = 0x00000001
	EXCEPTION_COLLIDED_UNWIND                                              = 0x40
	EXCEPTION_CONTINUE_EXECUTION                                           = -1
	EXCEPTION_CONTINUE_SEARCH                                              = 0
	EXCEPTION_DEBUG_EVENT                                                  = 1
	EXCEPTION_EXECUTE_FAULT                                                = 8
	EXCEPTION_EXECUTE_HANDLER                                              = 1
	EXCEPTION_EXIT_UNWIND                                                  = 0x4
	EXCEPTION_MAXIMUM_PARAMETERS                                           = 15
	EXCEPTION_NESTED_CALL                                                  = 0x10
	EXCEPTION_NONCONTINUABLE                                               = 0x1
	EXCEPTION_READ_FAULT                                                   = 0
	EXCEPTION_STACK_INVALID                                                = 0x8
	EXCEPTION_TARGET_UNWIND                                                = 0x20
	EXCEPTION_UNWIND                                                       = 0x66
	EXCEPTION_UNWINDING                                                    = 0x2
	EXCEPTION_WRITE_FAULT                                                  = 1
	EXDEV                                                                  = 18
	EXIT_FAILURE                                                           = 1
	EXIT_PROCESS_DEBUG_EVENT                                               = 5
	EXIT_SUCCESS                                                           = 0
	EXIT_THREAD_DEBUG_EVENT                                                = 4
	EXPAND_LOCAL_DRIVES                                                    = 0
	EXTENDED_STARTUPINFO_PRESENT                                           = 0x80000
	EXTTEXTOUT                                                             = 512
	EXT_DEVICE_CAPS                                                        = 4099
	ExceptionCollidedUnwind                                                = 3
	ExceptionContinueExecution                                             = 0
	ExceptionContinueSearch                                                = 1
	ExceptionExecuteHandler                                                = 4
	ExceptionNestedException                                               = 2
	FACILITY_AAF                                                           = 18
	FACILITY_ACS                                                           = 20
	FACILITY_AUDCLNT                                                       = 2185
	FACILITY_BACKGROUNDCOPY                                                = 32
	FACILITY_CERT                                                          = 11
	FACILITY_COMPLUS                                                       = 17
	FACILITY_CONFIGURATION                                                 = 33
	FACILITY_CONTROL                                                       = 10
	FACILITY_DIRECTORYSERVICE                                              = 37
	FACILITY_DISPATCH                                                      = 2
	FACILITY_DPLAY                                                         = 21
	FACILITY_HTTP                                                          = 25
	FACILITY_INTERNET                                                      = 12
	FACILITY_ITF                                                           = 4
	FACILITY_MEDIASERVER                                                   = 13
	FACILITY_METADIRECTORY                                                 = 35
	FACILITY_MSMQ                                                          = 14
	FACILITY_NT_BIT                                                        = 0x10000000
	FACILITY_NULL                                                          = 0
	FACILITY_RPC                                                           = 1
	FACILITY_SCARD                                                         = 16
	FACILITY_SECURITY                                                      = 9
	FACILITY_SETUPAPI                                                      = 15
	FACILITY_SSPI                                                          = 9
	FACILITY_STATE_MANAGEMENT                                              = 34
	FACILITY_STORAGE                                                       = 3
	FACILITY_SXS                                                           = 23
	FACILITY_UMI                                                           = 22
	FACILITY_URT                                                           = 19
	FACILITY_USERMODE_FILTER_MANAGER                                       = 0x1f
	FACILITY_WIN32                                                         = 7
	FACILITY_WINDOWS                                                       = 8
	FACILITY_WINDOWSUPDATE                                                 = 36
	FACILITY_WINDOWS_CE                                                    = 24
	FAILED_ACCESS_ACE_FLAG                                                 = 128
	FAIL_FAST_GENERATE_EXCEPTION_ADDRESS                                   = 0x1
	FAIL_FAST_NO_HARD_ERROR_DLG                                            = 0x2
	FALSE                                                                  = 0
	FALT                                                                   = 0x10
	FAPPCOMMAND_KEY                                                        = 0
	FAPPCOMMAND_MASK                                                       = 0xF000
	FAPPCOMMAND_MOUSE                                                      = 0x8000
	FAPPCOMMAND_OEM                                                        = 0x1000
	FAR                                                                    = 0
	FASTCALL                                                               = 0
	FAST_FAIL_CORRUPT_LIST_ENTRY                                           = 3
	FAST_FAIL_FATAL_APP_EXIT                                               = 7
	FAST_FAIL_GS_COOKIE_INIT                                               = 6
	FAST_FAIL_INCORRECT_STACK                                              = 4
	FAST_FAIL_INVALID_ARG                                                  = 5
	FAST_FAIL_INVALID_FAST_FAIL_CODE                                       = 0xffffffff
	FAST_FAIL_LEGACY_GS_VIOLATION                                          = 0
	FAST_FAIL_RANGE_CHECK_FAILURE                                          = 8
	FAST_FAIL_STACK_COOKIE_CHECK_FAILURE                                   = 2
	FAST_FAIL_UNSAFE_REGISTRY_ACCESS                                       = 9
	FAST_FAIL_VTGUARD_CHECK_FAILURE                                        = 1
	FCONTROL                                                               = 0x08
	FD_ACCEPT                                                              = 8
	FD_ACCEPT_BIT                                                          = 3
	FD_ADDRESS_LIST_CHANGE                                                 = 512
	FD_ADDRESS_LIST_CHANGE_BIT                                             = 9
	FD_ALL_EVENTS                                                          = 1023
	FD_CLOSE                                                               = 32
	FD_CLOSE_BIT                                                           = 5
	FD_CONNECT                                                             = 16
	FD_CONNECT_BIT                                                         = 4
	FD_GROUP_QOS                                                           = 128
	FD_GROUP_QOS_BIT                                                       = 7
	FD_MAX_EVENTS                                                          = 10
	FD_OOB                                                                 = 4
	FD_OOB_BIT                                                             = 2
	FD_QOS                                                                 = 64
	FD_QOS_BIT                                                             = 6
	FD_READ                                                                = 1
	FD_READ_BIT                                                            = 0
	FD_ROUTING_INTERFACE_CHANGE                                            = 256
	FD_ROUTING_INTERFACE_CHANGE_BIT                                        = 8
	FD_SETSIZE                                                             = 64
	FD_WRITE                                                               = 2
	FD_WRITE_BIT                                                           = 1
	FEATURESETTING_CUSTPAPER                                               = 3
	FEATURESETTING_MIRROR                                                  = 4
	FEATURESETTING_NEGATIVE                                                = 5
	FEATURESETTING_NUP                                                     = 0
	FEATURESETTING_OUTPUT                                                  = 1
	FEATURESETTING_PRIVATE_BEGIN                                           = 0x1000
	FEATURESETTING_PRIVATE_END                                             = 0x1FFF
	FEATURESETTING_PROTOCOL                                                = 6
	FEATURESETTING_PSLEVEL                                                 = 2
	FE_FONTSMOOTHINGCLEARTYPE                                              = 0x0002
	FE_FONTSMOOTHINGDOCKING                                                = 0x8000
	FE_FONTSMOOTHINGORIENTATIONBGR                                         = 0x0000
	FE_FONTSMOOTHINGORIENTATIONRGB                                         = 0x0001
	FE_FONTSMOOTHINGSTANDARD                                               = 0x0001
	FF_DECORATIVE                                                          = 80
	FF_DONTCARE                                                            = 0
	FF_MODERN                                                              = 48
	FF_ROMAN                                                               = 16
	FF_SCRIPT                                                              = 64
	FF_SWISS                                                               = 32
	FIBER_FLAG_FLOAT_SWITCH                                                = 0x1
	FILENAME_MAX                                                           = 260
	FILE_ACTION_ADDED                                                      = 0x00000001
	FILE_ACTION_MODIFIED                                                   = 0x00000003
	FILE_ACTION_REMOVED                                                    = 0x00000002
	FILE_ACTION_RENAMED_NEW_NAME                                           = 0x00000005
	FILE_ACTION_RENAMED_OLD_NAME                                           = 0x00000004
	FILE_ADD_FILE                                                          = 2
	FILE_ADD_SUBDIRECTORY                                                  = 4
	FILE_ALL_ACCESS                                                        = 2032127
	FILE_APPEND_DATA                                                       = 4
	FILE_ATTRIBUTE_ARCHIVE                                                 = 0x00000020
	FILE_ATTRIBUTE_COMPRESSED                                              = 0x00000800
	FILE_ATTRIBUTE_DEVICE                                                  = 0x00000040
	FILE_ATTRIBUTE_DIRECTORY                                               = 0x00000010
	FILE_ATTRIBUTE_ENCRYPTED                                               = 0x00004000
	FILE_ATTRIBUTE_HIDDEN                                                  = 0x00000002
	FILE_ATTRIBUTE_NORMAL                                                  = 0x00000080
	FILE_ATTRIBUTE_NOT_CONTENT_INDEXED                                     = 0x00002000
	FILE_ATTRIBUTE_OFFLINE                                                 = 0x00001000
	FILE_ATTRIBUTE_READONLY                                                = 0x00000001
	FILE_ATTRIBUTE_REPARSE_POINT                                           = 0x00000400
	FILE_ATTRIBUTE_SPARSE_FILE                                             = 0x00000200
	FILE_ATTRIBUTE_SYSTEM                                                  = 0x00000004
	FILE_ATTRIBUTE_TEMPORARY                                               = 0x00000100
	FILE_ATTRIBUTE_VIRTUAL                                                 = 0x00010000
	FILE_BEGIN                                                             = 0
	FILE_CACHE_FLAGS_DEFINED                                               = 0
	FILE_CACHE_MAX_HARD_DISABLE                                            = 0x00000002
	FILE_CACHE_MAX_HARD_ENABLE                                             = 0x00000001
	FILE_CACHE_MIN_HARD_DISABLE                                            = 0x00000008
	FILE_CACHE_MIN_HARD_ENABLE                                             = 0x00000004
	FILE_CASE_PRESERVED_NAMES                                              = 0x00000002
	FILE_CASE_SENSITIVE_SEARCH                                             = 0x00000001
	FILE_COMPLETE_IF_OPLOCKED                                              = 0x00000100
	FILE_CREATE                                                            = 0x00000002
	FILE_CREATE_PIPE_INSTANCE                                              = 4
	FILE_CREATE_TREE_CONNECTION                                            = 0x00000080
	FILE_CURRENT                                                           = 1
	FILE_DELETE_CHILD                                                      = 64
	FILE_DELETE_ON_CLOSE                                                   = 0x00001000
	FILE_DIRECTORY_FILE                                                    = 0x00000001
	FILE_DIR_DISALLOWED                                                    = 9
	FILE_ENCRYPTABLE                                                       = 0
	FILE_END                                                               = 2
	FILE_EXECUTE                                                           = 32
	FILE_FILE_COMPRESSION                                                  = 0x00000010
	FILE_FLAG_BACKUP_SEMANTICS                                             = 0x2000000
	FILE_FLAG_DELETE_ON_CLOSE                                              = 0x4000000
	FILE_FLAG_FIRST_PIPE_INSTANCE                                          = 0x80000
	FILE_FLAG_NO_BUFFERING                                                 = 0x20000000
	FILE_FLAG_OPEN_NO_RECALL                                               = 0x100000
	FILE_FLAG_OPEN_REPARSE_POINT                                           = 0x200000
	FILE_FLAG_OVERLAPPED                                                   = 0x40000000
	FILE_FLAG_POSIX_SEMANTICS                                              = 0x1000000
	FILE_FLAG_RANDOM_ACCESS                                                = 0x10000000
	FILE_FLAG_SEQUENTIAL_SCAN                                              = 0x8000000
	FILE_FLAG_SESSION_AWARE                                                = 0x800000
	FILE_FLAG_WRITE_THROUGH                                                = 0x80000000
	FILE_GENERIC_EXECUTE                                                   = 1179808
	FILE_GENERIC_READ                                                      = 1179785
	FILE_GENERIC_WRITE                                                     = 1179926
	FILE_IS_ENCRYPTED                                                      = 1
	FILE_LIST_DIRECTORY                                                    = 1
	FILE_MAP_ALL_ACCESS                                                    = 983071
	FILE_MAP_COPY                                                          = 0x1
	FILE_MAP_EXECUTE                                                       = 32
	FILE_MAP_LARGE_PAGES                                                   = 0x20000000
	FILE_MAP_READ                                                          = 4
	FILE_MAP_RESERVE                                                       = 0x80000000
	FILE_MAP_TARGETS_INVALID                                               = 0x40000000
	FILE_MAP_WRITE                                                         = 2
	FILE_MAXIMUM_DISPOSITION                                               = 0x00000005
	FILE_NAMED_STREAMS                                                     = 0x00040000
	FILE_NAME_NORMALIZED                                                   = 0x0
	FILE_NAME_OPENED                                                       = 0x8
	FILE_NON_DIRECTORY_FILE                                                = 0x00000040
	FILE_NOTIFY_CHANGE_ATTRIBUTES                                          = 0x00000004
	FILE_NOTIFY_CHANGE_CREATION                                            = 0x00000040
	FILE_NOTIFY_CHANGE_DIR_NAME                                            = 0x00000002
	FILE_NOTIFY_CHANGE_FILE_NAME                                           = 0x00000001
	FILE_NOTIFY_CHANGE_LAST_ACCESS                                         = 0x00000020
	FILE_NOTIFY_CHANGE_LAST_WRITE                                          = 0x00000010
	FILE_NOTIFY_CHANGE_SECURITY                                            = 0x00000100
	FILE_NOTIFY_CHANGE_SIZE                                                = 0x00000008
	FILE_NO_COMPRESSION                                                    = 0x00008000
	FILE_NO_EA_KNOWLEDGE                                                   = 0x00000200
	FILE_NO_INTERMEDIATE_BUFFERING                                         = 0x00000008
	FILE_OPEN                                                              = 0x00000001
	FILE_OPEN_BY_FILE_ID                                                   = 0x00002000
	FILE_OPEN_FOR_BACKUP_INTENT                                            = 0x00004000
	FILE_OPEN_FOR_FREE_SPACE_QUERY                                         = 0x00800000
	FILE_OPEN_IF                                                           = 0x00000003
	FILE_OPEN_NO_RECALL                                                    = 0x00400000
	FILE_OPEN_REMOTE_INSTANCE                                              = 0x00000400
	FILE_OPEN_REPARSE_POINT                                                = 0x00200000
	FILE_OVERWRITE                                                         = 0x00000004
	FILE_OVERWRITE_IF                                                      = 0x00000005
	FILE_PERSISTENT_ACLS                                                   = 0x00000008
	FILE_RANDOM_ACCESS                                                     = 0x00000800
	FILE_READ_ATTRIBUTES                                                   = 128
	FILE_READ_DATA                                                         = 1
	FILE_READ_EA                                                           = 8
	FILE_READ_ONLY                                                         = 8
	FILE_READ_ONLY_VOLUME                                                  = 0x00080000
	FILE_RESERVE_OPFILTER                                                  = 0x00100000
	FILE_ROOT_DIR                                                          = 3
	FILE_SEQUENTIAL_ONLY                                                   = 0x00000004
	FILE_SEQUENTIAL_WRITE_ONCE                                             = 0x00100000
	FILE_SHARE_DELETE                                                      = 0x00000004
	FILE_SHARE_READ                                                        = 0x00000001
	FILE_SHARE_VALID_FLAGS                                                 = 0x00000007
	FILE_SHARE_WRITE                                                       = 0x00000002
	FILE_SUPERSEDE                                                         = 0x00000000
	FILE_SUPPORTS_ENCRYPTION                                               = 0x00020000
	FILE_SUPPORTS_EXTENDED_ATTRIBUTES                                      = 0x00800000
	FILE_SUPPORTS_HARD_LINKS                                               = 0x00400000
	FILE_SUPPORTS_INTEGRITY_STREAMS                                        = 0x04000000
	FILE_SUPPORTS_OBJECT_IDS                                               = 0x00010000
	FILE_SUPPORTS_OPEN_BY_FILE_ID                                          = 0x01000000
	FILE_SUPPORTS_REMOTE_STORAGE                                           = 0x00000100
	FILE_SUPPORTS_REPARSE_POINTS                                           = 0x00000080
	FILE_SUPPORTS_SPARSE_FILES                                             = 0x00000040
	FILE_SUPPORTS_TRANSACTIONS                                             = 0x00200000
	FILE_SUPPORTS_USN_JOURNAL                                              = 0x02000000
	FILE_SYNCHRONOUS_IO_ALERT                                              = 0x00000010
	FILE_SYNCHRONOUS_IO_NONALERT                                           = 0x00000020
	FILE_SYSTEM_ATTR                                                       = 2
	FILE_SYSTEM_DIR                                                        = 4
	FILE_SYSTEM_NOT_SUPPORT                                                = 6
	FILE_TRAVERSE                                                          = 32
	FILE_TYPE_CHAR                                                         = 0x2
	FILE_TYPE_DISK                                                         = 0x1
	FILE_TYPE_PIPE                                                         = 0x3
	FILE_TYPE_REMOTE                                                       = 0x8000
	FILE_TYPE_UNKNOWN                                                      = 0x0
	FILE_UNICODE_ON_DISK                                                   = 0x00000004
	FILE_UNKNOWN                                                           = 5
	FILE_USER_DISALLOWED                                                   = 7
	FILE_VER_GET_LOCALISED                                                 = 0x01
	FILE_VER_GET_NEUTRAL                                                   = 0x02
	FILE_VER_GET_PREFETCHED                                                = 0x04
	FILE_VOLUME_IS_COMPRESSED                                              = 0x00008000
	FILE_VOLUME_QUOTAS                                                     = 0x00000020
	FILE_WRITE_ATTRIBUTES                                                  = 256
	FILE_WRITE_DATA                                                        = 2
	FILE_WRITE_EA                                                          = 16
	FILE_WRITE_THROUGH                                                     = 0x00000002
	FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA                       = 4
	FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS                                   = 2
	FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX                                 = 1
	FIND_ENDSWITH                                                          = 0x00200000
	FIND_FIRST_EX_CASE_SENSITIVE                                           = 0x00000001
	FIND_FIRST_EX_LARGE_FETCH                                              = 0x00000002
	FIND_FROMEND                                                           = 0x00800000
	FIND_FROMSTART                                                         = 0x00400000
	FIND_RESOURCE_DIRECTORY_LANGUAGES                                      = 1024
	FIND_RESOURCE_DIRECTORY_NAMES                                          = 512
	FIND_RESOURCE_DIRECTORY_TYPES                                          = 256
	FIND_STARTSWITH                                                        = 0x00100000
	FIRMWARE_PTR                                                           = 0
	FIXED_PITCH                                                            = 1
	FKF_AVAILABLE                                                          = 0x00000002
	FKF_CLICKON                                                            = 0x00000040
	FKF_CONFIRMHOTKEY                                                      = 0x00000008
	FKF_FILTERKEYSON                                                       = 0x00000001
	FKF_HOTKEYACTIVE                                                       = 0x00000004
	FKF_HOTKEYSOUND                                                        = 0x00000010
	FKF_INDICATOR                                                          = 0x00000020
	FLASHW_ALL                                                             = 3
	FLASHW_CAPTION                                                         = 0x00000001
	FLASHW_STOP                                                            = 0
	FLASHW_TIMER                                                           = 0x00000004
	FLASHW_TIMERNOFG                                                       = 0x0000000c
	FLASHW_TRAY                                                            = 0x00000002
	FLI_GLYPHS                                                             = 262144
	FLI_MASK                                                               = 0x103B
	FLOODFILLBORDER                                                        = 0
	FLOODFILLSURFACE                                                       = 1
	FLS_MAXIMUM_AVAILABLE                                                  = 128
	FLT_DECIMAL_DIG                                                        = 9
	FLT_DIG                                                                = 6
	FLT_EPSILON                                                            = 0
	FLT_EVAL_METHOD                                                        = 0
	FLT_HAS_SUBNORM                                                        = 1
	FLT_MANT_DIG                                                           = 24
	FLT_MAX                                                                = 0
	FLT_MAX_10_EXP                                                         = 38
	FLT_MAX_EXP                                                            = 128
	FLT_MIN                                                                = 0
	FLT_MIN_10_EXP                                                         = -37
	FLT_MIN_EXP                                                            = -125
	FLT_RADIX                                                              = 2
	FLT_ROUNDS                                                             = 1
	FLT_TRUE_MIN                                                           = 0
	FLUSHOUTPUT                                                            = 6
	FNOINVERT                                                              = 0x02
	FOCUS_EVENT                                                            = 0x10
	FONTMAPPER_MAX                                                         = 10
	FOPEN_MAX                                                              = 20
	FOREGROUND_BLUE                                                        = 0x1
	FOREGROUND_GREEN                                                       = 0x2
	FOREGROUND_INTENSITY                                                   = 0x8
	FOREGROUND_RED                                                         = 0x4
	FOREST_USER_RID_MAX                                                    = 499
	FORMAT_MESSAGE_ALLOCATE_BUFFER                                         = 0x00000100
	FORMAT_MESSAGE_ARGUMENT_ARRAY                                          = 0x00002000
	FORMAT_MESSAGE_FROM_HMODULE                                            = 0x00000800
	FORMAT_MESSAGE_FROM_STRING                                             = 0x00000400
	FORMAT_MESSAGE_FROM_SYSTEM                                             = 0x00001000
	FORMAT_MESSAGE_IGNORE_INSERTS                                          = 0x00000200
	FORMAT_MESSAGE_MAX_WIDTH_MASK                                          = 0x000000ff
	FP_INFINITE                                                            = 1280
	FP_NAN                                                                 = 0x0100
	FP_NDENORM                                                             = 16
	FP_NINF                                                                = 4
	FP_NNORM                                                               = 8
	FP_NORMAL                                                              = 0x0400
	FP_NZERO                                                               = 32
	FP_PDENORM                                                             = 128
	FP_PINF                                                                = 512
	FP_PNORM                                                               = 256
	FP_PZERO                                                               = 64
	FP_QNAN                                                                = 2
	FP_SNAN                                                                = 1
	FP_SUBNORMAL                                                           = 17408
	FP_ZERO                                                                = 0x4000
	FRAME_FPO                                                              = 0
	FRAME_IS_LAMBDA                                                        = 0x2
	FRAME_IS_METHOD                                                        = 0x4
	FRAME_IS_OO_DEFINE                                                     = 0x8
	FRAME_IS_PROC                                                          = 0x1
	FRAME_NONFPO                                                           = 3
	FRAME_TRAP                                                             = 1
	FRAME_TSS                                                              = 2
	FROM_LEFT_1ST_BUTTON_PRESSED                                           = 0x1
	FROM_LEFT_2ND_BUTTON_PRESSED                                           = 0x4
	FROM_LEFT_3RD_BUTTON_PRESSED                                           = 0x8
	FROM_LEFT_4TH_BUTTON_PRESSED                                           = 0x10
	FROM_PROTOCOL_INFO                                                     = -1
	FRS_ERR_AUTHENTICATION                                                 = 8008
	FRS_ERR_CHILD_TO_PARENT_COMM                                           = 8011
	FRS_ERR_INSUFFICIENT_PRIV                                              = 8007
	FRS_ERR_INTERNAL                                                       = 8005
	FRS_ERR_INTERNAL_API                                                   = 8004
	FRS_ERR_INVALID_API_SEQUENCE                                           = 8001
	FRS_ERR_INVALID_SERVICE_PARAMETER                                      = 8017
	FRS_ERR_PARENT_AUTHENTICATION                                          = 8010
	FRS_ERR_PARENT_INSUFFICIENT_PRIV                                       = 8009
	FRS_ERR_PARENT_TO_CHILD_COMM                                           = 8012
	FRS_ERR_SERVICE_COMM                                                   = 8006
	FRS_ERR_STARTING_SERVICE                                               = 8002
	FRS_ERR_STOPPING_SERVICE                                               = 8003
	FRS_ERR_SYSVOL_DEMOTE                                                  = 8016
	FRS_ERR_SYSVOL_IS_BUSY                                                 = 8015
	FRS_ERR_SYSVOL_POPULATE                                                = 8013
	FRS_ERR_SYSVOL_POPULATE_TIMEOUT                                        = 8014
	FR_NOT_ENUM                                                            = 0x20
	FR_PRIVATE                                                             = 0x10
	FSHIFT                                                                 = 0x04
	FS_ARABIC                                                              = 64
	FS_BALTIC                                                              = 128
	FS_CASE_IS_PRESERVED                                                   = 2
	FS_CASE_SENSITIVE                                                      = 1
	FS_CHINESESIMP                                                         = 262144
	FS_CHINESETRAD                                                         = 1048576
	FS_CYRILLIC                                                            = 4
	FS_FILE_COMPRESSION                                                    = 16
	FS_FILE_ENCRYPTION                                                     = 131072
	FS_GREEK                                                               = 8
	FS_HEBREW                                                              = 32
	FS_JISJAPAN                                                            = 131072
	FS_JOHAB                                                               = 2097152
	FS_LATIN1                                                              = 1
	FS_LATIN2                                                              = 2
	FS_PERSISTENT_ACLS                                                     = 8
	FS_SYMBOL                                                              = 2147483648
	FS_THAI                                                                = 65536
	FS_TURKISH                                                             = 16
	FS_UNICODE_STORED_ON_DISK                                              = 4
	FS_VIETNAMESE                                                          = 256
	FS_VOL_IS_COMPRESSED                                                   = 32768
	FS_WANSUNG                                                             = 524288
	FVIRTKEY                                                               = 1
	FW_BLACK                                                               = 900
	FW_BOLD                                                                = 700
	FW_DEMIBOLD                                                            = 600
	FW_DONTCARE                                                            = 0
	FW_EXTRABOLD                                                           = 800
	FW_EXTRALIGHT                                                          = 200
	FW_HEAVY                                                               = 900
	FW_LIGHT                                                               = 300
	FW_MEDIUM                                                              = 500
	FW_NORMAL                                                              = 400
	FW_REGULAR                                                             = 400
	FW_SEMIBOLD                                                            = 600
	FW_THIN                                                                = 100
	FW_ULTRABOLD                                                           = 800
	FW_ULTRALIGHT                                                          = 200
	F_OK                                                                   = 0
	GAI_STRERROR_BUFFER_SIZE                                               = 1024
	GA_PARENT                                                              = 1
	GA_ROOT                                                                = 2
	GA_ROOTOWNER                                                           = 3
	GB2312_CHARSET                                                         = 134
	GCLP_HBRBACKGROUND                                                     = -10
	GCLP_HCURSOR                                                           = -12
	GCLP_HICON                                                             = -14
	GCLP_HICONSM                                                           = -34
	GCLP_HMODULE                                                           = -16
	GCLP_MENUNAME                                                          = -8
	GCLP_WNDPROC                                                           = -24
	GCL_CBCLSEXTRA                                                         = -20
	GCL_CBWNDEXTRA                                                         = -18
	GCL_CONVERSION                                                         = 0x0001
	GCL_REVERSECONVERSION                                                  = 0x0002
	GCL_REVERSE_LENGTH                                                     = 0x0003
	GCL_STYLE                                                              = -26
	GCPCLASS_ARABIC                                                        = 2
	GCPCLASS_HEBREW                                                        = 2
	GCPCLASS_LATIN                                                         = 1
	GCPCLASS_LATINNUMBER                                                   = 5
	GCPCLASS_LATINNUMERICSEPARATOR                                         = 7
	GCPCLASS_LATINNUMERICTERMINATOR                                        = 6
	GCPCLASS_LOCALNUMBER                                                   = 4
	GCPCLASS_NEUTRAL                                                       = 3
	GCPCLASS_NUMERICSEPARATOR                                              = 8
	GCPCLASS_POSTBOUNDLTR                                                  = 0x20
	GCPCLASS_POSTBOUNDRTL                                                  = 0x10
	GCPCLASS_PREBOUNDLTR                                                   = 0x80
	GCPCLASS_PREBOUNDRTL                                                   = 0x40
	GCPGLYPH_LINKAFTER                                                     = 0x4000
	GCPGLYPH_LINKBEFORE                                                    = 0x8000
	GCP_CLASSIN                                                            = 524288
	GCP_DBCS                                                               = 0x0001
	GCP_DIACRITIC                                                          = 0x0100
	GCP_DISPLAYZWG                                                         = 4194304
	GCP_ERROR                                                              = 0x8000
	GCP_GLYPHSHAPE                                                         = 0x0010
	GCP_JUSTIFY                                                            = 65536
	GCP_JUSTIFYIN                                                          = 2097152
	GCP_KASHIDA                                                            = 0x0400
	GCP_LIGATE                                                             = 0x0020
	GCP_MAXEXTENT                                                          = 1048576
	GCP_NEUTRALOVERRIDE                                                    = 33554432
	GCP_NUMERICOVERRIDE                                                    = 16777216
	GCP_NUMERICSLATIN                                                      = 67108864
	GCP_NUMERICSLOCAL                                                      = 134217728
	GCP_REORDER                                                            = 0x0002
	GCP_SYMSWAPOFF                                                         = 8388608
	GCP_USEKERNING                                                         = 0x0008
	GCS_COMPATTR                                                           = 0x0010
	GCS_COMPCLAUSE                                                         = 0x0020
	GCS_COMPREADATTR                                                       = 0x0002
	GCS_COMPREADCLAUSE                                                     = 0x0004
	GCS_COMPREADSTR                                                        = 0x0001
	GCS_COMPSTR                                                            = 0x0008
	GCS_CURSORPOS                                                          = 0x0080
	GCS_DELTASTART                                                         = 0x0100
	GCS_RESULTCLAUSE                                                       = 0x1000
	GCS_RESULTREADCLAUSE                                                   = 0x0400
	GCS_RESULTREADSTR                                                      = 0x0200
	GCS_RESULTSTR                                                          = 0x0800
	GCW_ATOM                                                               = -32
	GDICOMMENT_BEGINGROUP                                                  = 0x00000002
	GDICOMMENT_ENDGROUP                                                    = 0x00000003
	GDICOMMENT_IDENTIFIER                                                  = 0x43494447
	GDICOMMENT_MULTIFORMATS                                                = 0x40000004
	GDICOMMENT_UNICODE_END                                                 = 0x00000080
	GDICOMMENT_UNICODE_STRING                                              = 0x00000040
	GDICOMMENT_WINDOWS_METAFILE                                            = 0x80000001
	GDIPLUS_TS_QUERYVER                                                    = 4122
	GDIPLUS_TS_RECORD                                                      = 4123
	GDI_ERROR                                                              = 4294967295
	GDI_OBJ_LAST                                                           = 14
	GENERIC_ALL                                                            = 268435456
	GENERIC_EXECUTE                                                        = 536870912
	GENERIC_READ                                                           = 2147483648
	GENERIC_WRITE                                                          = 1073741824
	GEOID_NOT_AVAILABLE                                                    = -1
	GETCOLORTABLE                                                          = 5
	GETDEVICEUNITS                                                         = 42
	GETEXTENDEDTEXTMETRICS                                                 = 256
	GETEXTENTTABLE                                                         = 257
	GETFACENAME                                                            = 513
	GETPAIRKERNTABLE                                                       = 258
	GETPENWIDTH                                                            = 16
	GETPHYSPAGESIZE                                                        = 12
	GETPRINTINGOFFSET                                                      = 13
	GETSCALINGFACTOR                                                       = 14
	GETSETPAPERBINS                                                        = 29
	GETSETPAPERMETRICS                                                     = 35
	GETSETPRINTORIENT                                                      = 30
	GETSETSCREENPARAMS                                                     = 3072
	GETTECHNOLGY                                                           = 20
	GETTECHNOLOGY                                                          = 20
	GETTRACKKERNTABLE                                                      = 259
	GETVECTORBRUSHSIZE                                                     = 27
	GETVECTORPENSIZE                                                       = 26
	GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS                                 = 4
	GET_MODULE_HANDLE_EX_FLAG_PIN                                          = 1
	GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT                           = 2
	GET_PS_FEATURESETTING                                                  = 4121
	GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A                                    = "GetSystemWow64DirectoryA"
	GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A                                    = "GetSystemWow64DirectoryW"
	GET_TAPE_DRIVE_INFORMATION                                             = 1
	GET_TAPE_MEDIA_INFORMATION                                             = 0
	GGI_MARK_NONEXISTING_GLYPHS                                            = 0x0001
	GGL_INDEX                                                              = 0x00000002
	GGL_LEVEL                                                              = 0x00000001
	GGL_PRIVATE                                                            = 0x00000004
	GGL_STRING                                                             = 0x00000003
	GGO_BEZIER                                                             = 3
	GGO_BITMAP                                                             = 1
	GGO_GLYPH_INDEX                                                        = 0x0080
	GGO_GRAY2_BITMAP                                                       = 4
	GGO_GRAY4_BITMAP                                                       = 5
	GGO_GRAY8_BITMAP                                                       = 6
	GGO_METRICS                                                            = 0
	GGO_NATIVE                                                             = 2
	GGO_UNHINTED                                                           = 0x0100
	GHND                                                                   = 66
	GIDC_ARRIVAL                                                           = 1
	GIDC_REMOVAL                                                           = 2
	GL_ID_CANNOTSAVE                                                       = 0x00000011
	GL_ID_CHOOSECANDIDATE                                                  = 0x00000028
	GL_ID_INPUTCODE                                                        = 0x00000026
	GL_ID_INPUTRADICAL                                                     = 0x00000025
	GL_ID_INPUTREADING                                                     = 0x00000024
	GL_ID_INPUTSYMBOL                                                      = 0x00000027
	GL_ID_NOCONVERT                                                        = 0x00000020
	GL_ID_NODICTIONARY                                                     = 0x00000010
	GL_ID_NOMODULE                                                         = 0x00000001
	GL_ID_PRIVATE_FIRST                                                    = 0x00008000
	GL_ID_PRIVATE_LAST                                                     = 0x0000FFFF
	GL_ID_READINGCONFLICT                                                  = 0x00000023
	GL_ID_REVERSECONVERSION                                                = 0x00000029
	GL_ID_TOOMANYSTROKE                                                    = 0x00000022
	GL_ID_TYPINGERROR                                                      = 0x00000021
	GL_ID_UNKNOWN                                                          = 0x00000000
	GL_LEVEL_ERROR                                                         = 0x00000002
	GL_LEVEL_FATAL                                                         = 0x00000001
	GL_LEVEL_INFORMATION                                                   = 0x00000004
	GL_LEVEL_NOGUIDELINE                                                   = 0x00000000
	GL_LEVEL_WARNING                                                       = 0x00000003
	GMDI_GOINTOPOPUPS                                                      = 2
	GMDI_USEDISABLED                                                       = 1
	GMEM_DDESHARE                                                          = 0x2000
	GMEM_DISCARDABLE                                                       = 0x100
	GMEM_DISCARDED                                                         = 0x4000
	GMEM_FIXED                                                             = 0x0
	GMEM_INVALID_HANDLE                                                    = 0x8000
	GMEM_LOCKCOUNT                                                         = 0x00ff
	GMEM_LOWER                                                             = 4096
	GMEM_MODIFY                                                            = 0x80
	GMEM_MOVEABLE                                                          = 0x2
	GMEM_NOCOMPACT                                                         = 0x10
	GMEM_NODISCARD                                                         = 0x20
	GMEM_NOTIFY                                                            = 0x4000
	GMEM_NOT_BANKED                                                        = 0x1000
	GMEM_SHARE                                                             = 0x2000
	GMEM_VALID_FLAGS                                                       = 0x7f72
	GMEM_ZEROINIT                                                          = 0x40
	GMMP_USE_DISPLAY_POINTS                                                = 1
	GMMP_USE_HIGH_RESOLUTION_POINTS                                        = 2
	GM_ADVANCED                                                            = 2
	GM_COMPATIBLE                                                          = 1
	GM_LAST                                                                = 2
	GPTR                                                                   = 64
	GRADIENT_FILL_OP_FLAG                                                  = 0x000000ff
	GRADIENT_FILL_RECT_H                                                   = 0x00000000
	GRADIENT_FILL_RECT_V                                                   = 0x00000001
	GRADIENT_FILL_TRIANGLE                                                 = 0x00000002
	GRAY_BRUSH                                                             = 2
	GREEK_CHARSET                                                          = 161
	GROUP_SECURITY_INFORMATION                                             = 2
	GR_GDIOBJECTS                                                          = 0
	GR_USEROBJECTS                                                         = 1
	GS_8BIT_INDICES                                                        = 0x00000001
	GUID_DEFINED                                                           = 0
	GUI_16BITTASK                                                          = 0x00000000
	GUI_CARETBLINKING                                                      = 0x00000001
	GUI_INMENUMODE                                                         = 0x00000004
	GUI_INMOVESIZE                                                         = 0x00000002
	GUI_POPUPMENUMODE                                                      = 0x00000010
	GUI_SYSTEMMENUMODE                                                     = 0x00000008
	GWLP_HINSTANCE                                                         = -6
	GWLP_HWNDPARENT                                                        = -8
	GWLP_ID                                                                = -12
	GWLP_USERDATA                                                          = -21
	GWLP_WNDPROC                                                           = -4
	GWL_EXSTYLE                                                            = -20
	GWL_ID                                                                 = -12
	GWL_STYLE                                                              = -16
	GW_CHILD                                                               = 5
	GW_ENABLEDPOPUP                                                        = 6
	GW_HWNDFIRST                                                           = 0
	GW_HWNDLAST                                                            = 1
	GW_HWNDNEXT                                                            = 2
	GW_HWNDPREV                                                            = 3
	GW_MAX                                                                 = 6
	GW_OWNER                                                               = 4
	HALFTONE                                                               = 4
	HANDLE_FLAG_INHERIT                                                    = 0x1
	HANDLE_FLAG_PROTECT_FROM_CLOSE                                         = 0x2
	HANGEUL_CHARSET                                                        = 129
	HANGUL_CHARSET                                                         = 129
	HAVE_DECLSPEC                                                          = 1
	HAVE_INTPTR_T                                                          = 1
	HAVE_INTRIN_H                                                          = 1
	HAVE_INTTYPES_H                                                        = 1
	HAVE_MEMORY_H                                                          = 1
	HAVE_NO_SEH                                                            = 1
	HAVE_PUTENV_THAT_COPIES                                                = 1
	HAVE_STDINT_H                                                          = 1
	HAVE_STDLIB_H                                                          = 1
	HAVE_STRINGS_H                                                         = 1
	HAVE_STRING_H                                                          = 1
	HAVE_SYS_STAT_H                                                        = 1
	HAVE_SYS_TYPES_H                                                       = 1
	HAVE_UINTPTR_T                                                         = 1
	HAVE_UNISTD_H                                                          = 1
	HAVE_WSPIAPI_H                                                         = 1
	HAVE_ZLIB                                                              = 1
	HCBT_ACTIVATE                                                          = 5
	HCBT_CLICKSKIPPED                                                      = 6
	HCBT_CREATEWND                                                         = 3
	HCBT_DESTROYWND                                                        = 4
	HCBT_KEYSKIPPED                                                        = 7
	HCBT_MINMAX                                                            = 1
	HCBT_MOVESIZE                                                          = 0
	HCBT_QS                                                                = 2
	HCBT_SETFOCUS                                                          = 9
	HCBT_SYSCOMMAND                                                        = 8
	HCF_AVAILABLE                                                          = 0x00000002
	HCF_CONFIRMHOTKEY                                                      = 0x00000008
	HCF_DEFAULTDESKTOP                                                     = 0x00000200
	HCF_HIGHCONTRASTON                                                     = 0x00000001
	HCF_HOTKEYACTIVE                                                       = 0x00000004
	HCF_HOTKEYAVAILABLE                                                    = 0x00000040
	HCF_HOTKEYSOUND                                                        = 0x00000010
	HCF_INDICATOR                                                          = 0x00000020
	HCF_LOGONDESKTOP                                                       = 0x00000100
	HCF_OPTION_NOTHEMECHANGE                                               = 0x00001000
	HC_ACTION                                                              = 0
	HC_GETNEXT                                                             = 1
	HC_NOREM                                                               = 3
	HC_NOREMOVE                                                            = 3
	HC_SKIP                                                                = 2
	HC_SYSMODALOFF                                                         = 5
	HC_SYSMODALON                                                          = 4
	HEAP_CREATE_ALIGN_16                                                   = 0x00010000
	HEAP_CREATE_ENABLE_EXECUTE                                             = 0x00040000
	HEAP_CREATE_ENABLE_TRACING                                             = 0x00020000
	HEAP_DISABLE_COALESCE_ON_FREE                                          = 0x00000080
	HEAP_FREE_CHECKING_ENABLED                                             = 0x00000040
	HEAP_GENERATE_EXCEPTIONS                                               = 0x00000004
	HEAP_GROWABLE                                                          = 0x00000002
	HEAP_MAXIMUM_TAG                                                       = 0x0FFF
	HEAP_NO_SERIALIZE                                                      = 0x00000001
	HEAP_PSEUDO_TAG_FLAG                                                   = 0x8000
	HEAP_REALLOC_IN_PLACE_ONLY                                             = 0x00000010
	HEAP_TAG_SHIFT                                                         = 18
	HEAP_TAIL_CHECKING_ENABLED                                             = 0x00000020
	HEAP_ZERO_MEMORY                                                       = 0x00000008
	HEBREW_CHARSET                                                         = 177
	HELPINFO_MENUITEM                                                      = 0x0002
	HELPINFO_WINDOW                                                        = 0x0001
	HELP_COMMAND                                                           = 0x0102
	HELP_CONTENTS                                                          = 0x0003
	HELP_CONTEXT                                                           = 0x0001
	HELP_CONTEXTMENU                                                       = 0x000a
	HELP_CONTEXTPOPUP                                                      = 0x0008
	HELP_FINDER                                                            = 0x000b
	HELP_FORCEFILE                                                         = 0x0009
	HELP_HELPONHELP                                                        = 0x0004
	HELP_INDEX                                                             = 0x0003
	HELP_KEY                                                               = 0x0101
	HELP_MULTIKEY                                                          = 0x0201
	HELP_PARTIALKEY                                                        = 0x0105
	HELP_QUIT                                                              = 0x0002
	HELP_SETCONTENTS                                                       = 0x0005
	HELP_SETINDEX                                                          = 0x0005
	HELP_SETPOPUP_POS                                                      = 0x000d
	HELP_SETWINPOS                                                         = 0x0203
	HELP_TCARD                                                             = 0x8000
	HELP_TCARD_DATA                                                        = 0x0010
	HELP_TCARD_OTHER_CALLER                                                = 0x0011
	HELP_WM_HELP                                                           = 0x000c
	HIDE_WINDOW                                                            = 0
	HIGH_PRIORITY_CLASS                                                    = 0x80
	HIGH_SURROGATE_END                                                     = 0xdbff
	HIGH_SURROGATE_START                                                   = 0xd800
	HINSTANCE_ERROR                                                        = 32
	HISTORY_NO_DUP_FLAG                                                    = 0x1
	HKL_NEXT                                                               = 1
	HKL_PREV                                                               = 0
	HMONITOR_DECLARED                                                      = 1
	HOLLOW_BRUSH                                                           = 5
	HORZRES                                                                = 8
	HORZSIZE                                                               = 4
	HOST_NOT_FOUND                                                         = 11001
	HOVER_DEFAULT                                                          = 0xFFFFFFFF
	HSHELL_ACCESSIBILITYSTATE                                              = 11
	HSHELL_ACTIVATESHELLWINDOW                                             = 3
	HSHELL_APPCOMMAND                                                      = 12
	HSHELL_ENDTASK                                                         = 10
	HSHELL_FLASH                                                           = 32774
	HSHELL_GETMINRECT                                                      = 5
	HSHELL_HIGHBIT                                                         = 0x8000
	HSHELL_LANGUAGE                                                        = 8
	HSHELL_REDRAW                                                          = 6
	HSHELL_RUDEAPPACTIVATED                                                = 32772
	HSHELL_SYSMENU                                                         = 9
	HSHELL_TASKMAN                                                         = 7
	HSHELL_WINDOWACTIVATED                                                 = 4
	HSHELL_WINDOWCREATED                                                   = 1
	HSHELL_WINDOWDESTROYED                                                 = 2
	HSHELL_WINDOWREPLACED                                                  = 13
	HSHELL_WINDOWREPLACING                                                 = 14
	HS_API_MAX                                                             = 12
	HS_BDIAGONAL                                                           = 3
	HS_CROSS                                                               = 4
	HS_DIAGCROSS                                                           = 5
	HS_FDIAGONAL                                                           = 2
	HS_HORIZONTAL                                                          = 0
	HS_VERTICAL                                                            = 1
	HTBORDER                                                               = 18
	HTBOTTOM                                                               = 15
	HTBOTTOMLEFT                                                           = 16
	HTBOTTOMRIGHT                                                          = 17
	HTCAPTION                                                              = 2
	HTCLIENT                                                               = 1
	HTCLOSE                                                                = 20
	HTERROR                                                                = -2
	HTGROWBOX                                                              = 4
	HTHELP                                                                 = 21
	HTHSCROLL                                                              = 6
	HTLEFT                                                                 = 10
	HTMAXBUTTON                                                            = 9
	HTMENU                                                                 = 5
	HTMINBUTTON                                                            = 8
	HTNOWHERE                                                              = 0
	HTOBJECT                                                               = 19
	HTREDUCE                                                               = 8
	HTRIGHT                                                                = 11
	HTSIZE                                                                 = 4
	HTSIZEFIRST                                                            = 10
	HTSIZELAST                                                             = 17
	HTSYSMENU                                                              = 3
	HTTOP                                                                  = 12
	HTTOPLEFT                                                              = 13
	HTTOPRIGHT                                                             = 14
	HTTRANSPARENT                                                          = -1
	HTVSCROLL                                                              = 7
	HTZOOM                                                                 = 9
	HW_PROFILE_GUIDLEN                                                     = 39
	IACE_CHILDREN                                                          = 0x0001
	IACE_DEFAULT                                                           = 0x0010
	IACE_IGNORENOCONTEXT                                                   = 0x0020
	ICM_ADDPROFILE                                                         = 1
	ICM_DELETEPROFILE                                                      = 2
	ICM_DONE_OUTSIDEDC                                                     = 4
	ICM_OFF                                                                = 1
	ICM_ON                                                                 = 2
	ICM_QUERY                                                              = 3
	ICM_QUERYMATCH                                                         = 7
	ICM_QUERYPROFILE                                                       = 3
	ICM_REGISTERICMATCHER                                                  = 5
	ICM_SETDEFAULTPROFILE                                                  = 4
	ICM_UNREGISTERICMATCHER                                                = 6
	ICON_BIG                                                               = 1
	ICON_SMALL                                                             = 0
	ICON_SMALL2                                                            = 2
	IDABORT                                                                = 3
	IDANI_CAPTION                                                          = 3
	IDANI_OPEN                                                             = 1
	IDCANCEL                                                               = 2
	IDCLOSE                                                                = 8
	IDCONTINUE                                                             = 11
	IDHELP                                                                 = 9
	IDHOT_SNAPDESKTOP                                                      = -2
	IDHOT_SNAPWINDOW                                                       = -1
	IDH_CANCEL                                                             = 28444
	IDH_GENERIC_HELP_BUTTON                                                = 28442
	IDH_HELP                                                               = 28445
	IDH_MISSING_CONTEXT                                                    = 28441
	IDH_NO_HELP                                                            = 28440
	IDH_OK                                                                 = 28443
	IDIGNORE                                                               = 5
	IDLE_PRIORITY_CLASS                                                    = 0x40
	IDNO                                                                   = 7
	IDOK                                                                   = 1
	IDRETRY                                                                = 4
	IDTIMEOUT                                                              = 32000
	IDTRYAGAIN                                                             = 10
	IDYES                                                                  = 6
	IE_BADID                                                               = -1
	IE_BAUDRATE                                                            = -12
	IE_BYTESIZE                                                            = -11
	IE_DEFAULT                                                             = -5
	IE_HARDWARE                                                            = -10
	IE_MEMORY                                                              = -4
	IE_NOPEN                                                               = -3
	IE_OPEN                                                                = -2
	IFF_BROADCAST                                                          = 0x00000002
	IFF_LOOPBACK                                                           = 0x00000004
	IFF_MULTICAST                                                          = 0x00000010
	IFF_POINTTOPOINT                                                       = 0x00000008
	IFF_UP                                                                 = 0x00000001
	IGIMIF_RIGHTMENU                                                       = 0x0001
	IGIMII_CMODE                                                           = 0x0001
	IGIMII_CONFIGURE                                                       = 0x0004
	IGIMII_HELP                                                            = 0x0010
	IGIMII_INPUTTOOLS                                                      = 0x0040
	IGIMII_OTHER                                                           = 0x0020
	IGIMII_SMODE                                                           = 0x0002
	IGIMII_TOOLS                                                           = 0x0008
	IGNORE                                                                 = 0
	IGP_CONVERSION                                                         = 0x00000008
	IGP_PROPERTY                                                           = 0x00000004
	IGP_SELECT                                                             = 0x00000018
	IGP_SENTENCE                                                           = 0x0000000c
	IGP_SETCOMPSTR                                                         = 0x00000014
	IGP_UI                                                                 = 0x00000010
	ILLUMINANT_A                                                           = 1
	ILLUMINANT_B                                                           = 2
	ILLUMINANT_C                                                           = 3
	ILLUMINANT_D50                                                         = 4
	ILLUMINANT_D55                                                         = 5
	ILLUMINANT_D65                                                         = 6
	ILLUMINANT_D75                                                         = 7
	ILLUMINANT_DAYLIGHT                                                    = 3
	ILLUMINANT_DEVICE_DEFAULT                                              = 0
	ILLUMINANT_F2                                                          = 8
	ILLUMINANT_FLUORESCENT                                                 = 8
	ILLUMINANT_MAX_INDEX                                                   = 8
	ILLUMINANT_NTSC                                                        = 3
	ILLUMINANT_TUNGSTEN                                                    = 1
	IMAGE_ARCHIVE_END                                                      = "`\n"
	IMAGE_ARCHIVE_LINKER_MEMBER                                            = "/               "
	IMAGE_ARCHIVE_LONGNAMES_MEMBER                                         = "//              "
	IMAGE_ARCHIVE_PAD                                                      = "\n"
	IMAGE_ARCHIVE_START                                                    = "!<arch>\n"
	IMAGE_ARCHIVE_START_SIZE                                               = 8
	IMAGE_BITMAP                                                           = 0
	IMAGE_COMDAT_SELECT_ANY                                                = 2
	IMAGE_COMDAT_SELECT_ASSOCIATIVE                                        = 5
	IMAGE_COMDAT_SELECT_EXACT_MATCH                                        = 4
	IMAGE_COMDAT_SELECT_LARGEST                                            = 6
	IMAGE_COMDAT_SELECT_NEWEST                                             = 7
	IMAGE_COMDAT_SELECT_NODUPLICATES                                       = 1
	IMAGE_COMDAT_SELECT_SAME_SIZE                                          = 3
	IMAGE_CURSOR                                                           = 2
	IMAGE_DEBUG_MISC_EXENAME                                               = 1
	IMAGE_DEBUG_TYPE_BORLAND                                               = 9
	IMAGE_DEBUG_TYPE_CLSID                                                 = 11
	IMAGE_DEBUG_TYPE_CODEVIEW                                              = 2
	IMAGE_DEBUG_TYPE_COFF                                                  = 1
	IMAGE_DEBUG_TYPE_EXCEPTION                                             = 5
	IMAGE_DEBUG_TYPE_FIXUP                                                 = 6
	IMAGE_DEBUG_TYPE_FPO                                                   = 3
	IMAGE_DEBUG_TYPE_MISC                                                  = 4
	IMAGE_DEBUG_TYPE_OMAP_FROM_SRC                                         = 8
	IMAGE_DEBUG_TYPE_OMAP_TO_SRC                                           = 7
	IMAGE_DEBUG_TYPE_RESERVED10                                            = 10
	IMAGE_DEBUG_TYPE_UNKNOWN                                               = 0
	IMAGE_DIRECTORY_ENTRY_ARCHITECTURE                                     = 7
	IMAGE_DIRECTORY_ENTRY_BASERELOC                                        = 5
	IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT                                     = 11
	IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR                                   = 14
	IMAGE_DIRECTORY_ENTRY_DEBUG                                            = 6
	IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT                                     = 13
	IMAGE_DIRECTORY_ENTRY_EXCEPTION                                        = 3
	IMAGE_DIRECTORY_ENTRY_EXPORT                                           = 0
	IMAGE_DIRECTORY_ENTRY_GLOBALPTR                                        = 8
	IMAGE_DIRECTORY_ENTRY_IAT                                              = 12
	IMAGE_DIRECTORY_ENTRY_IMPORT                                           = 1
	IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG                                      = 10
	IMAGE_DIRECTORY_ENTRY_RESOURCE                                         = 2
	IMAGE_DIRECTORY_ENTRY_SECURITY                                         = 4
	IMAGE_DIRECTORY_ENTRY_TLS                                              = 9
	IMAGE_DLLCHARACTERISTICS_APPCONTAINER                                  = 0x1000
	IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE                                  = 0x0040
	IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY                               = 0x0080
	IMAGE_DLLCHARACTERISTICS_GUARD_CF                                      = 0x4000
	IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA                               = 0x0020
	IMAGE_DLLCHARACTERISTICS_NO_BIND                                       = 0x0800
	IMAGE_DLLCHARACTERISTICS_NO_ISOLATION                                  = 0x0200
	IMAGE_DLLCHARACTERISTICS_NO_SEH                                        = 0x0400
	IMAGE_DLLCHARACTERISTICS_NX_COMPAT                                     = 0x0100
	IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE                         = 0x8000
	IMAGE_DLLCHARACTERISTICS_WDM_DRIVER                                    = 0x2000
	IMAGE_DOS_SIGNATURE                                                    = 0x5A4D
	IMAGE_ENHMETAFILE                                                      = 3
	IMAGE_FILE_32BIT_MACHINE                                               = 0x0100
	IMAGE_FILE_AGGRESIVE_WS_TRIM                                           = 0x0010
	IMAGE_FILE_BYTES_REVERSED_HI                                           = 0x8000
	IMAGE_FILE_BYTES_REVERSED_LO                                           = 0x0080
	IMAGE_FILE_DEBUG_STRIPPED                                              = 0x0200
	IMAGE_FILE_DLL                                                         = 0x2000
	IMAGE_FILE_EXECUTABLE_IMAGE                                            = 0x0002
	IMAGE_FILE_LARGE_ADDRESS_AWARE                                         = 0x0020
	IMAGE_FILE_LINE_NUMS_STRIPPED                                          = 0x0004
	IMAGE_FILE_LOCAL_SYMS_STRIPPED                                         = 0x0008
	IMAGE_FILE_MACHINE_ALPHA                                               = 0x0184
	IMAGE_FILE_MACHINE_ALPHA64                                             = 0x0284
	IMAGE_FILE_MACHINE_AM33                                                = 0x01d3
	IMAGE_FILE_MACHINE_AMD64                                               = 0x8664
	IMAGE_FILE_MACHINE_ARM                                                 = 0x01c0
	IMAGE_FILE_MACHINE_ARM64                                               = 0xaa64
	IMAGE_FILE_MACHINE_ARMNT                                               = 0x01c4
	IMAGE_FILE_MACHINE_ARMV7                                               = 0x01c4
	IMAGE_FILE_MACHINE_AXP64                                               = 644
	IMAGE_FILE_MACHINE_CEE                                                 = 0xc0ee
	IMAGE_FILE_MACHINE_CEF                                                 = 0x0CEF
	IMAGE_FILE_MACHINE_EBC                                                 = 0x0EBC
	IMAGE_FILE_MACHINE_I386                                                = 0x014c
	IMAGE_FILE_MACHINE_IA64                                                = 0x0200
	IMAGE_FILE_MACHINE_M32R                                                = 0x9041
	IMAGE_FILE_MACHINE_MIPS16                                              = 0x0266
	IMAGE_FILE_MACHINE_MIPSFPU                                             = 0x0366
	IMAGE_FILE_MACHINE_MIPSFPU16                                           = 0x0466
	IMAGE_FILE_MACHINE_POWERPC                                             = 0x01F0
	IMAGE_FILE_MACHINE_POWERPCFP                                           = 0x01f1
	IMAGE_FILE_MACHINE_R10000                                              = 0x0168
	IMAGE_FILE_MACHINE_R3000                                               = 0x0162
	IMAGE_FILE_MACHINE_R4000                                               = 0x0166
	IMAGE_FILE_MACHINE_SH3                                                 = 0x01a2
	IMAGE_FILE_MACHINE_SH3DSP                                              = 0x01a3
	IMAGE_FILE_MACHINE_SH3E                                                = 0x01a4
	IMAGE_FILE_MACHINE_SH4                                                 = 0x01a6
	IMAGE_FILE_MACHINE_SH5                                                 = 0x01a8
	IMAGE_FILE_MACHINE_THUMB                                               = 0x01c2
	IMAGE_FILE_MACHINE_TRICORE                                             = 0x0520
	IMAGE_FILE_MACHINE_UNKNOWN                                             = 0
	IMAGE_FILE_MACHINE_WCEMIPSV2                                           = 0x0169
	IMAGE_FILE_NET_RUN_FROM_SWAP                                           = 0x0800
	IMAGE_FILE_RELOCS_STRIPPED                                             = 0x0001
	IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP                                     = 0x0400
	IMAGE_FILE_SYSTEM                                                      = 0x1000
	IMAGE_FILE_UP_SYSTEM_ONLY                                              = 0x4000
	IMAGE_ICON                                                             = 1
	IMAGE_NT_OPTIONAL_HDR32_MAGIC                                          = 0x10b
	IMAGE_NT_OPTIONAL_HDR64_MAGIC                                          = 0x20b
	IMAGE_NT_OPTIONAL_HDR_MAGIC                                            = 523
	IMAGE_NT_SIGNATURE                                                     = 0x00004550
	IMAGE_NUMBEROF_DIRECTORY_ENTRIES                                       = 16
	IMAGE_ORDINAL_FLAG                                                     = 9223372036854775808
	IMAGE_ORDINAL_FLAG32                                                   = 0x80000000
	IMAGE_ORDINAL_FLAG64                                                   = 0x8000000000000000
	IMAGE_OS2_SIGNATURE                                                    = 0x454E
	IMAGE_OS2_SIGNATURE_LE                                                 = 0x454C
	IMAGE_REL_ALPHA_ABSOLUTE                                               = 0x0000
	IMAGE_REL_ALPHA_BRADDR                                                 = 0x0007
	IMAGE_REL_ALPHA_GPDISP                                                 = 0x0006
	IMAGE_REL_ALPHA_GPREL32                                                = 0x0003
	IMAGE_REL_ALPHA_GPRELHI                                                = 0x0017
	IMAGE_REL_ALPHA_GPRELLO                                                = 0x0016
	IMAGE_REL_ALPHA_HINT                                                   = 0x0008
	IMAGE_REL_ALPHA_INLINE_REFLONG                                         = 0x0009
	IMAGE_REL_ALPHA_LITERAL                                                = 0x0004
	IMAGE_REL_ALPHA_LITUSE                                                 = 0x0005
	IMAGE_REL_ALPHA_MATCH                                                  = 0x000D
	IMAGE_REL_ALPHA_PAIR                                                   = 0x000C
	IMAGE_REL_ALPHA_REFHI                                                  = 0x000A
	IMAGE_REL_ALPHA_REFLO                                                  = 0x000B
	IMAGE_REL_ALPHA_REFLONG                                                = 0x0001
	IMAGE_REL_ALPHA_REFLONGNB                                              = 0x0010
	IMAGE_REL_ALPHA_REFQ1                                                  = 0x0015
	IMAGE_REL_ALPHA_REFQ2                                                  = 0x0014
	IMAGE_REL_ALPHA_REFQ3                                                  = 0x0013
	IMAGE_REL_ALPHA_REFQUAD                                                = 0x0002
	IMAGE_REL_ALPHA_SECREL                                                 = 0x000F
	IMAGE_REL_ALPHA_SECRELHI                                               = 0x0012
	IMAGE_REL_ALPHA_SECRELLO                                               = 0x0011
	IMAGE_REL_ALPHA_SECTION                                                = 0x000E
	IMAGE_REL_AMD64_ABSOLUTE                                               = 0x0000
	IMAGE_REL_AMD64_ADDR32                                                 = 0x0002
	IMAGE_REL_AMD64_ADDR32NB                                               = 0x0003
	IMAGE_REL_AMD64_ADDR64                                                 = 0x0001
	IMAGE_REL_AMD64_PAIR                                                   = 0x000F
	IMAGE_REL_AMD64_REL32                                                  = 0x0004
	IMAGE_REL_AMD64_REL32_1                                                = 0x0005
	IMAGE_REL_AMD64_REL32_2                                                = 0x0006
	IMAGE_REL_AMD64_REL32_3                                                = 0x0007
	IMAGE_REL_AMD64_REL32_4                                                = 0x0008
	IMAGE_REL_AMD64_REL32_5                                                = 0x0009
	IMAGE_REL_AMD64_SECREL                                                 = 0x000B
	IMAGE_REL_AMD64_SECREL7                                                = 0x000C
	IMAGE_REL_AMD64_SECTION                                                = 0x000A
	IMAGE_REL_AMD64_SREL32                                                 = 0x000E
	IMAGE_REL_AMD64_SSPAN32                                                = 0x0010
	IMAGE_REL_AMD64_TOKEN                                                  = 0x000D
	IMAGE_REL_AM_ABSOLUTE                                                  = 0x0000
	IMAGE_REL_AM_ADDR32                                                    = 0x0001
	IMAGE_REL_AM_ADDR32NB                                                  = 0x0002
	IMAGE_REL_AM_CALL32                                                    = 0x0003
	IMAGE_REL_AM_FUNCINFO                                                  = 0x0004
	IMAGE_REL_AM_REL32_1                                                   = 0x0005
	IMAGE_REL_AM_REL32_2                                                   = 0x0006
	IMAGE_REL_AM_SECREL                                                    = 0x0007
	IMAGE_REL_AM_SECTION                                                   = 0x0008
	IMAGE_REL_AM_TOKEN                                                     = 0x0009
	IMAGE_REL_ARM_ABSOLUTE                                                 = 0x0000
	IMAGE_REL_ARM_ADDR32                                                   = 0x0001
	IMAGE_REL_ARM_ADDR32NB                                                 = 0x0002
	IMAGE_REL_ARM_BLX11                                                    = 0x0009
	IMAGE_REL_ARM_BLX23T                                                   = 0x0015
	IMAGE_REL_ARM_BLX24                                                    = 0x0008
	IMAGE_REL_ARM_BRANCH11                                                 = 0x0004
	IMAGE_REL_ARM_BRANCH20T                                                = 0x0012
	IMAGE_REL_ARM_BRANCH24                                                 = 0x0003
	IMAGE_REL_ARM_BRANCH24T                                                = 0x0014
	IMAGE_REL_ARM_GPREL12                                                  = 0x0006
	IMAGE_REL_ARM_GPREL7                                                   = 0x0007
	IMAGE_REL_ARM_MOV32                                                    = 0x0010
	IMAGE_REL_ARM_MOV32A                                                   = 0x0010
	IMAGE_REL_ARM_MOV32T                                                   = 0x0011
	IMAGE_REL_ARM_SECREL                                                   = 0x000F
	IMAGE_REL_ARM_SECTION                                                  = 0x000E
	IMAGE_REL_ARM_TOKEN                                                    = 0x0005
	IMAGE_REL_BASED_ABSOLUTE                                               = 0
	IMAGE_REL_BASED_ARM_MOV32                                              = 5
	IMAGE_REL_BASED_DIR64                                                  = 10
	IMAGE_REL_BASED_HIGH                                                   = 1
	IMAGE_REL_BASED_HIGHADJ                                                = 4
	IMAGE_REL_BASED_HIGHLOW                                                = 3
	IMAGE_REL_BASED_IA64_IMM64                                             = 9
	IMAGE_REL_BASED_LOW                                                    = 2
	IMAGE_REL_BASED_MIPS_JMPADDR                                           = 5
	IMAGE_REL_BASED_MIPS_JMPADDR16                                         = 9
	IMAGE_REL_BASED_THUMB_MOV32                                            = 7
	IMAGE_REL_CEE_ABSOLUTE                                                 = 0x0000
	IMAGE_REL_CEE_ADDR32                                                   = 0x0001
	IMAGE_REL_CEE_ADDR32NB                                                 = 0x0003
	IMAGE_REL_CEE_ADDR64                                                   = 0x0002
	IMAGE_REL_CEE_SECREL                                                   = 0x0005
	IMAGE_REL_CEE_SECTION                                                  = 0x0004
	IMAGE_REL_CEE_TOKEN                                                    = 0x0006
	IMAGE_REL_CEF_ABSOLUTE                                                 = 0x0000
	IMAGE_REL_CEF_ADDR32                                                   = 0x0001
	IMAGE_REL_CEF_ADDR32NB                                                 = 0x0003
	IMAGE_REL_CEF_ADDR64                                                   = 0x0002
	IMAGE_REL_CEF_SECREL                                                   = 0x0005
	IMAGE_REL_CEF_SECTION                                                  = 0x0004
	IMAGE_REL_CEF_TOKEN                                                    = 0x0006
	IMAGE_REL_EBC_ABSOLUTE                                                 = 0x0000
	IMAGE_REL_EBC_ADDR32NB                                                 = 0x0001
	IMAGE_REL_EBC_REL32                                                    = 0x0002
	IMAGE_REL_EBC_SECREL                                                   = 0x0004
	IMAGE_REL_EBC_SECTION                                                  = 0x0003
	IMAGE_REL_I386_ABSOLUTE                                                = 0x0000
	IMAGE_REL_I386_DIR16                                                   = 0x0001
	IMAGE_REL_I386_DIR32                                                   = 0x0006
	IMAGE_REL_I386_DIR32NB                                                 = 0x0007
	IMAGE_REL_I386_REL16                                                   = 0x0002
	IMAGE_REL_I386_REL32                                                   = 0x0014
	IMAGE_REL_I386_SECREL                                                  = 0x000B
	IMAGE_REL_I386_SECREL7                                                 = 0x000D
	IMAGE_REL_I386_SECTION                                                 = 0x000A
	IMAGE_REL_I386_SEG12                                                   = 0x0009
	IMAGE_REL_I386_TOKEN                                                   = 0x000C
	IMAGE_REL_IA64_ABSOLUTE                                                = 0x0000
	IMAGE_REL_IA64_ADDEND                                                  = 0x001F
	IMAGE_REL_IA64_DIR32                                                   = 0x0004
	IMAGE_REL_IA64_DIR32NB                                                 = 0x0010
	IMAGE_REL_IA64_DIR64                                                   = 0x0005
	IMAGE_REL_IA64_GPREL22                                                 = 0x0009
	IMAGE_REL_IA64_GPREL32                                                 = 0x001C
	IMAGE_REL_IA64_IMM14                                                   = 0x0001
	IMAGE_REL_IA64_IMM22                                                   = 0x0002
	IMAGE_REL_IA64_IMM64                                                   = 0x0003
	IMAGE_REL_IA64_IMMGPREL64                                              = 0x001A
	IMAGE_REL_IA64_LTOFF22                                                 = 0x000A
	IMAGE_REL_IA64_PCREL21B                                                = 0x0006
	IMAGE_REL_IA64_PCREL21F                                                = 0x0008
	IMAGE_REL_IA64_PCREL21M                                                = 0x0007
	IMAGE_REL_IA64_PCREL60B                                                = 0x0016
	IMAGE_REL_IA64_PCREL60F                                                = 0x0017
	IMAGE_REL_IA64_PCREL60I                                                = 0x0018
	IMAGE_REL_IA64_PCREL60M                                                = 0x0019
	IMAGE_REL_IA64_PCREL60X                                                = 0x0015
	IMAGE_REL_IA64_SECREL22                                                = 0x000C
	IMAGE_REL_IA64_SECREL32                                                = 0x000E
	IMAGE_REL_IA64_SECREL64I                                               = 0x000D
	IMAGE_REL_IA64_SECTION                                                 = 0x000B
	IMAGE_REL_IA64_SREL14                                                  = 0x0011
	IMAGE_REL_IA64_SREL22                                                  = 0x0012
	IMAGE_REL_IA64_SREL32                                                  = 0x0013
	IMAGE_REL_IA64_TOKEN                                                   = 0x001B
	IMAGE_REL_IA64_UREL32                                                  = 0x0014
	IMAGE_REL_M32R_ABSOLUTE                                                = 0x0000
	IMAGE_REL_M32R_ADDR24                                                  = 0x0003
	IMAGE_REL_M32R_ADDR32                                                  = 0x0001
	IMAGE_REL_M32R_ADDR32NB                                                = 0x0002
	IMAGE_REL_M32R_GPREL16                                                 = 0x0004
	IMAGE_REL_M32R_PAIR                                                    = 0x000B
	IMAGE_REL_M32R_PCREL16                                                 = 0x0006
	IMAGE_REL_M32R_PCREL24                                                 = 0x0005
	IMAGE_REL_M32R_PCREL8                                                  = 0x0007
	IMAGE_REL_M32R_REFHALF                                                 = 0x0008
	IMAGE_REL_M32R_REFHI                                                   = 0x0009
	IMAGE_REL_M32R_REFLO                                                   = 0x000A
	IMAGE_REL_M32R_SECREL32                                                = 0x000D
	IMAGE_REL_M32R_SECTION                                                 = 0x000C
	IMAGE_REL_M32R_TOKEN                                                   = 0x000E
	IMAGE_REL_MIPS_ABSOLUTE                                                = 0x0000
	IMAGE_REL_MIPS_GPREL                                                   = 0x0006
	IMAGE_REL_MIPS_JMPADDR                                                 = 0x0003
	IMAGE_REL_MIPS_JMPADDR16                                               = 0x0010
	IMAGE_REL_MIPS_LITERAL                                                 = 0x0007
	IMAGE_REL_MIPS_PAIR                                                    = 0x0025
	IMAGE_REL_MIPS_REFHALF                                                 = 0x0001
	IMAGE_REL_MIPS_REFHI                                                   = 0x0004
	IMAGE_REL_MIPS_REFLO                                                   = 0x0005
	IMAGE_REL_MIPS_REFWORD                                                 = 0x0002
	IMAGE_REL_MIPS_REFWORDNB                                               = 0x0022
	IMAGE_REL_MIPS_SECREL                                                  = 0x000B
	IMAGE_REL_MIPS_SECRELHI                                                = 0x000D
	IMAGE_REL_MIPS_SECRELLO                                                = 0x000C
	IMAGE_REL_MIPS_SECTION                                                 = 0x000A
	IMAGE_REL_MIPS_TOKEN                                                   = 0x000E
	IMAGE_REL_PPC_ABSOLUTE                                                 = 0x0000
	IMAGE_REL_PPC_ADDR14                                                   = 0x0005
	IMAGE_REL_PPC_ADDR16                                                   = 0x0004
	IMAGE_REL_PPC_ADDR24                                                   = 0x0003
	IMAGE_REL_PPC_ADDR32                                                   = 0x0002
	IMAGE_REL_PPC_ADDR32NB                                                 = 0x000A
	IMAGE_REL_PPC_ADDR64                                                   = 0x0001
	IMAGE_REL_PPC_BRNTAKEN                                                 = 0x0400
	IMAGE_REL_PPC_BRTAKEN                                                  = 0x0200
	IMAGE_REL_PPC_GPREL                                                    = 0x0015
	IMAGE_REL_PPC_IFGLUE                                                   = 0x000D
	IMAGE_REL_PPC_IMGLUE                                                   = 0x000E
	IMAGE_REL_PPC_NEG                                                      = 0x0100
	IMAGE_REL_PPC_PAIR                                                     = 0x0012
	IMAGE_REL_PPC_REFHI                                                    = 0x0010
	IMAGE_REL_PPC_REFLO                                                    = 0x0011
	IMAGE_REL_PPC_REL14                                                    = 0x0007
	IMAGE_REL_PPC_REL24                                                    = 0x0006
	IMAGE_REL_PPC_SECREL                                                   = 0x000B
	IMAGE_REL_PPC_SECREL16                                                 = 0x000F
	IMAGE_REL_PPC_SECRELHI                                                 = 0x0014
	IMAGE_REL_PPC_SECRELLO                                                 = 0x0013
	IMAGE_REL_PPC_SECTION                                                  = 0x000C
	IMAGE_REL_PPC_TOCDEFN                                                  = 0x0800
	IMAGE_REL_PPC_TOCREL14                                                 = 0x0009
	IMAGE_REL_PPC_TOCREL16                                                 = 0x0008
	IMAGE_REL_PPC_TOKEN                                                    = 0x0016
	IMAGE_REL_PPC_TYPEMASK                                                 = 0x00FF
	IMAGE_REL_SH3_ABSOLUTE                                                 = 0x0000
	IMAGE_REL_SH3_DIRECT16                                                 = 0x0001
	IMAGE_REL_SH3_DIRECT32                                                 = 0x0002
	IMAGE_REL_SH3_DIRECT32_NB                                              = 0x0010
	IMAGE_REL_SH3_DIRECT4                                                  = 0x0006
	IMAGE_REL_SH3_DIRECT4_LONG                                             = 0x0008
	IMAGE_REL_SH3_DIRECT4_WORD                                             = 0x0007
	IMAGE_REL_SH3_DIRECT8                                                  = 0x0003
	IMAGE_REL_SH3_DIRECT8_LONG                                             = 0x0005
	IMAGE_REL_SH3_DIRECT8_WORD                                             = 0x0004
	IMAGE_REL_SH3_GPREL4_LONG                                              = 0x0011
	IMAGE_REL_SH3_PCREL12_WORD                                             = 0x000B
	IMAGE_REL_SH3_PCREL8_LONG                                              = 0x000A
	IMAGE_REL_SH3_PCREL8_WORD                                              = 0x0009
	IMAGE_REL_SH3_SECREL                                                   = 0x000F
	IMAGE_REL_SH3_SECTION                                                  = 0x000E
	IMAGE_REL_SH3_SIZEOF_SECTION                                           = 0x000D
	IMAGE_REL_SH3_STARTOF_SECTION                                          = 0x000C
	IMAGE_REL_SH3_TOKEN                                                    = 0x0012
	IMAGE_REL_SHM_PAIR                                                     = 0x0018
	IMAGE_REL_SHM_PCRELPT                                                  = 0x0013
	IMAGE_REL_SHM_REFHALF                                                  = 0x0015
	IMAGE_REL_SHM_REFLO                                                    = 0x0014
	IMAGE_REL_SHM_RELHALF                                                  = 0x0017
	IMAGE_REL_SHM_RELLO                                                    = 0x0016
	IMAGE_REL_SH_NOMODE                                                    = 0x8000
	IMAGE_REL_THUMB_BLX23                                                  = 0x0015
	IMAGE_REL_THUMB_BRANCH20                                               = 0x0012
	IMAGE_REL_THUMB_BRANCH24                                               = 0x0014
	IMAGE_REL_THUMB_MOV32                                                  = 0x0011
	IMAGE_RESOURCE_DATA_IS_DIRECTORY                                       = 0x80000000
	IMAGE_RESOURCE_NAME_IS_STRING                                          = 0x80000000
	IMAGE_ROM_OPTIONAL_HDR_MAGIC                                           = 0x107
	IMAGE_SCN_ALIGN_1024BYTES                                              = 0x00B00000
	IMAGE_SCN_ALIGN_128BYTES                                               = 0x00800000
	IMAGE_SCN_ALIGN_16BYTES                                                = 0x00500000
	IMAGE_SCN_ALIGN_1BYTES                                                 = 0x00100000
	IMAGE_SCN_ALIGN_2048BYTES                                              = 0x00C00000
	IMAGE_SCN_ALIGN_256BYTES                                               = 0x00900000
	IMAGE_SCN_ALIGN_2BYTES                                                 = 0x00200000
	IMAGE_SCN_ALIGN_32BYTES                                                = 0x00600000
	IMAGE_SCN_ALIGN_4096BYTES                                              = 0x00D00000
	IMAGE_SCN_ALIGN_4BYTES                                                 = 0x00300000
	IMAGE_SCN_ALIGN_512BYTES                                               = 0x00A00000
	IMAGE_SCN_ALIGN_64BYTES                                                = 0x00700000
	IMAGE_SCN_ALIGN_8192BYTES                                              = 0x00E00000
	IMAGE_SCN_ALIGN_8BYTES                                                 = 0x00400000
	IMAGE_SCN_ALIGN_MASK                                                   = 0x00F00000
	IMAGE_SCN_CNT_CODE                                                     = 0x00000020
	IMAGE_SCN_CNT_INITIALIZED_DATA                                         = 0x00000040
	IMAGE_SCN_CNT_UNINITIALIZED_DATA                                       = 0x00000080
	IMAGE_SCN_GPREL                                                        = 0x00008000
	IMAGE_SCN_LNK_COMDAT                                                   = 0x00001000
	IMAGE_SCN_LNK_INFO                                                     = 0x00000200
	IMAGE_SCN_LNK_NRELOC_OVFL                                              = 0x01000000
	IMAGE_SCN_LNK_OTHER                                                    = 0x00000100
	IMAGE_SCN_LNK_REMOVE                                                   = 0x00000800
	IMAGE_SCN_MEM_16BIT                                                    = 0x00020000
	IMAGE_SCN_MEM_DISCARDABLE                                              = 0x02000000
	IMAGE_SCN_MEM_EXECUTE                                                  = 0x20000000
	IMAGE_SCN_MEM_FARDATA                                                  = 0x00008000
	IMAGE_SCN_MEM_LOCKED                                                   = 0x00040000
	IMAGE_SCN_MEM_NOT_CACHED                                               = 0x04000000
	IMAGE_SCN_MEM_NOT_PAGED                                                = 0x08000000
	IMAGE_SCN_MEM_PRELOAD                                                  = 0x00080000
	IMAGE_SCN_MEM_PURGEABLE                                                = 0x00020000
	IMAGE_SCN_MEM_READ                                                     = 0x40000000
	IMAGE_SCN_MEM_SHARED                                                   = 0x10000000
	IMAGE_SCN_MEM_WRITE                                                    = 0x80000000
	IMAGE_SCN_NO_DEFER_SPEC_EXC                                            = 0x00004000
	IMAGE_SCN_SCALE_INDEX                                                  = 0x00000001
	IMAGE_SCN_TYPE_NO_PAD                                                  = 0x00000008
	IMAGE_SEPARATE_DEBUG_FLAGS_MASK                                        = 0x8000
	IMAGE_SEPARATE_DEBUG_MISMATCH                                          = 0x8000
	IMAGE_SEPARATE_DEBUG_SIGNATURE                                         = 0x4944
	IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR                                        = 60
	IMAGE_SIZEOF_AUX_SYMBOL                                                = 18
	IMAGE_SIZEOF_BASE_RELOCATION                                           = 8
	IMAGE_SIZEOF_FILE_HEADER                                               = 20
	IMAGE_SIZEOF_LINENUMBER                                                = 6
	IMAGE_SIZEOF_NT_OPTIONAL32_HEADER                                      = 224
	IMAGE_SIZEOF_NT_OPTIONAL64_HEADER                                      = 240
	IMAGE_SIZEOF_NT_OPTIONAL_HEADER                                        = 240
	IMAGE_SIZEOF_RELOCATION                                                = 10
	IMAGE_SIZEOF_ROM_OPTIONAL_HEADER                                       = 56
	IMAGE_SIZEOF_SECTION_HEADER                                            = 40
	IMAGE_SIZEOF_SHORT_NAME                                                = 8
	IMAGE_SIZEOF_STD_OPTIONAL_HEADER                                       = 28
	IMAGE_SIZEOF_SYMBOL                                                    = 18
	IMAGE_SUBSYSTEM_EFI_APPLICATION                                        = 10
	IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER                                = 11
	IMAGE_SUBSYSTEM_EFI_ROM                                                = 13
	IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER                                     = 12
	IMAGE_SUBSYSTEM_NATIVE                                                 = 1
	IMAGE_SUBSYSTEM_NATIVE_WINDOWS                                         = 8
	IMAGE_SUBSYSTEM_OS2_CUI                                                = 5
	IMAGE_SUBSYSTEM_POSIX_CUI                                              = 7
	IMAGE_SUBSYSTEM_UNKNOWN                                                = 0
	IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION                               = 16
	IMAGE_SUBSYSTEM_WINDOWS_CE_GUI                                         = 9
	IMAGE_SUBSYSTEM_WINDOWS_CUI                                            = 3
	IMAGE_SUBSYSTEM_WINDOWS_GUI                                            = 2
	IMAGE_SUBSYSTEM_XBOX                                                   = 14
	IMAGE_SYM_CLASS_ARGUMENT                                               = 0x0009
	IMAGE_SYM_CLASS_AUTOMATIC                                              = 0x0001
	IMAGE_SYM_CLASS_BIT_FIELD                                              = 0x0012
	IMAGE_SYM_CLASS_BLOCK                                                  = 0x0064
	IMAGE_SYM_CLASS_CLR_TOKEN                                              = 0x006B
	IMAGE_SYM_CLASS_END_OF_STRUCT                                          = 0x0066
	IMAGE_SYM_CLASS_ENUM_TAG                                               = 0x000F
	IMAGE_SYM_CLASS_EXTERNAL                                               = 0x0002
	IMAGE_SYM_CLASS_EXTERNAL_DEF                                           = 0x0005
	IMAGE_SYM_CLASS_FAR_EXTERNAL                                           = 0x0044
	IMAGE_SYM_CLASS_FILE                                                   = 0x0067
	IMAGE_SYM_CLASS_FUNCTION                                               = 0x0065
	IMAGE_SYM_CLASS_LABEL                                                  = 0x0006
	IMAGE_SYM_CLASS_MEMBER_OF_ENUM                                         = 0x0010
	IMAGE_SYM_CLASS_MEMBER_OF_STRUCT                                       = 0x0008
	IMAGE_SYM_CLASS_MEMBER_OF_UNION                                        = 0x000B
	IMAGE_SYM_CLASS_NULL                                                   = 0x0000
	IMAGE_SYM_CLASS_REGISTER                                               = 0x0004
	IMAGE_SYM_CLASS_REGISTER_PARAM                                         = 0x0011
	IMAGE_SYM_CLASS_SECTION                                                = 0x0068
	IMAGE_SYM_CLASS_STATIC                                                 = 0x0003
	IMAGE_SYM_CLASS_STRUCT_TAG                                             = 0x000A
	IMAGE_SYM_CLASS_TYPE_DEFINITION                                        = 0x000D
	IMAGE_SYM_CLASS_UNDEFINED_LABEL                                        = 0x0007
	IMAGE_SYM_CLASS_UNDEFINED_STATIC                                       = 0x000E
	IMAGE_SYM_CLASS_UNION_TAG                                              = 0x000C
	IMAGE_SYM_CLASS_WEAK_EXTERNAL                                          = 0x0069
	IMAGE_SYM_DTYPE_ARRAY                                                  = 3
	IMAGE_SYM_DTYPE_FUNCTION                                               = 2
	IMAGE_SYM_DTYPE_NULL                                                   = 0
	IMAGE_SYM_DTYPE_POINTER                                                = 1
	IMAGE_SYM_SECTION_MAX                                                  = 0xFEFF
	IMAGE_SYM_SECTION_MAX_EX                                               = 2147483647
	IMAGE_SYM_TYPE_BYTE                                                    = 0x000C
	IMAGE_SYM_TYPE_CHAR                                                    = 0x0002
	IMAGE_SYM_TYPE_DOUBLE                                                  = 0x0007
	IMAGE_SYM_TYPE_DWORD                                                   = 0x000F
	IMAGE_SYM_TYPE_ENUM                                                    = 0x000A
	IMAGE_SYM_TYPE_FLOAT                                                   = 0x0006
	IMAGE_SYM_TYPE_INT                                                     = 0x0004
	IMAGE_SYM_TYPE_LONG                                                    = 0x0005
	IMAGE_SYM_TYPE_MOE                                                     = 0x000B
	IMAGE_SYM_TYPE_NULL                                                    = 0x0000
	IMAGE_SYM_TYPE_PCODE                                                   = 0x8000
	IMAGE_SYM_TYPE_SHORT                                                   = 0x0003
	IMAGE_SYM_TYPE_STRUCT                                                  = 0x0008
	IMAGE_SYM_TYPE_UINT                                                    = 0x000E
	IMAGE_SYM_TYPE_UNION                                                   = 0x0009
	IMAGE_SYM_TYPE_VOID                                                    = 0x0001
	IMAGE_SYM_TYPE_WORD                                                    = 0x000D
	IMAGE_VXD_SIGNATURE                                                    = 0x454C
	IMAGE_WEAK_EXTERN_SEARCH_ALIAS                                         = 3
	IMAGE_WEAK_EXTERN_SEARCH_LIBRARY                                       = 2
	IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY                                     = 1
	IMC_CLOSESTATUSWINDOW                                                  = 0x0021
	IMC_GETCANDIDATEPOS                                                    = 0x0007
	IMC_GETCOMPOSITIONFONT                                                 = 0x0009
	IMC_GETCOMPOSITIONWINDOW                                               = 0x000B
	IMC_GETSTATUSWINDOWPOS                                                 = 0x000F
	IMC_OPENSTATUSWINDOW                                                   = 0x0022
	IMC_SETCANDIDATEPOS                                                    = 0x0008
	IMC_SETCOMPOSITIONFONT                                                 = 0x000A
	IMC_SETCOMPOSITIONWINDOW                                               = 0x000C
	IMC_SETSTATUSWINDOWPOS                                                 = 0x0010
	IMEMENUITEM_STRING_SIZE                                                = 80
	IMEVER_0310                                                            = 0x0003000A
	IMEVER_0400                                                            = 0x00040000
	IME_CAND_CODE                                                          = 0x0002
	IME_CAND_MEANING                                                       = 0x0003
	IME_CAND_RADICAL                                                       = 0x0004
	IME_CAND_READ                                                          = 0x0001
	IME_CAND_STROKE                                                        = 0x0005
	IME_CAND_UNKNOWN                                                       = 0x0000
	IME_CHOTKEY_IME_NONIME_TOGGLE                                          = 0x10
	IME_CHOTKEY_SHAPE_TOGGLE                                               = 0x11
	IME_CHOTKEY_SYMBOL_TOGGLE                                              = 0x12
	IME_CMODE_ALPHANUMERIC                                                 = 0x0000
	IME_CMODE_CHARCODE                                                     = 0x0020
	IME_CMODE_CHINESE                                                      = 1
	IME_CMODE_EUDC                                                         = 0x0200
	IME_CMODE_FIXED                                                        = 0x0800
	IME_CMODE_FULLSHAPE                                                    = 0x0008
	IME_CMODE_HANGEUL                                                      = 1
	IME_CMODE_HANGUL                                                       = 1
	IME_CMODE_HANJACONVERT                                                 = 0x0040
	IME_CMODE_JAPANESE                                                     = 1
	IME_CMODE_KATAKANA                                                     = 0x0002
	IME_CMODE_LANGUAGE                                                     = 0x0003
	IME_CMODE_NATIVE                                                       = 0x0001
	IME_CMODE_NOCONVERSION                                                 = 0x0100
	IME_CMODE_RESERVED                                                     = 0xF0000000
	IME_CMODE_ROMAN                                                        = 0x0010
	IME_CMODE_SOFTKBD                                                      = 0x0080
	IME_CMODE_SYMBOL                                                       = 0x0400
	IME_CONFIG_GENERAL                                                     = 1
	IME_CONFIG_REGISTERWORD                                                = 2
	IME_CONFIG_SELECTDICTIONARY                                            = 3
	IME_ESC_AUTOMATA                                                       = 0x1009
	IME_ESC_GETHELPFILENAME                                                = 0x100b
	IME_ESC_GET_EUDC_DICTIONARY                                            = 0x1003
	IME_ESC_HANJA_MODE                                                     = 0x1008
	IME_ESC_IME_NAME                                                       = 0x1006
	IME_ESC_MAX_KEY                                                        = 0x1005
	IME_ESC_PRIVATE_FIRST                                                  = 0x0800
	IME_ESC_PRIVATE_HOTKEY                                                 = 0x100a
	IME_ESC_PRIVATE_LAST                                                   = 0x0FFF
	IME_ESC_QUERY_SUPPORT                                                  = 0x0003
	IME_ESC_RESERVED_FIRST                                                 = 0x0004
	IME_ESC_RESERVED_LAST                                                  = 0x07FF
	IME_ESC_SEQUENCE_TO_INTERNAL                                           = 0x1001
	IME_ESC_SET_EUDC_DICTIONARY                                            = 0x1004
	IME_ESC_SYNC_HOTKEY                                                    = 0x1007
	IME_HOTKEY_DSWITCH_FIRST                                               = 0x100
	IME_HOTKEY_DSWITCH_LAST                                                = 0x11F
	IME_HOTKEY_PRIVATE_FIRST                                               = 0x200
	IME_HOTKEY_PRIVATE_LAST                                                = 0x21F
	IME_ITHOTKEY_PREVIOUS_COMPOSITION                                      = 0x201
	IME_ITHOTKEY_RECONVERTSTRING                                           = 0x203
	IME_ITHOTKEY_RESEND_RESULTSTR                                          = 0x200
	IME_ITHOTKEY_UISTYLE_TOGGLE                                            = 0x202
	IME_JHOTKEY_CLOSE_OPEN                                                 = 0x30
	IME_KHOTKEY_ENGLISH                                                    = 0x52
	IME_KHOTKEY_HANJACONVERT                                               = 0x51
	IME_KHOTKEY_SHAPE_TOGGLE                                               = 0x50
	IME_PROP_AT_CARET                                                      = 0x00010000
	IME_PROP_CANDLIST_START_FROM_1                                         = 0x00040000
	IME_PROP_COMPLETE_ON_UNSELECT                                          = 0x00100000
	IME_PROP_SPECIAL_UI                                                    = 0x00020000
	IME_PROP_UNICODE                                                       = 0x00080000
	IME_REGWORD_STYLE_EUDC                                                 = 0x00000001
	IME_REGWORD_STYLE_USER_FIRST                                           = 0x80000000
	IME_REGWORD_STYLE_USER_LAST                                            = 0xFFFFFFFF
	IME_SMODE_AUTOMATIC                                                    = 0x0004
	IME_SMODE_CONVERSATION                                                 = 0x0010
	IME_SMODE_NONE                                                         = 0x0000
	IME_SMODE_PHRASEPREDICT                                                = 0x0008
	IME_SMODE_PLAURALCLAUSE                                                = 0x0001
	IME_SMODE_RESERVED                                                     = 0x0000F000
	IME_SMODE_SINGLECONVERT                                                = 0x0002
	IME_THOTKEY_IME_NONIME_TOGGLE                                          = 0x70
	IME_THOTKEY_SHAPE_TOGGLE                                               = 0x71
	IME_THOTKEY_SYMBOL_TOGGLE                                              = 0x72
	IMFS_CHECKED                                                           = 8
	IMFS_DEFAULT                                                           = 4096
	IMFS_DISABLED                                                          = 3
	IMFS_ENABLED                                                           = 0
	IMFS_GRAYED                                                            = 3
	IMFS_HILITE                                                            = 128
	IMFS_UNCHECKED                                                         = 0
	IMFS_UNHILITE                                                          = 0
	IMFT_RADIOCHECK                                                        = 0x00001
	IMFT_SEPARATOR                                                         = 0x00002
	IMFT_SUBMENU                                                           = 0x00004
	IMM_ERROR_GENERAL                                                      = -2
	IMM_ERROR_NODATA                                                       = -1
	IMN_CHANGECANDIDATE                                                    = 0x0003
	IMN_CLOSECANDIDATE                                                     = 0x0004
	IMN_CLOSESTATUSWINDOW                                                  = 0x0001
	IMN_GUIDELINE                                                          = 0x000D
	IMN_OPENCANDIDATE                                                      = 0x0005
	IMN_OPENSTATUSWINDOW                                                   = 0x0002
	IMN_PRIVATE                                                            = 0x000E
	IMN_SETCANDIDATEPOS                                                    = 0x0009
	IMN_SETCOMPOSITIONFONT                                                 = 0x000A
	IMN_SETCOMPOSITIONWINDOW                                               = 0x000B
	IMN_SETCONVERSIONMODE                                                  = 0x0006
	IMN_SETOPENSTATUS                                                      = 0x0008
	IMN_SETSENTENCEMODE                                                    = 0x0007
	IMN_SETSTATUSWINDOWPOS                                                 = 0x000C
	IMPLINK_HIGHEXPER                                                      = 158
	IMPLINK_IP                                                             = 155
	IMPLINK_LOWEXPER                                                       = 156
	IMPORT_OBJECT_HDR_SIG2                                                 = 0xffff
	IMR_CANDIDATEWINDOW                                                    = 0x0002
	IMR_COMPOSITIONFONT                                                    = 0x0003
	IMR_COMPOSITIONWINDOW                                                  = 0x0001
	IMR_CONFIRMRECONVERTSTRING                                             = 0x0005
	IMR_DOCUMENTFEED                                                       = 0x0007
	IMR_QUERYCHARPOSITION                                                  = 0x0006
	IMR_RECONVERTSTRING                                                    = 0x0004
	IN                                                                     = 0
	INADDR_LOOPBACK                                                        = 0x7f000001
	INADDR_NONE                                                            = 0xffffffff
	INCL_WINSOCK_API_TYPEDEFS                                              = 1
	INDEXID_CONTAINER                                                      = 0
	INDEXID_OBJECT                                                         = 0
	INET6_ADDRSTRLEN                                                       = 65
	INET_ADDRSTRLEN                                                        = 22
	INFINITE                                                               = 0xffffffff
	INHERITED_ACE                                                          = 16
	INHERIT_CALLER_PRIORITY                                                = 0x20000
	INHERIT_ONLY_ACE                                                       = 8
	INHERIT_PARENT_AFFINITY                                                = 0x10000
	INITIAL_FPCSR                                                          = 0x027f
	INITIAL_MXCSR                                                          = 0x1f80
	INIT_ONCE_ASYNC                                                        = 2
	INIT_ONCE_CHECK_ONLY                                                   = 1
	INIT_ONCE_CTX_RESERVED_BITS                                            = 2
	INIT_ONCE_INIT_FAILED                                                  = 4
	INLINE                                                                 = 0
	INPLACE_E_FIRST                                                        = 2147746208
	INPLACE_E_LAST                                                         = 2147746223
	INPLACE_S_FIRST                                                        = 262560
	INPLACE_S_LAST                                                         = 262575
	INPUTLANGCHANGE_BACKWARD                                               = 0x0004
	INPUTLANGCHANGE_FORWARD                                                = 0x0002
	INPUTLANGCHANGE_SYSCHARSET                                             = 0x0001
	INPUT_HARDWARE                                                         = 2
	INPUT_KEYBOARD                                                         = 1
	INPUT_MOUSE                                                            = 0
	INPUT_SAW_CR                                                           = 4096
	INT16_MAX                                                              = 32767
	INT16_MIN                                                              = -32768
	INT32_MAX                                                              = 2147483647
	INT32_MIN                                                              = -2147483648
	INT64_MAX                                                              = 9223372036854775807
	INT64_MIN                                                              = -9223372036854775808
	INT8_MAX                                                               = 127
	INT8_MIN                                                               = -128
	INTERP_ALTERNATE_WRONG_ARGS                                            = 0x400
	INTERP_DEBUG_FRAME                                                     = 0x10
	INTERP_TRACE_IN_PROGRESS                                               = 0x200
	INTMAX_MAX                                                             = 9223372036854775807
	INTMAX_MIN                                                             = -9223372036854775808
	INTPTR_MAX                                                             = 9223372036854775807
	INTPTR_MIN                                                             = -9223372036854775808
	INT_FAST16_MAX                                                         = 32767
	INT_FAST16_MIN                                                         = -32768
	INT_FAST32_MAX                                                         = 2147483647
	INT_FAST32_MIN                                                         = -2147483648
	INT_FAST64_MAX                                                         = 9223372036854775807
	INT_FAST64_MIN                                                         = -9223372036854775808
	INT_FAST8_MAX                                                          = 127
	INT_FAST8_MIN                                                          = -128
	INT_LEAST16_MAX                                                        = 32767
	INT_LEAST16_MIN                                                        = -32768
	INT_LEAST32_MAX                                                        = 2147483647
	INT_LEAST32_MIN                                                        = -2147483648
	INT_LEAST64_MAX                                                        = 9223372036854775807
	INT_LEAST64_MIN                                                        = -9223372036854775808
	INT_LEAST8_MAX                                                         = 127
	INT_LEAST8_MIN                                                         = -128
	INT_MAX                                                                = 2147483647
	INT_MIN                                                                = -2147483648
	INVALID_OS_COUNT                                                       = 65535
	IN_CLASSA_HOST                                                         = 0x00ffffff
	IN_CLASSA_MAX                                                          = 128
	IN_CLASSA_NET                                                          = 0xff000000
	IN_CLASSA_NSHIFT                                                       = 24
	IN_CLASSB_HOST                                                         = 0x0000ffff
	IN_CLASSB_MAX                                                          = 65536
	IN_CLASSB_NET                                                          = 0xffff0000
	IN_CLASSB_NSHIFT                                                       = 16
	IN_CLASSC_HOST                                                         = 0x000000ff
	IN_CLASSC_NET                                                          = 0xffffff00
	IN_CLASSC_NSHIFT                                                       = 8
	IN_CLASSD_HOST                                                         = 0x0fffffff
	IN_CLASSD_NET                                                          = 0xf0000000
	IN_CLASSD_NSHIFT                                                       = 28
	IOCPARM_MASK                                                           = 0x7f
	IOC_IN                                                                 = 0x80000000
	IOC_INOUT                                                              = 3221225472
	IOC_OUT                                                                = 0x40000000
	IOC_PROTOCOL                                                           = 0x10000000
	IOC_UNIX                                                               = 0x00000000
	IOC_VENDOR                                                             = 0x18000000
	IOC_VOID                                                               = 0x20000000
	IOC_WS2                                                                = 0x08000000
	IO_COMPLETION_ALL_ACCESS                                               = 2031619
	IO_COMPLETION_MODIFY_STATE                                             = 0x0002
	IO_REPARSE_TAG_AF_UNIX                                                 = 2147483683
	IO_REPARSE_TAG_APPEXECLINK                                             = 2147483675
	IO_REPARSE_TAG_CLOUD                                                   = 2415919130
	IO_REPARSE_TAG_CLOUD_1                                                 = 2415923226
	IO_REPARSE_TAG_CLOUD_2                                                 = 2415927322
	IO_REPARSE_TAG_CLOUD_3                                                 = 2415931418
	IO_REPARSE_TAG_CLOUD_4                                                 = 2415935514
	IO_REPARSE_TAG_CLOUD_5                                                 = 2415939610
	IO_REPARSE_TAG_CLOUD_6                                                 = 2415943706
	IO_REPARSE_TAG_CLOUD_7                                                 = 2415947802
	IO_REPARSE_TAG_CLOUD_8                                                 = 2415951898
	IO_REPARSE_TAG_CLOUD_9                                                 = 2415955994
	IO_REPARSE_TAG_CLOUD_A                                                 = 2415960090
	IO_REPARSE_TAG_CLOUD_B                                                 = 2415964186
	IO_REPARSE_TAG_CLOUD_C                                                 = 2415968282
	IO_REPARSE_TAG_CLOUD_D                                                 = 2415972378
	IO_REPARSE_TAG_CLOUD_E                                                 = 2415976474
	IO_REPARSE_TAG_CLOUD_F                                                 = 2415980570
	IO_REPARSE_TAG_CLOUD_MASK                                              = 61440
	IO_REPARSE_TAG_CSV                                                     = 2147483657
	IO_REPARSE_TAG_DEDUP                                                   = 2147483667
	IO_REPARSE_TAG_DFS                                                     = 2147483658
	IO_REPARSE_TAG_DFSR                                                    = 2147483666
	IO_REPARSE_TAG_DRIVE_EXTENDER                                          = 2147483653
	IO_REPARSE_TAG_FILE_PLACEHOLDER                                        = 2147483669
	IO_REPARSE_TAG_FILTER_MANAGER                                          = 2147483659
	IO_REPARSE_TAG_GLOBAL_REPARSE                                          = 2684354585
	IO_REPARSE_TAG_HSM                                                     = 3221225476
	IO_REPARSE_TAG_HSM2                                                    = 2147483654
	IO_REPARSE_TAG_IIS_CACHE                                               = 2684354576
	IO_REPARSE_TAG_MOUNT_POINT                                             = 2684354563
	IO_REPARSE_TAG_NFS                                                     = 2147483668
	IO_REPARSE_TAG_ONEDRIVE                                                = 2147483681
	IO_REPARSE_TAG_PROJFS                                                  = 2415919132
	IO_REPARSE_TAG_PROJFS_TOMBSTONE                                        = 2684354594
	IO_REPARSE_TAG_RESERVED_ONE                                            = 1
	IO_REPARSE_TAG_RESERVED_RANGE                                          = 1
	IO_REPARSE_TAG_RESERVED_ZERO                                           = 0
	IO_REPARSE_TAG_SIS                                                     = 2147483655
	IO_REPARSE_TAG_STORAGE_SYNC                                            = 2147483678
	IO_REPARSE_TAG_SYMLINK                                                 = 2684354572
	IO_REPARSE_TAG_UNHANDLED                                               = 2147483680
	IO_REPARSE_TAG_WCI                                                     = 2147483672
	IO_REPARSE_TAG_WCI_1                                                   = 2415923224
	IO_REPARSE_TAG_WCI_TOMBSTONE                                           = 2684354591
	IO_REPARSE_TAG_WIM                                                     = 2147483656
	IO_REPARSE_TAG_WOF                                                     = 2147483671
	IPPORT_BIFFUDP                                                         = 512
	IPPORT_CMDSERVER                                                       = 514
	IPPORT_DAYTIME                                                         = 13
	IPPORT_DISCARD                                                         = 9
	IPPORT_ECHO                                                            = 7
	IPPORT_EFSSERVER                                                       = 520
	IPPORT_EXECSERVER                                                      = 512
	IPPORT_FINGER                                                          = 79
	IPPORT_FTP                                                             = 21
	IPPORT_LOGINSERVER                                                     = 513
	IPPORT_MTP                                                             = 57
	IPPORT_NAMESERVER                                                      = 42
	IPPORT_NETSTAT                                                         = 15
	IPPORT_RESERVED                                                        = 1024
	IPPORT_RJE                                                             = 77
	IPPORT_ROUTESERVER                                                     = 520
	IPPORT_SMTP                                                            = 25
	IPPORT_SUPDUP                                                          = 95
	IPPORT_SYSTAT                                                          = 11
	IPPORT_TELNET                                                          = 23
	IPPORT_TFTP                                                            = 69
	IPPORT_TIMESERVER                                                      = 37
	IPPORT_TTYLINK                                                         = 87
	IPPORT_WHOIS                                                           = 43
	IPPORT_WHOSERVER                                                       = 513
	IPPROTO_AH                                                             = 51
	IPPROTO_CBT                                                            = 7
	IPPROTO_DSTOPTS                                                        = 60
	IPPROTO_EGP                                                            = 8
	IPPROTO_ESP                                                            = 50
	IPPROTO_FRAGMENT                                                       = 44
	IPPROTO_GGP                                                            = 3
	IPPROTO_HOPOPTS                                                        = 0
	IPPROTO_ICLFXBM                                                        = 78
	IPPROTO_ICMP                                                           = 1
	IPPROTO_ICMPV6                                                         = 58
	IPPROTO_IDP                                                            = 22
	IPPROTO_IGMP                                                           = 2
	IPPROTO_IGP                                                            = 9
	IPPROTO_IP                                                             = 0
	IPPROTO_IPV4                                                           = 4
	IPPROTO_IPV6                                                           = 41
	IPPROTO_L2TP                                                           = 115
	IPPROTO_MAX                                                            = 256
	IPPROTO_ND                                                             = 77
	IPPROTO_NONE                                                           = 59
	IPPROTO_PGM                                                            = 113
	IPPROTO_PIM                                                            = 103
	IPPROTO_PUP                                                            = 12
	IPPROTO_RAW                                                            = 255
	IPPROTO_RDP                                                            = 27
	IPPROTO_ROUTING                                                        = 43
	IPPROTO_SCTP                                                           = 132
	IPPROTO_ST                                                             = 5
	IPPROTO_TCP                                                            = 6
	IPPROTO_UDP                                                            = 17
	IPV6_ADD_IFLIST                                                        = 29
	IPV6_ADD_MEMBERSHIP                                                    = 12
	IPV6_CHECKSUM                                                          = 26
	IPV6_DEL_IFLIST                                                        = 30
	IPV6_DONTFRAG                                                          = 14
	IPV6_DROP_MEMBERSHIP                                                   = 13
	IPV6_HDRINCL                                                           = 2
	IPV6_HOPLIMIT                                                          = 21
	IPV6_HOPOPTS                                                           = 1
	IPV6_IFLIST                                                            = 28
	IPV6_JOIN_GROUP                                                        = 12
	IPV6_LEAVE_GROUP                                                       = 13
	IPV6_MULTICAST_HOPS                                                    = 10
	IPV6_MULTICAST_IF                                                      = 9
	IPV6_MULTICAST_LOOP                                                    = 11
	IPV6_PKTINFO                                                           = 19
	IPV6_PROTECTION_LEVEL                                                  = 23
	IPV6_RECVDSTADDR                                                       = 25
	IPV6_RECVIF                                                            = 24
	IPV6_RECVRTHDR                                                         = 38
	IPV6_RECVTCLASS                                                        = 40
	IPV6_RTHDR                                                             = 32
	IPV6_TCLASS                                                            = 39
	IPV6_UNICAST_HOPS                                                      = 4
	IPV6_UNICAST_IF                                                        = 31
	IPV6_V6ONLY                                                            = 27
	IP_ADD_MEMBERSHIP                                                      = 12
	IP_ADD_SOURCE_MEMBERSHIP                                               = 15
	IP_BLOCK_SOURCE                                                        = 17
	IP_DONTFRAGMENT                                                        = 14
	IP_DROP_MEMBERSHIP                                                     = 13
	IP_DROP_SOURCE_MEMBERSHIP                                              = 16
	IP_HDRINCL                                                             = 2
	IP_MULTICAST_IF                                                        = 9
	IP_MULTICAST_LOOP                                                      = 11
	IP_MULTICAST_TTL                                                       = 10
	IP_OPTIONS                                                             = 1
	IP_PKTINFO                                                             = 19
	IP_RECEIVE_BROADCAST                                                   = 22
	IP_TOS                                                                 = 3
	IP_TTL                                                                 = 4
	IP_UNBLOCK_SOURCE                                                      = 18
	ISC_SHOWUIALL                                                          = 0xC000000F
	ISC_SHOWUIALLCANDIDATEWINDOW                                           = 0x0000000F
	ISC_SHOWUICANDIDATEWINDOW                                              = 0x00000001
	ISC_SHOWUICOMPOSITIONWINDOW                                            = 0x80000000
	ISC_SHOWUIGUIDELINE                                                    = 0x40000000
	ISMEX_CALLBACK                                                         = 0x00000004
	ISMEX_NOSEND                                                           = 0x00000000
	ISMEX_NOTIFY                                                           = 0x00000002
	ISMEX_REPLIED                                                          = 0x00000008
	ISMEX_SEND                                                             = 0x00000001
	IS_TEXT_UNICODE_ASCII16                                                = 0x0001
	IS_TEXT_UNICODE_CONTROLS                                               = 0x0004
	IS_TEXT_UNICODE_DBCS_LEADBYTE                                          = 0x0400
	IS_TEXT_UNICODE_ILLEGAL_CHARS                                          = 0x0100
	IS_TEXT_UNICODE_NOT_ASCII_MASK                                         = 0xF000
	IS_TEXT_UNICODE_NOT_UNICODE_MASK                                       = 0x0F00
	IS_TEXT_UNICODE_NULL_BYTES                                             = 0x1000
	IS_TEXT_UNICODE_ODD_LENGTH                                             = 0x0200
	IS_TEXT_UNICODE_REVERSE_ASCII16                                        = 0x0010
	IS_TEXT_UNICODE_REVERSE_CONTROLS                                       = 0x0040
	IS_TEXT_UNICODE_REVERSE_MASK                                           = 0x00F0
	IS_TEXT_UNICODE_REVERSE_SIGNATURE                                      = 0x0080
	IS_TEXT_UNICODE_REVERSE_STATISTICS                                     = 0x0020
	IS_TEXT_UNICODE_SIGNATURE                                              = 0x0008
	IS_TEXT_UNICODE_STATISTICS                                             = 0x0002
	IS_TEXT_UNICODE_UNICODE_MASK                                           = 0x000F
	JL_BOTH                                                                = 0x04
	JL_RECEIVER_ONLY                                                       = 0x02
	JL_SENDER_ONLY                                                         = 0x01
	JOB_OBJECT_ALL_ACCESS                                                  = 2031647
	JOB_OBJECT_ASSIGN_PROCESS                                              = 1
	JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS                                     = 0x000000ff
	JOB_OBJECT_CPU_RATE_CONTROL_ENABLE                                     = 0x1
	JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP                                   = 0x4
	JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY                                     = 0x8
	JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS                                = 0xf
	JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED                               = 0x2
	JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS                                  = 0x00007fff
	JOB_OBJECT_LIMIT_ACTIVE_PROCESS                                        = 0x00000008
	JOB_OBJECT_LIMIT_AFFINITY                                              = 0x00000010
	JOB_OBJECT_LIMIT_BREAKAWAY_OK                                          = 0x00000800
	JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION                            = 0x00000400
	JOB_OBJECT_LIMIT_JOB_MEMORY                                            = 0x00000200
	JOB_OBJECT_LIMIT_JOB_READ_BYTES                                        = 0x00010000
	JOB_OBJECT_LIMIT_JOB_TIME                                              = 0x00000004
	JOB_OBJECT_LIMIT_JOB_WRITE_BYTES                                       = 0x00020000
	JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE                                     = 0x00002000
	JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME                                     = 0x00000040
	JOB_OBJECT_LIMIT_PRIORITY_CLASS                                        = 0x00000020
	JOB_OBJECT_LIMIT_PROCESS_MEMORY                                        = 0x00000100
	JOB_OBJECT_LIMIT_PROCESS_TIME                                          = 0x00000002
	JOB_OBJECT_LIMIT_RATE_CONTROL                                          = 0x00040000
	JOB_OBJECT_LIMIT_RESERVED3                                             = 0x00008000
	JOB_OBJECT_LIMIT_RESERVED4                                             = 0x00010000
	JOB_OBJECT_LIMIT_RESERVED5                                             = 0x00020000
	JOB_OBJECT_LIMIT_RESERVED6                                             = 0x00040000
	JOB_OBJECT_LIMIT_SCHEDULING_CLASS                                      = 0x00000080
	JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK                                   = 0x00001000
	JOB_OBJECT_LIMIT_SUBSET_AFFINITY                                       = 0x00004000
	JOB_OBJECT_LIMIT_VALID_FLAGS                                           = 0x0007ffff
	JOB_OBJECT_LIMIT_WORKINGSET                                            = 0x00000001
	JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS                                   = 8
	JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT                                    = 3
	JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO                                     = 4
	JOB_OBJECT_MSG_END_OF_JOB_TIME                                         = 1
	JOB_OBJECT_MSG_END_OF_PROCESS_TIME                                     = 2
	JOB_OBJECT_MSG_EXIT_PROCESS                                            = 7
	JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT                                    = 12
	JOB_OBJECT_MSG_JOB_MEMORY_LIMIT                                        = 10
	JOB_OBJECT_MSG_MAXIMUM                                                 = 12
	JOB_OBJECT_MSG_MINIMUM                                                 = 1
	JOB_OBJECT_MSG_NEW_PROCESS                                             = 6
	JOB_OBJECT_MSG_NOTIFICATION_LIMIT                                      = 11
	JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT                                    = 9
	JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS                              = 0x00070204
	JOB_OBJECT_POST_AT_END_OF_JOB                                          = 1
	JOB_OBJECT_QUERY                                                       = 4
	JOB_OBJECT_RESERVED_LIMIT_VALID_FLAGS                                  = 0x0007ffff
	JOB_OBJECT_SECURITY_FILTER_TOKENS                                      = 0x00000008
	JOB_OBJECT_SECURITY_NO_ADMIN                                           = 0x00000001
	JOB_OBJECT_SECURITY_ONLY_TOKEN                                         = 0x00000004
	JOB_OBJECT_SECURITY_RESTRICTED_TOKEN                                   = 0x00000002
	JOB_OBJECT_SECURITY_VALID_FLAGS                                        = 0x0000000f
	JOB_OBJECT_SET_ATTRIBUTES                                              = 2
	JOB_OBJECT_SET_SECURITY_ATTRIBUTES                                     = 16
	JOB_OBJECT_TERMINATE                                                   = 8
	JOB_OBJECT_TERMINATE_AT_END_OF_JOB                                     = 0
	JOB_OBJECT_UILIMIT_ALL                                                 = 0x000000FF
	JOB_OBJECT_UILIMIT_DESKTOP                                             = 0x00000040
	JOB_OBJECT_UILIMIT_DISPLAYSETTINGS                                     = 0x00000010
	JOB_OBJECT_UILIMIT_EXITWINDOWS                                         = 0x00000080
	JOB_OBJECT_UILIMIT_GLOBALATOMS                                         = 0x00000020
	JOB_OBJECT_UILIMIT_HANDLES                                             = 0x00000001
	JOB_OBJECT_UILIMIT_NONE                                                = 0x00000000
	JOB_OBJECT_UILIMIT_READCLIPBOARD                                       = 0x00000002
	JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS                                    = 0x00000008
	JOB_OBJECT_UILIMIT_WRITECLIPBOARD                                      = 0x00000004
	JOB_OBJECT_UI_VALID_FLAGS                                              = 0x000000FF
	JOHAB_CHARSET                                                          = 130
	KEYBOARD_OVERRUN_MAKE_CODE                                             = 0xFF
	KEYEVENTF_EXTENDEDKEY                                                  = 0x0001
	KEYEVENTF_KEYUP                                                        = 0x0002
	KEYEVENTF_SCANCODE                                                     = 0x0008
	KEYEVENTF_UNICODE                                                      = 0x0004
	KEY_ALL_ACCESS                                                         = 983103
	KEY_CREATE_LINK                                                        = 32
	KEY_CREATE_SUB_KEY                                                     = 4
	KEY_ENUMERATE_SUB_KEYS                                                 = 8
	KEY_EVENT                                                              = 0x1
	KEY_EXECUTE                                                            = 131097
	KEY_NOTIFY                                                             = 16
	KEY_QUERY_VALUE                                                        = 1
	KEY_READ                                                               = 131097
	KEY_SET_VALUE                                                          = 2
	KEY_WOW64_32KEY                                                        = 512
	KEY_WOW64_64KEY                                                        = 256
	KEY_WOW64_RES                                                          = 768
	KEY_WRITE                                                              = 131078
	KF_ALTDOWN                                                             = 0x2000
	KF_DLGMODE                                                             = 0x0800
	KF_EXTENDED                                                            = 0x0100
	KF_MENUMODE                                                            = 0x1000
	KF_REPEAT                                                              = 0x4000
	KF_UP                                                                  = 0x8000
	KLF_ACTIVATE                                                           = 0x00000001
	KLF_NOTELLSHELL                                                        = 0x00000080
	KLF_REORDER                                                            = 0x00000008
	KLF_REPLACELANG                                                        = 0x00000010
	KLF_RESET                                                              = 0x40000000
	KLF_SETFORPROCESS                                                      = 0x00000100
	KLF_SHIFTLOCK                                                          = 0x00010000
	KLF_SUBSTITUTE_OK                                                      = 0x00000002
	KL_NAMELENGTH                                                          = 9
	KTM_MARSHAL_BLOB_VERSION_MAJOR                                         = 1
	KTM_MARSHAL_BLOB_VERSION_MINOR                                         = 1
	LABEL_SECURITY_INFORMATION                                             = 16
	LANG_AFRIKAANS                                                         = 0x36
	LANG_ALBANIAN                                                          = 0x1c
	LANG_ALSATIAN                                                          = 0x84
	LANG_AMHARIC                                                           = 0x5e
	LANG_ARABIC                                                            = 0x01
	LANG_ARMENIAN                                                          = 0x2b
	LANG_ASSAMESE                                                          = 0x4d
	LANG_AZERBAIJANI                                                       = 0x2c
	LANG_AZERI                                                             = 0x2c
	LANG_BANGLA                                                            = 0x45
	LANG_BASHKIR                                                           = 0x6d
	LANG_BASQUE                                                            = 0x2d
	LANG_BELARUSIAN                                                        = 0x23
	LANG_BENGALI                                                           = 0x45
	LANG_BOSNIAN                                                           = 0x1a
	LANG_BOSNIAN_NEUTRAL                                                   = 0x781a
	LANG_BRETON                                                            = 0x7e
	LANG_BULGARIAN                                                         = 0x02
	LANG_CATALAN                                                           = 0x03
	LANG_CENTRAL_KURDISH                                                   = 0x92
	LANG_CHEROKEE                                                          = 0x5c
	LANG_CHINESE                                                           = 0x04
	LANG_CHINESE_SIMPLIFIED                                                = 0x04
	LANG_CHINESE_TRADITIONAL                                               = 0x7c04
	LANG_CORSICAN                                                          = 0x83
	LANG_CROATIAN                                                          = 0x1a
	LANG_CZECH                                                             = 0x05
	LANG_DANISH                                                            = 0x06
	LANG_DARI                                                              = 0x8c
	LANG_DIVEHI                                                            = 0x65
	LANG_DUTCH                                                             = 0x13
	LANG_ENGLISH                                                           = 0x09
	LANG_ESTONIAN                                                          = 0x25
	LANG_FAEROESE                                                          = 0x38
	LANG_FARSI                                                             = 0x29
	LANG_FILIPINO                                                          = 0x64
	LANG_FINNISH                                                           = 0x0b
	LANG_FRENCH                                                            = 0x0c
	LANG_FRISIAN                                                           = 0x62
	LANG_FULAH                                                             = 0x67
	LANG_GALICIAN                                                          = 0x56
	LANG_GEORGIAN                                                          = 0x37
	LANG_GERMAN                                                            = 0x07
	LANG_GREEK                                                             = 0x08
	LANG_GREENLANDIC                                                       = 0x6f
	LANG_GUJARATI                                                          = 0x47
	LANG_HAUSA                                                             = 0x68
	LANG_HEBREW                                                            = 0x0d
	LANG_HINDI                                                             = 0x39
	LANG_HUNGARIAN                                                         = 0x0e
	LANG_ICELANDIC                                                         = 0x0f
	LANG_IGBO                                                              = 0x70
	LANG_INDONESIAN                                                        = 0x21
	LANG_INUKTITUT                                                         = 0x5d
	LANG_INVARIANT                                                         = 0x7f
	LANG_IRISH                                                             = 0x3c
	LANG_ITALIAN                                                           = 0x10
	LANG_JAPANESE                                                          = 0x11
	LANG_KANNADA                                                           = 0x4b
	LANG_KASHMIRI                                                          = 0x60
	LANG_KAZAK                                                             = 0x3f
	LANG_KHMER                                                             = 0x53
	LANG_KICHE                                                             = 0x86
	LANG_KINYARWANDA                                                       = 0x87
	LANG_KONKANI                                                           = 0x57
	LANG_KOREAN                                                            = 0x12
	LANG_KYRGYZ                                                            = 0x40
	LANG_LAO                                                               = 0x54
	LANG_LATVIAN                                                           = 0x26
	LANG_LITHUANIAN                                                        = 0x27
	LANG_LOWER_SORBIAN                                                     = 0x2e
	LANG_LUXEMBOURGISH                                                     = 0x6e
	LANG_MACEDONIAN                                                        = 0x2f
	LANG_MALAY                                                             = 0x3e
	LANG_MALAYALAM                                                         = 0x4c
	LANG_MALTESE                                                           = 0x3a
	LANG_MANIPURI                                                          = 0x58
	LANG_MAORI                                                             = 0x81
	LANG_MAPUDUNGUN                                                        = 0x7a
	LANG_MARATHI                                                           = 0x4e
	LANG_MOHAWK                                                            = 0x7c
	LANG_MONGOLIAN                                                         = 0x50
	LANG_NEPALI                                                            = 0x61
	LANG_NEUTRAL                                                           = 0x00
	LANG_NORWEGIAN                                                         = 0x14
	LANG_OCCITAN                                                           = 0x82
	LANG_ODIA                                                              = 0x48
	LANG_ORIYA                                                             = 0x48
	LANG_PASHTO                                                            = 0x63
	LANG_PERSIAN                                                           = 0x29
	LANG_POLISH                                                            = 0x15
	LANG_PORTUGUESE                                                        = 0x16
	LANG_PULAR                                                             = 0x67
	LANG_PUNJABI                                                           = 0x46
	LANG_QUECHUA                                                           = 0x6b
	LANG_ROMANIAN                                                          = 0x18
	LANG_ROMANSH                                                           = 0x17
	LANG_RUSSIAN                                                           = 0x19
	LANG_SAKHA                                                             = 0x85
	LANG_SAMI                                                              = 0x3b
	LANG_SANSKRIT                                                          = 0x4f
	LANG_SCOTTISH_GAELIC                                                   = 0x91
	LANG_SERBIAN                                                           = 0x1a
	LANG_SERBIAN_NEUTRAL                                                   = 0x7c1a
	LANG_SINDHI                                                            = 0x59
	LANG_SINHALESE                                                         = 0x5b
	LANG_SLOVAK                                                            = 0x1b
	LANG_SLOVENIAN                                                         = 0x24
	LANG_SOTHO                                                             = 0x6c
	LANG_SPANISH                                                           = 0x0a
	LANG_SWAHILI                                                           = 0x41
	LANG_SWEDISH                                                           = 0x1d
	LANG_SYRIAC                                                            = 0x5a
	LANG_TAJIK                                                             = 0x28
	LANG_TAMAZIGHT                                                         = 0x5f
	LANG_TAMIL                                                             = 0x49
	LANG_TATAR                                                             = 0x44
	LANG_TELUGU                                                            = 0x4a
	LANG_THAI                                                              = 0x1e
	LANG_TIBETAN                                                           = 0x51
	LANG_TIGRIGNA                                                          = 0x73
	LANG_TIGRINYA                                                          = 0x73
	LANG_TSWANA                                                            = 0x32
	LANG_TURKISH                                                           = 0x1f
	LANG_TURKMEN                                                           = 0x42
	LANG_UIGHUR                                                            = 0x80
	LANG_UKRAINIAN                                                         = 0x22
	LANG_UPPER_SORBIAN                                                     = 0x2e
	LANG_URDU                                                              = 0x20
	LANG_UZBEK                                                             = 0x43
	LANG_VALENCIAN                                                         = 0x03
	LANG_VIETNAMESE                                                        = 0x2a
	LANG_WELSH                                                             = 0x52
	LANG_WOLOF                                                             = 0x88
	LANG_XHOSA                                                             = 0x34
	LANG_YAKUT                                                             = 0x85
	LANG_YI                                                                = 0x78
	LANG_YORUBA                                                            = 0x6a
	LANG_ZULU                                                              = 0x35
	LAYERED_PROTOCOL                                                       = 0
	LAYOUT_BITMAPORIENTATIONPRESERVED                                      = 0x00000008
	LAYOUT_BTT                                                             = 0x00000002
	LAYOUT_ORIENTATIONMASK                                                 = 7
	LAYOUT_RTL                                                             = 0x00000001
	LAYOUT_VBH                                                             = 0x00000004
	LBN_DBLCLK                                                             = 2
	LBN_ERRSPACE                                                           = -2
	LBN_KILLFOCUS                                                          = 5
	LBN_SELCANCEL                                                          = 3
	LBN_SELCHANGE                                                          = 1
	LBN_SETFOCUS                                                           = 4
	LBS_COMBOBOX                                                           = 32768
	LBS_DISABLENOSCROLL                                                    = 4096
	LBS_EXTENDEDSEL                                                        = 2048
	LBS_HASSTRINGS                                                         = 64
	LBS_MULTICOLUMN                                                        = 512
	LBS_MULTIPLESEL                                                        = 8
	LBS_NODATA                                                             = 8192
	LBS_NOINTEGRALHEIGHT                                                   = 256
	LBS_NOREDRAW                                                           = 4
	LBS_NOSEL                                                              = 16384
	LBS_NOTIFY                                                             = 1
	LBS_OWNERDRAWFIXED                                                     = 16
	LBS_OWNERDRAWVARIABLE                                                  = 32
	LBS_SORT                                                               = 2
	LBS_STANDARD                                                           = 10485763
	LBS_USETABSTOPS                                                        = 128
	LBS_WANTKEYBOARDINPUT                                                  = 1024
	LB_ADDFILE                                                             = 0x0196
	LB_ADDSTRING                                                           = 0x0180
	LB_CTLCODE                                                             = 0
	LB_DELETESTRING                                                        = 0x0182
	LB_DIR                                                                 = 0x018D
	LB_ERR                                                                 = -1
	LB_ERRSPACE                                                            = -2
	LB_FINDSTRING                                                          = 0x018F
	LB_FINDSTRINGEXACT                                                     = 0x01A2
	LB_GETANCHORINDEX                                                      = 0x019D
	LB_GETCARETINDEX                                                       = 0x019F
	LB_GETCOUNT                                                            = 0x018B
	LB_GETCURSEL                                                           = 0x0188
	LB_GETHORIZONTALEXTENT                                                 = 0x0193
	LB_GETITEMDATA                                                         = 0x0199
	LB_GETITEMHEIGHT                                                       = 0x01A1
	LB_GETITEMRECT                                                         = 0x0198
	LB_GETLISTBOXINFO                                                      = 0x01B2
	LB_GETLOCALE                                                           = 0x01A6
	LB_GETSEL                                                              = 0x0187
	LB_GETSELCOUNT                                                         = 0x0190
	LB_GETSELITEMS                                                         = 0x0191
	LB_GETTEXT                                                             = 0x0189
	LB_GETTEXTLEN                                                          = 0x018A
	LB_GETTOPINDEX                                                         = 0x018E
	LB_INITSTORAGE                                                         = 0x01A8
	LB_INSERTSTRING                                                        = 0x0181
	LB_ITEMFROMPOINT                                                       = 0x01A9
	LB_MSGMAX                                                              = 0x01B3
	LB_OKAY                                                                = 0
	LB_RESETCONTENT                                                        = 0x0184
	LB_SELECTSTRING                                                        = 0x018C
	LB_SELITEMRANGE                                                        = 0x019B
	LB_SELITEMRANGEEX                                                      = 0x0183
	LB_SETANCHORINDEX                                                      = 0x019C
	LB_SETCARETINDEX                                                       = 0x019E
	LB_SETCOLUMNWIDTH                                                      = 0x0195
	LB_SETCOUNT                                                            = 0x01A7
	LB_SETCURSEL                                                           = 0x0186
	LB_SETHORIZONTALEXTENT                                                 = 0x0194
	LB_SETITEMDATA                                                         = 0x019A
	LB_SETITEMHEIGHT                                                       = 0x01A0
	LB_SETLOCALE                                                           = 0x01A5
	LB_SETSEL                                                              = 0x0185
	LB_SETTABSTOPS                                                         = 0x0192
	LB_SETTOPINDEX                                                         = 0x0197
	LCID_ALTERNATE_SORTS                                                   = 0x00000004
	LCID_INSTALLED                                                         = 0x00000001
	LCID_SUPPORTED                                                         = 0x00000002
	LCMAP_BYTEREV                                                          = 0x00000800
	LCMAP_FULLWIDTH                                                        = 0x00800000
	LCMAP_HALFWIDTH                                                        = 0x00400000
	LCMAP_HIRAGANA                                                         = 0x00100000
	LCMAP_KATAKANA                                                         = 0x00200000
	LCMAP_LINGUISTIC_CASING                                                = 0x01000000
	LCMAP_LOWERCASE                                                        = 0x00000100
	LCMAP_SIMPLIFIED_CHINESE                                               = 0x02000000
	LCMAP_SORTKEY                                                          = 0x00000400
	LCMAP_TRADITIONAL_CHINESE                                              = 0x04000000
	LCMAP_UPPERCASE                                                        = 0x00000200
	LCS_CALIBRATED_RGB                                                     = 0
	LCS_GM_ABS_COLORIMETRIC                                                = 8
	LCS_GM_BUSINESS                                                        = 1
	LCS_GM_GRAPHICS                                                        = 2
	LCS_GM_IMAGES                                                          = 4
	LCS_SIGNATURE                                                          = 80
	LCS_WINDOWS_COLOR_SPACE                                                = 87
	LCS_sRGB                                                               = 115
	LC_ALL                                                                 = 0
	LC_COLLATE                                                             = 1
	LC_CTYPE                                                               = 2
	LC_INTERIORS                                                           = 128
	LC_MARKER                                                              = 4
	LC_MAX                                                                 = 5
	LC_MIN                                                                 = 0
	LC_MONETARY                                                            = 3
	LC_NONE                                                                = 0
	LC_NUMERIC                                                             = 4
	LC_POLYLINE                                                            = 2
	LC_POLYMARKER                                                          = 8
	LC_STYLED                                                              = 32
	LC_TIME                                                                = 5
	LC_WIDE                                                                = 16
	LC_WIDESTYLED                                                          = 64
	LDBL_DECIMAL_DIG                                                       = 21
	LDBL_DIG                                                               = 18
	LDBL_EPSILON                                                           = 0
	LDBL_HAS_SUBNORM                                                       = 1
	LDBL_MANT_DIG                                                          = 64
	LDBL_MAX                                                               = 0
	LDBL_MAX_10_EXP                                                        = 4932
	LDBL_MAX_EXP                                                           = 16384
	LDBL_MIN                                                               = 0
	LDBL_MIN_10_EXP                                                        = -4931
	LDBL_MIN_EXP                                                           = -16381
	LDBL_TRUE_MIN                                                          = 0
	LEFT_ALT_PRESSED                                                       = 0x2
	LEFT_CTRL_PRESSED                                                      = 0x8
	LF_FACESIZE                                                            = 32
	LF_FULLFACESIZE                                                        = 64
	LGRPID_ARABIC                                                          = 0x000d
	LGRPID_ARMENIAN                                                        = 0x0011
	LGRPID_BALTIC                                                          = 0x0003
	LGRPID_CENTRAL_EUROPE                                                  = 0x0002
	LGRPID_CYRILLIC                                                        = 0x0005
	LGRPID_GEORGIAN                                                        = 0x0010
	LGRPID_GREEK                                                           = 0x0004
	LGRPID_HEBREW                                                          = 0x000c
	LGRPID_INDIC                                                           = 0x000f
	LGRPID_INSTALLED                                                       = 0x00000001
	LGRPID_JAPANESE                                                        = 0x0007
	LGRPID_KOREAN                                                          = 0x0008
	LGRPID_SIMPLIFIED_CHINESE                                              = 0x000a
	LGRPID_SUPPORTED                                                       = 0x00000002
	LGRPID_THAI                                                            = 0x000b
	LGRPID_TRADITIONAL_CHINESE                                             = 0x0009
	LGRPID_TURKIC                                                          = 0x0006
	LGRPID_TURKISH                                                         = 0x0006
	LGRPID_VIETNAMESE                                                      = 0x000e
	LGRPID_WESTERN_EUROPE                                                  = 0x0001
	LHND                                                                   = 66
	LINECAPS                                                               = 30
	LINGUISTIC_IGNORECASE                                                  = 0x00000010
	LINGUISTIC_IGNOREDIACRITIC                                             = 0x00000020
	LITTLEENDIAN                                                           = 0x0001
	LLKHF_ALTDOWN                                                          = 32
	LLKHF_EXTENDED                                                         = 1
	LLKHF_INJECTED                                                         = 0x00000010
	LLKHF_LOWER_IL_INJECTED                                                = 0x00000002
	LLKHF_UP                                                               = 128
	LLMHF_INJECTED                                                         = 0x00000001
	LLMHF_LOWER_IL_INJECTED                                                = 0x00000002
	LLONG_MAX                                                              = 9223372036854775807
	LLONG_MIN                                                              = -9223372036854775808
	LMEM_DISCARDABLE                                                       = 0xf00
	LMEM_DISCARDED                                                         = 0x4000
	LMEM_FIXED                                                             = 0x0
	LMEM_INVALID_HANDLE                                                    = 0x8000
	LMEM_LOCKCOUNT                                                         = 0xff
	LMEM_MODIFY                                                            = 0x80
	LMEM_MOVEABLE                                                          = 0x2
	LMEM_NOCOMPACT                                                         = 0x10
	LMEM_NODISCARD                                                         = 0x20
	LMEM_VALID_FLAGS                                                       = 0xf72
	LMEM_ZEROINIT                                                          = 0x40
	LOAD_DLL_DEBUG_EVENT                                                   = 6
	LOAD_IGNORE_CODE_AUTHZ_LEVEL                                           = 0x10
	LOAD_LIBRARY_AS_DATAFILE                                               = 0x2
	LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE                                     = 0x40
	LOAD_LIBRARY_AS_IMAGE_RESOURCE                                         = 0x20
	LOAD_LIBRARY_REQUIRE_SIGNED_TARGET                                     = 0x80
	LOAD_LIBRARY_SEARCH_APPLICATION_DIR                                    = 0x200
	LOAD_LIBRARY_SEARCH_DEFAULT_DIRS                                       = 0x1000
	LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR                                       = 0x100
	LOAD_LIBRARY_SEARCH_SYSTEM32                                           = 0x800
	LOAD_LIBRARY_SEARCH_SYSTEM32_NO_FORWARDER                              = 2048
	LOAD_LIBRARY_SEARCH_USER_DIRS                                          = 0x400
	LOAD_WITH_ALTERED_SEARCH_PATH                                          = 0x8
	LOCALE_FONTSIGNATURE                                                   = 0x00000058
	LOCALE_ICALENDARTYPE                                                   = 0x00001009
	LOCALE_ICENTURY                                                        = 0x00000024
	LOCALE_ICOUNTRY                                                        = 0x00000005
	LOCALE_ICURRDIGITS                                                     = 0x00000019
	LOCALE_ICURRENCY                                                       = 0x0000001b
	LOCALE_IDATE                                                           = 0x00000021
	LOCALE_IDAYLZERO                                                       = 0x00000026
	LOCALE_IDEFAULTANSICODEPAGE                                            = 0x00001004
	LOCALE_IDEFAULTCODEPAGE                                                = 0x0000000b
	LOCALE_IDEFAULTCOUNTRY                                                 = 0x0000000a
	LOCALE_IDEFAULTEBCDICCODEPAGE                                          = 0x00001012
	LOCALE_IDEFAULTLANGUAGE                                                = 0x00000009
	LOCALE_IDEFAULTMACCODEPAGE                                             = 0x00001011
	LOCALE_IDIGITS                                                         = 0x00000011
	LOCALE_IDIGITSUBSTITUTION                                              = 0x00001014
	LOCALE_IFIRSTDAYOFWEEK                                                 = 0x0000100c
	LOCALE_IFIRSTWEEKOFYEAR                                                = 0x0000100d
	LOCALE_IGEOID                                                          = 0x0000005b
	LOCALE_IINTLCURRDIGITS                                                 = 0x0000001a
	LOCALE_ILANGUAGE                                                       = 0x00000001
	LOCALE_ILDATE                                                          = 0x00000022
	LOCALE_ILZERO                                                          = 0x00000012
	LOCALE_IMEASURE                                                        = 0x0000000d
	LOCALE_IMONLZERO                                                       = 0x00000027
	LOCALE_INEGCURR                                                        = 0x0000001c
	LOCALE_INEGNUMBER                                                      = 0x00001010
	LOCALE_INEGSEPBYSPACE                                                  = 0x00000057
	LOCALE_INEGSIGNPOSN                                                    = 0x00000053
	LOCALE_INEGSYMPRECEDES                                                 = 0x00000056
	LOCALE_IOPTIONALCALENDAR                                               = 0x0000100b
	LOCALE_IPAPERSIZE                                                      = 0x0000100a
	LOCALE_IPOSSEPBYSPACE                                                  = 0x00000055
	LOCALE_IPOSSIGNPOSN                                                    = 0x00000052
	LOCALE_IPOSSYMPRECEDES                                                 = 0x00000054
	LOCALE_ITIME                                                           = 0x00000023
	LOCALE_ITIMEMARKPOSN                                                   = 0x00001005
	LOCALE_ITLZERO                                                         = 0x00000025
	LOCALE_NAME_MAX_LENGTH                                                 = 85
	LOCALE_NOUSEROVERRIDE                                                  = 0x80000000
	LOCALE_RETURN_NUMBER                                                   = 0x20000000
	LOCALE_S1159                                                           = 0x00000028
	LOCALE_S2359                                                           = 0x00000029
	LOCALE_SABBREVCTRYNAME                                                 = 0x00000007
	LOCALE_SABBREVDAYNAME1                                                 = 0x00000031
	LOCALE_SABBREVDAYNAME2                                                 = 0x00000032
	LOCALE_SABBREVDAYNAME3                                                 = 0x00000033
	LOCALE_SABBREVDAYNAME4                                                 = 0x00000034
	LOCALE_SABBREVDAYNAME5                                                 = 0x00000035
	LOCALE_SABBREVDAYNAME6                                                 = 0x00000036
	LOCALE_SABBREVDAYNAME7                                                 = 0x00000037
	LOCALE_SABBREVLANGNAME                                                 = 0x00000003
	LOCALE_SABBREVMONTHNAME1                                               = 0x00000044
	LOCALE_SABBREVMONTHNAME10                                              = 0x0000004d
	LOCALE_SABBREVMONTHNAME11                                              = 0x0000004e
	LOCALE_SABBREVMONTHNAME12                                              = 0x0000004f
	LOCALE_SABBREVMONTHNAME13                                              = 0x0000100f
	LOCALE_SABBREVMONTHNAME2                                               = 0x00000045
	LOCALE_SABBREVMONTHNAME3                                               = 0x00000046
	LOCALE_SABBREVMONTHNAME4                                               = 0x00000047
	LOCALE_SABBREVMONTHNAME5                                               = 0x00000048
	LOCALE_SABBREVMONTHNAME6                                               = 0x00000049
	LOCALE_SABBREVMONTHNAME7                                               = 0x0000004a
	LOCALE_SABBREVMONTHNAME8                                               = 0x0000004b
	LOCALE_SABBREVMONTHNAME9                                               = 0x0000004c
	LOCALE_SCOUNTRY                                                        = 0x00000006
	LOCALE_SCURRENCY                                                       = 0x00000014
	LOCALE_SDATE                                                           = 0x0000001d
	LOCALE_SDAYNAME1                                                       = 0x0000002a
	LOCALE_SDAYNAME2                                                       = 0x0000002b
	LOCALE_SDAYNAME3                                                       = 0x0000002c
	LOCALE_SDAYNAME4                                                       = 0x0000002d
	LOCALE_SDAYNAME5                                                       = 0x0000002e
	LOCALE_SDAYNAME6                                                       = 0x0000002f
	LOCALE_SDAYNAME7                                                       = 0x00000030
	LOCALE_SDECIMAL                                                        = 0x0000000e
	LOCALE_SENGCOUNTRY                                                     = 0x00001002
	LOCALE_SENGCURRNAME                                                    = 0x00001007
	LOCALE_SENGLANGUAGE                                                    = 0x00001001
	LOCALE_SENGLISHCOUNTRYNAME                                             = 0x00001002
	LOCALE_SENGLISHLANGUAGENAME                                            = 0x00001001
	LOCALE_SGROUPING                                                       = 0x00000010
	LOCALE_SINTLSYMBOL                                                     = 0x00000015
	LOCALE_SISO3166CTRYNAME                                                = 0x0000005a
	LOCALE_SISO639LANGNAME                                                 = 0x00000059
	LOCALE_SLANGUAGE                                                       = 0x00000002
	LOCALE_SLIST                                                           = 0x0000000c
	LOCALE_SLOCALIZEDCOUNTRYNAME                                           = 0x00000006
	LOCALE_SLOCALIZEDDISPLAYNAME                                           = 0x00000002
	LOCALE_SLONGDATE                                                       = 0x00000020
	LOCALE_SMONDECIMALSEP                                                  = 0x00000016
	LOCALE_SMONGROUPING                                                    = 0x00000018
	LOCALE_SMONTHNAME1                                                     = 0x00000038
	LOCALE_SMONTHNAME10                                                    = 0x00000041
	LOCALE_SMONTHNAME11                                                    = 0x00000042
	LOCALE_SMONTHNAME12                                                    = 0x00000043
	LOCALE_SMONTHNAME13                                                    = 0x0000100e
	LOCALE_SMONTHNAME2                                                     = 0x00000039
	LOCALE_SMONTHNAME3                                                     = 0x0000003a
	LOCALE_SMONTHNAME4                                                     = 0x0000003b
	LOCALE_SMONTHNAME5                                                     = 0x0000003c
	LOCALE_SMONTHNAME6                                                     = 0x0000003d
	LOCALE_SMONTHNAME7                                                     = 0x0000003e
	LOCALE_SMONTHNAME8                                                     = 0x0000003f
	LOCALE_SMONTHNAME9                                                     = 0x00000040
	LOCALE_SMONTHOUSANDSEP                                                 = 0x00000017
	LOCALE_SNATIVECOUNTRYNAME                                              = 0x00000008
	LOCALE_SNATIVECTRYNAME                                                 = 0x00000008
	LOCALE_SNATIVECURRNAME                                                 = 0x00001008
	LOCALE_SNATIVEDIGITS                                                   = 0x00000013
	LOCALE_SNATIVELANGNAME                                                 = 0x00000004
	LOCALE_SNATIVELANGUAGENAME                                             = 0x00000004
	LOCALE_SNEGATIVESIGN                                                   = 0x00000051
	LOCALE_SPOSITIVESIGN                                                   = 0x00000050
	LOCALE_SSHORTDATE                                                      = 0x0000001f
	LOCALE_SSORTNAME                                                       = 0x00001013
	LOCALE_STHOUSAND                                                       = 0x0000000f
	LOCALE_STIME                                                           = 0x0000001e
	LOCALE_STIMEFORMAT                                                     = 0x00001003
	LOCALE_SYEARMONTH                                                      = 0x00001006
	LOCALE_USE_CP_ACP                                                      = 0x40000000
	LOCKFILE_EXCLUSIVE_LOCK                                                = 0x2
	LOCKFILE_FAIL_IMMEDIATELY                                              = 0x1
	LOGON32_LOGON_BATCH                                                    = 4
	LOGON32_LOGON_INTERACTIVE                                              = 2
	LOGON32_LOGON_NETWORK                                                  = 3
	LOGON32_LOGON_NETWORK_CLEARTEXT                                        = 8
	LOGON32_LOGON_NEW_CREDENTIALS                                          = 9
	LOGON32_LOGON_SERVICE                                                  = 5
	LOGON32_LOGON_UNLOCK                                                   = 7
	LOGON32_PROVIDER_DEFAULT                                               = 0
	LOGON32_PROVIDER_WINNT35                                               = 1
	LOGON32_PROVIDER_WINNT40                                               = 2
	LOGON32_PROVIDER_WINNT50                                               = 3
	LOGON_NETCREDENTIALS_ONLY                                              = 0x00000002
	LOGON_WITH_PROFILE                                                     = 0x00000001
	LOGON_ZERO_PASSWORD_BUFFER                                             = 0x80000000
	LOGPIXELSX                                                             = 88
	LOGPIXELSY                                                             = 90
	LONG_LONG_MAX                                                          = 9223372036854775807
	LONG_LONG_MIN                                                          = -9223372036854775808
	LONG_MAX                                                               = 2147483647
	LONG_MIN                                                               = -2147483648
	LOW_SURROGATE_END                                                      = 0xdfff
	LOW_SURROGATE_START                                                    = 0xdc00
	LPD_DOUBLEBUFFER                                                       = 0x00000001
	LPD_SHARE_ACCUM                                                        = 0x00000100
	LPD_SHARE_DEPTH                                                        = 0x00000040
	LPD_SHARE_STENCIL                                                      = 0x00000080
	LPD_STEREO                                                             = 0x00000002
	LPD_SUPPORT_GDI                                                        = 0x00000010
	LPD_SUPPORT_OPENGL                                                     = 0x00000020
	LPD_SWAP_COPY                                                          = 0x00000400
	LPD_SWAP_EXCHANGE                                                      = 0x00000200
	LPD_TRANSPARENT                                                        = 0x00001000
	LPD_TYPE_COLORINDEX                                                    = 1
	LPD_TYPE_RGBA                                                          = 0
	LPTR                                                                   = 64
	LPTx                                                                   = 0x80
	LR_COLOR                                                               = 0x0002
	LR_COPYDELETEORG                                                       = 0x0008
	LR_COPYFROMRESOURCE                                                    = 0x4000
	LR_COPYRETURNORG                                                       = 0x0004
	LR_CREATEDIBSECTION                                                    = 0x2000
	LR_DEFAULTCOLOR                                                        = 0x0000
	LR_DEFAULTSIZE                                                         = 0x0040
	LR_LOADFROMFILE                                                        = 0x0010
	LR_LOADMAP3DCOLORS                                                     = 0x1000
	LR_LOADTRANSPARENT                                                     = 0x0020
	LR_MONOCHROME                                                          = 0x0001
	LR_SHARED                                                              = 0x8000
	LR_VGACOLOR                                                            = 0x0080
	LSFW_LOCK                                                              = 1
	LSFW_UNLOCK                                                            = 2
	LTGRAY_BRUSH                                                           = 1
	LTP_PC_SMT                                                             = 0x1
	LUA_TOKEN                                                              = 0x4
	LUP_ADDRCONFIG                                                         = 0x100000
	LUP_API_ANSI                                                           = 0x01000000
	LUP_CONTAINERS                                                         = 0x0002
	LUP_DEEP                                                               = 0x0001
	LUP_DISABLE_IDN_ENCODING                                               = 0x00800000
	LUP_DNS_ONLY                                                           = 0x20000
	LUP_DUAL_ADDR                                                          = 0x200000
	LUP_FILESERVER                                                         = 0x400000
	LUP_FLUSHCACHE                                                         = 0x1000
	LUP_FLUSHPREVIOUS                                                      = 0x2000
	LUP_NEAREST                                                            = 0x0008
	LUP_NOCONTAINERS                                                       = 0x0004
	LUP_NON_AUTHORITATIVE                                                  = 0x4000
	LUP_RESOLUTION_HANDLE                                                  = 0x80000000
	LUP_RES_RESERVICE                                                      = 0x8000
	LUP_RES_SERVICE                                                        = 0x8000
	LUP_RETURN_ADDR                                                        = 0x0100
	LUP_RETURN_ALIASES                                                     = 0x0400
	LUP_RETURN_ALL                                                         = 0x0FF0
	LUP_RETURN_BLOB                                                        = 0x0200
	LUP_RETURN_COMMENT                                                     = 0x0080
	LUP_RETURN_NAME                                                        = 0x0010
	LUP_RETURN_PREFERRED_NAMES                                             = 0x10000
	LUP_RETURN_QUERY_STRING                                                = 0x0800
	LUP_RETURN_TYPE                                                        = 0x0020
	LUP_RETURN_VERSION                                                     = 0x0040
	LUP_SECURE                                                             = 0x8000
	LWA_ALPHA                                                              = 0x00000002
	LWA_COLORKEY                                                           = 0x00000001
	MAC_CHARSET                                                            = 77
	MAPVK_VK_TO_CHAR                                                       = 2
	MAPVK_VK_TO_VSC                                                        = 0
	MAPVK_VSC_TO_VK                                                        = 1
	MAPVK_VSC_TO_VK_EX                                                     = 3
	MAP_COMPOSITE                                                          = 0x00000040
	MAP_EXPAND_LIGATURES                                                   = 0x00002000
	MAP_FOLDCZONE                                                          = 0x00000010
	MAP_FOLDDIGITS                                                         = 0x00000080
	MAP_PRECOMPOSED                                                        = 0x00000020
	MARKPARITY                                                             = 3
	MARSHAL_E_FIRST                                                        = 2147746080
	MARSHAL_E_LAST                                                         = 2147746095
	MARSHAL_S_FIRST                                                        = 262432
	MARSHAL_S_LAST                                                         = 262447
	MAXBYTE                                                                = 0xff
	MAXCHAR                                                                = 0x7f
	MAXDWORD                                                               = 0xffffffff
	MAXGETHOSTSTRUCT                                                       = 1024
	MAXIMUM_ALLOWED                                                        = 33554432
	MAXIMUM_PROCESSORS                                                     = 64
	MAXIMUM_PROC_PER_GROUP                                                 = 64
	MAXIMUM_REPARSE_DATA_BUFFER_SIZE                                       = 16384
	MAXIMUM_SUSPEND_COUNT                                                  = 127
	MAXIMUM_WAIT_OBJECTS                                                   = 64
	MAXIMUM_XSTATE_FEATURES                                                = 64
	MAXINTATOM                                                             = 0xc000
	MAXLOGICALLOGNAMESIZE                                                  = 256
	MAXLONG                                                                = 0x7fffffff
	MAXLONGLONG                                                            = 9223372036854775807
	MAXPATH                                                                = 260
	MAXPATHLEN                                                             = 260
	MAXSHORT                                                               = 0x7fff
	MAXSTRETCHBLTMODE                                                      = 4
	MAXWORD                                                                = 0xffff
	MAX_ACL_REVISION                                                       = 4
	MAX_COMPUTERNAME_LENGTH                                                = 15
	MAX_DEFAULTCHAR                                                        = 2
	MAX_HW_COUNTERS                                                        = 16
	MAX_LEADBYTES                                                          = 12
	MAX_NESTING_DEPTH                                                      = 1000
	MAX_NUM_REASONS                                                        = 256
	MAX_PATH                                                               = 260
	MAX_PROFILE_LEN                                                        = 80
	MAX_PROTOCOL_CHAIN                                                     = 7
	MAX_REASON_BUGID_LEN                                                   = 32
	MAX_REASON_COMMENT_LEN                                                 = 512
	MAX_REASON_DESC_LEN                                                    = 256
	MAX_REASON_NAME_LEN                                                    = 64
	MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH                                 = 64
	MAX_SHUTDOWN_TIMEOUT                                                   = 315360000
	MAX_STR_BLOCKREASON                                                    = 256
	MAX_SUPPORTED_OS_NUM                                                   = 4
	MAX_TRANSACTION_DESCRIPTION_LENGTH                                     = 64
	MA_ACTIVATE                                                            = 1
	MA_ACTIVATEANDEAT                                                      = 2
	MA_NOACTIVATE                                                          = 3
	MA_NOACTIVATEANDEAT                                                    = 4
	MB_ABORTRETRYIGNORE                                                    = 2
	MB_APPLMODAL                                                           = 0
	MB_CANCELTRYCONTINUE                                                   = 6
	MB_COMPOSITE                                                           = 0x00000002
	MB_DEFAULT_DESKTOP_ONLY                                                = 131072
	MB_DEFBUTTON1                                                          = 0
	MB_DEFBUTTON2                                                          = 256
	MB_DEFBUTTON3                                                          = 512
	MB_DEFBUTTON4                                                          = 768
	MB_DEFMASK                                                             = 3840
	MB_ERR_INVALID_CHARS                                                   = 0x00000008
	MB_HELP                                                                = 16384
	MB_ICONASTERISK                                                        = 64
	MB_ICONERROR                                                           = 16
	MB_ICONEXCLAMATION                                                     = 48
	MB_ICONHAND                                                            = 16
	MB_ICONINFORMATION                                                     = 64
	MB_ICONMASK                                                            = 240
	MB_ICONQUESTION                                                        = 32
	MB_ICONSTOP                                                            = 16
	MB_ICONWARNING                                                         = 48
	MB_LEN_MAX                                                             = 5
	MB_MISCMASK                                                            = 49152
	MB_MODEMASK                                                            = 12288
	MB_NOFOCUS                                                             = 32768
	MB_OK                                                                  = 0
	MB_OKCANCEL                                                            = 1
	MB_PRECOMPOSED                                                         = 0x00000001
	MB_RETRYCANCEL                                                         = 5
	MB_RIGHT                                                               = 524288
	MB_RTLREADING                                                          = 1048576
	MB_SERVICE_NOTIFICATION                                                = 2097152
	MB_SERVICE_NOTIFICATION_NT3X                                           = 262144
	MB_SETFOREGROUND                                                       = 65536
	MB_SYSTEMMODAL                                                         = 4096
	MB_TASKMODAL                                                           = 8192
	MB_TOPMOST                                                             = 262144
	MB_TYPEMASK                                                            = 15
	MB_USEGLYPHCHARS                                                       = 0x00000004
	MB_USERICON                                                            = 128
	MB_YESNO                                                               = 4
	MB_YESNOCANCEL                                                         = 3
	MCW_PC                                                                 = 196608
	MDIS_ALLCHILDSTYLES                                                    = 0x0001
	MDITILE_HORIZONTAL                                                     = 0x0001
	MDITILE_SKIPDISABLED                                                   = 0x0002
	MDITILE_VERTICAL                                                       = 0x0000
	MDITILE_ZORDER                                                         = 0x0004
	MDMSPKRFLAG_CALLSETUP                                                  = 0x00000008
	MDMSPKRFLAG_DIAL                                                       = 0x00000002
	MDMSPKRFLAG_OFF                                                        = 0x00000001
	MDMSPKRFLAG_ON                                                         = 0x00000004
	MDMSPKR_CALLSETUP                                                      = 0x00000003
	MDMSPKR_DIAL                                                           = 0x00000001
	MDMSPKR_OFF                                                            = 0x00000000
	MDMSPKR_ON                                                             = 0x00000002
	MDMVOLFLAG_HIGH                                                        = 0x00000004
	MDMVOLFLAG_LOW                                                         = 0x00000001
	MDMVOLFLAG_MEDIUM                                                      = 0x00000002
	MDMVOL_HIGH                                                            = 0x00000002
	MDMVOL_LOW                                                             = 0x00000000
	MDMVOL_MEDIUM                                                          = 0x00000001
	MDM_ANALOG_RLP_OFF                                                     = 0x1
	MDM_ANALOG_RLP_ON                                                      = 0x0
	MDM_ANALOG_V34                                                         = 0x2
	MDM_AUTO_ML_2                                                          = 0x2
	MDM_AUTO_ML_DEFAULT                                                    = 0x0
	MDM_AUTO_ML_NONE                                                       = 0x1
	MDM_AUTO_SPEED_DEFAULT                                                 = 0x0
	MDM_BEARERMODE_ANALOG                                                  = 0x0
	MDM_BEARERMODE_GSM                                                     = 0x2
	MDM_BEARERMODE_ISDN                                                    = 0x1
	MDM_BLIND_DIAL                                                         = 0x00000200
	MDM_CCITT_OVERRIDE                                                     = 0x00000040
	MDM_CELLULAR                                                           = 0x00000008
	MDM_COMPRESSION                                                        = 0x00000001
	MDM_DIAGNOSTICS                                                        = 0x00000800
	MDM_ERROR_CONTROL                                                      = 0x00000002
	MDM_FLOWCONTROL_HARD                                                   = 0x00000010
	MDM_FLOWCONTROL_SOFT                                                   = 0x00000020
	MDM_FORCED_EC                                                          = 0x00000004
	MDM_HDLCPPP_AUTH_CHAP                                                  = 0x3
	MDM_HDLCPPP_AUTH_DEFAULT                                               = 0x0
	MDM_HDLCPPP_AUTH_MSCHAP                                                = 0x4
	MDM_HDLCPPP_AUTH_NONE                                                  = 0x1
	MDM_HDLCPPP_AUTH_PAP                                                   = 0x2
	MDM_HDLCPPP_ML_2                                                       = 0x2
	MDM_HDLCPPP_ML_DEFAULT                                                 = 0x0
	MDM_HDLCPPP_ML_NONE                                                    = 0x1
	MDM_HDLCPPP_SPEED_56K                                                  = 0x2
	MDM_HDLCPPP_SPEED_64K                                                  = 0x1
	MDM_HDLCPPP_SPEED_DEFAULT                                              = 0x0
	MDM_MASK_AUTO_ML                                                       = 192
	MDM_MASK_AUTO_SPEED                                                    = 0x7
	MDM_MASK_BEARERMODE                                                    = 0x0000f000
	MDM_MASK_EXTENDEDINFO                                                  = 268431360
	MDM_MASK_HDLCPPP_AUTH                                                  = 56
	MDM_MASK_HDLCPPP_ML                                                    = 192
	MDM_MASK_HDLCPPP_SPEED                                                 = 0x7
	MDM_MASK_PROTOCOLDATA                                                  = 0x0ff00000
	MDM_MASK_PROTOCOLID                                                    = 0x000f0000
	MDM_MASK_PROTOCOLINFO                                                  = 268369920
	MDM_MASK_V110_SPEED                                                    = 0xf
	MDM_MASK_V120_ML                                                       = 192
	MDM_MASK_V120_SPEED                                                    = 0x7
	MDM_MASK_X75_DATA                                                      = 0x7
	MDM_PIAFS_INCOMING                                                     = 0
	MDM_PIAFS_OUTGOING                                                     = 1
	MDM_PROTOCOLID_ANALOG                                                  = 0x7
	MDM_PROTOCOLID_AUTO                                                    = 0x6
	MDM_PROTOCOLID_DEFAULT                                                 = 0x0
	MDM_PROTOCOLID_GPRS                                                    = 0x8
	MDM_PROTOCOLID_HDLCPPP                                                 = 0x1
	MDM_PROTOCOLID_PIAFS                                                   = 0x9
	MDM_PROTOCOLID_V110                                                    = 0x4
	MDM_PROTOCOLID_V120                                                    = 0x5
	MDM_PROTOCOLID_V128                                                    = 0x2
	MDM_PROTOCOLID_X75                                                     = 0x3
	MDM_PROTOCOL_ANALOG_NRLP                                               = 1507328
	MDM_PROTOCOL_ANALOG_RLP                                                = 458752
	MDM_PROTOCOL_ANALOG_V34                                                = 2555904
	MDM_PROTOCOL_AUTO_1CH                                                  = 67502080
	MDM_PROTOCOL_AUTO_2CH                                                  = 134610944
	MDM_PROTOCOL_GPRS                                                      = 524288
	MDM_PROTOCOL_HDLCPPP_112K                                              = 136380416
	MDM_PROTOCOL_HDLCPPP_112K_CHAP                                         = 161546240
	MDM_PROTOCOL_HDLCPPP_112K_MSCHAP                                       = 169934848
	MDM_PROTOCOL_HDLCPPP_112K_PAP                                          = 153157632
	MDM_PROTOCOL_HDLCPPP_128K                                              = 135331840
	MDM_PROTOCOL_HDLCPPP_128K_CHAP                                         = 160497664
	MDM_PROTOCOL_HDLCPPP_128K_MSCHAP                                       = 168886272
	MDM_PROTOCOL_HDLCPPP_128K_PAP                                          = 152109056
	MDM_PROTOCOL_HDLCPPP_56K                                               = 2162688
	MDM_PROTOCOL_HDLCPPP_64K                                               = 1114112
	MDM_PROTOCOL_PIAFS_INCOMING                                            = 589824
	MDM_PROTOCOL_PIAFS_OUTGOING                                            = 1638400
	MDM_PROTOCOL_V110_12DOT0K                                              = 5505024
	MDM_PROTOCOL_V110_14DOT4K                                              = 6553600
	MDM_PROTOCOL_V110_19DOT2K                                              = 7602176
	MDM_PROTOCOL_V110_1DOT2K                                               = 1310720
	MDM_PROTOCOL_V110_28DOT8K                                              = 8650752
	MDM_PROTOCOL_V110_2DOT4K                                               = 2359296
	MDM_PROTOCOL_V110_38DOT4K                                              = 9699328
	MDM_PROTOCOL_V110_4DOT8K                                               = 3407872
	MDM_PROTOCOL_V110_57DOT6K                                              = 10747904
	MDM_PROTOCOL_V110_9DOT6K                                               = 4456448
	MDM_PROTOCOL_V120_112K                                                 = 136642560
	MDM_PROTOCOL_V120_128K                                                 = 135593984
	MDM_PROTOCOL_V120_56K                                                  = 69533696
	MDM_PROTOCOL_V120_64K                                                  = 68485120
	MDM_PROTOCOL_X75_128K                                                  = 2293760
	MDM_PROTOCOL_X75_64K                                                   = 1245184
	MDM_PROTOCOL_X75_BTX                                                   = 4390912
	MDM_PROTOCOL_X75_T_70                                                  = 3342336
	MDM_SHIFT_AUTO_ML                                                      = 0x6
	MDM_SHIFT_AUTO_SPEED                                                   = 0x0
	MDM_SHIFT_BEARERMODE                                                   = 12
	MDM_SHIFT_EXTENDEDINFO                                                 = 12
	MDM_SHIFT_HDLCPPP_AUTH                                                 = 0x3
	MDM_SHIFT_HDLCPPP_ML                                                   = 0x6
	MDM_SHIFT_HDLCPPP_SPEED                                                = 0x0
	MDM_SHIFT_PROTOCOLDATA                                                 = 20
	MDM_SHIFT_PROTOCOLID                                                   = 16
	MDM_SHIFT_PROTOCOLINFO                                                 = 16
	MDM_SHIFT_V110_SPEED                                                   = 0x0
	MDM_SHIFT_V120_ML                                                      = 0x6
	MDM_SHIFT_V120_SPEED                                                   = 0x0
	MDM_SHIFT_X75_DATA                                                     = 0x0
	MDM_SPEED_ADJUST                                                       = 0x00000080
	MDM_TONE_DIAL                                                          = 0x00000100
	MDM_V110_SPEED_12DOT0K                                                 = 0x5
	MDM_V110_SPEED_14DOT4K                                                 = 0x6
	MDM_V110_SPEED_19DOT2K                                                 = 0x7
	MDM_V110_SPEED_1DOT2K                                                  = 0x1
	MDM_V110_SPEED_28DOT8K                                                 = 0x8
	MDM_V110_SPEED_2DOT4K                                                  = 0x2
	MDM_V110_SPEED_38DOT4K                                                 = 0x9
	MDM_V110_SPEED_4DOT8K                                                  = 0x3
	MDM_V110_SPEED_57DOT6K                                                 = 0xA
	MDM_V110_SPEED_9DOT6K                                                  = 0x4
	MDM_V110_SPEED_DEFAULT                                                 = 0x0
	MDM_V120_ML_2                                                          = 0x2
	MDM_V120_ML_DEFAULT                                                    = 0x0
	MDM_V120_ML_NONE                                                       = 0x1
	MDM_V120_SPEED_56K                                                     = 0x2
	MDM_V120_SPEED_64K                                                     = 0x1
	MDM_V120_SPEED_DEFAULT                                                 = 0x0
	MDM_V23_OVERRIDE                                                       = 0x00000400
	MDM_X75_DATA_128K                                                      = 0x2
	MDM_X75_DATA_64K                                                       = 0x1
	MDM_X75_DATA_BTX                                                       = 0x4
	MDM_X75_DATA_DEFAULT                                                   = 0x0
	MDM_X75_DATA_T_70                                                      = 0x3
	MEMORY_ALLOCATION_ALIGNMENT                                            = 16
	MEMORY_PRIORITY_BELOW_NORMAL                                           = 4
	MEMORY_PRIORITY_LOW                                                    = 2
	MEMORY_PRIORITY_MEDIUM                                                 = 3
	MEMORY_PRIORITY_NORMAL                                                 = 5
	MEMORY_PRIORITY_VERY_LOW                                               = 1
	MEM_4MB_PAGES                                                          = 0x80000000
	MEM_64K_PAGES                                                          = 541065216
	MEM_COMMIT                                                             = 0x1000
	MEM_DECOMMIT                                                           = 0x4000
	MEM_DIFFERENT_IMAGE_BASE_OK                                            = 0x800000
	MEM_EXTENDED_PARAMETER_GRAPHICS                                        = 0x01
	MEM_EXTENDED_PARAMETER_NONPAGED                                        = 0x02
	MEM_EXTENDED_PARAMETER_NONPAGED_HUGE                                   = 0x10
	MEM_EXTENDED_PARAMETER_NONPAGED_LARGE                                  = 0x08
	MEM_EXTENDED_PARAMETER_TYPE_BITS                                       = 8
	MEM_EXTENDED_PARAMETER_ZERO_PAGES_OPTIONAL                             = 0x04
	MEM_FREE                                                               = 0x10000
	MEM_IMAGE                                                              = 16777216
	MEM_LARGE_PAGES                                                        = 0x20000000
	MEM_MAPPED                                                             = 0x40000
	MEM_PHYSICAL                                                           = 0x400000
	MEM_PRIVATE                                                            = 0x20000
	MEM_RELEASE                                                            = 0x8000
	MEM_RESERVE                                                            = 0x2000
	MEM_RESET                                                              = 0x80000
	MEM_RESET_UNDO                                                         = 0x1000000
	MEM_ROTATE                                                             = 0x800000
	MEM_TOP_DOWN                                                           = 0x100000
	MEM_UNMAP_WITH_TRANSIENT_BOOST                                         = 0x01
	MEM_WRITE_WATCH                                                        = 0x200000
	MENU_EVENT                                                             = 0x8
	MESSAGE_RESOURCE_UNICODE                                               = 0x0001
	METAFILE_DRIVER                                                        = 2049
	META_ANIMATEPALETTE                                                    = 0x0436
	META_ARC                                                               = 0x0817
	META_BITBLT                                                            = 0x0922
	META_CHORD                                                             = 0x0830
	META_CREATEBRUSHINDIRECT                                               = 0x02FC
	META_CREATEFONTINDIRECT                                                = 0x02FB
	META_CREATEPALETTE                                                     = 0x00f7
	META_CREATEPATTERNBRUSH                                                = 0x01F9
	META_CREATEPENINDIRECT                                                 = 0x02FA
	META_CREATEREGION                                                      = 0x06FF
	META_DELETEOBJECT                                                      = 0x01f0
	META_DIBBITBLT                                                         = 0x0940
	META_DIBCREATEPATTERNBRUSH                                             = 0x0142
	META_DIBSTRETCHBLT                                                     = 0x0b41
	META_ELLIPSE                                                           = 0x0418
	META_ESCAPE                                                            = 0x0626
	META_EXCLUDECLIPRECT                                                   = 0x0415
	META_EXTFLOODFILL                                                      = 0x0548
	META_EXTTEXTOUT                                                        = 0x0a32
	META_FILLREGION                                                        = 0x0228
	META_FLOODFILL                                                         = 0x0419
	META_FRAMEREGION                                                       = 0x0429
	META_INTERSECTCLIPRECT                                                 = 0x0416
	META_INVERTREGION                                                      = 0x012A
	META_LINETO                                                            = 0x0213
	META_MOVETO                                                            = 0x0214
	META_OFFSETCLIPRGN                                                     = 0x0220
	META_OFFSETVIEWPORTORG                                                 = 0x0211
	META_OFFSETWINDOWORG                                                   = 0x020F
	META_PAINTREGION                                                       = 0x012B
	META_PATBLT                                                            = 0x061D
	META_PIE                                                               = 0x081A
	META_POLYGON                                                           = 0x0324
	META_POLYLINE                                                          = 0x0325
	META_POLYPOLYGON                                                       = 0x0538
	META_REALIZEPALETTE                                                    = 0x0035
	META_RECTANGLE                                                         = 0x041B
	META_RESIZEPALETTE                                                     = 0x0139
	META_RESTOREDC                                                         = 0x0127
	META_ROUNDRECT                                                         = 0x061C
	META_SAVEDC                                                            = 0x001E
	META_SCALEVIEWPORTEXT                                                  = 0x0412
	META_SCALEWINDOWEXT                                                    = 0x0410
	META_SELECTCLIPREGION                                                  = 0x012C
	META_SELECTOBJECT                                                      = 0x012D
	META_SELECTPALETTE                                                     = 0x0234
	META_SETBKCOLOR                                                        = 0x0201
	META_SETBKMODE                                                         = 0x0102
	META_SETDIBTODEV                                                       = 0x0d33
	META_SETLAYOUT                                                         = 0x0149
	META_SETMAPMODE                                                        = 0x0103
	META_SETMAPPERFLAGS                                                    = 0x0231
	META_SETPALENTRIES                                                     = 0x0037
	META_SETPIXEL                                                          = 0x041F
	META_SETPOLYFILLMODE                                                   = 0x0106
	META_SETRELABS                                                         = 0x0105
	META_SETROP2                                                           = 0x0104
	META_SETSTRETCHBLTMODE                                                 = 0x0107
	META_SETTEXTALIGN                                                      = 0x012E
	META_SETTEXTCHAREXTRA                                                  = 0x0108
	META_SETTEXTCOLOR                                                      = 0x0209
	META_SETTEXTJUSTIFICATION                                              = 0x020A
	META_SETVIEWPORTEXT                                                    = 0x020E
	META_SETVIEWPORTORG                                                    = 0x020D
	META_SETWINDOWEXT                                                      = 0x020C
	META_SETWINDOWORG                                                      = 0x020B
	META_STRETCHBLT                                                        = 0x0B23
	META_STRETCHDIB                                                        = 0x0f43
	META_TEXTOUT                                                           = 0x0521
	METRICS_USEDEFAULT                                                     = -1
	MFCOMMENT                                                              = 15
	MFS_CHECKED                                                            = 8
	MFS_DEFAULT                                                            = 4096
	MFS_DISABLED                                                           = 3
	MFS_ENABLED                                                            = 0
	MFS_GRAYED                                                             = 3
	MFS_HILITE                                                             = 128
	MFS_UNCHECKED                                                          = 0
	MFS_UNHILITE                                                           = 0
	MFT_BITMAP                                                             = 4
	MFT_MENUBARBREAK                                                       = 32
	MFT_MENUBREAK                                                          = 64
	MFT_OWNERDRAW                                                          = 256
	MFT_RADIOCHECK                                                         = 512
	MFT_RIGHTJUSTIFY                                                       = 16384
	MFT_RIGHTORDER                                                         = 8192
	MFT_SEPARATOR                                                          = 2048
	MFT_STRING                                                             = 0
	MF_APPEND                                                              = 256
	MF_BITMAP                                                              = 4
	MF_BYCOMMAND                                                           = 0
	MF_BYPOSITION                                                          = 1024
	MF_CHANGE                                                              = 128
	MF_CHECKED                                                             = 8
	MF_DEFAULT                                                             = 4096
	MF_DELETE                                                              = 512
	MF_DISABLED                                                            = 2
	MF_ENABLED                                                             = 0
	MF_END                                                                 = 128
	MF_GRAYED                                                              = 1
	MF_HELP                                                                = 16384
	MF_HILITE                                                              = 128
	MF_INSERT                                                              = 0
	MF_MENUBARBREAK                                                        = 32
	MF_MENUBREAK                                                           = 64
	MF_MOUSESELECT                                                         = 32768
	MF_OWNERDRAW                                                           = 256
	MF_POPUP                                                               = 16
	MF_REMOVE                                                              = 4096
	MF_RIGHTJUSTIFY                                                        = 16384
	MF_SEPARATOR                                                           = 2048
	MF_STRING                                                              = 0
	MF_SYSMENU                                                             = 8192
	MF_UNCHECKED                                                           = 0
	MF_UNHILITE                                                            = 0
	MF_USECHECKBITMAPS                                                     = 512
	MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS             = 0
	MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS     = 0
	MICROSOFT_WINDOWS_WINBASE_INTERLOCKED_CPLUSPLUS_H_INCLUDED             = 0
	MIIM_BITMAP                                                            = 0x00000080
	MIIM_CHECKMARKS                                                        = 0x00000008
	MIIM_DATA                                                              = 0x00000020
	MIIM_FTYPE                                                             = 0x00000100
	MIIM_ID                                                                = 0x00000002
	MIIM_STATE                                                             = 0x00000001
	MIIM_STRING                                                            = 0x00000040
	MIIM_SUBMENU                                                           = 0x00000004
	MIIM_TYPE                                                              = 0x00000010
	MIM_APPLYTOSUBMENUS                                                    = 0x80000000
	MIM_BACKGROUND                                                         = 0x00000002
	MIM_HELPID                                                             = 0x00000004
	MIM_MAXHEIGHT                                                          = 0x00000001
	MIM_MENUDATA                                                           = 0x00000008
	MIM_STYLE                                                              = 0x00000010
	MINCHAR                                                                = 0x80
	MINGW_DDK_H                                                            = 0
	MINGW_HAS_DDK_H                                                        = 1
	MINGW_HAS_SECURE_API                                                   = 1
	MINGW_SDK_INIT                                                         = 0
	MINLONG                                                                = 0x80000000
	MINSHORT                                                               = 0x8000
	MIN_ACL_REVISION                                                       = 2
	MKF_AVAILABLE                                                          = 0x00000002
	MKF_CONFIRMHOTKEY                                                      = 0x00000008
	MKF_HOTKEYACTIVE                                                       = 0x00000004
	MKF_HOTKEYSOUND                                                        = 0x00000010
	MKF_INDICATOR                                                          = 0x00000020
	MKF_LEFTBUTTONDOWN                                                     = 0x01000000
	MKF_LEFTBUTTONSEL                                                      = 0x10000000
	MKF_MODIFIERS                                                          = 0x00000040
	MKF_MOUSEKEYSON                                                        = 0x00000001
	MKF_MOUSEMODE                                                          = 0x80000000
	MKF_REPLACENUMBERS                                                     = 0x00000080
	MKF_RIGHTBUTTONDOWN                                                    = 0x02000000
	MKF_RIGHTBUTTONSEL                                                     = 0x20000000
	MK_CONTROL                                                             = 0x0008
	MK_E_FIRST                                                             = 2147746272
	MK_E_LAST                                                              = 2147746287
	MK_LBUTTON                                                             = 0x0001
	MK_MBUTTON                                                             = 0x0010
	MK_RBUTTON                                                             = 0x0002
	MK_SHIFT                                                               = 0x0004
	MK_S_FIRST                                                             = 262624
	MK_S_LAST                                                              = 262639
	MK_XBUTTON1                                                            = 0x0020
	MK_XBUTTON2                                                            = 0x0040
	MM_ANISOTROPIC                                                         = 8
	MM_HIENGLISH                                                           = 5
	MM_HIMETRIC                                                            = 3
	MM_ISOTROPIC                                                           = 7
	MM_LOENGLISH                                                           = 4
	MM_LOMETRIC                                                            = 2
	MM_MAX                                                                 = 8
	MM_MAX_AXES_NAMELEN                                                    = 16
	MM_MAX_FIXEDSCALE                                                      = 6
	MM_MAX_NUMAXES                                                         = 16
	MM_MIN                                                                 = 1
	MM_TEXT                                                                = 1
	MM_TWIPS                                                               = 6
	MNC_CLOSE                                                              = 1
	MNC_EXECUTE                                                            = 2
	MNC_IGNORE                                                             = 0
	MNC_SELECT                                                             = 3
	MND_CONTINUE                                                           = 0
	MND_ENDMENU                                                            = 1
	MNGOF_BOTTOMGAP                                                        = 0x00000002
	MNGOF_TOPGAP                                                           = 0x00000001
	MNGO_NOERROR                                                           = 0x00000001
	MNGO_NOINTERFACE                                                       = 0x00000000
	MNS_AUTODISMISS                                                        = 0x10000000
	MNS_CHECKORBMP                                                         = 0x04000000
	MNS_DRAGDROP                                                           = 0x20000000
	MNS_MODELESS                                                           = 0x40000000
	MNS_NOCHECK                                                            = 0x80000000
	MNS_NOTIFYBYPOS                                                        = 0x08000000
	MN_GETHMENU                                                            = 0x01E1
	MOD_ALT                                                                = 0x0001
	MOD_CONTROL                                                            = 0x0002
	MOD_IGNORE_ALL_MODIFIER                                                = 0x0400
	MOD_LEFT                                                               = 0x8000
	MOD_ON_KEYUP                                                           = 0x0800
	MOD_RIGHT                                                              = 0x4000
	MOD_SHIFT                                                              = 0x0004
	MOD_WIN                                                                = 0x0008
	MONITORINFOF_PRIMARY                                                   = 0x00000001
	MONITOR_DEFAULTTONEAREST                                               = 0x00000002
	MONITOR_DEFAULTTONULL                                                  = 0x00000000
	MONITOR_DEFAULTTOPRIMARY                                               = 0x00000001
	MONO_FONT                                                              = 8
	MOUSEEVENTF_ABSOLUTE                                                   = 0x8000
	MOUSEEVENTF_LEFTDOWN                                                   = 0x0002
	MOUSEEVENTF_LEFTUP                                                     = 0x0004
	MOUSEEVENTF_MIDDLEDOWN                                                 = 0x0020
	MOUSEEVENTF_MIDDLEUP                                                   = 0x0040
	MOUSEEVENTF_MOVE                                                       = 0x0001
	MOUSEEVENTF_RIGHTDOWN                                                  = 0x0008
	MOUSEEVENTF_RIGHTUP                                                    = 0x0010
	MOUSEEVENTF_VIRTUALDESK                                                = 0x4000
	MOUSEEVENTF_WHEEL                                                      = 0x0800
	MOUSEEVENTF_XDOWN                                                      = 0x0080
	MOUSEEVENTF_XUP                                                        = 0x0100
	MOUSETRAILS                                                            = 39
	MOUSE_ATTRIBUTES_CHANGED                                               = 0x04
	MOUSE_EVENT                                                            = 0x2
	MOUSE_MOVED                                                            = 0x1
	MOUSE_MOVE_ABSOLUTE                                                    = 1
	MOUSE_MOVE_RELATIVE                                                    = 0
	MOUSE_VIRTUAL_DESKTOP                                                  = 0x02
	MOUSE_WHEELED                                                          = 0x4
	MOVEFILE_COPY_ALLOWED                                                  = 0x00000002
	MOVEFILE_CREATE_HARDLINK                                               = 0x00000010
	MOVEFILE_DELAY_UNTIL_REBOOT                                            = 0x00000004
	MOVEFILE_FAIL_IF_NOT_TRACKABLE                                         = 0x00000020
	MOVEFILE_REPLACE_EXISTING                                              = 0x00000001
	MOVEFILE_WRITE_THROUGH                                                 = 0x00000008
	MP_28BIT                                                               = 0
	MP_32BIT                                                               = 0
	MP_BIG_ENDIAN                                                          = 1
	MP_BUF                                                                 = -5
	MP_DIGIT_BIT                                                           = 28
	MP_DIGIT_DECLARED                                                      = 0
	MP_EQ                                                                  = 0
	MP_ERR                                                                 = -1
	MP_FIXED_CUTOFFS                                                       = 1
	MP_GT                                                                  = 1
	MP_INT_DECLARED                                                        = 0
	MP_ITER                                                                = -4
	MP_LITTLE_ENDIAN                                                       = -1
	MP_LSB_FIRST                                                           = -1
	MP_LT                                                                  = -1
	MP_MEM                                                                 = -2
	MP_MSB_FIRST                                                           = 1
	MP_NATIVE_ENDIAN                                                       = 0
	MP_NEG                                                                 = 1
	MP_NO                                                                  = 0
	MP_NO_STDINT                                                           = 1
	MP_OKAY                                                                = 0
	MP_PREC                                                                = 4
	MP_PRIME_2MSB_ON                                                       = 0x0008
	MP_PRIME_BBS                                                           = 0x0001
	MP_PRIME_SAFE                                                          = 0x0002
	MP_VAL                                                                 = -3
	MP_WORD_DECLARED                                                       = 0
	MP_YES                                                                 = 1
	MP_ZPOS                                                                = 0
	MSGF_DIALOGBOX                                                         = 0
	MSGF_MAX                                                               = 8
	MSGF_MENU                                                              = 2
	MSGF_MESSAGEBOX                                                        = 1
	MSGF_NEXTWINDOW                                                        = 6
	MSGF_SCROLLBAR                                                         = 5
	MSGF_USER                                                              = 4096
	MSG_DONTROUTE                                                          = 0x4
	MSG_INTERRUPT                                                          = 0x10
	MSG_MAXIOVLEN                                                          = 16
	MSG_OOB                                                                = 0x1
	MSG_PARTIAL                                                            = 0x8000
	MSG_PEEK                                                               = 0x2
	MS_PPM_SOFTWARE_ALL                                                    = 0x1
	MUTANT_ALL_ACCESS                                                      = 2031617
	MUTANT_QUERY_STATE                                                     = 0x0001
	MUTEX_ALL_ACCESS                                                       = 2031617
	MUTEX_MODIFY_STATE                                                     = 1
	MWMO_ALERTABLE                                                         = 0x0002
	MWMO_INPUTAVAILABLE                                                    = 0x0004
	MWMO_WAITALL                                                           = 0x0001
	MWT_IDENTITY                                                           = 1
	MWT_LEFTMULTIPLY                                                       = 2
	MWT_MAX                                                                = 3
	MWT_MIN                                                                = 1
	MWT_RIGHTMULTIPLY                                                      = 3
	M_1_PI                                                                 = 0.31830988618379067154
	M_2_PI                                                                 = 0.63661977236758134308
	M_2_SQRTPI                                                             = 1.12837916709551257390
	M_E                                                                    = 2.7182818284590452354
	M_LN10                                                                 = 2.30258509299404568402
	M_LN2                                                                  = 0.69314718055994530942
	M_LOG10E                                                               = 0.43429448190325182765
	M_LOG2E                                                                = 1.4426950408889634074
	M_PI                                                                   = 3.14159265358979323846
	M_PI_2                                                                 = 1.57079632679489661923
	M_PI_4                                                                 = 0.78539816339744830962
	M_SQRT1_2                                                              = 0.70710678118654752440
	M_SQRT2                                                                = 1.41421356237309504880
	NDEBUG                                                                 = 1
	NEAR                                                                   = 0
	NETINFO_DISKRED                                                        = 0x00000004
	NETINFO_DLL16                                                          = 0x00000001
	NETINFO_PRINTERRED                                                     = 0x00000008
	NETPROPERTY_PERSISTENT                                                 = 1
	NEWFRAME                                                               = 1
	NEXTBAND                                                               = 3
	NFR_ANSI                                                               = 1
	NFR_UNICODE                                                            = 2
	NF_QUERY                                                               = 3
	NF_REQUERY                                                             = 4
	NI_CHANGECANDIDATELIST                                                 = 0x0013
	NI_CLOSECANDIDATE                                                      = 0x0011
	NI_COMPOSITIONSTR                                                      = 0x0015
	NI_DGRAM                                                               = 0x10
	NI_FINALIZECONVERSIONRESULT                                            = 0x0014
	NI_IMEMENUSELECTED                                                     = 0x0018
	NI_MAXHOST                                                             = 1025
	NI_MAXSERV                                                             = 32
	NI_NAMEREQD                                                            = 0x04
	NI_NOFQDN                                                              = 0x01
	NI_NUMERICHOST                                                         = 0x02
	NI_NUMERICSERV                                                         = 0x08
	NI_OPENCANDIDATE                                                       = 0x0010
	NI_SELECTCANDIDATESTR                                                  = 0x0012
	NI_SETCANDIDATE_PAGESIZE                                               = 0x0017
	NI_SETCANDIDATE_PAGESTART                                              = 0x0016
	NLS_ALPHANUMERIC                                                       = 0x0
	NLS_DBCSCHAR                                                           = 0x10000
	NLS_HIRAGANA                                                           = 0x40000
	NLS_IME_CONVERSION                                                     = 0x800000
	NLS_IME_DISABLE                                                        = 0x20000000
	NLS_KATAKANA                                                           = 0x20000
	NLS_ROMAN                                                              = 0x400000
	NLS_VALID_LOCALE_MASK                                                  = 0x000fffff
	NMPWAIT_NOWAIT                                                         = 0x1
	NMPWAIT_USE_DEFAULT_WAIT                                               = 0x0
	NMPWAIT_WAIT_FOREVER                                                   = 0xffffffff
	NOERROR                                                                = 0
	NONANTIALIASED_QUALITY                                                 = 3
	NONZEROLHND                                                            = 2
	NONZEROLPTR                                                            = 0
	NON_PAGED_DEBUG_SIGNATURE                                              = 0x494E
	NOPARITY                                                               = 0
	NORMAL_PRIORITY_CLASS                                                  = 0x20
	NORM_IGNORECASE                                                        = 0x00000001
	NORM_IGNOREKANATYPE                                                    = 0x00010000
	NORM_IGNORENONSPACE                                                    = 0x00000002
	NORM_IGNORESYMBOLS                                                     = 0x00000004
	NORM_IGNOREWIDTH                                                       = 0x00020000
	NORM_LINGUISTIC_CASING                                                 = 0x08000000
	NO_ADDRESS                                                             = 11004
	NO_DATA                                                                = 11004
	NO_ERROR                                                               = 0
	NO_PROPAGATE_INHERIT_ACE                                               = 4
	NO_RECOVERY                                                            = 11003
	NRE_ENABLE_ASSERTS                                                     = 0
	NRE_USE_SMALL_ALLOC                                                    = 1
	NSIG                                                                   = 23
	NS_ALL                                                                 = 0
	NS_DEAD                                                                = 0x02
	NS_DHCP                                                                = 6
	NS_DNS                                                                 = 12
	NS_DYING                                                               = 0x01
	NS_KILLED                                                              = 0x04
	NS_MS                                                                  = 30
	NS_NBP                                                                 = 20
	NS_NDS                                                                 = 2
	NS_NETBT                                                               = 13
	NS_NETDES                                                              = 60
	NS_NIS                                                                 = 41
	NS_NISPLUS                                                             = 42
	NS_NLA                                                                 = 15
	NS_NTDS                                                                = 32
	NS_PEER_BROWSE                                                         = 3
	NS_SAP                                                                 = 1
	NS_SLP                                                                 = 5
	NS_STDA                                                                = 31
	NS_SUPPRESS_COMPILATION                                                = 0x08
	NS_TCPIP_HOSTS                                                         = 11
	NS_TCPIP_LOCAL                                                         = 10
	NS_WINS                                                                = 14
	NS_WRQ                                                                 = 50
	NS_X500                                                                = 40
	NTAPI                                                                  = 0
	NTAPI_INLINE                                                           = 0
	NTDDI_LONGHORN                                                         = 100663296
	NTDDI_VERSION                                                          = 83951616
	NTDDI_VISTA                                                            = 100663296
	NTDDI_VISTASP1                                                         = 100663552
	NTDDI_VISTASP2                                                         = 100663808
	NTDDI_VISTASP3                                                         = 100664064
	NTDDI_VISTASP4                                                         = 100664320
	NTDDI_WIN10                                                            = 0x0A000000
	NTDDI_WIN10_19H1                                                       = 0x0A000007
	NTDDI_WIN10_FE                                                         = 0x0A00000A
	NTDDI_WIN10_MN                                                         = 0x0A000009
	NTDDI_WIN10_RS1                                                        = 0x0A000002
	NTDDI_WIN10_RS2                                                        = 0x0A000003
	NTDDI_WIN10_RS3                                                        = 0x0A000004
	NTDDI_WIN10_RS4                                                        = 0x0A000005
	NTDDI_WIN10_RS5                                                        = 0x0A000006
	NTDDI_WIN10_TH2                                                        = 0x0A000001
	NTDDI_WIN10_VB                                                         = 0x0A000008
	NTDDI_WIN2K                                                            = 0x05000000
	NTDDI_WIN2KSP1                                                         = 0x05000100
	NTDDI_WIN2KSP2                                                         = 0x05000200
	NTDDI_WIN2KSP3                                                         = 0x05000300
	NTDDI_WIN2KSP4                                                         = 0x05000400
	NTDDI_WIN6                                                             = 0x06000000
	NTDDI_WIN6SP1                                                          = 0x06000100
	NTDDI_WIN6SP2                                                          = 0x06000200
	NTDDI_WIN6SP3                                                          = 0x06000300
	NTDDI_WIN6SP4                                                          = 0x06000400
	NTDDI_WIN7                                                             = 0x06010000
	NTDDI_WIN8                                                             = 0x06020000
	NTDDI_WINBLUE                                                          = 0x06030000
	NTDDI_WINTHRESHOLD                                                     = 0x0A000000
	NTDDI_WINXP                                                            = 0x05010000
	NTDDI_WINXPSP1                                                         = 0x05010100
	NTDDI_WINXPSP2                                                         = 0x05010200
	NTDDI_WINXPSP3                                                         = 0x05010300
	NTDDI_WINXPSP4                                                         = 0x05010400
	NTDDI_WS03                                                             = 0x05020000
	NTDDI_WS03SP1                                                          = 0x05020100
	NTDDI_WS03SP2                                                          = 0x05020200
	NTDDI_WS03SP3                                                          = 0x05020300
	NTDDI_WS03SP4                                                          = 0x05020400
	NTDDI_WS08                                                             = 100663552
	NTDDI_WS08SP2                                                          = 100663808
	NTDDI_WS08SP3                                                          = 100664064
	NTDDI_WS08SP4                                                          = 100664320
	NTE_OP_OK                                                              = 0
	NTM_BOLD                                                               = 32
	NTM_DSIG                                                               = 0x00200000
	NTM_ITALIC                                                             = 1
	NTM_MULTIPLEMASTER                                                     = 0x00080000
	NTM_NONNEGATIVE_AC                                                     = 0x00010000
	NTM_PS_OPENTYPE                                                        = 0x00020000
	NTM_REGULAR                                                            = 64
	NTM_TT_OPENTYPE                                                        = 0x00040000
	NTM_TYPE1                                                              = 0x00100000
	NULLREGION                                                             = 1
	NULL_BRUSH                                                             = 5
	NULL_PEN                                                               = 8
	NUMBRUSHES                                                             = 16
	NUMCOLORS                                                              = 24
	NUMFONTS                                                               = 22
	NUMLOCK_ON                                                             = 0x20
	NUMMARKERS                                                             = 20
	NUMPENS                                                                = 18
	NUMRESERVED                                                            = 106
	NUM_DISCHARGE_POLICIES                                                 = 4
	NUM_STATIC_TOKENS                                                      = 20
	N_BTMASK                                                               = 0x000F
	N_BTSHFT                                                               = 4
	N_TMASK                                                                = 0x0030
	N_TMASK1                                                               = 0x00C0
	N_TMASK2                                                               = 0x00F0
	N_TSHIFT                                                               = 2
	OBJECT_INHERIT_ACE                                                     = 1
	OBJ_BITMAP                                                             = 7
	OBJ_BRUSH                                                              = 2
	OBJ_COLORSPACE                                                         = 14
	OBJ_DC                                                                 = 3
	OBJ_ENHMETADC                                                          = 12
	OBJ_ENHMETAFILE                                                        = 13
	OBJ_EXTPEN                                                             = 11
	OBJ_FONT                                                               = 6
	OBJ_MEMDC                                                              = 10
	OBJ_METADC                                                             = 4
	OBJ_METAFILE                                                           = 9
	OBJ_PAL                                                                = 5
	OBJ_PEN                                                                = 1
	OBJ_REGION                                                             = 8
	ODA_DRAWENTIRE                                                         = 0x0001
	ODA_FOCUS                                                              = 0x0004
	ODA_SELECT                                                             = 0x0002
	ODDPARITY                                                              = 1
	ODS_CHECKED                                                            = 0x0008
	ODS_COMBOBOXEDIT                                                       = 0x1000
	ODS_DEFAULT                                                            = 0x0020
	ODS_DISABLED                                                           = 0x0004
	ODS_FOCUS                                                              = 0x0010
	ODS_GRAYED                                                             = 0x0002
	ODS_HOTLIGHT                                                           = 0x0040
	ODS_INACTIVE                                                           = 0x0080
	ODS_NOACCEL                                                            = 0x0100
	ODS_NOFOCUSRECT                                                        = 0x0200
	ODS_SELECTED                                                           = 0x0001
	ODT_BUTTON                                                             = 4
	ODT_COMBOBOX                                                           = 3
	ODT_LISTBOX                                                            = 2
	ODT_MENU                                                               = 1
	ODT_STATIC                                                             = 5
	OEM_CHARSET                                                            = 255
	OEM_FIXED_FONT                                                         = 10
	OFS_MAXPATHNAME                                                        = 128
	OF_CANCEL                                                              = 0x800
	OF_CREATE                                                              = 0x1000
	OF_DELETE                                                              = 0x200
	OF_EXIST                                                               = 0x4000
	OF_PARSE                                                               = 0x100
	OF_PROMPT                                                              = 0x2000
	OF_READ                                                                = 0x0
	OF_READWRITE                                                           = 0x2
	OF_REOPEN                                                              = 0x8000
	OF_SHARE_COMPAT                                                        = 0x0
	OF_SHARE_DENY_NONE                                                     = 0x40
	OF_SHARE_DENY_READ                                                     = 0x30
	OF_SHARE_DENY_WRITE                                                    = 0x20
	OF_SHARE_EXCLUSIVE                                                     = 0x10
	OF_VERIFY                                                              = 0x400
	OF_WRITE                                                               = 0x1
	OLD_P_OVERLAY                                                          = 2
	OLEOBJ_E_FIRST                                                         = 2147746176
	OLEOBJ_E_LAST                                                          = 2147746191
	OLEOBJ_S_FIRST                                                         = 262528
	OLEOBJ_S_LAST                                                          = 262543
	ONE5STOPBITS                                                           = 1
	ONESTOPBIT                                                             = 0
	OPAQUE                                                                 = 2
	OPENCHANNEL                                                            = 4110
	OPEN_ALWAYS                                                            = 4
	OPEN_EXISTING                                                          = 3
	OPTIONAL                                                               = 0
	ORD_LANGDRIVER                                                         = 1
	OR_INVALID_OID                                                         = 1911
	OR_INVALID_OXID                                                        = 1910
	OR_INVALID_SET                                                         = 1912
	OSVERSION_MASK                                                         = 0xFFFF0000
	OUT                                                                    = 0
	OUTPUT_DEBUG_STRING_EVENT                                              = 8
	OUT_CHARACTER_PRECIS                                                   = 2
	OUT_DEFAULT_PRECIS                                                     = 0
	OUT_DEVICE_PRECIS                                                      = 5
	OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME                     = "OutOfProcessFunctionTableCallback"
	OUT_OUTLINE_PRECIS                                                     = 8
	OUT_PS_ONLY_PRECIS                                                     = 10
	OUT_RASTER_PRECIS                                                      = 6
	OUT_SCREEN_OUTLINE_PRECIS                                              = 9
	OUT_STRING_PRECIS                                                      = 1
	OUT_STROKE_PRECIS                                                      = 3
	OUT_TT_ONLY_PRECIS                                                     = 7
	OUT_TT_PRECIS                                                          = 4
	OVERFLOW                                                               = 3
	OVERWRITE_HIDDEN                                                       = 4
	OWNER_SECURITY_INFORMATION                                             = 1
	O_ACCMODE                                                              = 3
	O_APPEND                                                               = 8
	O_BINARY                                                               = 32768
	O_CREAT                                                                = 256
	O_EXCL                                                                 = 1024
	O_NOINHERIT                                                            = 128
	O_RANDOM                                                               = 16
	O_RAW                                                                  = 32768
	O_RDONLY                                                               = 0
	O_RDWR                                                                 = 2
	O_SEQUENTIAL                                                           = 32
	O_TEMPORARY                                                            = 64
	O_TEXT                                                                 = 16384
	O_TRUNC                                                                = 512
	O_WRONLY                                                               = 1
	PACKAGE_BUGREPORT                                                      = ""
	PACKAGE_NAME                                                           = "tcl"
	PACKAGE_STRING                                                         = "tcl 8.6"
	PACKAGE_TARNAME                                                        = "tcl"
	PACKAGE_VERSION                                                        = "8.6"
	PAGE_ENCLAVE_DECOMMIT                                                  = 0x10000000
	PAGE_ENCLAVE_THREAD_CONTROL                                            = 0x80000000
	PAGE_ENCLAVE_UNVALIDATED                                               = 0x20000000
	PAGE_EXECUTE                                                           = 0x10
	PAGE_EXECUTE_READ                                                      = 0x20
	PAGE_EXECUTE_READWRITE                                                 = 0x40
	PAGE_EXECUTE_WRITECOPY                                                 = 0x80
	PAGE_GRAPHICS_COHERENT                                                 = 0x20000
	PAGE_GRAPHICS_EXECUTE                                                  = 0x4000
	PAGE_GRAPHICS_EXECUTE_READ                                             = 0x8000
	PAGE_GRAPHICS_EXECUTE_READWRITE                                        = 0x10000
	PAGE_GRAPHICS_NOACCESS                                                 = 0x0800
	PAGE_GRAPHICS_READONLY                                                 = 0x1000
	PAGE_GRAPHICS_READWRITE                                                = 0x2000
	PAGE_GUARD                                                             = 0x100
	PAGE_NOACCESS                                                          = 0x01
	PAGE_NOCACHE                                                           = 0x200
	PAGE_READONLY                                                          = 0x02
	PAGE_READWRITE                                                         = 0x04
	PAGE_REVERT_TO_FILE_MAP                                                = 0x80000000
	PAGE_TARGETS_INVALID                                                   = 0x40000000
	PAGE_TARGETS_NO_UPDATE                                                 = 0x40000000
	PAGE_WRITECOMBINE                                                      = 0x400
	PAGE_WRITECOPY                                                         = 0x08
	PANOSE_COUNT                                                           = 10
	PAN_ANY                                                                = 0
	PAN_ARMSTYLE_INDEX                                                     = 6
	PAN_BENT_ARMS_DOUBLE_SERIF                                             = 11
	PAN_BENT_ARMS_HORZ                                                     = 7
	PAN_BENT_ARMS_SINGLE_SERIF                                             = 10
	PAN_BENT_ARMS_VERT                                                     = 9
	PAN_BENT_ARMS_WEDGE                                                    = 8
	PAN_CONTRAST_HIGH                                                      = 8
	PAN_CONTRAST_INDEX                                                     = 4
	PAN_CONTRAST_LOW                                                       = 4
	PAN_CONTRAST_MEDIUM                                                    = 6
	PAN_CONTRAST_MEDIUM_HIGH                                               = 7
	PAN_CONTRAST_MEDIUM_LOW                                                = 5
	PAN_CONTRAST_NONE                                                      = 2
	PAN_CONTRAST_VERY_HIGH                                                 = 9
	PAN_CONTRAST_VERY_LOW                                                  = 3
	PAN_CULTURE_LATIN                                                      = 0
	PAN_FAMILYTYPE_INDEX                                                   = 0
	PAN_FAMILY_DECORATIVE                                                  = 4
	PAN_FAMILY_PICTORIAL                                                   = 5
	PAN_FAMILY_SCRIPT                                                      = 3
	PAN_FAMILY_TEXT_DISPLAY                                                = 2
	PAN_LETTERFORM_INDEX                                                   = 7
	PAN_LETT_NORMAL_BOXED                                                  = 4
	PAN_LETT_NORMAL_CONTACT                                                = 2
	PAN_LETT_NORMAL_FLATTENED                                              = 5
	PAN_LETT_NORMAL_OFF_CENTER                                             = 7
	PAN_LETT_NORMAL_ROUNDED                                                = 6
	PAN_LETT_NORMAL_SQUARE                                                 = 8
	PAN_LETT_NORMAL_WEIGHTED                                               = 3
	PAN_LETT_OBLIQUE_BOXED                                                 = 11
	PAN_LETT_OBLIQUE_CONTACT                                               = 9
	PAN_LETT_OBLIQUE_FLATTENED                                             = 12
	PAN_LETT_OBLIQUE_OFF_CENTER                                            = 14
	PAN_LETT_OBLIQUE_ROUNDED                                               = 13
	PAN_LETT_OBLIQUE_SQUARE                                                = 15
	PAN_LETT_OBLIQUE_WEIGHTED                                              = 10
	PAN_MIDLINE_CONSTANT_POINTED                                           = 9
	PAN_MIDLINE_CONSTANT_SERIFED                                           = 10
	PAN_MIDLINE_CONSTANT_TRIMMED                                           = 8
	PAN_MIDLINE_HIGH_POINTED                                               = 6
	PAN_MIDLINE_HIGH_SERIFED                                               = 7
	PAN_MIDLINE_HIGH_TRIMMED                                               = 5
	PAN_MIDLINE_INDEX                                                      = 8
	PAN_MIDLINE_LOW_POINTED                                                = 12
	PAN_MIDLINE_LOW_SERIFED                                                = 13
	PAN_MIDLINE_LOW_TRIMMED                                                = 11
	PAN_MIDLINE_STANDARD_POINTED                                           = 3
	PAN_MIDLINE_STANDARD_SERIFED                                           = 4
	PAN_MIDLINE_STANDARD_TRIMMED                                           = 2
	PAN_NO_FIT                                                             = 1
	PAN_PROPORTION_INDEX                                                   = 3
	PAN_PROP_CONDENSED                                                     = 6
	PAN_PROP_EVEN_WIDTH                                                    = 4
	PAN_PROP_EXPANDED                                                      = 5
	PAN_PROP_MODERN                                                        = 3
	PAN_PROP_MONOSPACED                                                    = 9
	PAN_PROP_OLD_STYLE                                                     = 2
	PAN_PROP_VERY_CONDENSED                                                = 8
	PAN_PROP_VERY_EXPANDED                                                 = 7
	PAN_SERIFSTYLE_INDEX                                                   = 1
	PAN_SERIF_BONE                                                         = 8
	PAN_SERIF_COVE                                                         = 2
	PAN_SERIF_EXAGGERATED                                                  = 9
	PAN_SERIF_FLARED                                                       = 14
	PAN_SERIF_NORMAL_SANS                                                  = 11
	PAN_SERIF_OBTUSE_COVE                                                  = 3
	PAN_SERIF_OBTUSE_SANS                                                  = 12
	PAN_SERIF_OBTUSE_SQUARE_COVE                                           = 5
	PAN_SERIF_PERP_SANS                                                    = 13
	PAN_SERIF_ROUNDED                                                      = 15
	PAN_SERIF_SQUARE                                                       = 6
	PAN_SERIF_SQUARE_COVE                                                  = 4
	PAN_SERIF_THIN                                                         = 7
	PAN_SERIF_TRIANGLE                                                     = 10
	PAN_STRAIGHT_ARMS_DOUBLE_SERIF                                         = 6
	PAN_STRAIGHT_ARMS_HORZ                                                 = 2
	PAN_STRAIGHT_ARMS_SINGLE_SERIF                                         = 5
	PAN_STRAIGHT_ARMS_VERT                                                 = 4
	PAN_STRAIGHT_ARMS_WEDGE                                                = 3
	PAN_STROKEVARIATION_INDEX                                              = 5
	PAN_STROKE_GRADUAL_DIAG                                                = 2
	PAN_STROKE_GRADUAL_HORZ                                                = 5
	PAN_STROKE_GRADUAL_TRAN                                                = 3
	PAN_STROKE_GRADUAL_VERT                                                = 4
	PAN_STROKE_INSTANT_VERT                                                = 8
	PAN_STROKE_RAPID_HORZ                                                  = 7
	PAN_STROKE_RAPID_VERT                                                  = 6
	PAN_WEIGHT_BLACK                                                       = 10
	PAN_WEIGHT_BOLD                                                        = 8
	PAN_WEIGHT_BOOK                                                        = 5
	PAN_WEIGHT_DEMI                                                        = 7
	PAN_WEIGHT_HEAVY                                                       = 9
	PAN_WEIGHT_INDEX                                                       = 2
	PAN_WEIGHT_LIGHT                                                       = 3
	PAN_WEIGHT_MEDIUM                                                      = 6
	PAN_WEIGHT_NORD                                                        = 11
	PAN_WEIGHT_THIN                                                        = 4
	PAN_WEIGHT_VERY_LIGHT                                                  = 2
	PAN_XHEIGHT_CONSTANT_LARGE                                             = 4
	PAN_XHEIGHT_CONSTANT_SMALL                                             = 2
	PAN_XHEIGHT_CONSTANT_STD                                               = 3
	PAN_XHEIGHT_DUCKING_LARGE                                              = 7
	PAN_XHEIGHT_DUCKING_SMALL                                              = 5
	PAN_XHEIGHT_DUCKING_STD                                                = 6
	PAN_XHEIGHT_INDEX                                                      = 9
	PASCAL                                                                 = 0
	PASSTHROUGH                                                            = 19
	PATH_MAX                                                               = 260
	PBTF_APMRESUMEFROMFAILURE                                              = 0x00000001
	PBT_APMBATTERYLOW                                                      = 0x0009
	PBT_APMOEMEVENT                                                        = 0x000B
	PBT_APMPOWERSTATUSCHANGE                                               = 0x000A
	PBT_APMQUERYSTANDBY                                                    = 0x0001
	PBT_APMQUERYSTANDBYFAILED                                              = 0x0003
	PBT_APMQUERYSUSPEND                                                    = 0x0000
	PBT_APMQUERYSUSPENDFAILED                                              = 0x0002
	PBT_APMRESUMEAUTOMATIC                                                 = 0x0012
	PBT_APMRESUMECRITICAL                                                  = 0x0006
	PBT_APMRESUMESTANDBY                                                   = 0x0008
	PBT_APMRESUMESUSPEND                                                   = 0x0007
	PBT_APMSTANDBY                                                         = 0x0005
	PBT_APMSUSPEND                                                         = 0x0004
	PCLEANUI                                                               = 2214592512
	PC_24                                                                  = 131072
	PC_53                                                                  = 65536
	PC_64                                                                  = 0
	PC_EXPLICIT                                                            = 0x02
	PC_INTERIORS                                                           = 128
	PC_NOCOLLAPSE                                                          = 0x04
	PC_NONE                                                                = 0
	PC_PATHS                                                               = 512
	PC_POLYGON                                                             = 1
	PC_POLYPOLYGON                                                         = 256
	PC_RECTANGLE                                                           = 2
	PC_RESERVED                                                            = 0x01
	PC_SCANLINE                                                            = 8
	PC_STYLED                                                              = 32
	PC_TRAPEZOID                                                           = 4
	PC_WIDE                                                                = 16
	PC_WIDESTYLED                                                          = 64
	PC_WINDPOLYGON                                                         = 4
	PDCAP_D0_SUPPORTED                                                     = 0x00000001
	PDCAP_D1_SUPPORTED                                                     = 0x00000002
	PDCAP_D2_SUPPORTED                                                     = 0x00000004
	PDCAP_D3_SUPPORTED                                                     = 0x00000008
	PDCAP_WAKE_FROM_D0_SUPPORTED                                           = 0x00000010
	PDCAP_WAKE_FROM_D1_SUPPORTED                                           = 0x00000020
	PDCAP_WAKE_FROM_D2_SUPPORTED                                           = 0x00000040
	PDCAP_WAKE_FROM_D3_SUPPORTED                                           = 0x00000080
	PDCAP_WARM_EJECT_SUPPORTED                                             = 0x00000100
	PDEVICESIZE                                                            = 26
	PDIRTYUI                                                               = 2281701376
	PERFORMANCE_DATA_VERSION                                               = 1
	PERFSTATE_POLICY_CHANGE_IDEAL                                          = 0
	PERFSTATE_POLICY_CHANGE_MAX                                            = 2
	PERFSTATE_POLICY_CHANGE_ROCKET                                         = 2
	PERFSTATE_POLICY_CHANGE_SINGLE                                         = 1
	PFD_DEPTH_DONTCARE                                                     = 0x20000000
	PFD_DIRECT3D_ACCELERATED                                               = 0x00004000
	PFD_DOUBLEBUFFER                                                       = 0x00000001
	PFD_DOUBLEBUFFER_DONTCARE                                              = 0x40000000
	PFD_DRAW_TO_BITMAP                                                     = 0x00000008
	PFD_DRAW_TO_WINDOW                                                     = 0x00000004
	PFD_GENERIC_ACCELERATED                                                = 0x00001000
	PFD_GENERIC_FORMAT                                                     = 0x00000040
	PFD_MAIN_PLANE                                                         = 0
	PFD_NEED_PALETTE                                                       = 0x00000080
	PFD_NEED_SYSTEM_PALETTE                                                = 0x00000100
	PFD_OVERLAY_PLANE                                                      = 1
	PFD_STEREO                                                             = 0x00000002
	PFD_STEREO_DONTCARE                                                    = 0x80000000
	PFD_SUPPORT_COMPOSITION                                                = 0x00008000
	PFD_SUPPORT_DIRECTDRAW                                                 = 0x00002000
	PFD_SUPPORT_GDI                                                        = 0x00000010
	PFD_SUPPORT_OPENGL                                                     = 0x00000020
	PFD_SWAP_COPY                                                          = 0x00000400
	PFD_SWAP_EXCHANGE                                                      = 0x00000200
	PFD_SWAP_LAYER_BUFFERS                                                 = 0x00000800
	PFD_TYPE_COLORINDEX                                                    = 1
	PFD_TYPE_RGBA                                                          = 0
	PFD_UNDERLAY_PLANE                                                     = -1
	PFL_HIDDEN                                                             = 0x00000004
	PFL_MATCHES_PROTOCOL_ZERO                                              = 0x00000008
	PFL_MULTIPLE_PROTO_ENTRIES                                             = 0x00000001
	PFL_NETWORKDIRECT_PROVIDER                                             = 0x00000010
	PFL_RECOMMENDED_PROTO_ENTRY                                            = 0x00000002
	PF_3DNOW_INSTRUCTIONS_AVAILABLE                                        = 7
	PF_ALPHA_BYTE_INSTRUCTIONS                                             = 5
	PF_APPLETALK                                                           = 16
	PF_ARM_64BIT_LOADSTORE_ATOMIC                                          = 25
	PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE                                    = 24
	PF_ARM_EXTERNAL_CACHE_AVAILABLE                                        = 26
	PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE                                     = 27
	PF_ARM_NEON_INSTRUCTIONS_AVAILABLE                                     = 19
	PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE                                 = 31
	PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE                                = 30
	PF_ARM_V8_INSTRUCTIONS_AVAILABLE                                       = 29
	PF_ARM_VFP_32_REGISTERS_AVAILABLE                                      = 18
	PF_ATM                                                                 = 22
	PF_BAN                                                                 = 21
	PF_BTH                                                                 = 32
	PF_CCITT                                                               = 10
	PF_CHANNELS_ENABLED                                                    = 16
	PF_CHAOS                                                               = 5
	PF_COMPARE64_EXCHANGE128                                               = 15
	PF_COMPARE_EXCHANGE128                                                 = 14
	PF_COMPARE_EXCHANGE_DOUBLE                                             = 2
	PF_DATAKIT                                                             = 9
	PF_DECnet                                                              = 12
	PF_DLI                                                                 = 13
	PF_ECMA                                                                = 8
	PF_FASTFAIL_AVAILABLE                                                  = 23
	PF_FIREFOX                                                             = 19
	PF_FLOATING_POINT_EMULATED                                             = 1
	PF_FLOATING_POINT_PRECISION_ERRATA                                     = 0
	PF_HYLINK                                                              = 15
	PF_IMPLINK                                                             = 3
	PF_INET                                                                = 2
	PF_INET6                                                               = 23
	PF_IPX                                                                 = 6
	PF_ISO                                                                 = 7
	PF_LAT                                                                 = 14
	PF_MAX                                                                 = 33
	PF_MMX_INSTRUCTIONS_AVAILABLE                                          = 3
	PF_NS                                                                  = 6
	PF_NX_ENABLED                                                          = 12
	PF_OSI                                                                 = 7
	PF_PAE_ENABLED                                                         = 9
	PF_PPC_MOVEMEM_64BIT_OK                                                = 4
	PF_PUP                                                                 = 4
	PF_RDPID_INSTRUCTION_AVAILABLE                                         = 33
	PF_RDRAND_INSTRUCTION_AVAILABLE                                        = 28
	PF_RDTSCP_INSTRUCTION_AVAILABLE                                        = 32
	PF_RDTSC_INSTRUCTION_AVAILABLE                                         = 8
	PF_RDWRFSGSBASE_AVAILABLE                                              = 22
	PF_SECOND_LEVEL_ADDRESS_TRANSLATION                                    = 20
	PF_SNA                                                                 = 11
	PF_SSE3_INSTRUCTIONS_AVAILABLE                                         = 13
	PF_SSE_DAZ_MODE_AVAILABLE                                              = 11
	PF_UNIX                                                                = 1
	PF_UNKNOWN1                                                            = 20
	PF_UNSPEC                                                              = 0
	PF_VIRT_FIRMWARE_ENABLED                                               = 21
	PF_VOICEVIEW                                                           = 18
	PF_XMMI64_INSTRUCTIONS_AVAILABLE                                       = 10
	PF_XMMI_INSTRUCTIONS_AVAILABLE                                         = 6
	PF_XSAVE_ENABLED                                                       = 17
	PHYSICALHEIGHT                                                         = 111
	PHYSICALOFFSETX                                                        = 112
	PHYSICALOFFSETY                                                        = 113
	PHYSICALWIDTH                                                          = 110
	PIPE_ACCEPT_REMOTE_CLIENTS                                             = 0x0
	PIPE_ACCESS_DUPLEX                                                     = 0x3
	PIPE_ACCESS_INBOUND                                                    = 0x1
	PIPE_ACCESS_OUTBOUND                                                   = 0x2
	PIPE_CLIENT_END                                                        = 0x0
	PIPE_NOWAIT                                                            = 0x1
	PIPE_READMODE_BYTE                                                     = 0x0
	PIPE_READMODE_MESSAGE                                                  = 0x2
	PIPE_REJECT_REMOTE_CLIENTS                                             = 0x8
	PIPE_SERVER_END                                                        = 0x1
	PIPE_TYPE_BYTE                                                         = 0x0
	PIPE_TYPE_MESSAGE                                                      = 0x4
	PIPE_UNLIMITED_INSTANCES                                               = 255
	PIPE_WAIT                                                              = 0x0
	PLANES                                                                 = 14
	PLOSS                                                                  = 6
	PMB_ACTIVE                                                             = 0x00000001
	PM_NOREMOVE                                                            = 0x0000
	PM_NOYIELD                                                             = 0x0002
	PM_QS_INPUT                                                            = 67567616
	PM_QS_PAINT                                                            = 2097152
	PM_QS_POSTMESSAGE                                                      = 9961472
	PM_QS_SENDMESSAGE                                                      = 4194304
	PM_REMOVE                                                              = 0x0001
	POINTER_32                                                             = 0
	POINTER_64                                                             = 0
	POINTER_SIGNED                                                         = 0
	POINTER_UNSIGNED                                                       = 0
	POLICY_AUDIT_SUBCATEGORY_COUNT                                         = 56
	POLICY_SHOWREASONUI_ALWAYS                                             = 1
	POLICY_SHOWREASONUI_NEVER                                              = 0
	POLICY_SHOWREASONUI_SERVERONLY                                         = 3
	POLICY_SHOWREASONUI_WORKSTATIONONLY                                    = 2
	POLYFILL_LAST                                                          = 2
	POLYGONALCAPS                                                          = 32
	POSITIVE_INFINITY_RATE                                                 = 0xFFFFFFFE
	POSTSCRIPT_DATA                                                        = 37
	POSTSCRIPT_IDENTIFY                                                    = 4117
	POSTSCRIPT_IGNORE                                                      = 38
	POSTSCRIPT_INJECTION                                                   = 4118
	POSTSCRIPT_PASSTHROUGH                                                 = 4115
	POWERBUTTON_ACTION_INDEX_HIBERNATE                                     = 2
	POWERBUTTON_ACTION_INDEX_NOTHING                                       = 0
	POWERBUTTON_ACTION_INDEX_SHUTDOWN                                      = 3
	POWERBUTTON_ACTION_INDEX_SLEEP                                         = 1
	POWERBUTTON_ACTION_VALUE_HIBERNATE                                     = 3
	POWERBUTTON_ACTION_VALUE_NOTHING                                       = 0
	POWERBUTTON_ACTION_VALUE_SHUTDOWN                                      = 6
	POWERBUTTON_ACTION_VALUE_SLEEP                                         = 2
	POWER_ACTION_CRITICAL                                                  = 0x80000000
	POWER_ACTION_DISABLE_WAKES                                             = 0x40000000
	POWER_ACTION_HIBERBOOT                                                 = 0x00000008
	POWER_ACTION_LIGHTEST_FIRST                                            = 0x10000000
	POWER_ACTION_LOCK_CONSOLE                                              = 0x20000000
	POWER_ACTION_OVERRIDE_APPS                                             = 0x00000004
	POWER_ACTION_PSEUDO_TRANSITION                                         = 0x08000000
	POWER_ACTION_QUERY_ALLOWED                                             = 0x00000001
	POWER_ACTION_UI_ALLOWED                                                = 0x00000002
	POWER_DEVICE_IDLE_POLICY_CONSERVATIVE                                  = 1
	POWER_DEVICE_IDLE_POLICY_PERFORMANCE                                   = 0
	POWER_FORCE_TRIGGER_RESET                                              = 0x80000000
	POWER_LEVEL_USER_NOTIFY_EXEC                                           = 0x00000004
	POWER_LEVEL_USER_NOTIFY_SOUND                                          = 0x00000002
	POWER_LEVEL_USER_NOTIFY_TEXT                                           = 0x00000001
	POWER_PLATFORM_ROLE_V1                                                 = 1
	POWER_PLATFORM_ROLE_V2                                                 = 2
	POWER_PLATFORM_ROLE_VERSION                                            = 1
	POWER_REQUEST_CONTEXT_DETAILED_STRING                                  = 0x00000002
	POWER_REQUEST_CONTEXT_SIMPLE_STRING                                    = 0x00000001
	POWER_REQUEST_CONTEXT_VERSION                                          = 0
	POWER_SETTING_VALUE_VERSION                                            = 1
	POWER_SYSTEM_MAXIMUM                                                   = 7
	POWER_USER_NOTIFY_BUTTON                                               = 0x00000008
	POWER_USER_NOTIFY_FORCED_SHUTDOWN                                      = 0x00000020
	POWER_USER_NOTIFY_SHUTDOWN                                             = 0x00000010
	PO_THROTTLE_ADAPTIVE                                                   = 3
	PO_THROTTLE_CONSTANT                                                   = 1
	PO_THROTTLE_DEGRADE                                                    = 2
	PO_THROTTLE_MAXIMUM                                                    = 4
	PO_THROTTLE_NONE                                                       = 0
	PPM_FIRMWARE_ACPI1C2                                                   = 0x1
	PPM_FIRMWARE_ACPI1C3                                                   = 0x2
	PPM_FIRMWARE_ACPI1TSTATES                                              = 0x4
	PPM_FIRMWARE_CPC                                                       = 0x40000
	PPM_FIRMWARE_CSD                                                       = 0x10
	PPM_FIRMWARE_CST                                                       = 0x8
	PPM_FIRMWARE_OSC                                                       = 0x10000
	PPM_FIRMWARE_PCCH                                                      = 0x4000
	PPM_FIRMWARE_PCCP                                                      = 0x8000
	PPM_FIRMWARE_PCT                                                       = 0x20
	PPM_FIRMWARE_PDC                                                       = 0x20000
	PPM_FIRMWARE_PPC                                                       = 0x100
	PPM_FIRMWARE_PSD                                                       = 0x200
	PPM_FIRMWARE_PSS                                                       = 0x40
	PPM_FIRMWARE_PTC                                                       = 0x400
	PPM_FIRMWARE_TPC                                                       = 0x1000
	PPM_FIRMWARE_TSD                                                       = 0x2000
	PPM_FIRMWARE_TSS                                                       = 0x800
	PPM_FIRMWARE_XPSS                                                      = 0x80
	PPM_IDLE_IMPLEMENTATION_CSTATES                                        = 0x1
	PPM_IDLE_IMPLEMENTATION_NONE                                           = 0x0
	PPM_IDLE_IMPLEMENTATION_PEP                                            = 0x2
	PPM_PERFORMANCE_IMPLEMENTATION_CPPC                                    = 3
	PPM_PERFORMANCE_IMPLEMENTATION_NONE                                    = 0
	PPM_PERFORMANCE_IMPLEMENTATION_PCCV1                                   = 2
	PPM_PERFORMANCE_IMPLEMENTATION_PEP                                     = 4
	PPM_PERFORMANCE_IMPLEMENTATION_PSTATES                                 = 1
	PP_DISPLAYERRORS                                                       = 0x01
	PRAGMA_DEPRECATED_DDK                                                  = 0
	PRF_CHECKVISIBLE                                                       = 1
	PRF_CHILDREN                                                           = 16
	PRF_CLIENT                                                             = 4
	PRF_ERASEBKGND                                                         = 8
	PRF_NONCLIENT                                                          = 2
	PRF_OWNED                                                              = 32
	PRINTRATEUNIT_CPS                                                      = 2
	PRINTRATEUNIT_IPM                                                      = 4
	PRINTRATEUNIT_LPM                                                      = 3
	PRINTRATEUNIT_PPM                                                      = 1
	PRIVATE_MP_PRIME_TAB_SIZE                                              = 256
	PRIVATE_NAMESPACE_FLAG_DESTROY                                         = 0x1
	PRIVILEGE_SET_ALL_NECESSARY                                            = 1
	PRIX16                                                                 = "X"
	PRIX32                                                                 = "X"
	PRIX64                                                                 = "I64X"
	PRIX8                                                                  = "X"
	PRIXFAST16                                                             = "X"
	PRIXFAST32                                                             = "X"
	PRIXFAST8                                                              = "X"
	PRIXLEAST16                                                            = "X"
	PRIXLEAST32                                                            = "X"
	PRIXLEAST8                                                             = "X"
	PRId16                                                                 = "d"
	PRId32                                                                 = "d"
	PRId64                                                                 = "I64d"
	PRId8                                                                  = "d"
	PRIdFAST16                                                             = "d"
	PRIdFAST32                                                             = "d"
	PRIdFAST8                                                              = "d"
	PRIdLEAST16                                                            = "d"
	PRIdLEAST32                                                            = "d"
	PRIdLEAST8                                                             = "d"
	PRIi16                                                                 = "i"
	PRIi32                                                                 = "i"
	PRIi64                                                                 = "I64i"
	PRIi8                                                                  = "i"
	PRIiFAST16                                                             = "i"
	PRIiFAST32                                                             = "i"
	PRIiFAST8                                                              = "i"
	PRIiLEAST16                                                            = "i"
	PRIiLEAST32                                                            = "i"
	PRIiLEAST8                                                             = "i"
	PRIo16                                                                 = "o"
	PRIo32                                                                 = "o"
	PRIo64                                                                 = "I64o"
	PRIo8                                                                  = "o"
	PRIoFAST16                                                             = "o"
	PRIoFAST32                                                             = "o"
	PRIoFAST8                                                              = "o"
	PRIoLEAST16                                                            = "o"
	PRIoLEAST32                                                            = "o"
	PRIoLEAST8                                                             = "o"
	PRIu16                                                                 = "u"
	PRIu32                                                                 = "u"
	PRIu64                                                                 = "I64u"
	PRIu8                                                                  = "u"
	PRIuFAST16                                                             = "u"
	PRIuFAST32                                                             = "u"
	PRIuFAST8                                                              = "u"
	PRIuLEAST16                                                            = "u"
	PRIuLEAST32                                                            = "u"
	PRIuLEAST8                                                             = "u"
	PRIx16                                                                 = "x"
	PRIx32                                                                 = "x"
	PRIx64                                                                 = "I64x"
	PRIx8                                                                  = "x"
	PRIxFAST16                                                             = "x"
	PRIxFAST32                                                             = "x"
	PRIxFAST8                                                              = "x"
	PRIxLEAST16                                                            = "x"
	PRIxLEAST32                                                            = "x"
	PRIxLEAST8                                                             = "x"
	PROCESSOR_ALPHA_21064                                                  = 21064
	PROCESSOR_AMD_X8664                                                    = 8664
	PROCESSOR_ARCHITECTURE_ALPHA                                           = 2
	PROCESSOR_ARCHITECTURE_ALPHA64                                         = 7
	PROCESSOR_ARCHITECTURE_AMD64                                           = 9
	PROCESSOR_ARCHITECTURE_ARM                                             = 5
	PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64                                  = 13
	PROCESSOR_ARCHITECTURE_ARM64                                           = 12
	PROCESSOR_ARCHITECTURE_IA32_ON_ARM64                                   = 14
	PROCESSOR_ARCHITECTURE_IA32_ON_WIN64                                   = 10
	PROCESSOR_ARCHITECTURE_IA64                                            = 6
	PROCESSOR_ARCHITECTURE_INTEL                                           = 0
	PROCESSOR_ARCHITECTURE_MIPS                                            = 1
	PROCESSOR_ARCHITECTURE_MSIL                                            = 8
	PROCESSOR_ARCHITECTURE_NEUTRAL                                         = 11
	PROCESSOR_ARCHITECTURE_PPC                                             = 3
	PROCESSOR_ARCHITECTURE_SHX                                             = 4
	PROCESSOR_ARCHITECTURE_UNKNOWN                                         = 0xffff
	PROCESSOR_ARM720                                                       = 1824
	PROCESSOR_ARM820                                                       = 2080
	PROCESSOR_ARM920                                                       = 2336
	PROCESSOR_ARM_7TDMI                                                    = 70001
	PROCESSOR_HITACHI_SH3                                                  = 10003
	PROCESSOR_HITACHI_SH3E                                                 = 10004
	PROCESSOR_HITACHI_SH4                                                  = 10005
	PROCESSOR_IDLESTATE_POLICY_COUNT                                       = 0x3
	PROCESSOR_INTEL_386                                                    = 386
	PROCESSOR_INTEL_486                                                    = 486
	PROCESSOR_INTEL_IA64                                                   = 2200
	PROCESSOR_INTEL_PENTIUM                                                = 586
	PROCESSOR_MIPS_R4000                                                   = 4000
	PROCESSOR_MOTOROLA_821                                                 = 821
	PROCESSOR_OPTIL                                                        = 0x494f
	PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE                                   = 2
	PROCESSOR_PERF_BOOST_MODE_DISABLED                                     = 0
	PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE                         = 4
	PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED                            = 3
	PROCESSOR_PERF_BOOST_MODE_ENABLED                                      = 1
	PROCESSOR_PERF_BOOST_MODE_MAX                                          = 4
	PROCESSOR_PERF_BOOST_POLICY_DISABLED                                   = 0
	PROCESSOR_PERF_BOOST_POLICY_MAX                                        = 100
	PROCESSOR_PPC_601                                                      = 601
	PROCESSOR_PPC_603                                                      = 603
	PROCESSOR_PPC_604                                                      = 604
	PROCESSOR_PPC_620                                                      = 620
	PROCESSOR_SHx_SH3                                                      = 103
	PROCESSOR_SHx_SH4                                                      = 104
	PROCESSOR_STRONGARM                                                    = 2577
	PROCESS_ALL_ACCESS                                                     = 2035711
	PROCESS_CREATE_PROCESS                                                 = 128
	PROCESS_CREATE_THREAD                                                  = 2
	PROCESS_DUP_HANDLE                                                     = 64
	PROCESS_HEAP_ENTRY_BUSY                                                = 0x4
	PROCESS_HEAP_ENTRY_DDESHARE                                            = 0x20
	PROCESS_HEAP_ENTRY_MOVEABLE                                            = 0x10
	PROCESS_HEAP_REGION                                                    = 0x1
	PROCESS_HEAP_SEG_ALLOC                                                 = 0x8
	PROCESS_HEAP_UNCOMMITTED_RANGE                                         = 0x2
	PROCESS_MODE_BACKGROUND_BEGIN                                          = 0x100000
	PROCESS_MODE_BACKGROUND_END                                            = 0x200000
	PROCESS_QUERY_INFORMATION                                              = 1024
	PROCESS_QUERY_LIMITED_INFORMATION                                      = 4096
	PROCESS_SET_INFORMATION                                                = 512
	PROCESS_SET_QUOTA                                                      = 256
	PROCESS_SET_SESSIONID                                                  = 4
	PROCESS_SUSPEND_RESUME                                                 = 2048
	PROCESS_TERMINATE                                                      = 1
	PROCESS_VM_OPERATION                                                   = 8
	PROCESS_VM_READ                                                        = 16
	PROCESS_VM_WRITE                                                       = 32
	PROC_IDLE_BUCKET_COUNT                                                 = 6
	PROC_IDLE_BUCKET_COUNT_EX                                              = 16
	PRODUCT_ARM64_SERVER                                                   = 0x78
	PRODUCT_BUSINESS                                                       = 0x6
	PRODUCT_BUSINESS_N                                                     = 0x10
	PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER                               = 0x7C
	PRODUCT_CLOUD_STORAGE_SERVER                                           = 0x6E
	PRODUCT_CLUSTER_SERVER                                                 = 0x12
	PRODUCT_CLUSTER_SERVER_V                                               = 0x40
	PRODUCT_CONNECTED_CAR                                                  = 0x75
	PRODUCT_CORE                                                           = 0x65
	PRODUCT_CORE_ARM                                                       = 0x61
	PRODUCT_CORE_CONNECTED                                                 = 0x6F
	PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC                                 = 0x74
	PRODUCT_CORE_CONNECTED_N                                               = 0x71
	PRODUCT_CORE_CONNECTED_SINGLELANGUAGE                                  = 0x73
	PRODUCT_CORE_COUNTRYSPECIFIC                                           = 0x63
	PRODUCT_CORE_LANGUAGESPECIFIC                                          = 0x64
	PRODUCT_CORE_N                                                         = 0x62
	PRODUCT_CORE_SINGLELANGUAGE                                            = 0x64
	PRODUCT_DATACENTER_EVALUATION_SERVER                                   = 0x50
	PRODUCT_DATACENTER_SERVER                                              = 0x8
	PRODUCT_DATACENTER_SERVER_CORE                                         = 0xc
	PRODUCT_DATACENTER_SERVER_CORE_V                                       = 0x27
	PRODUCT_DATACENTER_SERVER_V                                            = 0x25
	PRODUCT_EDUCATION                                                      = 0x79
	PRODUCT_EDUCATION_N                                                    = 0x7a
	PRODUCT_EMBEDDED                                                       = 0x41
	PRODUCT_EMBEDDED_A                                                     = 0x58
	PRODUCT_EMBEDDED_AUTOMOTIVE                                            = 0x55
	PRODUCT_EMBEDDED_E                                                     = 0x5A
	PRODUCT_EMBEDDED_EVAL                                                  = 0x6B
	PRODUCT_EMBEDDED_E_EVAL                                                = 0x6C
	PRODUCT_EMBEDDED_INDUSTRY                                              = 0x59
	PRODUCT_EMBEDDED_INDUSTRY_A                                            = 0x56
	PRODUCT_EMBEDDED_INDUSTRY_A_E                                          = 0x5C
	PRODUCT_EMBEDDED_INDUSTRY_E                                            = 0x5B
	PRODUCT_EMBEDDED_INDUSTRY_EVAL                                         = 0x69
	PRODUCT_EMBEDDED_INDUSTRY_E_EVAL                                       = 0x6A
	PRODUCT_ENTERPRISE                                                     = 0x4
	PRODUCT_ENTERPRISE_E                                                   = 0x46
	PRODUCT_ENTERPRISE_EVALUATION                                          = 0x48
	PRODUCT_ENTERPRISE_N                                                   = 0x1b
	PRODUCT_ENTERPRISE_N_EVALUATION                                        = 0x54
	PRODUCT_ENTERPRISE_S                                                   = 0x7D
	PRODUCT_ENTERPRISE_SERVER                                              = 0xa
	PRODUCT_ENTERPRISE_SERVER_CORE                                         = 0xe
	PRODUCT_ENTERPRISE_SERVER_CORE_V                                       = 0x29
	PRODUCT_ENTERPRISE_SERVER_IA64                                         = 0xf
	PRODUCT_ENTERPRISE_SERVER_V                                            = 0x26
	PRODUCT_ENTERPRISE_S_EVALUATION                                        = 0x81
	PRODUCT_ENTERPRISE_S_N                                                 = 0x7E
	PRODUCT_ENTERPRISE_S_N_EVALUATION                                      = 0x82
	PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL                                  = 0x3C
	PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC                               = 0x3E
	PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT                                  = 0x3B
	PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC                               = 0x3D
	PRODUCT_HOME_BASIC                                                     = 0x2
	PRODUCT_HOME_BASIC_E                                                   = 0x43
	PRODUCT_HOME_BASIC_N                                                   = 0x5
	PRODUCT_HOME_PREMIUM                                                   = 0x3
	PRODUCT_HOME_PREMIUM_E                                                 = 0x44
	PRODUCT_HOME_PREMIUM_N                                                 = 0x1a
	PRODUCT_HOME_PREMIUM_SERVER                                            = 0x22
	PRODUCT_HOME_SERVER                                                    = 0x13
	PRODUCT_HYPERV                                                         = 0x2a
	PRODUCT_INDUSTRY_HANDHELD                                              = 0x76
	PRODUCT_IOTUAP                                                         = 0x7B
	PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT                               = 0x1e
	PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING                                = 0x20
	PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY                                 = 0x1f
	PRODUCT_MOBILE_CORE                                                    = 0x68
	PRODUCT_MOBILE_ENTERPRISE                                              = 0x85
	PRODUCT_MULTIPOINT_PREMIUM_SERVER                                      = 0x4D
	PRODUCT_MULTIPOINT_STANDARD_SERVER                                     = 0x4C
	PRODUCT_NANO_SERVER                                                    = 0x6D
	PRODUCT_PPI_PRO                                                        = 0x77
	PRODUCT_PROFESSIONAL                                                   = 0x30
	PRODUCT_PROFESSIONAL_E                                                 = 0x45
	PRODUCT_PROFESSIONAL_EMBEDDED                                          = 0x3A
	PRODUCT_PROFESSIONAL_N                                                 = 0x31
	PRODUCT_PROFESSIONAL_S                                                 = 0x7F
	PRODUCT_PROFESSIONAL_STUDENT                                           = 0x70
	PRODUCT_PROFESSIONAL_STUDENT_N                                         = 0x72
	PRODUCT_PROFESSIONAL_S_N                                               = 0x80
	PRODUCT_PROFESSIONAL_WMC                                               = 0x67
	PRODUCT_SB_SOLUTION_SERVER                                             = 0x32
	PRODUCT_SB_SOLUTION_SERVER_EM                                          = 0x36
	PRODUCT_SERVER_FOR_SB_SOLUTIONS                                        = 0x33
	PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM                                     = 0x37
	PRODUCT_SERVER_FOR_SMALLBUSINESS                                       = 0x18
	PRODUCT_SERVER_FOR_SMALLBUSINESS_V                                     = 0x23
	PRODUCT_SERVER_FOUNDATION                                              = 0x21
	PRODUCT_SERVER_V                                                       = 0x25
	PRODUCT_SMALLBUSINESS_SERVER                                           = 0x9
	PRODUCT_SMALLBUSINESS_SERVER_PREMIUM                                   = 0x19
	PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE                              = 0x3f
	PRODUCT_SOLUTION_EMBEDDEDSERVER                                        = 0x38
	PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE                                   = 0x39
	PRODUCT_STANDARD_EVALUATION_SERVER                                     = 0x4F
	PRODUCT_STANDARD_SERVER                                                = 0x7
	PRODUCT_STANDARD_SERVER_CORE                                           = 0xd
	PRODUCT_STANDARD_SERVER_CORE_V                                         = 0x28
	PRODUCT_STANDARD_SERVER_SOLUTIONS                                      = 0x34
	PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE                                 = 0x35
	PRODUCT_STANDARD_SERVER_V                                              = 0x24
	PRODUCT_STARTER                                                        = 0xb
	PRODUCT_STARTER_E                                                      = 0x42
	PRODUCT_STARTER_N                                                      = 0x2f
	PRODUCT_STORAGE_ENTERPRISE_SERVER                                      = 0x17
	PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE                                 = 0x2e
	PRODUCT_STORAGE_EXPRESS_SERVER                                         = 0x14
	PRODUCT_STORAGE_EXPRESS_SERVER_CORE                                    = 0x2b
	PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER                             = 0x60
	PRODUCT_STORAGE_STANDARD_SERVER                                        = 0x15
	PRODUCT_STORAGE_STANDARD_SERVER_CORE                                   = 0x2c
	PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER                            = 0x5F
	PRODUCT_STORAGE_WORKGROUP_SERVER                                       = 0x16
	PRODUCT_STORAGE_WORKGROUP_SERVER_CORE                                  = 0x2d
	PRODUCT_THINPC                                                         = 0x57
	PRODUCT_ULTIMATE                                                       = 0x1
	PRODUCT_ULTIMATE_E                                                     = 0x47
	PRODUCT_ULTIMATE_N                                                     = 0x1c
	PRODUCT_UNDEFINED                                                      = 0x0
	PRODUCT_UNLICENSED                                                     = 0xabcdabcd
	PRODUCT_WEB_SERVER                                                     = 0x11
	PRODUCT_WEB_SERVER_CORE                                                = 0x1d
	PROFILE_EMBEDDED                                                       = 77
	PROFILE_KERNEL                                                         = 0x20000000
	PROFILE_LINKED                                                         = 76
	PROFILE_SERVER                                                         = 0x40000000
	PROFILE_USER                                                           = 0x10000000
	PROGRESS_CANCEL                                                        = 1
	PROGRESS_CONTINUE                                                      = 0
	PROGRESS_QUIET                                                         = 3
	PROGRESS_STOP                                                          = 2
	PROOF_QUALITY                                                          = 2
	PROTECTED_DACL_SECURITY_INFORMATION                                    = 2147483648
	PROTECTED_SACL_SECURITY_INFORMATION                                    = 1073741824
	PROTECTION_LEVEL_DEFAULT                                               = 20
	PROTECTION_LEVEL_RESTRICTED                                            = 30
	PROTECTION_LEVEL_UNRESTRICTED                                          = 10
	PROVIDER_KEEPS_VALUE_LENGTH                                            = 0x1
	PR_JOBSTATUS                                                           = 0x0000
	PSIDENT_GDICENTRIC                                                     = 0
	PSIDENT_PSCENTRIC                                                      = 1
	PSINJECT_BEGINDEFAULTS                                                 = 12
	PSINJECT_BEGINPAGESETUP                                                = 101
	PSINJECT_BEGINPROLOG                                                   = 14
	PSINJECT_BEGINSETUP                                                    = 16
	PSINJECT_BEGINSTREAM                                                   = 1
	PSINJECT_BOUNDINGBOX                                                   = 9
	PSINJECT_COMMENTS                                                      = 11
	PSINJECT_DLFONT                                                        = 0xdddddddd
	PSINJECT_DOCNEEDEDRES                                                  = 5
	PSINJECT_DOCSUPPLIEDRES                                                = 6
	PSINJECT_DOCUMENTPROCESSCOLORS                                         = 10
	PSINJECT_DOCUMENTPROCESSCOLORSATEND                                    = 21
	PSINJECT_ENDDEFAULTS                                                   = 13
	PSINJECT_ENDPAGECOMMENTS                                               = 107
	PSINJECT_ENDPAGESETUP                                                  = 102
	PSINJECT_ENDPROLOG                                                     = 15
	PSINJECT_ENDSETUP                                                      = 17
	PSINJECT_ENDSTREAM                                                     = 20
	PSINJECT_EOF                                                           = 19
	PSINJECT_ORIENTATION                                                   = 8
	PSINJECT_PAGEBBOX                                                      = 106
	PSINJECT_PAGENUMBER                                                    = 100
	PSINJECT_PAGEORDER                                                     = 7
	PSINJECT_PAGES                                                         = 4
	PSINJECT_PAGESATEND                                                    = 3
	PSINJECT_PAGETRAILER                                                   = 103
	PSINJECT_PLATECOLOR                                                    = 104
	PSINJECT_PSADOBE                                                       = 2
	PSINJECT_SHOWPAGE                                                      = 105
	PSINJECT_TRAILER                                                       = 18
	PSINJECT_VMRESTORE                                                     = 201
	PSINJECT_VMSAVE                                                        = 200
	PSPROTOCOL_ASCII                                                       = 0
	PSPROTOCOL_BCP                                                         = 1
	PSPROTOCOL_BINARY                                                      = 3
	PSPROTOCOL_TBCP                                                        = 2
	PS_ALTERNATE                                                           = 8
	PS_COSMETIC                                                            = 0x00000000
	PS_DASH                                                                = 1
	PS_DASHDOT                                                             = 3
	PS_DASHDOTDOT                                                          = 4
	PS_DOT                                                                 = 2
	PS_ENDCAP_FLAT                                                         = 0x00000200
	PS_ENDCAP_MASK                                                         = 0x00000F00
	PS_ENDCAP_ROUND                                                        = 0x00000000
	PS_ENDCAP_SQUARE                                                       = 0x00000100
	PS_GEOMETRIC                                                           = 0x00010000
	PS_INSIDEFRAME                                                         = 6
	PS_JOIN_BEVEL                                                          = 0x00001000
	PS_JOIN_MASK                                                           = 0x0000F000
	PS_JOIN_MITER                                                          = 0x00002000
	PS_JOIN_ROUND                                                          = 0x00000000
	PS_NULL                                                                = 5
	PS_SOLID                                                               = 0
	PS_STYLE_MASK                                                          = 0x0000000F
	PS_TYPE_MASK                                                           = 0x000F0000
	PS_USERSTYLE                                                           = 7
	PTRDIFF_MAX                                                            = 9223372036854775807
	PTRDIFF_MIN                                                            = -9223372036854775808
	PT_BEZIERTO                                                            = 0x04
	PT_CLOSEFIGURE                                                         = 0x01
	PT_LINETO                                                              = 0x02
	PT_MOVETO                                                              = 0x06
	PURGE_RXABORT                                                          = 0x2
	PURGE_RXCLEAR                                                          = 0x8
	PURGE_TXABORT                                                          = 0x1
	PURGE_TXCLEAR                                                          = 0x4
	PVD_CONFIG                                                             = 0x3001
	PWR_CRITICALRESUME                                                     = 3
	PWR_FAIL                                                               = -1
	PWR_OK                                                                 = 1
	PWR_SUSPENDREQUEST                                                     = 1
	PWR_SUSPENDRESUME                                                      = 2
	PW_CLIENTONLY                                                          = 0x00000001
	P_DETACH                                                               = 4
	P_NOWAIT                                                               = 1
	P_NOWAITO                                                              = 3
	P_OVERLAY                                                              = 2
	P_WAIT                                                                 = 0
	QDI_DIBTOSCREEN                                                        = 4
	QDI_GETDIBITS                                                          = 2
	QDI_SETDIBITS                                                          = 1
	QDI_STRETCHDIB                                                         = 8
	QOS_GENERAL_ID_BASE                                                    = 2000
	QOS_NOT_SPECIFIED                                                      = 0xFFFFFFFF
	QOS_OBJECT_DESTADDR                                                    = 2004
	QOS_OBJECT_END_OF_LIST                                                 = 2001
	QOS_OBJECT_SD_MODE                                                     = 2002
	QOS_OBJECT_SHAPING_RATE                                                = 2003
	QS_ALLEVENTS                                                           = 1215
	QS_ALLINPUT                                                            = 1279
	QS_ALLPOSTMESSAGE                                                      = 0x0100
	QS_HOTKEY                                                              = 0x0080
	QS_INPUT                                                               = 1031
	QS_KEY                                                                 = 0x0001
	QS_MOUSE                                                               = 6
	QS_MOUSEBUTTON                                                         = 0x0004
	QS_MOUSEMOVE                                                           = 0x0002
	QS_PAINT                                                               = 0x0020
	QS_POSTMESSAGE                                                         = 0x0008
	QS_RAWINPUT                                                            = 0x0400
	QS_SENDMESSAGE                                                         = 0x0040
	QS_TIMER                                                               = 0x0010
	QUERYDIBSUPPORT                                                        = 3073
	QUERYESCSUPPORT                                                        = 8
	QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS                                    = 16
	QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE                                    = 8
	QUERY_ACTCTX_FLAG_NO_ADDREF                                            = 2147483648
	QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX                                    = 4
	QUOTA_LIMITS_HARDWS_MAX_DISABLE                                        = 0x00000008
	QUOTA_LIMITS_HARDWS_MAX_ENABLE                                         = 0x00000004
	QUOTA_LIMITS_HARDWS_MIN_DISABLE                                        = 0x00000002
	QUOTA_LIMITS_HARDWS_MIN_ENABLE                                         = 0x00000001
	QUOTA_LIMITS_USE_DEFAULT_LIMITS                                        = 0x00000010
	R2_BLACK                                                               = 1
	R2_COPYPEN                                                             = 13
	R2_LAST                                                                = 16
	R2_MASKNOTPEN                                                          = 3
	R2_MASKPEN                                                             = 9
	R2_MASKPENNOT                                                          = 5
	R2_MERGENOTPEN                                                         = 12
	R2_MERGEPEN                                                            = 15
	R2_MERGEPENNOT                                                         = 14
	R2_NOP                                                                 = 11
	R2_NOT                                                                 = 6
	R2_NOTCOPYPEN                                                          = 4
	R2_NOTMASKPEN                                                          = 8
	R2_NOTMERGEPEN                                                         = 2
	R2_NOTXORPEN                                                           = 10
	R2_WHITE                                                               = 16
	R2_XORPEN                                                              = 7
	RAND_MAX                                                               = 0x7fff
	RAND_SEED_INITIALIZED                                                  = 0x40
	RASTERCAPS                                                             = 38
	RASTER_FONTTYPE                                                        = 0x0001
	RCVALL_IPLEVEL                                                         = 3
	RCVALL_OFF                                                             = 0
	RCVALL_ON                                                              = 1
	RCVALL_SOCKETLEVELONLY                                                 = 2
	RC_BANDING                                                             = 2
	RC_BIGFONT                                                             = 0x0400
	RC_BITBLT                                                              = 1
	RC_BITMAP64                                                            = 8
	RC_DEVBITS                                                             = 0x8000
	RC_DIBTODEV                                                            = 0x0200
	RC_DI_BITMAP                                                           = 0x0080
	RC_FLOODFILL                                                           = 0x1000
	RC_GDI20_OUTPUT                                                        = 0x0010
	RC_GDI20_STATE                                                         = 0x0020
	RC_NONE                                                                = 0
	RC_OP_DX_OUTPUT                                                        = 0x4000
	RC_PALETTE                                                             = 0x0100
	RC_SAVEBITMAP                                                          = 0x0040
	RC_SCALING                                                             = 4
	RC_STRETCHBLT                                                          = 0x0800
	RC_STRETCHDIB                                                          = 0x2000
	RDH_RECTANGLES                                                         = 1
	RDW_ALLCHILDREN                                                        = 0x0080
	RDW_ERASE                                                              = 0x0004
	RDW_ERASENOW                                                           = 0x0200
	RDW_FRAME                                                              = 0x0400
	RDW_INTERNALPAINT                                                      = 0x0002
	RDW_INVALIDATE                                                         = 0x0001
	RDW_NOCHILDREN                                                         = 0x0040
	RDW_NOERASE                                                            = 0x0020
	RDW_NOFRAME                                                            = 0x0800
	RDW_NOINTERNALPAINT                                                    = 0x0010
	RDW_UPDATENOW                                                          = 0x0100
	RDW_VALIDATE                                                           = 0x0008
	READ_CONTROL                                                           = 131072
	READ_THREAD_PROFILING_FLAG_DISPATCHING                                 = 0x00000001
	READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS                           = 0x00000002
	REALTIME_PRIORITY_CLASS                                                = 0x100
	REASON_HWINSTALL                                                       = 65538
	REASON_LEGACY_API                                                      = 2147942400
	REASON_OTHER                                                           = 0
	REASON_PLANNED_FLAG                                                    = 2147483648
	REASON_SERVICEHANG                                                     = 196613
	REASON_SWHWRECONF                                                      = 196612
	REASON_SWINSTALL                                                       = 196610
	REASON_UNKNOWN                                                         = 255
	REASON_UNSTABLE                                                        = 327686
	RECOVERY_DEFAULT_PING_INTERVAL                                         = 5000
	RECOVERY_MAX_PING_INTERVAL                                             = 300000
	REGDB_E_FIRST                                                          = 2147746128
	REGDB_E_LAST                                                           = 2147746143
	REGDB_S_FIRST                                                          = 262480
	REGDB_S_LAST                                                           = 262495
	REG_ADVANCED                                                           = 000003
	REG_ADVF                                                               = 000002
	REG_APP_HIVE                                                           = 16
	REG_ASSERT                                                             = 15
	REG_ATOI                                                               = 101
	REG_BADBR                                                              = 10
	REG_BADOPT                                                             = 18
	REG_BADPAT                                                             = 2
	REG_BADRPT                                                             = 13
	REG_BASIC                                                              = 000000
	REG_BINARY                                                             = 3
	REG_BOOT_HIVE                                                          = 1024
	REG_BOSONLY                                                            = 002000
	REG_CREATED_NEW_KEY                                                    = 1
	REG_DUMP                                                               = 004000
	REG_DWORD                                                              = 4
	REG_DWORD_BIG_ENDIAN                                                   = 5
	REG_DWORD_LITTLE_ENDIAN                                                = 4
	REG_EBRACE                                                             = 9
	REG_EBRACK                                                             = 7
	REG_ECOLLATE                                                           = 3
	REG_ECOLORS                                                            = 20
	REG_ECTYPE                                                             = 4
	REG_EESCAPE                                                            = 5
	REG_EPAREN                                                             = 8
	REG_ERANGE                                                             = 11
	REG_ESPACE                                                             = 12
	REG_ESUBREG                                                            = 6
	REG_ETOOBIG                                                            = 19
	REG_EXPANDED                                                           = 000040
	REG_EXPAND_SZ                                                          = 2
	REG_EXPECT                                                             = 001000
	REG_EXTENDED                                                           = 000001
	REG_FAKE                                                               = 010000
	REG_FORCE_RESTORE                                                      = 8
	REG_FORCE_UNLOAD                                                       = 1
	REG_FTRACE                                                             = 0010
	REG_FULL_RESOURCE_DESCRIPTOR                                           = 9
	REG_HIVE_EXACT_FILE_GROWTH                                             = 128
	REG_HIVE_NO_RM                                                         = 256
	REG_HIVE_SINGLE_LOG                                                    = 512
	REG_ICASE                                                              = 000010
	REG_INVARG                                                             = 16
	REG_ITOA                                                               = 102
	REG_LATEST_FORMAT                                                      = 2
	REG_LEGAL_CHANGE_FILTER                                                = 268435471
	REG_LEGAL_OPTION                                                       = 15
	REG_LINK                                                               = 6
	REG_MIXED                                                              = 17
	REG_MTRACE                                                             = 0020
	REG_MUI_STRING_TRUNCATE                                                = 0x00000001
	REG_MULTI_SZ                                                           = 7
	REG_NEWLINE                                                            = 000300
	REG_NLANCH                                                             = 000200
	REG_NLSTOP                                                             = 000100
	REG_NOMATCH                                                            = 1
	REG_NONE                                                               = 0
	REG_NOSPEC                                                             = 4
	REG_NOSUB                                                              = 000020
	REG_NOTBOL                                                             = 0001
	REG_NOTEOL                                                             = 0002
	REG_NOTIFY_CHANGE_ATTRIBUTES                                           = 2
	REG_NOTIFY_CHANGE_LAST_SET                                             = 4
	REG_NOTIFY_CHANGE_NAME                                                 = 1
	REG_NOTIFY_CHANGE_SECURITY                                             = 8
	REG_NOTIFY_THREAD_AGNOSTIC                                             = 268435456
	REG_NO_COMPRESSION                                                     = 4
	REG_NO_LAZY_FLUSH                                                      = 4
	REG_OKAY                                                               = 0
	REG_OPENED_EXISTING_KEY                                                = 2
	REG_OPTION_BACKUP_RESTORE                                              = 4
	REG_OPTION_CREATE_LINK                                                 = 2
	REG_OPTION_NON_VOLATILE                                                = 0
	REG_OPTION_OPEN_LINK                                                   = 8
	REG_OPTION_RESERVED                                                    = 0
	REG_OPTION_VOLATILE                                                    = 1
	REG_PEND                                                               = 000400
	REG_PROCESS_APPKEY                                                     = 0x00000001
	REG_PROCESS_PRIVATE                                                    = 32
	REG_PROGRESS                                                           = 020000
	REG_QUOTE                                                              = 000004
	REG_QWORD                                                              = 11
	REG_QWORD_LITTLE_ENDIAN                                                = 11
	REG_REFRESH_HIVE                                                       = 2
	REG_RESOURCE_LIST                                                      = 8
	REG_RESOURCE_REQUIREMENTS_LIST                                         = 10
	REG_SECURE_CONNECTION                                                  = 1
	REG_SMALL                                                              = 0040
	REG_STANDARD_FORMAT                                                    = 1
	REG_STARTEND                                                           = 0004
	REG_START_JOURNAL                                                      = 64
	REG_SZ                                                                 = 1
	REG_UBACKREF                                                           = 000001
	REG_UBBS                                                               = 000100
	REG_UBOUNDS                                                            = 000004
	REG_UBRACES                                                            = 000010
	REG_UBSALNUM                                                           = 000020
	REG_UEMPTYMATCH                                                        = 004000
	REG_UIMPOSSIBLE                                                        = 010000
	REG_ULOCALE                                                            = 002000
	REG_ULOOKAHEAD                                                         = 000002
	REG_UNONPOSIX                                                          = 000200
	REG_UPBOTCH                                                            = 000040
	REG_USHORTEST                                                          = 020000
	REG_UUNPORT                                                            = 001000
	REG_UUNSPEC                                                            = 000400
	REG_WHOLE_HIVE_VOLATILE                                                = 1
	RELATIVE                                                               = 2
	REMOTE_NAME_INFO_LEVEL                                                 = 0x00000002
	REPLACEFILE_IGNORE_MERGE_ERRORS                                        = 0x2
	REPLACEFILE_WRITE_THROUGH                                              = 0x1
	RESETDEV                                                               = 7
	RESOLVER_KEY                                                           = "testInterpResolver"
	RESOURCEDISPLAYTYPE_DIRECTORY                                          = 0x00000009
	RESOURCEDISPLAYTYPE_DOMAIN                                             = 0x00000001
	RESOURCEDISPLAYTYPE_FILE                                               = 0x00000004
	RESOURCEDISPLAYTYPE_GENERIC                                            = 0x00000000
	RESOURCEDISPLAYTYPE_GROUP                                              = 0x00000005
	RESOURCEDISPLAYTYPE_NDSCONTAINER                                       = 0x0000000b
	RESOURCEDISPLAYTYPE_NETWORK                                            = 0x00000006
	RESOURCEDISPLAYTYPE_ROOT                                               = 0x00000007
	RESOURCEDISPLAYTYPE_SERVER                                             = 0x00000002
	RESOURCEDISPLAYTYPE_SHARE                                              = 0x00000003
	RESOURCEDISPLAYTYPE_SHAREADMIN                                         = 0x00000008
	RESOURCEDISPLAYTYPE_TREE                                               = 0x0000000a
	RESOURCEMANAGER_ALL_ACCESS                                             = 2031743
	RESOURCEMANAGER_COMPLETE_PROPAGATION                                   = 64
	RESOURCEMANAGER_ENLIST                                                 = 8
	RESOURCEMANAGER_GENERIC_EXECUTE                                        = 1179740
	RESOURCEMANAGER_GENERIC_READ                                           = 1179649
	RESOURCEMANAGER_GENERIC_WRITE                                          = 1179774
	RESOURCEMANAGER_GET_NOTIFICATION                                       = 16
	RESOURCEMANAGER_QUERY_INFORMATION                                      = 1
	RESOURCEMANAGER_RECOVER                                                = 4
	RESOURCEMANAGER_REGISTER_PROTOCOL                                      = 32
	RESOURCEMANAGER_SET_INFORMATION                                        = 2
	RESOURCETYPE_ANY                                                       = 0x00000000
	RESOURCETYPE_DISK                                                      = 0x00000001
	RESOURCETYPE_PRINT                                                     = 0x00000002
	RESOURCETYPE_RESERVED                                                  = 0x00000008
	RESOURCETYPE_UNKNOWN                                                   = 0xFFFFFFFF
	RESOURCEUSAGE_ALL                                                      = 19
	RESOURCEUSAGE_ATTACHED                                                 = 0x00000010
	RESOURCEUSAGE_CONNECTABLE                                              = 0x00000001
	RESOURCEUSAGE_CONTAINER                                                = 0x00000002
	RESOURCEUSAGE_NOLOCALDEVICE                                            = 0x00000004
	RESOURCEUSAGE_RESERVED                                                 = 0x80000000
	RESOURCEUSAGE_SIBLING                                                  = 0x00000008
	RESOURCE_CONNECTED                                                     = 0x00000001
	RESOURCE_CONTEXT                                                       = 0x00000005
	RESOURCE_ENUM_LN                                                       = 1
	RESOURCE_ENUM_MODULE_EXACT                                             = 16
	RESOURCE_ENUM_MUI                                                      = 2
	RESOURCE_ENUM_MUI_SYSTEM                                               = 4
	RESOURCE_ENUM_VALIDATE                                                 = 8
	RESOURCE_GLOBALNET                                                     = 0x00000002
	RESOURCE_MANAGER_COMMUNICATION                                         = 0x00000002
	RESOURCE_MANAGER_MAXIMUM_OPTION                                        = 0x00000003
	RESOURCE_MANAGER_VOLATILE                                              = 0x00000001
	RESOURCE_RECENT                                                        = 0x00000004
	RESOURCE_REMEMBERED                                                    = 0x00000003
	RESTART_MAX_CMD_LINE                                                   = 1024
	RESTART_NO_CRASH                                                       = 1
	RESTART_NO_HANG                                                        = 2
	RESTART_NO_PATCH                                                       = 4
	RESTART_NO_REBOOT                                                      = 8
	RESTORE_CTM                                                            = 4100
	RESTRICTED_POINTER                                                     = 0
	RESULT_IS_ADDED                                                        = 0x0010
	RESULT_IS_ALIAS                                                        = 0x0001
	RESULT_IS_CHANGED                                                      = 0x0020
	RESULT_IS_DELETED                                                      = 0x0040
	RES_CURSOR                                                             = 2
	RES_FLUSH_CACHE                                                        = 2
	RES_ICON                                                               = 1
	RES_SERVICE                                                            = 4
	RES_UNUSED_1                                                           = 1
	RGN_AND                                                                = 1
	RGN_COPY                                                               = 5
	RGN_DIFF                                                               = 4
	RGN_ERROR                                                              = 0
	RGN_MAX                                                                = 5
	RGN_MIN                                                                = 1
	RGN_OR                                                                 = 2
	RGN_XOR                                                                = 3
	RIDEV_APPKEYS                                                          = 0x00000400
	RIDEV_CAPTUREMOUSE                                                     = 0x00000200
	RIDEV_DEVNOTIFY                                                        = 0x00002000
	RIDEV_EXCLUDE                                                          = 0x00000010
	RIDEV_EXINPUTSINK                                                      = 0x00001000
	RIDEV_EXMODEMASK                                                       = 0x000000F0
	RIDEV_INPUTSINK                                                        = 0x00000100
	RIDEV_NOHOTKEYS                                                        = 0x00000200
	RIDEV_NOLEGACY                                                         = 0x00000030
	RIDEV_PAGEONLY                                                         = 0x00000020
	RIDEV_REMOVE                                                           = 0x00000001
	RIDI_DEVICEINFO                                                        = 0x2000000b
	RIDI_DEVICENAME                                                        = 0x20000007
	RIDI_PREPARSEDDATA                                                     = 0x20000005
	RID_HEADER                                                             = 0x10000005
	RID_INPUT                                                              = 0x10000003
	RIGHTMOST_BUTTON_PRESSED                                               = 0x2
	RIGHT_ALT_PRESSED                                                      = 0x1
	RIGHT_CTRL_PRESSED                                                     = 0x4
	RIM_INPUT                                                              = 0
	RIM_INPUTSINK                                                          = 1
	RIM_TYPEHID                                                            = 2
	RIM_TYPEKEYBOARD                                                       = 1
	RIM_TYPEMAX                                                            = 2
	RIM_TYPEMOUSE                                                          = 0
	RIP_EVENT                                                              = 9
	RI_KEY_BREAK                                                           = 1
	RI_KEY_E0                                                              = 2
	RI_KEY_E1                                                              = 4
	RI_KEY_MAKE                                                            = 0
	RI_KEY_TERMSRV_SET_LED                                                 = 8
	RI_KEY_TERMSRV_SHADOW                                                  = 0x10
	RI_MOUSE_BUTTON_1_DOWN                                                 = 1
	RI_MOUSE_BUTTON_1_UP                                                   = 2
	RI_MOUSE_BUTTON_2_DOWN                                                 = 4
	RI_MOUSE_BUTTON_2_UP                                                   = 8
	RI_MOUSE_BUTTON_3_DOWN                                                 = 16
	RI_MOUSE_BUTTON_3_UP                                                   = 32
	RI_MOUSE_BUTTON_4_DOWN                                                 = 0x0040
	RI_MOUSE_BUTTON_4_UP                                                   = 0x0080
	RI_MOUSE_BUTTON_5_DOWN                                                 = 0x0100
	RI_MOUSE_BUTTON_5_UP                                                   = 0x0200
	RI_MOUSE_LEFT_BUTTON_DOWN                                              = 0x0001
	RI_MOUSE_LEFT_BUTTON_UP                                                = 0x0002
	RI_MOUSE_MIDDLE_BUTTON_DOWN                                            = 0x0010
	RI_MOUSE_MIDDLE_BUTTON_UP                                              = 0x0020
	RI_MOUSE_RIGHT_BUTTON_DOWN                                             = 0x0004
	RI_MOUSE_RIGHT_BUTTON_UP                                               = 0x0008
	RI_MOUSE_WHEEL                                                         = 0x0400
	RPC_S_ADDRESS_ERROR                                                    = 1768
	RPC_S_ALREADY_LISTENING                                                = 1713
	RPC_S_ALREADY_REGISTERED                                               = 1711
	RPC_S_BINDING_HAS_NO_AUTH                                              = 1746
	RPC_S_BINDING_INCOMPLETE                                               = 1819
	RPC_S_CALL_CANCELLED                                                   = 1818
	RPC_S_CALL_FAILED                                                      = 1726
	RPC_S_CALL_FAILED_DNE                                                  = 1727
	RPC_S_CALL_IN_PROGRESS                                                 = 1791
	RPC_S_CANNOT_SUPPORT                                                   = 1764
	RPC_S_CANT_CREATE_ENDPOINT                                             = 1720
	RPC_S_COMM_FAILURE                                                     = 1820
	RPC_S_DUPLICATE_ENDPOINT                                               = 1740
	RPC_S_ENTRY_ALREADY_EXISTS                                             = 1760
	RPC_S_ENTRY_NOT_FOUND                                                  = 1761
	RPC_S_ENTRY_TYPE_MISMATCH                                              = 1922
	RPC_S_FP_DIV_ZERO                                                      = 1769
	RPC_S_FP_OVERFLOW                                                      = 1771
	RPC_S_FP_UNDERFLOW                                                     = 1770
	RPC_S_GROUP_MEMBER_NOT_FOUND                                           = 1898
	RPC_S_GRP_ELT_NOT_ADDED                                                = 1928
	RPC_S_GRP_ELT_NOT_REMOVED                                              = 1929
	RPC_S_INCOMPLETE_NAME                                                  = 1755
	RPC_S_INTERFACE_NOT_EXPORTED                                           = 1924
	RPC_S_INTERFACE_NOT_FOUND                                              = 1759
	RPC_S_INTERNAL_ERROR                                                   = 1766
	RPC_S_INVALID_ASYNC_CALL                                               = 1915
	RPC_S_INVALID_ASYNC_HANDLE                                             = 1914
	RPC_S_INVALID_AUTH_IDENTITY                                            = 1749
	RPC_S_INVALID_BINDING                                                  = 1702
	RPC_S_INVALID_BOUND                                                    = 1734
	RPC_S_INVALID_ENDPOINT_FORMAT                                          = 1706
	RPC_S_INVALID_NAF_ID                                                   = 1763
	RPC_S_INVALID_NAME_SYNTAX                                              = 1736
	RPC_S_INVALID_NETWORK_OPTIONS                                          = 1724
	RPC_S_INVALID_NET_ADDR                                                 = 1707
	RPC_S_INVALID_OBJECT                                                   = 1900
	RPC_S_INVALID_RPC_PROTSEQ                                              = 1704
	RPC_S_INVALID_STRING_BINDING                                           = 1700
	RPC_S_INVALID_STRING_UUID                                              = 1705
	RPC_S_INVALID_TAG                                                      = 1733
	RPC_S_INVALID_TIMEOUT                                                  = 1709
	RPC_S_INVALID_VERS_OPTION                                              = 1756
	RPC_S_MAX_CALLS_TOO_SMALL                                              = 1742
	RPC_S_NAME_SERVICE_UNAVAILABLE                                         = 1762
	RPC_S_NOTHING_TO_EXPORT                                                = 1754
	RPC_S_NOT_ALL_OBJS_EXPORTED                                            = 1923
	RPC_S_NOT_ALL_OBJS_UNEXPORTED                                          = 1758
	RPC_S_NOT_CANCELLED                                                    = 1826
	RPC_S_NOT_LISTENING                                                    = 1715
	RPC_S_NOT_RPC_ERROR                                                    = 1823
	RPC_S_NO_BINDINGS                                                      = 1718
	RPC_S_NO_CALL_ACTIVE                                                   = 1725
	RPC_S_NO_CONTEXT_AVAILABLE                                             = 1765
	RPC_S_NO_ENDPOINT_FOUND                                                = 1708
	RPC_S_NO_ENTRY_NAME                                                    = 1735
	RPC_S_NO_INTERFACES                                                    = 1817
	RPC_S_NO_MORE_BINDINGS                                                 = 1806
	RPC_S_NO_MORE_MEMBERS                                                  = 1757
	RPC_S_NO_PRINC_NAME                                                    = 1822
	RPC_S_NO_PROTSEQS                                                      = 1719
	RPC_S_NO_PROTSEQS_REGISTERED                                           = 1714
	RPC_S_OBJECT_NOT_FOUND                                                 = 1710
	RPC_S_OUT_OF_RESOURCES                                                 = 1721
	RPC_S_PRF_ELT_NOT_ADDED                                                = 1926
	RPC_S_PRF_ELT_NOT_REMOVED                                              = 1927
	RPC_S_PROCNUM_OUT_OF_RANGE                                             = 1745
	RPC_S_PROFILE_NOT_ADDED                                                = 1925
	RPC_S_PROTOCOL_ERROR                                                   = 1728
	RPC_S_PROTSEQ_NOT_FOUND                                                = 1744
	RPC_S_PROTSEQ_NOT_SUPPORTED                                            = 1703
	RPC_S_SEC_PKG_ERROR                                                    = 1825
	RPC_S_SEND_INCOMPLETE                                                  = 1913
	RPC_S_SERVER_TOO_BUSY                                                  = 1723
	RPC_S_SERVER_UNAVAILABLE                                               = 1722
	RPC_S_STRING_TOO_LONG                                                  = 1743
	RPC_S_TYPE_ALREADY_REGISTERED                                          = 1712
	RPC_S_UNKNOWN_AUTHN_LEVEL                                              = 1748
	RPC_S_UNKNOWN_AUTHN_SERVICE                                            = 1747
	RPC_S_UNKNOWN_AUTHN_TYPE                                               = 1741
	RPC_S_UNKNOWN_AUTHZ_SERVICE                                            = 1750
	RPC_S_UNKNOWN_IF                                                       = 1717
	RPC_S_UNKNOWN_MGR_TYPE                                                 = 1716
	RPC_S_UNSUPPORTED_AUTHN_LEVEL                                          = 1821
	RPC_S_UNSUPPORTED_NAME_SYNTAX                                          = 1737
	RPC_S_UNSUPPORTED_TRANS_SYN                                            = 1730
	RPC_S_UNSUPPORTED_TYPE                                                 = 1732
	RPC_S_UUID_LOCAL_ONLY                                                  = 1824
	RPC_S_UUID_NO_ADDRESS                                                  = 1739
	RPC_S_WRONG_KIND_OF_BINDING                                            = 1701
	RPC_S_ZERO_DIVIDE                                                      = 1767
	RPC_X_BAD_STUB_DATA                                                    = 1783
	RPC_X_BYTE_COUNT_TOO_SMALL                                             = 1782
	RPC_X_ENUM_VALUE_OUT_OF_RANGE                                          = 1781
	RPC_X_INVALID_ES_ACTION                                                = 1827
	RPC_X_INVALID_PIPE_OBJECT                                              = 1830
	RPC_X_NO_MORE_ENTRIES                                                  = 1772
	RPC_X_NULL_REF_POINTER                                                 = 1780
	RPC_X_PIPE_CLOSED                                                      = 1916
	RPC_X_PIPE_DISCIPLINE_ERROR                                            = 1917
	RPC_X_PIPE_EMPTY                                                       = 1918
	RPC_X_SS_CANNOT_GET_CALL_HANDLE                                        = 1779
	RPC_X_SS_CHAR_TRANS_OPEN_FAIL                                          = 1773
	RPC_X_SS_CHAR_TRANS_SHORT_FILE                                         = 1774
	RPC_X_SS_CONTEXT_DAMAGED                                               = 1777
	RPC_X_SS_HANDLES_MISMATCH                                              = 1778
	RPC_X_SS_IN_NULL_CONTEXT                                               = 1775
	RPC_X_WRONG_ES_VERSION                                                 = 1828
	RPC_X_WRONG_PIPE_ORDER                                                 = 1831
	RPC_X_WRONG_PIPE_VERSION                                               = 1832
	RPC_X_WRONG_STUB_VERSION                                               = 1829
	RP_INIFILE                                                             = 0x02
	RP_LOGON                                                               = 0x01
	RRF_NOEXPAND                                                           = 0x10000000
	RRF_RT_ANY                                                             = 0x0000ffff
	RRF_RT_DWORD                                                           = 24
	RRF_RT_QWORD                                                           = 72
	RRF_RT_REG_BINARY                                                      = 0x00000008
	RRF_RT_REG_DWORD                                                       = 0x00000010
	RRF_RT_REG_EXPAND_SZ                                                   = 0x00000004
	RRF_RT_REG_MULTI_SZ                                                    = 0x00000020
	RRF_RT_REG_NONE                                                        = 0x00000001
	RRF_RT_REG_QWORD                                                       = 0x00000040
	RRF_RT_REG_SZ                                                          = 0x00000002
	RRF_ZEROONFAILURE                                                      = 0x20000000
	RTL_CONDITION_VARIABLE_LOCKMODE_SHARED                                 = 0x1
	RTL_CRITICAL_SECTION_ALL_FLAG_BITS                                     = 0xff000000
	RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT                            = 0x00000001
	RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN                                 = 0x02000000
	RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO                             = 0x10000000
	RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO                                = 0x01000000
	RTL_CRITICAL_SECTION_FLAG_RESERVED                                     = 3758096384
	RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE                                = 0x08000000
	RTL_CRITICAL_SECTION_FLAG_STATIC_INIT                                  = 0x04000000
	RTL_CRITSECT_TYPE                                                      = 0
	RTL_RESOURCE_TYPE                                                      = 1
	RTL_RUN_ONCE_ASYNC                                                     = 2
	RTL_RUN_ONCE_CHECK_ONLY                                                = 1
	RTL_RUN_ONCE_CTX_RESERVED_BITS                                         = 2
	RTL_RUN_ONCE_INIT_FAILED                                               = 4
	RTL_UMS_VERSION                                                        = 256
	RTL_VRF_FLG_APPCOMPAT_CHECKS                                           = 0x00000010
	RTL_VRF_FLG_COM_CHECKS                                                 = 0x00000100
	RTL_VRF_FLG_DANGEROUS_APIS                                             = 0x00000200
	RTL_VRF_FLG_DEADLOCK_CHECKS                                            = 0x00000800
	RTL_VRF_FLG_DIRTY_STACKS                                               = 0x00000040
	RTL_VRF_FLG_ENABLED_SYSTEM_WIDE                                        = 0x00020000
	RTL_VRF_FLG_ENABLE_LOGGING                                             = 0x00004000
	RTL_VRF_FLG_FAST_FILL_HEAP                                             = 0x00008000
	RTL_VRF_FLG_FIRST_CHANCE_EXCEPTION_CHECKS                              = 0x00001000
	RTL_VRF_FLG_FULL_PAGE_HEAP                                             = 0x00000001
	RTL_VRF_FLG_HANDLE_CHECKS                                              = 0x00000004
	RTL_VRF_FLG_LOCK_CHECKS                                                = 0x00040000
	RTL_VRF_FLG_MISCELLANEOUS_CHECKS                                       = 0x00020000
	RTL_VRF_FLG_RACE_CHECKS                                                = 0x00000400
	RTL_VRF_FLG_RESERVED_DONOTUSE                                          = 0x00000002
	RTL_VRF_FLG_RPC_CHECKS                                                 = 0x00000080
	RTL_VRF_FLG_STACK_CHECKS                                               = 0x00000008
	RTL_VRF_FLG_TLS_CHECKS                                                 = 0x00000020
	RTL_VRF_FLG_VIRTUAL_MEM_CHECKS                                         = 0x00002000
	RTL_VRF_FLG_VIRTUAL_SPACE_TRACKING                                     = 0x00010000
	RTS_CONTROL_DISABLE                                                    = 0x0
	RTS_CONTROL_ENABLE                                                     = 0x1
	RTS_CONTROL_HANDSHAKE                                                  = 0x2
	RTS_CONTROL_TOGGLE                                                     = 0x3
	RUNTIME_FUNCTION_INDIRECT                                              = 0x1
	RUSSIAN_CHARSET                                                        = 204
	R_OK                                                                   = 4
	SACL_SECURITY_INFORMATION                                              = 8
	SAFE_INTERP                                                            = 0x80
	SAL_HXX                                                                = 0
	SAL__callback                                                          = 0
	SAL__checkReturn                                                       = 0
	SAL__deref                                                             = 0
	SAL__deref_in                                                          = 0
	SAL__deref_in_opt                                                      = 0
	SAL__deref_inout                                                       = 0
	SAL__deref_inout_nz                                                    = 0
	SAL__deref_inout_nz_opt                                                = 0
	SAL__deref_inout_opt                                                   = 0
	SAL__deref_inout_z                                                     = 0
	SAL__deref_inout_z_opt                                                 = 0
	SAL__deref_opt_in                                                      = 0
	SAL__deref_opt_in_opt                                                  = 0
	SAL__deref_opt_inout                                                   = 0
	SAL__deref_opt_inout_nz                                                = 0
	SAL__deref_opt_inout_nz_opt                                            = 0
	SAL__deref_opt_inout_opt                                               = 0
	SAL__deref_opt_inout_z                                                 = 0
	SAL__deref_opt_inout_z_opt                                             = 0
	SAL__deref_opt_out                                                     = 0
	SAL__deref_opt_out_nz_opt                                              = 0
	SAL__deref_opt_out_opt                                                 = 0
	SAL__deref_opt_out_z                                                   = 0
	SAL__deref_opt_out_z_opt                                               = 0
	SAL__deref_out                                                         = 0
	SAL__deref_out_nz                                                      = 0
	SAL__deref_out_nz_opt                                                  = 0
	SAL__deref_out_opt                                                     = 0
	SAL__deref_out_z                                                       = 0
	SAL__deref_out_z_opt                                                   = 0
	SAL__exceptthat                                                        = 0
	SAL__execeptthat                                                       = 0
	SAL__format_string                                                     = 0
	SAL__in                                                                = 0
	SAL__in_nz                                                             = 0
	SAL__in_nz_opt                                                         = 0
	SAL__in_opt                                                            = 0
	SAL__in_z                                                              = 0
	SAL__in_z_opt                                                          = 0
	SAL__inner_callback                                                    = 0
	SAL__inner_checkReturn                                                 = 0
	SAL__inner_fallthrough                                                 = 0
	SAL__inner_fallthrough_dec                                             = 0
	SAL__inner_override                                                    = 0
	SAL__inout                                                             = 0
	SAL__inout_nz                                                          = 0
	SAL__inout_nz_opt                                                      = 0
	SAL__inout_opt                                                         = 0
	SAL__inout_z                                                           = 0
	SAL__inout_z_opt                                                       = 0
	SAL__maybenull                                                         = 0
	SAL__maybereadonly                                                     = 0
	SAL__maybevalid                                                        = 0
	SAL__notnull                                                           = 0
	SAL__notreadonly                                                       = 0
	SAL__notvalid                                                          = 0
	SAL__null                                                              = 0
	SAL__nullnullterminated                                                = 0
	SAL__nullterminated                                                    = 0
	SAL__out                                                               = 0
	SAL__out_nz                                                            = 0
	SAL__out_nz_opt                                                        = 0
	SAL__out_opt                                                           = 0
	SAL__out_z                                                             = 0
	SAL__out_z_opt                                                         = 0
	SAL__override                                                          = 0
	SAL__post                                                              = 0
	SAL__pre                                                               = 0
	SAL__readonly                                                          = 0
	SAL__reserved                                                          = 0
	SAL__valid                                                             = 0
	SANDBOX_INERT                                                          = 0x2
	SAVE_CTM                                                               = 4101
	SBM_ENABLE_ARROWS                                                      = 0x00E4
	SBM_GETPOS                                                             = 0x00E1
	SBM_GETRANGE                                                           = 0x00E3
	SBM_GETSCROLLBARINFO                                                   = 0x00EB
	SBM_GETSCROLLINFO                                                      = 0x00EA
	SBM_SETPOS                                                             = 0x00E0
	SBM_SETRANGE                                                           = 0x00E2
	SBM_SETRANGEREDRAW                                                     = 0x00E6
	SBM_SETSCROLLINFO                                                      = 0x00E9
	SBS_BOTTOMALIGN                                                        = 4
	SBS_HORZ                                                               = 0
	SBS_LEFTALIGN                                                          = 2
	SBS_RIGHTALIGN                                                         = 4
	SBS_SIZEBOX                                                            = 8
	SBS_SIZEBOXBOTTOMRIGHTALIGN                                            = 4
	SBS_SIZEBOXTOPLEFTALIGN                                                = 2
	SBS_SIZEGRIP                                                           = 16
	SBS_TOPALIGN                                                           = 2
	SBS_VERT                                                               = 1
	SB_BOTH                                                                = 3
	SB_BOTTOM                                                              = 7
	SB_CONST_ALPHA                                                         = 0x00000001
	SB_CTL                                                                 = 2
	SB_ENDSCROLL                                                           = 8
	SB_GRAD_RECT                                                           = 0x00000010
	SB_GRAD_TRI                                                            = 0x00000020
	SB_HORZ                                                                = 0
	SB_LEFT                                                                = 6
	SB_LINEDOWN                                                            = 1
	SB_LINELEFT                                                            = 0
	SB_LINERIGHT                                                           = 1
	SB_LINEUP                                                              = 0
	SB_NONE                                                                = 0x00000000
	SB_PAGEDOWN                                                            = 3
	SB_PAGELEFT                                                            = 2
	SB_PAGERIGHT                                                           = 3
	SB_PAGEUP                                                              = 2
	SB_PIXEL_ALPHA                                                         = 0x00000002
	SB_PREMULT_ALPHA                                                       = 0x00000004
	SB_RIGHT                                                               = 7
	SB_THUMBPOSITION                                                       = 4
	SB_THUMBTRACK                                                          = 5
	SB_TOP                                                                 = 6
	SB_VERT                                                                = 1
	SCALINGFACTORX                                                         = 114
	SCALINGFACTORY                                                         = 115
	SCARD_S_SUCCESS                                                        = 0
	SCHAR_MAX                                                              = 127
	SCHAR_MIN                                                              = -128
	SCHED_E_SERVICE_NOT_LOCALSYSTEM                                        = 6200
	SCNd16                                                                 = "hd"
	SCNd32                                                                 = "d"
	SCNd8                                                                  = "hhd"
	SCNdFAST16                                                             = "hd"
	SCNdFAST32                                                             = "d"
	SCNdFAST8                                                              = "hhd"
	SCNdLEAST16                                                            = "hd"
	SCNdLEAST32                                                            = "d"
	SCNdLEAST8                                                             = "hhd"
	SCNi16                                                                 = "hi"
	SCNi32                                                                 = "i"
	SCNi8                                                                  = "hhi"
	SCNiFAST16                                                             = "hi"
	SCNiFAST32                                                             = "i"
	SCNiFAST8                                                              = "hhi"
	SCNiLEAST16                                                            = "hi"
	SCNiLEAST32                                                            = "i"
	SCNiLEAST8                                                             = "hhi"
	SCNo16                                                                 = "ho"
	SCNo32                                                                 = "o"
	SCNo8                                                                  = "hho"
	SCNoFAST16                                                             = "ho"
	SCNoFAST32                                                             = "o"
	SCNoFAST8                                                              = "hho"
	SCNoLEAST16                                                            = "ho"
	SCNoLEAST32                                                            = "o"
	SCNoLEAST8                                                             = "hho"
	SCNu16                                                                 = "hu"
	SCNu32                                                                 = "u"
	SCNu8                                                                  = "hhu"
	SCNuFAST16                                                             = "hu"
	SCNuFAST32                                                             = "u"
	SCNuFAST8                                                              = "hhu"
	SCNuLEAST16                                                            = "hu"
	SCNuLEAST32                                                            = "u"
	SCNuLEAST8                                                             = "hhu"
	SCNx16                                                                 = "hx"
	SCNx32                                                                 = "x"
	SCNx8                                                                  = "hhx"
	SCNxFAST16                                                             = "hx"
	SCNxFAST32                                                             = "x"
	SCNxFAST8                                                              = "hhx"
	SCNxLEAST16                                                            = "hx"
	SCNxLEAST32                                                            = "x"
	SCNxLEAST8                                                             = "hhx"
	SCOPE_SECURITY_INFORMATION                                             = 64
	SCROLLLOCK_ON                                                          = 0x40
	SCS_32BIT_BINARY                                                       = 0
	SCS_64BIT_BINARY                                                       = 6
	SCS_CAP_COMPSTR                                                        = 0x00000001
	SCS_CAP_MAKEREAD                                                       = 0x00000002
	SCS_CAP_SETRECONVERTSTRING                                             = 0x00000004
	SCS_CHANGEATTR                                                         = 18
	SCS_CHANGECLAUSE                                                       = 36
	SCS_DOS_BINARY                                                         = 1
	SCS_OS216_BINARY                                                       = 5
	SCS_PIF_BINARY                                                         = 3
	SCS_POSIX_BINARY                                                       = 4
	SCS_QUERYRECONVERTSTRING                                               = 0x00020000
	SCS_SETRECONVERTSTRING                                                 = 0x00010000
	SCS_SETSTR                                                             = 9
	SCS_THIS_PLATFORM_BINARY                                               = 6
	SCS_WOW_BINARY                                                         = 2
	SC_ARRANGE                                                             = 0xF110
	SC_CLOSE                                                               = 0xF060
	SC_CONTEXTHELP                                                         = 0xF180
	SC_DEFAULT                                                             = 0xF160
	SC_GROUP_IDENTIFIER                                                    = 43
	SC_GROUP_IDENTIFIERA                                                   = 43
	SC_GROUP_IDENTIFIERW                                                   = 43
	SC_HOTKEY                                                              = 0xF150
	SC_HSCROLL                                                             = 0xF080
	SC_ICON                                                                = 61472
	SC_KEYMENU                                                             = 0xF100
	SC_MANAGER_ALL_ACCESS                                                  = 983103
	SC_MANAGER_CONNECT                                                     = 0x0001
	SC_MANAGER_CREATE_SERVICE                                              = 0x0002
	SC_MANAGER_ENUMERATE_SERVICE                                           = 0x0004
	SC_MANAGER_LOCK                                                        = 0x0008
	SC_MANAGER_MODIFY_BOOT_CONFIG                                          = 0x0020
	SC_MANAGER_QUERY_LOCK_STATUS                                           = 0x0010
	SC_MAXIMIZE                                                            = 0xF030
	SC_MINIMIZE                                                            = 0xF020
	SC_MONITORPOWER                                                        = 0xF170
	SC_MOUSEMENU                                                           = 0xF090
	SC_MOVE                                                                = 0xF010
	SC_NEXTWINDOW                                                          = 0xF040
	SC_PREVWINDOW                                                          = 0xF050
	SC_RESTORE                                                             = 0xF120
	SC_SCREENSAVE                                                          = 0xF140
	SC_SEPARATOR                                                           = 0xF00F
	SC_SIZE                                                                = 0xF000
	SC_TASKLIST                                                            = 0xF130
	SC_VSCROLL                                                             = 0xF070
	SC_ZOOM                                                                = 61488
	SD_BOTH                                                                = 0x02
	SD_RECEIVE                                                             = 0x00
	SD_SEND                                                                = 0x01
	SECTION_ALL_ACCESS                                                     = 983071
	SECTION_EXTEND_SIZE                                                    = 0x0010
	SECTION_MAP_EXECUTE                                                    = 0x0008
	SECTION_MAP_EXECUTE_EXPLICIT                                           = 0x0020
	SECTION_MAP_READ                                                       = 0x0004
	SECTION_MAP_WRITE                                                      = 0x0002
	SECTION_QUERY                                                          = 0x0001
	SECURITY_ANONYMOUS_LOGON_RID                                           = 7
	SECURITY_APPPOOL_ID_BASE_RID                                           = 82
	SECURITY_APPPOOL_ID_RID_COUNT                                          = 6
	SECURITY_APP_PACKAGE_BASE_RID                                          = 2
	SECURITY_APP_PACKAGE_RID_COUNT                                         = 8
	SECURITY_AUTHENTICATED_USER_RID                                        = 11
	SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID                         = 1
	SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT                            = 1
	SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID                           = 2
	SECURITY_BATCH_RID                                                     = 3
	SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT                                 = 2
	SECURITY_BUILTIN_CAPABILITY_RID_COUNT                                  = 2
	SECURITY_BUILTIN_DOMAIN_RID                                            = 32
	SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE                                   = 1
	SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE                        = 2
	SECURITY_CAPABILITY_APPOINTMENTS                                       = 11
	SECURITY_CAPABILITY_BASE_RID                                           = 3
	SECURITY_CAPABILITY_CONTACTS                                           = 12
	SECURITY_CAPABILITY_DOCUMENTS_LIBRARY                                  = 7
	SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION                          = 8
	SECURITY_CAPABILITY_INTERNET_CLIENT                                    = 1
	SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER                             = 2
	SECURITY_CAPABILITY_INTERNET_EXPLORER                                  = 4096
	SECURITY_CAPABILITY_MUSIC_LIBRARY                                      = 6
	SECURITY_CAPABILITY_PICTURES_LIBRARY                                   = 4
	SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER                      = 3
	SECURITY_CAPABILITY_REMOVABLE_STORAGE                                  = 10
	SECURITY_CAPABILITY_RID_COUNT                                          = 5
	SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES                           = 9
	SECURITY_CAPABILITY_VIDEOS_LIBRARY                                     = 5
	SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID                     = 85
	SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT                    = 6
	SECURITY_COM_ID_BASE_RID                                               = 89
	SECURITY_CONTEXT_TRACKING                                              = 0x40000
	SECURITY_CREATOR_GROUP_RID                                             = 1
	SECURITY_CREATOR_GROUP_SERVER_RID                                      = 3
	SECURITY_CREATOR_OWNER_RID                                             = 0
	SECURITY_CREATOR_OWNER_RIGHTS_RID                                      = 4
	SECURITY_CREATOR_OWNER_SERVER_RID                                      = 2
	SECURITY_CRED_TYPE_BASE_RID                                            = 65
	SECURITY_CRED_TYPE_RID_COUNT                                           = 2
	SECURITY_CRED_TYPE_THIS_ORG_CERT_RID                                   = 1
	SECURITY_DASHOST_ID_BASE_RID                                           = 92
	SECURITY_DASHOST_ID_RID_COUNT                                          = 6
	SECURITY_DESCRIPTOR_REVISION                                           = 1
	SECURITY_DESCRIPTOR_REVISION1                                          = 1
	SECURITY_DIALUP_RID                                                    = 1
	SECURITY_DYNAMIC_TRACKING                                              = 1
	SECURITY_EFFECTIVE_ONLY                                                = 0x80000
	SECURITY_ENTERPRISE_CONTROLLERS_RID                                    = 9
	SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID                           = 22
	SECURITY_INTERACTIVE_RID                                               = 4
	SECURITY_IUSER_RID                                                     = 17
	SECURITY_LOCAL_LOGON_RID                                               = 1
	SECURITY_LOCAL_RID                                                     = 0
	SECURITY_LOCAL_SERVICE_RID                                             = 19
	SECURITY_LOCAL_SYSTEM_RID                                              = 18
	SECURITY_LOGON_IDS_RID                                                 = 5
	SECURITY_LOGON_IDS_RID_COUNT                                           = 3
	SECURITY_MANDATORY_HIGH_RID                                            = 12288
	SECURITY_MANDATORY_LOW_RID                                             = 4096
	SECURITY_MANDATORY_MAXIMUM_USER_RID                                    = 16384
	SECURITY_MANDATORY_MEDIUM_RID                                          = 8192
	SECURITY_MANDATORY_PROTECTED_PROCESS_RID                               = 20480
	SECURITY_MANDATORY_SYSTEM_RID                                          = 16384
	SECURITY_MANDATORY_UNTRUSTED_RID                                       = 0
	SECURITY_MAX_ALWAYS_FILTERED                                           = 999
	SECURITY_MAX_BASE_RID                                                  = 111
	SECURITY_MIN_BASE_RID                                                  = 80
	SECURITY_MIN_NEVER_FILTERED                                            = 1000
	SECURITY_NETWORK_RID                                                   = 2
	SECURITY_NETWORK_SERVICE_RID                                           = 20
	SECURITY_NFS_ID_BASE_RID                                               = 88
	SECURITY_NT_NON_UNIQUE                                                 = 21
	SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT                                  = 3
	SECURITY_NULL_RID                                                      = 0
	SECURITY_OTHER_ORGANIZATION_RID                                        = 1000
	SECURITY_PACKAGE_BASE_RID                                              = 64
	SECURITY_PACKAGE_DIGEST_RID                                            = 21
	SECURITY_PACKAGE_NTLM_RID                                              = 10
	SECURITY_PACKAGE_RID_COUNT                                             = 2
	SECURITY_PACKAGE_SCHANNEL_RID                                          = 14
	SECURITY_PRINCIPAL_SELF_RID                                            = 10
	SECURITY_PROTOCOL_NONE                                                 = 0x0000
	SECURITY_PROXY_RID                                                     = 8
	SECURITY_RDV_GFX_BASE_RID                                              = 91
	SECURITY_REMOTE_LOGON_RID                                              = 14
	SECURITY_RESERVED_ID_BASE_RID                                          = 81
	SECURITY_RESTRICTED_CODE_RID                                           = 12
	SECURITY_SERVER_LOGON_RID                                              = 9
	SECURITY_SERVICE_ID_BASE_RID                                           = 80
	SECURITY_SERVICE_ID_RID_COUNT                                          = 6
	SECURITY_SERVICE_RID                                                   = 6
	SECURITY_SQOS_PRESENT                                                  = 0x100000
	SECURITY_STATIC_TRACKING                                               = 0
	SECURITY_TASK_ID_BASE_RID                                              = 87
	SECURITY_TERMINAL_SERVER_RID                                           = 13
	SECURITY_THIS_ORGANIZATION_RID                                         = 15
	SECURITY_TRUSTED_INSTALLER_RID1                                        = 956008885
	SECURITY_TRUSTED_INSTALLER_RID2                                        = 3418522649
	SECURITY_TRUSTED_INSTALLER_RID3                                        = 1831038044
	SECURITY_TRUSTED_INSTALLER_RID4                                        = 1853292631
	SECURITY_TRUSTED_INSTALLER_RID5                                        = 2271478464
	SECURITY_USERMODEDRIVERHOST_ID_BASE_RID                                = 84
	SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT                               = 6
	SECURITY_VALID_SQOS_FLAGS                                              = 0x1f0000
	SECURITY_VIRTUALACCOUNT_ID_RID_COUNT                                   = 6
	SECURITY_VIRTUALSERVER_ID_BASE_RID                                     = 83
	SECURITY_VIRTUALSERVER_ID_RID_COUNT                                    = 6
	SECURITY_WINDOWSMOBILE_ID_BASE_RID                                     = 112
	SECURITY_WINDOW_MANAGER_BASE_RID                                       = 90
	SECURITY_WMIHOST_ID_BASE_RID                                           = 86
	SECURITY_WMIHOST_ID_RID_COUNT                                          = 6
	SECURITY_WORLD_RID                                                     = 0
	SECURITY_WRITE_RESTRICTED_CODE_RID                                     = 33
	SEC_64K_PAGES                                                          = 0x80000
	SEC_COMMIT                                                             = 0x8000000
	SEC_FILE                                                               = 0x800000
	SEC_IMAGE                                                              = 0x1000000
	SEC_IMAGE_NO_EXECUTE                                                   = 285212672
	SEC_LARGE_PAGES                                                        = 0x80000000
	SEC_NOCACHE                                                            = 0x10000000
	SEC_PARTITION_OWNER_HANDLE                                             = 0x40000
	SEC_PROTECTED_IMAGE                                                    = 0x2000000
	SEC_RESERVE                                                            = 0x4000000
	SEC_WRITECOMBINE                                                       = 0x40000000
	SEEK_CUR                                                               = 1
	SEEK_END                                                               = 2
	SEEK_SET                                                               = 0
	SEF_AVOID_OWNER_CHECK                                                  = 0x10
	SEF_AVOID_OWNER_RESTRICTION                                            = 0x1000
	SEF_AVOID_PRIVILEGE_CHECK                                              = 0x08
	SEF_DACL_AUTO_INHERIT                                                  = 0x01
	SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT                                      = 0x04
	SEF_DEFAULT_GROUP_FROM_PARENT                                          = 0x40
	SEF_DEFAULT_OWNER_FROM_PARENT                                          = 0x20
	SEF_MACL_NO_EXECUTE_UP                                                 = 0x400
	SEF_MACL_NO_READ_UP                                                    = 0x200
	SEF_MACL_NO_WRITE_UP                                                   = 0x100
	SEF_MACL_VALID_FLAGS                                                   = 1792
	SEF_SACL_AUTO_INHERIT                                                  = 0x02
	SELECTPAPERSOURCE                                                      = 18
	SELECT_CAP_CONVERSION                                                  = 0x00000001
	SELECT_CAP_SENTENCE                                                    = 0x00000002
	SEMAPHORE_ALL_ACCESS                                                   = 2031619
	SEMAPHORE_MODIFY_STATE                                                 = 0x0002
	SEM_FAILCRITICALERRORS                                                 = 0x0001
	SEM_NOALIGNMENTFAULTEXCEPT                                             = 0x0004
	SEM_NOGPFAULTERRORBOX                                                  = 0x0002
	SEM_NOOPENFILEERRORBOX                                                 = 0x8000
	SENTINEL_Reason                                                        = 0
	SERKF_AVAILABLE                                                        = 0x00000002
	SERKF_INDICATOR                                                        = 0x00000004
	SERKF_SERIALKEYSON                                                     = 0x00000001
	SERVICES_ACTIVE_DATABASEA                                              = "ServicesActive"
	SERVICES_FAILED_DATABASEA                                              = "ServicesFailed"
	SERVICETYPE_BESTEFFORT                                                 = 0x00000001
	SERVICETYPE_CONTROLLEDLOAD                                             = 0x00000002
	SERVICETYPE_GENERAL_INFORMATION                                        = 0x00000005
	SERVICETYPE_GUARANTEED                                                 = 0x00000003
	SERVICETYPE_NETWORK_CONTROL                                            = 0x0000000A
	SERVICETYPE_NETWORK_UNAVAILABLE                                        = 0x00000004
	SERVICETYPE_NOCHANGE                                                   = 0x00000006
	SERVICETYPE_NONCONFORMING                                              = 0x00000009
	SERVICETYPE_NOTRAFFIC                                                  = 0x00000000
	SERVICETYPE_QUALITATIVE                                                = 0x0000000D
	SERVICE_ACCEPT_HARDWAREPROFILECHANGE                                   = 0x00000020
	SERVICE_ACCEPT_NETBINDCHANGE                                           = 0x00000010
	SERVICE_ACCEPT_PARAMCHANGE                                             = 0x00000008
	SERVICE_ACCEPT_PAUSE_CONTINUE                                          = 0x00000002
	SERVICE_ACCEPT_POWEREVENT                                              = 0x00000040
	SERVICE_ACCEPT_SESSIONCHANGE                                           = 0x00000080
	SERVICE_ACCEPT_SHUTDOWN                                                = 0x00000004
	SERVICE_ACCEPT_STOP                                                    = 0x00000001
	SERVICE_ACTIVE                                                         = 0x00000001
	SERVICE_ADAPTER                                                        = 0x00000004
	SERVICE_ALL_ACCESS                                                     = 983551
	SERVICE_AUTO_START                                                     = 0x00000002
	SERVICE_BESTEFFORT                                                     = 0x80010000
	SERVICE_BOOT_START                                                     = 0x00000000
	SERVICE_CHANGE_CONFIG                                                  = 0x0002
	SERVICE_CONFIG_DESCRIPTION                                             = 1
	SERVICE_CONFIG_FAILURE_ACTIONS                                         = 2
	SERVICE_CONTINUE_PENDING                                               = 0x00000005
	SERVICE_CONTROLLEDLOAD                                                 = 0x80020000
	SERVICE_CONTROL_CONTINUE                                               = 0x00000003
	SERVICE_CONTROL_DEVICEEVENT                                            = 0x0000000B
	SERVICE_CONTROL_HARDWAREPROFILECHANGE                                  = 0x0000000C
	SERVICE_CONTROL_INTERROGATE                                            = 0x00000004
	SERVICE_CONTROL_NETBINDADD                                             = 0x00000007
	SERVICE_CONTROL_NETBINDDISABLE                                         = 0x0000000A
	SERVICE_CONTROL_NETBINDENABLE                                          = 0x00000009
	SERVICE_CONTROL_NETBINDREMOVE                                          = 0x00000008
	SERVICE_CONTROL_PARAMCHANGE                                            = 0x00000006
	SERVICE_CONTROL_PAUSE                                                  = 0x00000002
	SERVICE_CONTROL_POWEREVENT                                             = 0x0000000D
	SERVICE_CONTROL_SESSIONCHANGE                                          = 0x0000000E
	SERVICE_CONTROL_SHUTDOWN                                               = 0x00000005
	SERVICE_CONTROL_STOP                                                   = 0x00000001
	SERVICE_DEMAND_START                                                   = 0x00000003
	SERVICE_DISABLED                                                       = 0x00000004
	SERVICE_DRIVER                                                         = 11
	SERVICE_ENUMERATE_DEPENDENTS                                           = 0x0008
	SERVICE_ERROR_CRITICAL                                                 = 0x00000003
	SERVICE_ERROR_IGNORE                                                   = 0x00000000
	SERVICE_ERROR_NORMAL                                                   = 0x00000001
	SERVICE_ERROR_SEVERE                                                   = 0x00000002
	SERVICE_FILE_SYSTEM_DRIVER                                             = 0x00000002
	SERVICE_GUARANTEED                                                     = 0x80040000
	SERVICE_INACTIVE                                                       = 0x00000002
	SERVICE_INTERACTIVE_PROCESS                                            = 0x00000100
	SERVICE_INTERROGATE                                                    = 0x0080
	SERVICE_KERNEL_DRIVER                                                  = 0x00000001
	SERVICE_MULTIPLE                                                       = 1
	SERVICE_NO_CHANGE                                                      = 0xffffffff
	SERVICE_NO_QOS_SIGNALING                                               = 0x40000000
	SERVICE_NO_TRAFFIC_CONTROL                                             = 0x81000000
	SERVICE_PAUSED                                                         = 0x00000007
	SERVICE_PAUSE_CONTINUE                                                 = 0x0040
	SERVICE_PAUSE_PENDING                                                  = 0x00000006
	SERVICE_QUALITATIVE                                                    = 0x80200000
	SERVICE_QUERY_CONFIG                                                   = 0x0001
	SERVICE_QUERY_STATUS                                                   = 0x0004
	SERVICE_RECOGNIZER_DRIVER                                              = 0x00000008
	SERVICE_RUNNING                                                        = 0x00000004
	SERVICE_RUNS_IN_SYSTEM_PROCESS                                         = 0x00000001
	SERVICE_START                                                          = 0x0010
	SERVICE_START_PENDING                                                  = 0x00000002
	SERVICE_STATE_ALL                                                      = 3
	SERVICE_STOP                                                           = 0x0020
	SERVICE_STOPPED                                                        = 0x00000001
	SERVICE_STOP_PENDING                                                   = 0x00000003
	SERVICE_SYSTEM_START                                                   = 0x00000001
	SERVICE_TYPE_ALL                                                       = 319
	SERVICE_TYPE_VALUE_IPXPORTA                                            = "IpxSocket"
	SERVICE_TYPE_VALUE_OBJECTIDA                                           = "ObjectId"
	SERVICE_TYPE_VALUE_SAPIDA                                              = "SapId"
	SERVICE_TYPE_VALUE_TCPPORTA                                            = "TcpPort"
	SERVICE_TYPE_VALUE_UDPPORTA                                            = "UdpPort"
	SERVICE_USER_DEFINED_CONTROL                                           = 0x0100
	SERVICE_WIN32                                                          = 48
	SERVICE_WIN32_OWN_PROCESS                                              = 0x00000010
	SERVICE_WIN32_SHARE_PROCESS                                            = 0x00000020
	SESSION_ALL_ACCESS                                                     = 983043
	SESSION_MODIFY_ACCESS                                                  = 0x2
	SESSION_QUERY_ACCESS                                                   = 0x1
	SETABORTPROC                                                           = 9
	SETALLJUSTVALUES                                                       = 771
	SETBREAK                                                               = 8
	SETCHARSET                                                             = 772
	SETCOLORTABLE                                                          = 4
	SETCOPYCOUNT                                                           = 17
	SETDIBSCALING                                                          = 32
	SETDTR                                                                 = 5
	SETICMPROFILE_EMBEDED                                                  = 0x00000001
	SETKERNTRACK                                                           = 770
	SETLINECAP                                                             = 21
	SETLINEJOIN                                                            = 22
	SETMITERLIMIT                                                          = 23
	SETRTS                                                                 = 3
	SETXOFF                                                                = 1
	SETXON                                                                 = 2
	SET_ARC_DIRECTION                                                      = 4102
	SET_BACKGROUND_COLOR                                                   = 4103
	SET_BOUNDS                                                             = 4109
	SET_CLIP_BOX                                                           = 4108
	SET_MIRROR_MODE                                                        = 4110
	SET_POLY_MODE                                                          = 4104
	SET_SCREEN_ANGLE                                                       = 4105
	SET_SPREAD                                                             = 4106
	SET_TAPE_DRIVE_INFORMATION                                             = 1
	SET_TAPE_MEDIA_INFORMATION                                             = 0
	SEVERITY_ERROR                                                         = 1
	SEVERITY_SUCCESS                                                       = 0
	SE_DACL_AUTO_INHERITED                                                 = 1024
	SE_DACL_AUTO_INHERIT_REQ                                               = 256
	SE_DACL_DEFAULTED                                                      = 8
	SE_DACL_PRESENT                                                        = 4
	SE_DACL_PROTECTED                                                      = 4096
	SE_GROUP_DEFAULTED                                                     = 2
	SE_GROUP_ENABLED                                                       = 4
	SE_GROUP_ENABLED_BY_DEFAULT                                            = 2
	SE_GROUP_INTEGRITY                                                     = 32
	SE_GROUP_INTEGRITY_ENABLED                                             = 64
	SE_GROUP_LOGON_ID                                                      = 3221225472
	SE_GROUP_MANDATORY                                                     = 1
	SE_GROUP_OWNER                                                         = 8
	SE_GROUP_RESOURCE                                                      = 536870912
	SE_GROUP_USE_FOR_DENY_ONLY                                             = 16
	SE_GROUP_VALID_ATTRIBUTES                                              = 3758096511
	SE_LEARNING_MODE_FLAG_PERMISSIVE                                       = 0x00000001
	SE_OWNER_DEFAULTED                                                     = 1
	SE_PRIVILEGE_ENABLED                                                   = 2
	SE_PRIVILEGE_ENABLED_BY_DEFAULT                                        = 1
	SE_PRIVILEGE_REMOVED                                                   = 4
	SE_PRIVILEGE_USED_FOR_ACCESS                                           = 2147483648
	SE_PRIVILEGE_VALID_ATTRIBUTES                                          = 2147483655
	SE_RM_CONTROL_VALID                                                    = 16384
	SE_SACL_AUTO_INHERITED                                                 = 2048
	SE_SACL_AUTO_INHERIT_REQ                                               = 512
	SE_SACL_DEFAULTED                                                      = 32
	SE_SACL_PRESENT                                                        = 16
	SE_SACL_PROTECTED                                                      = 8192
	SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE                               = 0x00000002
	SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE                               = 0x00000001
	SE_SECURITY_DESCRIPTOR_VALID_FLAGS                                     = 0x00000003
	SE_SELF_RELATIVE                                                       = 32768
	SG_CONSTRAINED_GROUP                                                   = 0x02
	SG_UNCONSTRAINED_GROUP                                                 = 0x01
	SHADEBLENDCAPS                                                         = 120
	SHIFTJIS_CHARSET                                                       = 128
	SHIFT_PRESSED                                                          = 0x10
	SHOW_FULLSCREEN                                                        = 3
	SHOW_ICONWINDOW                                                        = 2
	SHOW_OPENNOACTIVATE                                                    = 4
	SHOW_OPENWINDOW                                                        = 1
	SHRT_MAX                                                               = 32767
	SHRT_MIN                                                               = -32768
	SHTDN_REASON_FLAG_CLEAN_UI                                             = 0x04000000
	SHTDN_REASON_FLAG_COMMENT_REQUIRED                                     = 0x01000000
	SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED                            = 0x02000000
	SHTDN_REASON_FLAG_DIRTY_UI                                             = 0x08000000
	SHTDN_REASON_FLAG_PLANNED                                              = 0x80000000
	SHTDN_REASON_FLAG_USER_DEFINED                                         = 0x40000000
	SHTDN_REASON_LEGACY_API                                                = 2147942400
	SHTDN_REASON_MAJOR_APPLICATION                                         = 0x00040000
	SHTDN_REASON_MAJOR_HARDWARE                                            = 0x00010000
	SHTDN_REASON_MAJOR_LEGACY_API                                          = 0x00070000
	SHTDN_REASON_MAJOR_NONE                                                = 0x00000000
	SHTDN_REASON_MAJOR_OPERATINGSYSTEM                                     = 0x00020000
	SHTDN_REASON_MAJOR_OTHER                                               = 0x00000000
	SHTDN_REASON_MAJOR_POWER                                               = 0x00060000
	SHTDN_REASON_MAJOR_SOFTWARE                                            = 0x00030000
	SHTDN_REASON_MAJOR_SYSTEM                                              = 0x00050000
	SHTDN_REASON_MINOR_BLUESCREEN                                          = 0x0000000F
	SHTDN_REASON_MINOR_CORDUNPLUGGED                                       = 0x0000000b
	SHTDN_REASON_MINOR_DC_DEMOTION                                         = 0x00000022
	SHTDN_REASON_MINOR_DC_PROMOTION                                        = 0x00000021
	SHTDN_REASON_MINOR_DISK                                                = 0x00000007
	SHTDN_REASON_MINOR_ENVIRONMENT                                         = 0x0000000c
	SHTDN_REASON_MINOR_HARDWARE_DRIVER                                     = 0x0000000d
	SHTDN_REASON_MINOR_HOTFIX                                              = 0x00000011
	SHTDN_REASON_MINOR_HOTFIX_UNINSTALL                                    = 0x00000017
	SHTDN_REASON_MINOR_HUNG                                                = 0x00000005
	SHTDN_REASON_MINOR_INSTALLATION                                        = 0x00000002
	SHTDN_REASON_MINOR_MAINTENANCE                                         = 0x00000001
	SHTDN_REASON_MINOR_MMC                                                 = 0x00000019
	SHTDN_REASON_MINOR_NETWORKCARD                                         = 0x00000009
	SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY                                = 0x00000014
	SHTDN_REASON_MINOR_NONE                                                = 0x000000ff
	SHTDN_REASON_MINOR_OTHER                                               = 0x00000000
	SHTDN_REASON_MINOR_OTHERDRIVER                                         = 0x0000000e
	SHTDN_REASON_MINOR_POWER_SUPPLY                                        = 0x0000000a
	SHTDN_REASON_MINOR_PROCESSOR                                           = 0x00000008
	SHTDN_REASON_MINOR_RECONFIG                                            = 0x00000004
	SHTDN_REASON_MINOR_SECURITY                                            = 0x00000013
	SHTDN_REASON_MINOR_SECURITYFIX                                         = 0x00000012
	SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL                               = 0x00000018
	SHTDN_REASON_MINOR_SERVICEPACK                                         = 0x00000010
	SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL                               = 0x00000016
	SHTDN_REASON_MINOR_SYSTEMRESTORE                                       = 0x0000001a
	SHTDN_REASON_MINOR_TERMSRV                                             = 0x00000020
	SHTDN_REASON_MINOR_UNSTABLE                                            = 0x00000006
	SHTDN_REASON_MINOR_UPGRADE                                             = 0x00000003
	SHTDN_REASON_MINOR_WMI                                                 = 0x00000015
	SHTDN_REASON_UNKNOWN                                                   = 255
	SHTDN_REASON_VALID_BIT_MASK                                            = 0xc0ffffff
	SHUTDOWN_NORETRY                                                       = 0x1
	SHUTDOWN_TYPE_LEN                                                      = 32
	SID_DEFINED                                                            = 0
	SID_HASH_SIZE                                                          = 32
	SID_IDENTIFIER_AUTHORITY_DEFINED                                       = 0
	SID_MAX_SUB_AUTHORITIES                                                = 15
	SID_RECOMMENDED_SUB_AUTHORITIES                                        = 1
	SID_REVISION                                                           = 1
	SIF_ALL                                                                = 23
	SIF_DISABLENOSCROLL                                                    = 0x0008
	SIF_PAGE                                                               = 0x0002
	SIF_POS                                                                = 0x0004
	SIF_RANGE                                                              = 0x0001
	SIF_TRACKPOS                                                           = 0x0010
	SIGABRT                                                                = 22
	SIGABRT2                                                               = 22
	SIGABRT_COMPAT                                                         = 6
	SIGBREAK                                                               = 21
	SIGBUS                                                                 = 10
	SIGFPE                                                                 = 8
	SIGILL                                                                 = 4
	SIGINT                                                                 = 2
	SIGSEGV                                                                = 11
	SIGTERM                                                                = 15
	SIGTRAP                                                                = 5
	SIG_ATOMIC_MAX                                                         = 2147483647
	SIG_ATOMIC_MIN                                                         = -2147483648
	SIMPLEREGION                                                           = 2
	SING                                                                   = 2
	SIO_ABSORB_RTRALERT                                                    = 2550136837
	SIO_ADDRESS_LIST_CHANGE                                                = 671088663
	SIO_ADDRESS_LIST_QUERY                                                 = 1207959574
	SIO_ADDRESS_LIST_SORT                                                  = 3355443225
	SIO_ASSOCIATE_HANDLE                                                   = 2281701377
	SIO_ENABLE_CIRCULAR_QUEUEING                                           = 671088642
	SIO_FIND_ROUTE                                                         = 1207959555
	SIO_FLUSH                                                              = 671088644
	SIO_GET_BROADCAST_ADDRESS                                              = 1207959557
	SIO_GET_EXTENSION_FUNCTION_POINTER                                     = 3355443206
	SIO_GET_GROUP_QOS                                                      = 3355443208
	SIO_GET_QOS                                                            = 3355443207
	SIO_INDEX_ADD_MCAST                                                    = 2550136842
	SIO_INDEX_BIND                                                         = 2550136840
	SIO_INDEX_DEL_MCAST                                                    = 2550136843
	SIO_INDEX_MCASTIF                                                      = 2550136841
	SIO_KEEPALIVE_VALS                                                     = 2550136836
	SIO_LIMIT_BROADCASTS                                                   = 2550136839
	SIO_MULTICAST_SCOPE                                                    = 2281701386
	SIO_MULTIPOINT_LOOPBACK                                                = 2281701385
	SIO_NSP_NOTIFY_CHANGE                                                  = 2281701401
	SIO_QUERY_TARGET_PNP_HANDLE                                            = 1207959576
	SIO_RCVALL                                                             = 2550136833
	SIO_RCVALL_IGMPMCAST                                                   = 2550136835
	SIO_RCVALL_MCAST                                                       = 2550136834
	SIO_ROUTING_INTERFACE_CHANGE                                           = 2281701397
	SIO_ROUTING_INTERFACE_QUERY                                            = 3355443220
	SIO_SET_GROUP_QOS                                                      = 2281701388
	SIO_SET_QOS                                                            = 2281701387
	SIO_TRANSLATE_HANDLE                                                   = 3355443213
	SIO_UCAST_IF                                                           = 2550136838
	SIZEFULLSCREEN                                                         = 2
	SIZEICONIC                                                             = 1
	SIZENORMAL                                                             = 0
	SIZEOF_RFPO_DATA                                                       = 16
	SIZEPALETTE                                                            = 104
	SIZEZOOMHIDE                                                           = 4
	SIZEZOOMSHOW                                                           = 3
	SIZE_MAX                                                               = 18446744073709551615
	SIZE_MAXHIDE                                                           = 4
	SIZE_MAXIMIZED                                                         = 2
	SIZE_MAXSHOW                                                           = 3
	SIZE_MINIMIZED                                                         = 1
	SIZE_RESTORED                                                          = 0
	SKF_AUDIBLEFEEDBACK                                                    = 0x00000040
	SKF_AVAILABLE                                                          = 0x00000002
	SKF_CONFIRMHOTKEY                                                      = 0x00000008
	SKF_HOTKEYACTIVE                                                       = 0x00000004
	SKF_HOTKEYSOUND                                                        = 0x00000010
	SKF_INDICATOR                                                          = 0x00000020
	SKF_LALTLATCHED                                                        = 0x10000000
	SKF_LALTLOCKED                                                         = 0x00100000
	SKF_LCTLLATCHED                                                        = 0x04000000
	SKF_LCTLLOCKED                                                         = 0x00040000
	SKF_LSHIFTLATCHED                                                      = 0x01000000
	SKF_LSHIFTLOCKED                                                       = 0x00010000
	SKF_LWINLATCHED                                                        = 0x40000000
	SKF_LWINLOCKED                                                         = 0x00400000
	SKF_RALTLATCHED                                                        = 0x20000000
	SKF_RALTLOCKED                                                         = 0x00200000
	SKF_RCTLLATCHED                                                        = 0x08000000
	SKF_RCTLLOCKED                                                         = 0x00080000
	SKF_RSHIFTLATCHED                                                      = 0x02000000
	SKF_RSHIFTLOCKED                                                       = 0x00020000
	SKF_RWINLATCHED                                                        = 0x80000000
	SKF_RWINLOCKED                                                         = 0x00800000
	SKF_STICKYKEYSON                                                       = 0x00000001
	SKF_TRISTATE                                                           = 0x00000080
	SKF_TWOKEYSOFF                                                         = 0x00000100
	SLE_ERROR                                                              = 0x00000001
	SLE_MINORERROR                                                         = 0x00000002
	SLE_WARNING                                                            = 0x00000003
	SMTO_ABORTIFHUNG                                                       = 0x0002
	SMTO_BLOCK                                                             = 0x0001
	SMTO_NORMAL                                                            = 0x0000
	SMTO_NOTIMEOUTIFNOTHUNG                                                = 0x0008
	SM_ARRANGE                                                             = 56
	SM_CARETBLINKINGENABLED                                                = 0x2002
	SM_CLEANBOOT                                                           = 67
	SM_CMETRICS                                                            = 91
	SM_CMONITORS                                                           = 80
	SM_CMOUSEBUTTONS                                                       = 43
	SM_CXBORDER                                                            = 5
	SM_CXCURSOR                                                            = 13
	SM_CXDLGFRAME                                                          = 7
	SM_CXDOUBLECLK                                                         = 36
	SM_CXDRAG                                                              = 68
	SM_CXEDGE                                                              = 45
	SM_CXFIXEDFRAME                                                        = 7
	SM_CXFOCUSBORDER                                                       = 83
	SM_CXFRAME                                                             = 32
	SM_CXFULLSCREEN                                                        = 16
	SM_CXHSCROLL                                                           = 21
	SM_CXHTHUMB                                                            = 10
	SM_CXICON                                                              = 11
	SM_CXICONSPACING                                                       = 38
	SM_CXMAXIMIZED                                                         = 61
	SM_CXMAXTRACK                                                          = 59
	SM_CXMENUCHECK                                                         = 71
	SM_CXMENUSIZE                                                          = 54
	SM_CXMIN                                                               = 28
	SM_CXMINIMIZED                                                         = 57
	SM_CXMINSPACING                                                        = 47
	SM_CXMINTRACK                                                          = 34
	SM_CXSCREEN                                                            = 0
	SM_CXSIZE                                                              = 30
	SM_CXSIZEFRAME                                                         = 32
	SM_CXSMICON                                                            = 49
	SM_CXSMSIZE                                                            = 52
	SM_CXVIRTUALSCREEN                                                     = 78
	SM_CXVSCROLL                                                           = 2
	SM_CYBORDER                                                            = 6
	SM_CYCAPTION                                                           = 4
	SM_CYCURSOR                                                            = 14
	SM_CYDLGFRAME                                                          = 8
	SM_CYDOUBLECLK                                                         = 37
	SM_CYDRAG                                                              = 69
	SM_CYEDGE                                                              = 46
	SM_CYFIXEDFRAME                                                        = 8
	SM_CYFOCUSBORDER                                                       = 84
	SM_CYFRAME                                                             = 33
	SM_CYFULLSCREEN                                                        = 17
	SM_CYHSCROLL                                                           = 3
	SM_CYICON                                                              = 12
	SM_CYICONSPACING                                                       = 39
	SM_CYKANJIWINDOW                                                       = 18
	SM_CYMAXIMIZED                                                         = 62
	SM_CYMAXTRACK                                                          = 60
	SM_CYMENU                                                              = 15
	SM_CYMENUCHECK                                                         = 72
	SM_CYMENUSIZE                                                          = 55
	SM_CYMIN                                                               = 29
	SM_CYMINIMIZED                                                         = 58
	SM_CYMINSPACING                                                        = 48
	SM_CYMINTRACK                                                          = 35
	SM_CYSCREEN                                                            = 1
	SM_CYSIZE                                                              = 31
	SM_CYSIZEFRAME                                                         = 33
	SM_CYSMCAPTION                                                         = 51
	SM_CYSMICON                                                            = 50
	SM_CYSMSIZE                                                            = 53
	SM_CYVIRTUALSCREEN                                                     = 79
	SM_CYVSCROLL                                                           = 20
	SM_CYVTHUMB                                                            = 9
	SM_DBCSENABLED                                                         = 42
	SM_DEBUG                                                               = 22
	SM_IMMENABLED                                                          = 82
	SM_MEDIACENTER                                                         = 87
	SM_MENUDROPALIGNMENT                                                   = 40
	SM_MIDEASTENABLED                                                      = 74
	SM_MOUSEPRESENT                                                        = 19
	SM_MOUSEWHEELPRESENT                                                   = 75
	SM_NETWORK                                                             = 63
	SM_PENWINDOWS                                                          = 41
	SM_REMOTECONTROL                                                       = 0x2001
	SM_REMOTESESSION                                                       = 0x1000
	SM_RESERVED1                                                           = 24
	SM_RESERVED2                                                           = 25
	SM_RESERVED3                                                           = 26
	SM_RESERVED4                                                           = 27
	SM_SAMEDISPLAYFORMAT                                                   = 81
	SM_SECURE                                                              = 44
	SM_SERVERR2                                                            = 89
	SM_SHOWSOUNDS                                                          = 70
	SM_SHUTTINGDOWN                                                        = 0x2000
	SM_SLOWMACHINE                                                         = 73
	SM_STARTER                                                             = 88
	SM_SWAPBUTTON                                                          = 23
	SM_TABLETPC                                                            = 86
	SM_XVIRTUALSCREEN                                                      = 76
	SM_YVIRTUALSCREEN                                                      = 77
	SNAPSHOT_POLICY_ALWAYS                                                 = 1
	SNAPSHOT_POLICY_NEVER                                                  = 0
	SNAPSHOT_POLICY_UNPLANNED                                              = 2
	SOCKET_ERROR                                                           = -1
	SOCK_DGRAM                                                             = 2
	SOCK_RAW                                                               = 3
	SOCK_RDM                                                               = 4
	SOCK_SEQPACKET                                                         = 5
	SOCK_STREAM                                                            = 1
	SOFTKEYBOARD_TYPE_C1                                                   = 0x0002
	SOFTKEYBOARD_TYPE_T1                                                   = 0x0001
	SOL_SOCKET                                                             = 0xffff
	SOMAXCONN                                                              = 0x7fffffff
	SORT_CHINESE_BIG5                                                      = 0x0
	SORT_CHINESE_BOPOMOFO                                                  = 0x3
	SORT_CHINESE_PRC                                                       = 0x2
	SORT_CHINESE_PRCP                                                      = 0x0
	SORT_CHINESE_RADICALSTROKE                                             = 0x4
	SORT_CHINESE_UNICODE                                                   = 0x1
	SORT_DEFAULT                                                           = 0x0
	SORT_GEORGIAN_MODERN                                                   = 0x1
	SORT_GEORGIAN_TRADITIONAL                                              = 0x0
	SORT_GERMAN_PHONE_BOOK                                                 = 0x1
	SORT_HUNGARIAN_DEFAULT                                                 = 0x0
	SORT_HUNGARIAN_TECHNICAL                                               = 0x1
	SORT_INVARIANT_MATH                                                    = 0x1
	SORT_JAPANESE_RADICALSTROKE                                            = 0x4
	SORT_JAPANESE_UNICODE                                                  = 0x1
	SORT_JAPANESE_XJIS                                                     = 0x0
	SORT_KOREAN_KSC                                                        = 0x0
	SORT_KOREAN_UNICODE                                                    = 0x1
	SORT_STRINGSORT                                                        = 0x00001000
	SOUND_SYSTEM_APPEND                                                    = 14
	SOUND_SYSTEM_APPSTART                                                  = 12
	SOUND_SYSTEM_BEEP                                                      = 3
	SOUND_SYSTEM_ERROR                                                     = 4
	SOUND_SYSTEM_FAULT                                                     = 13
	SOUND_SYSTEM_INFORMATION                                               = 7
	SOUND_SYSTEM_MAXIMIZE                                                  = 8
	SOUND_SYSTEM_MENUCOMMAND                                               = 15
	SOUND_SYSTEM_MENUPOPUP                                                 = 16
	SOUND_SYSTEM_MINIMIZE                                                  = 9
	SOUND_SYSTEM_QUESTION                                                  = 5
	SOUND_SYSTEM_RESTOREDOWN                                               = 11
	SOUND_SYSTEM_RESTOREUP                                                 = 10
	SOUND_SYSTEM_SHUTDOWN                                                  = 2
	SOUND_SYSTEM_STARTUP                                                   = 1
	SOUND_SYSTEM_WARNING                                                   = 6
	SO_ACCEPTCONN                                                          = 0x0002
	SO_BROADCAST                                                           = 0x0020
	SO_CONDITIONAL_ACCEPT                                                  = 0x3002
	SO_DEBUG                                                               = 0x0001
	SO_DONTROUTE                                                           = 0x0010
	SO_ERROR                                                               = 0x1007
	SO_GROUP_ID                                                            = 0x2001
	SO_GROUP_PRIORITY                                                      = 0x2002
	SO_KEEPALIVE                                                           = 0x0008
	SO_LINGER                                                              = 0x0080
	SO_MAX_MSG_SIZE                                                        = 0x2003
	SO_OOBINLINE                                                           = 0x0100
	SO_PROTOCOL_INFO                                                       = 8196
	SO_PROTOCOL_INFOA                                                      = 0x2004
	SO_PROTOCOL_INFOW                                                      = 0x2005
	SO_RCVBUF                                                              = 0x1002
	SO_RCVLOWAT                                                            = 0x1004
	SO_RCVTIMEO                                                            = 0x1006
	SO_REUSEADDR                                                           = 0x0004
	SO_SNDBUF                                                              = 0x1001
	SO_SNDLOWAT                                                            = 0x1003
	SO_SNDTIMEO                                                            = 0x1005
	SO_TYPE                                                                = 0x1008
	SO_USELOOPBACK                                                         = 0x0040
	SPACEPARITY                                                            = 4
	SPCLPASSTHROUGH2                                                       = 4568
	SPECIFIC_RIGHTS_ALL                                                    = 65535
	SPECSTRINGS_H                                                          = 0
	SPIF_SENDCHANGE                                                        = 2
	SPIF_SENDWININICHANGE                                                  = 0x0002
	SPIF_UPDATEINIFILE                                                     = 0x0001
	SPI_GETACCESSTIMEOUT                                                   = 0x003C
	SPI_GETACTIVEWINDOWTRACKING                                            = 0x1000
	SPI_GETACTIVEWNDTRKTIMEOUT                                             = 0x2002
	SPI_GETACTIVEWNDTRKZORDER                                              = 0x100C
	SPI_GETANIMATION                                                       = 0x0048
	SPI_GETBEEP                                                            = 0x0001
	SPI_GETBLOCKSENDINPUTRESETS                                            = 0x1026
	SPI_GETBORDER                                                          = 0x0005
	SPI_GETCARETWIDTH                                                      = 0x2006
	SPI_GETCOMBOBOXANIMATION                                               = 0x1004
	SPI_GETCURSORSHADOW                                                    = 0x101A
	SPI_GETDEFAULTINPUTLANG                                                = 0x0059
	SPI_GETDESKWALLPAPER                                                   = 0x0073
	SPI_GETDRAGFULLWINDOWS                                                 = 0x0026
	SPI_GETDROPSHADOW                                                      = 0x1024
	SPI_GETFASTTASKSWITCH                                                  = 0x0023
	SPI_GETFILTERKEYS                                                      = 0x0032
	SPI_GETFLATMENU                                                        = 0x1022
	SPI_GETFOCUSBORDERHEIGHT                                               = 0x2010
	SPI_GETFOCUSBORDERWIDTH                                                = 0x200E
	SPI_GETFONTSMOOTHING                                                   = 0x004A
	SPI_GETFONTSMOOTHINGCONTRAST                                           = 0x200C
	SPI_GETFONTSMOOTHINGORIENTATION                                        = 0x2012
	SPI_GETFONTSMOOTHINGTYPE                                               = 0x200A
	SPI_GETFOREGROUNDFLASHCOUNT                                            = 0x2004
	SPI_GETFOREGROUNDLOCKTIMEOUT                                           = 0x2000
	SPI_GETGRADIENTCAPTIONS                                                = 0x1008
	SPI_GETGRIDGRANULARITY                                                 = 0x0012
	SPI_GETHIGHCONTRAST                                                    = 0x0042
	SPI_GETHOTTRACKING                                                     = 0x100E
	SPI_GETICONMETRICS                                                     = 0x002D
	SPI_GETICONTITLELOGFONT                                                = 0x001F
	SPI_GETICONTITLEWRAP                                                   = 0x0019
	SPI_GETKEYBOARDCUES                                                    = 0x100A
	SPI_GETKEYBOARDDELAY                                                   = 0x0016
	SPI_GETKEYBOARDPREF                                                    = 0x0044
	SPI_GETKEYBOARDSPEED                                                   = 0x000A
	SPI_GETLISTBOXSMOOTHSCROLLING                                          = 0x1006
	SPI_GETLOWPOWERACTIVE                                                  = 0x0053
	SPI_GETLOWPOWERTIMEOUT                                                 = 0x004F
	SPI_GETMENUANIMATION                                                   = 0x1002
	SPI_GETMENUDROPALIGNMENT                                               = 0x001B
	SPI_GETMENUFADE                                                        = 0x1012
	SPI_GETMENUSHOWDELAY                                                   = 0x006A
	SPI_GETMENUUNDERLINES                                                  = 4106
	SPI_GETMINIMIZEDMETRICS                                                = 0x002B
	SPI_GETMOUSE                                                           = 0x0003
	SPI_GETMOUSECLICKLOCK                                                  = 0x101E
	SPI_GETMOUSECLICKLOCKTIME                                              = 0x2008
	SPI_GETMOUSEHOVERHEIGHT                                                = 0x0064
	SPI_GETMOUSEHOVERTIME                                                  = 0x0066
	SPI_GETMOUSEHOVERWIDTH                                                 = 0x0062
	SPI_GETMOUSEKEYS                                                       = 0x0036
	SPI_GETMOUSESONAR                                                      = 0x101C
	SPI_GETMOUSESPEED                                                      = 0x0070
	SPI_GETMOUSETRAILS                                                     = 0x005E
	SPI_GETMOUSEVANISH                                                     = 0x1020
	SPI_GETNONCLIENTMETRICS                                                = 0x0029
	SPI_GETPOWEROFFACTIVE                                                  = 0x0054
	SPI_GETPOWEROFFTIMEOUT                                                 = 0x0050
	SPI_GETSCREENREADER                                                    = 0x0046
	SPI_GETSCREENSAVEACTIVE                                                = 0x0010
	SPI_GETSCREENSAVERRUNNING                                              = 0x0072
	SPI_GETSCREENSAVETIMEOUT                                               = 0x000E
	SPI_GETSELECTIONFADE                                                   = 0x1014
	SPI_GETSERIALKEYS                                                      = 0x003E
	SPI_GETSHOWIMEUI                                                       = 0x006E
	SPI_GETSHOWSOUNDS                                                      = 0x0038
	SPI_GETSNAPTODEFBUTTON                                                 = 0x005F
	SPI_GETSOUNDSENTRY                                                     = 0x0040
	SPI_GETSTICKYKEYS                                                      = 0x003A
	SPI_GETTOGGLEKEYS                                                      = 0x0034
	SPI_GETTOOLTIPANIMATION                                                = 0x1016
	SPI_GETTOOLTIPFADE                                                     = 0x1018
	SPI_GETUIEFFECTS                                                       = 0x103E
	SPI_GETWHEELSCROLLLINES                                                = 0x0068
	SPI_GETWINDOWSEXTENSION                                                = 0x005C
	SPI_GETWORKAREA                                                        = 0x0030
	SPI_ICONHORIZONTALSPACING                                              = 0x000D
	SPI_ICONVERTICALSPACING                                                = 0x0018
	SPI_LANGDRIVER                                                         = 0x000C
	SPI_SCREENSAVERRUNNING                                                 = 97
	SPI_SETACCESSTIMEOUT                                                   = 0x003D
	SPI_SETACTIVEWINDOWTRACKING                                            = 0x1001
	SPI_SETACTIVEWNDTRKTIMEOUT                                             = 0x2003
	SPI_SETACTIVEWNDTRKZORDER                                              = 0x100D
	SPI_SETANIMATION                                                       = 0x0049
	SPI_SETBEEP                                                            = 0x0002
	SPI_SETBLOCKSENDINPUTRESETS                                            = 0x1027
	SPI_SETBORDER                                                          = 0x0006
	SPI_SETCARETWIDTH                                                      = 0x2007
	SPI_SETCOMBOBOXANIMATION                                               = 0x1005
	SPI_SETCURSORS                                                         = 0x0057
	SPI_SETCURSORSHADOW                                                    = 0x101B
	SPI_SETDEFAULTINPUTLANG                                                = 0x005A
	SPI_SETDESKPATTERN                                                     = 0x0015
	SPI_SETDESKWALLPAPER                                                   = 0x0014
	SPI_SETDOUBLECLICKTIME                                                 = 0x0020
	SPI_SETDOUBLECLKHEIGHT                                                 = 0x001E
	SPI_SETDOUBLECLKWIDTH                                                  = 0x001D
	SPI_SETDRAGFULLWINDOWS                                                 = 0x0025
	SPI_SETDRAGHEIGHT                                                      = 0x004D
	SPI_SETDRAGWIDTH                                                       = 0x004C
	SPI_SETDROPSHADOW                                                      = 0x1025
	SPI_SETFASTTASKSWITCH                                                  = 0x0024
	SPI_SETFILTERKEYS                                                      = 0x0033
	SPI_SETFLATMENU                                                        = 0x1023
	SPI_SETFOCUSBORDERHEIGHT                                               = 0x2011
	SPI_SETFOCUSBORDERWIDTH                                                = 0x200F
	SPI_SETFONTSMOOTHING                                                   = 0x004B
	SPI_SETFONTSMOOTHINGCONTRAST                                           = 0x200D
	SPI_SETFONTSMOOTHINGORIENTATION                                        = 0x2013
	SPI_SETFONTSMOOTHINGTYPE                                               = 0x200B
	SPI_SETFOREGROUNDFLASHCOUNT                                            = 0x2005
	SPI_SETFOREGROUNDLOCKTIMEOUT                                           = 0x2001
	SPI_SETGRADIENTCAPTIONS                                                = 0x1009
	SPI_SETGRIDGRANULARITY                                                 = 0x0013
	SPI_SETHANDHELD                                                        = 0x004E
	SPI_SETHIGHCONTRAST                                                    = 0x0043
	SPI_SETHOTTRACKING                                                     = 0x100F
	SPI_SETICONMETRICS                                                     = 0x002E
	SPI_SETICONS                                                           = 0x0058
	SPI_SETICONTITLELOGFONT                                                = 0x0022
	SPI_SETICONTITLEWRAP                                                   = 0x001A
	SPI_SETKEYBOARDCUES                                                    = 0x100B
	SPI_SETKEYBOARDDELAY                                                   = 0x0017
	SPI_SETKEYBOARDPREF                                                    = 0x0045
	SPI_SETKEYBOARDSPEED                                                   = 0x000B
	SPI_SETLANGTOGGLE                                                      = 0x005B
	SPI_SETLISTBOXSMOOTHSCROLLING                                          = 0x1007
	SPI_SETLOWPOWERACTIVE                                                  = 0x0055
	SPI_SETLOWPOWERTIMEOUT                                                 = 0x0051
	SPI_SETMENUANIMATION                                                   = 0x1003
	SPI_SETMENUDROPALIGNMENT                                               = 0x001C
	SPI_SETMENUFADE                                                        = 0x1013
	SPI_SETMENUSHOWDELAY                                                   = 0x006B
	SPI_SETMENUUNDERLINES                                                  = 4107
	SPI_SETMINIMIZEDMETRICS                                                = 0x002C
	SPI_SETMOUSE                                                           = 0x0004
	SPI_SETMOUSEBUTTONSWAP                                                 = 0x0021
	SPI_SETMOUSECLICKLOCK                                                  = 0x101F
	SPI_SETMOUSECLICKLOCKTIME                                              = 0x2009
	SPI_SETMOUSEHOVERHEIGHT                                                = 0x0065
	SPI_SETMOUSEHOVERTIME                                                  = 0x0067
	SPI_SETMOUSEHOVERWIDTH                                                 = 0x0063
	SPI_SETMOUSEKEYS                                                       = 0x0037
	SPI_SETMOUSESONAR                                                      = 0x101D
	SPI_SETMOUSESPEED                                                      = 0x0071
	SPI_SETMOUSETRAILS                                                     = 0x005D
	SPI_SETMOUSEVANISH                                                     = 0x1021
	SPI_SETNONCLIENTMETRICS                                                = 0x002A
	SPI_SETPENWINDOWS                                                      = 0x0031
	SPI_SETPOWEROFFACTIVE                                                  = 0x0056
	SPI_SETPOWEROFFTIMEOUT                                                 = 0x0052
	SPI_SETSCREENREADER                                                    = 0x0047
	SPI_SETSCREENSAVEACTIVE                                                = 0x0011
	SPI_SETSCREENSAVERRUNNING                                              = 0x0061
	SPI_SETSCREENSAVETIMEOUT                                               = 0x000F
	SPI_SETSELECTIONFADE                                                   = 0x1015
	SPI_SETSERIALKEYS                                                      = 0x003F
	SPI_SETSHOWIMEUI                                                       = 0x006F
	SPI_SETSHOWSOUNDS                                                      = 0x0039
	SPI_SETSNAPTODEFBUTTON                                                 = 0x0060
	SPI_SETSOUNDSENTRY                                                     = 0x0041
	SPI_SETSTICKYKEYS                                                      = 0x003B
	SPI_SETTOGGLEKEYS                                                      = 0x0035
	SPI_SETTOOLTIPANIMATION                                                = 0x1017
	SPI_SETTOOLTIPFADE                                                     = 0x1019
	SPI_SETUIEFFECTS                                                       = 0x103F
	SPI_SETWHEELSCROLLLINES                                                = 0x0069
	SPI_SETWORKAREA                                                        = 0x002F
	SPOINTER_32                                                            = 0
	SPVERSION_MASK                                                         = 0x0000FF00
	SP_APPABORT                                                            = -2
	SP_ERROR                                                               = -1
	SP_NOTREPORTED                                                         = 0x4000
	SP_OUTOFDISK                                                           = -4
	SP_OUTOFMEMORY                                                         = -5
	SP_USERABORT                                                           = -3
	SSF_AVAILABLE                                                          = 0x00000002
	SSF_INDICATOR                                                          = 0x00000004
	SSF_SOUNDSENTRYON                                                      = 0x00000001
	SSGF_DISPLAY                                                           = 3
	SSGF_NONE                                                              = 0
	SSIZE_MAX                                                              = 9223372036854775807
	SSTF_BORDER                                                            = 2
	SSTF_CHARS                                                             = 1
	SSTF_DISPLAY                                                           = 3
	SSTF_NONE                                                              = 0
	SSWF_CUSTOM                                                            = 4
	SSWF_DISPLAY                                                           = 3
	SSWF_NONE                                                              = 0
	SSWF_TITLE                                                             = 1
	SSWF_WINDOW                                                            = 2
	SS_BITMAP                                                              = 14
	SS_BLACKFRAME                                                          = 7
	SS_BLACKRECT                                                           = 4
	SS_CENTER                                                              = 1
	SS_CENTERIMAGE                                                         = 512
	SS_EDITCONTROL                                                         = 8192
	SS_ELLIPSISMASK                                                        = 49152
	SS_ENDELLIPSIS                                                         = 16384
	SS_ENHMETAFILE                                                         = 15
	SS_ETCHEDFRAME                                                         = 18
	SS_ETCHEDHORZ                                                          = 16
	SS_ETCHEDVERT                                                          = 17
	SS_GRAYFRAME                                                           = 8
	SS_GRAYRECT                                                            = 5
	SS_ICON                                                                = 3
	SS_LEFT                                                                = 0
	SS_LEFTNOWORDWRAP                                                      = 12
	SS_NOPREFIX                                                            = 128
	SS_NOTIFY                                                              = 256
	SS_OWNERDRAW                                                           = 13
	SS_PATHELLIPSIS                                                        = 32768
	SS_REALSIZECONTROL                                                     = 64
	SS_REALSIZEIMAGE                                                       = 2048
	SS_RIGHT                                                               = 2
	SS_RIGHTJUST                                                           = 1024
	SS_SIMPLE                                                              = 11
	SS_SUNKEN                                                              = 4096
	SS_TYPEMASK                                                            = 31
	SS_USERITEM                                                            = 10
	SS_WHITEFRAME                                                          = 9
	SS_WHITERECT                                                           = 6
	SS_WORDELLIPSIS                                                        = 49152
	STACK_SIZE_PARAM_IS_A_RESERVATION                                      = 0x10000
	STAMP_AXESLIST                                                         = 134245473
	STAMP_CFF2                                                             = 134248035
	STAMP_DESIGNVECTOR                                                     = 134248036
	STAMP_TRUETYPE_VARIATION                                               = 134248052
	STANDARD_RIGHTS_ALL                                                    = 2031616
	STANDARD_RIGHTS_EXECUTE                                                = 131072
	STANDARD_RIGHTS_READ                                                   = 131072
	STANDARD_RIGHTS_REQUIRED                                               = 983040
	STANDARD_RIGHTS_WRITE                                                  = 131072
	STARTDOC                                                               = 10
	STARTF_FORCEOFFFEEDBACK                                                = 0x00000080
	STARTF_FORCEONFEEDBACK                                                 = 0x00000040
	STARTF_PREVENTPINNING                                                  = 0x00002000
	STARTF_RUNFULLSCREEN                                                   = 0x00000020
	STARTF_TITLEISAPPID                                                    = 0x00001000
	STARTF_TITLEISLINKNAME                                                 = 0x00000800
	STARTF_USECOUNTCHARS                                                   = 0x00000008
	STARTF_USEFILLATTRIBUTE                                                = 0x00000010
	STARTF_USEHOTKEY                                                       = 0x00000200
	STARTF_USEPOSITION                                                     = 0x00000004
	STARTF_USESHOWWINDOW                                                   = 0x00000001
	STARTF_USESIZE                                                         = 0x00000002
	STARTF_USESTDHANDLES                                                   = 0x00000100
	STATE_SYSTEM_ALERT_HIGH                                                = 0x10000000
	STATE_SYSTEM_ALERT_LOW                                                 = 0x04000000
	STATE_SYSTEM_ALERT_MEDIUM                                              = 0x08000000
	STATE_SYSTEM_ANIMATED                                                  = 0x00004000
	STATE_SYSTEM_BUSY                                                      = 0x00000800
	STATE_SYSTEM_CHECKED                                                   = 0x00000010
	STATE_SYSTEM_COLLAPSED                                                 = 0x00000400
	STATE_SYSTEM_DEFAULT                                                   = 0x00000100
	STATE_SYSTEM_EXPANDED                                                  = 0x00000200
	STATE_SYSTEM_EXTSELECTABLE                                             = 0x02000000
	STATE_SYSTEM_FLOATING                                                  = 0x00001000
	STATE_SYSTEM_FOCUSABLE                                                 = 0x00100000
	STATE_SYSTEM_FOCUSED                                                   = 0x00000004
	STATE_SYSTEM_HOTTRACKED                                                = 0x00000080
	STATE_SYSTEM_INDETERMINATE                                             = 32
	STATE_SYSTEM_INVISIBLE                                                 = 0x00008000
	STATE_SYSTEM_LINKED                                                    = 0x00400000
	STATE_SYSTEM_MARQUEED                                                  = 0x00002000
	STATE_SYSTEM_MIXED                                                     = 0x00000020
	STATE_SYSTEM_MOVEABLE                                                  = 0x00040000
	STATE_SYSTEM_MULTISELECTABLE                                           = 0x01000000
	STATE_SYSTEM_OFFSCREEN                                                 = 0x00010000
	STATE_SYSTEM_PRESSED                                                   = 0x00000008
	STATE_SYSTEM_PROTECTED                                                 = 0x20000000
	STATE_SYSTEM_READONLY                                                  = 0x00000040
	STATE_SYSTEM_SELECTABLE                                                = 0x00200000
	STATE_SYSTEM_SELECTED                                                  = 0x00000002
	STATE_SYSTEM_SELFVOICING                                               = 0x00080000
	STATE_SYSTEM_SIZEABLE                                                  = 0x00020000
	STATE_SYSTEM_TRAVERSED                                                 = 0x00800000
	STATE_SYSTEM_UNAVAILABLE                                               = 0x00000001
	STATE_SYSTEM_VALID                                                     = 0x3FFFFFFF
	STDAPICALLTYPE                                                         = 0
	STDC_HEADERS                                                           = 1
	STDERR_FILENO                                                          = 2
	STDIN_FILENO                                                           = 0
	STDMETHODCALLTYPE                                                      = 0
	STDOUT_FILENO                                                          = 1
	STM_GETICON                                                            = 0x0171
	STM_GETIMAGE                                                           = 0x0173
	STM_MSGMAX                                                             = 0x0174
	STM_SETICON                                                            = 0x0170
	STM_SETIMAGE                                                           = 0x0172
	STN_CLICKED                                                            = 0
	STN_DBLCLK                                                             = 1
	STN_DISABLE                                                            = 3
	STN_ENABLE                                                             = 2
	STOCK_LAST                                                             = 19
	STREAM_CONTAINS_PROPERTIES                                             = 0x00000004
	STREAM_CONTAINS_SECURITY                                               = 0x00000002
	STREAM_MODIFIED_WHEN_READ                                              = 0x00000001
	STREAM_NORMAL_ATTRIBUTE                                                = 0x00000000
	STREAM_SPARSE_ATTRIBUTE                                                = 0x00000008
	STRETCHBLT                                                             = 2048
	STRETCH_ANDSCANS                                                       = 1
	STRETCH_DELETESCANS                                                    = 3
	STRETCH_HALFTONE                                                       = 4
	STRETCH_ORSCANS                                                        = 2
	STRICT                                                                 = 1
	STRUNCATE                                                              = 80
	STYLE_DESCRIPTION_SIZE                                                 = 32
	SUBLANG_AFRIKAANS_SOUTH_AFRICA                                         = 0x01
	SUBLANG_ALBANIAN_ALBANIA                                               = 0x01
	SUBLANG_ALSATIAN_FRANCE                                                = 0x01
	SUBLANG_AMHARIC_ETHIOPIA                                               = 0x01
	SUBLANG_ARABIC_ALGERIA                                                 = 0x05
	SUBLANG_ARABIC_BAHRAIN                                                 = 0x0f
	SUBLANG_ARABIC_EGYPT                                                   = 0x03
	SUBLANG_ARABIC_IRAQ                                                    = 0x02
	SUBLANG_ARABIC_JORDAN                                                  = 0x0b
	SUBLANG_ARABIC_KUWAIT                                                  = 0x0d
	SUBLANG_ARABIC_LEBANON                                                 = 0x0c
	SUBLANG_ARABIC_LIBYA                                                   = 0x04
	SUBLANG_ARABIC_MOROCCO                                                 = 0x06
	SUBLANG_ARABIC_OMAN                                                    = 0x08
	SUBLANG_ARABIC_QATAR                                                   = 0x10
	SUBLANG_ARABIC_SAUDI_ARABIA                                            = 0x01
	SUBLANG_ARABIC_SYRIA                                                   = 0x0a
	SUBLANG_ARABIC_TUNISIA                                                 = 0x07
	SUBLANG_ARABIC_UAE                                                     = 0x0e
	SUBLANG_ARABIC_YEMEN                                                   = 0x09
	SUBLANG_ARMENIAN_ARMENIA                                               = 0x01
	SUBLANG_ASSAMESE_INDIA                                                 = 0x01
	SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC                                = 0x02
	SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN                                   = 0x01
	SUBLANG_AZERI_CYRILLIC                                                 = 0x02
	SUBLANG_AZERI_LATIN                                                    = 0x01
	SUBLANG_BANGLA_BANGLADESH                                              = 0x02
	SUBLANG_BANGLA_INDIA                                                   = 0x01
	SUBLANG_BASHKIR_RUSSIA                                                 = 0x01
	SUBLANG_BASQUE_BASQUE                                                  = 0x01
	SUBLANG_BELARUSIAN_BELARUS                                             = 0x01
	SUBLANG_BENGALI_BANGLADESH                                             = 0x02
	SUBLANG_BENGALI_INDIA                                                  = 0x01
	SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC                            = 0x08
	SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN                               = 0x05
	SUBLANG_BRETON_FRANCE                                                  = 0x01
	SUBLANG_BULGARIAN_BULGARIA                                             = 0x01
	SUBLANG_CATALAN_CATALAN                                                = 0x01
	SUBLANG_CENTRAL_KURDISH_IRAQ                                           = 0x01
	SUBLANG_CHEROKEE_CHEROKEE                                              = 0x01
	SUBLANG_CHINESE_HONGKONG                                               = 0x03
	SUBLANG_CHINESE_MACAU                                                  = 0x05
	SUBLANG_CHINESE_SIMPLIFIED                                             = 0x02
	SUBLANG_CHINESE_SINGAPORE                                              = 0x04
	SUBLANG_CHINESE_TRADITIONAL                                            = 0x01
	SUBLANG_CORSICAN_FRANCE                                                = 0x01
	SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN                              = 0x04
	SUBLANG_CROATIAN_CROATIA                                               = 0x01
	SUBLANG_CUSTOM_DEFAULT                                                 = 0x03
	SUBLANG_CUSTOM_UNSPECIFIED                                             = 0x04
	SUBLANG_CZECH_CZECH_REPUBLIC                                           = 0x01
	SUBLANG_DANISH_DENMARK                                                 = 0x01
	SUBLANG_DARI_AFGHANISTAN                                               = 0x01
	SUBLANG_DEFAULT                                                        = 0x01
	SUBLANG_DIVEHI_MALDIVES                                                = 0x01
	SUBLANG_DUTCH                                                          = 0x01
	SUBLANG_DUTCH_BELGIAN                                                  = 0x02
	SUBLANG_ENGLISH_AUS                                                    = 0x03
	SUBLANG_ENGLISH_BELIZE                                                 = 0x0a
	SUBLANG_ENGLISH_CAN                                                    = 0x04
	SUBLANG_ENGLISH_CARIBBEAN                                              = 0x09
	SUBLANG_ENGLISH_EIRE                                                   = 0x06
	SUBLANG_ENGLISH_INDIA                                                  = 0x10
	SUBLANG_ENGLISH_IRELAND                                                = 0x06
	SUBLANG_ENGLISH_JAMAICA                                                = 0x08
	SUBLANG_ENGLISH_MALAYSIA                                               = 0x11
	SUBLANG_ENGLISH_NZ                                                     = 0x05
	SUBLANG_ENGLISH_PHILIPPINES                                            = 0x0d
	SUBLANG_ENGLISH_SINGAPORE                                              = 0x12
	SUBLANG_ENGLISH_SOUTH_AFRICA                                           = 0x07
	SUBLANG_ENGLISH_TRINIDAD                                               = 0x0b
	SUBLANG_ENGLISH_UK                                                     = 0x02
	SUBLANG_ENGLISH_US                                                     = 0x01
	SUBLANG_ENGLISH_ZIMBABWE                                               = 0x0c
	SUBLANG_ESTONIAN_ESTONIA                                               = 0x01
	SUBLANG_FAEROESE_FAROE_ISLANDS                                         = 0x01
	SUBLANG_FILIPINO_PHILIPPINES                                           = 0x01
	SUBLANG_FINNISH_FINLAND                                                = 0x01
	SUBLANG_FRENCH                                                         = 0x01
	SUBLANG_FRENCH_BELGIAN                                                 = 0x02
	SUBLANG_FRENCH_CANADIAN                                                = 0x03
	SUBLANG_FRENCH_LUXEMBOURG                                              = 0x05
	SUBLANG_FRENCH_MONACO                                                  = 0x06
	SUBLANG_FRENCH_SWISS                                                   = 0x04
	SUBLANG_FRISIAN_NETHERLANDS                                            = 0x01
	SUBLANG_FULAH_SENEGAL                                                  = 0x02
	SUBLANG_GALICIAN_GALICIAN                                              = 0x01
	SUBLANG_GEORGIAN_GEORGIA                                               = 0x01
	SUBLANG_GERMAN                                                         = 0x01
	SUBLANG_GERMAN_AUSTRIAN                                                = 0x03
	SUBLANG_GERMAN_LIECHTENSTEIN                                           = 0x05
	SUBLANG_GERMAN_LUXEMBOURG                                              = 0x04
	SUBLANG_GERMAN_SWISS                                                   = 0x02
	SUBLANG_GREEK_GREECE                                                   = 0x01
	SUBLANG_GREENLANDIC_GREENLAND                                          = 0x01
	SUBLANG_GUJARATI_INDIA                                                 = 0x01
	SUBLANG_HAUSA_NIGERIA                                                  = 1
	SUBLANG_HAUSA_NIGERIA_LATIN                                            = 0x01
	SUBLANG_HAWAIIAN_US                                                    = 0x01
	SUBLANG_HEBREW_ISRAEL                                                  = 0x01
	SUBLANG_HINDI_INDIA                                                    = 0x01
	SUBLANG_HUNGARIAN_HUNGARY                                              = 0x01
	SUBLANG_ICELANDIC_ICELAND                                              = 0x01
	SUBLANG_IGBO_NIGERIA                                                   = 0x01
	SUBLANG_INDONESIAN_INDONESIA                                           = 0x01
	SUBLANG_INUKTITUT_CANADA                                               = 0x01
	SUBLANG_INUKTITUT_CANADA_LATIN                                         = 0x02
	SUBLANG_IRISH_IRELAND                                                  = 0x02
	SUBLANG_ITALIAN                                                        = 0x01
	SUBLANG_ITALIAN_SWISS                                                  = 0x02
	SUBLANG_JAPANESE_JAPAN                                                 = 0x01
	SUBLANG_KANNADA_INDIA                                                  = 0x01
	SUBLANG_KASHMIRI_INDIA                                                 = 0x02
	SUBLANG_KASHMIRI_SASIA                                                 = 0x02
	SUBLANG_KAZAK_KAZAKHSTAN                                               = 0x01
	SUBLANG_KHMER_CAMBODIA                                                 = 0x01
	SUBLANG_KICHE_GUATEMALA                                                = 0x01
	SUBLANG_KINYARWANDA_RWANDA                                             = 0x01
	SUBLANG_KONKANI_INDIA                                                  = 0x01
	SUBLANG_KOREAN                                                         = 0x01
	SUBLANG_KYRGYZ_KYRGYZSTAN                                              = 0x01
	SUBLANG_LAO_LAO                                                        = 0x01
	SUBLANG_LAO_LAO_PDR                                                    = 1
	SUBLANG_LATVIAN_LATVIA                                                 = 0x01
	SUBLANG_LITHUANIAN                                                     = 0x01
	SUBLANG_LOWER_SORBIAN_GERMANY                                          = 0x02
	SUBLANG_LUXEMBOURGISH_LUXEMBOURG                                       = 0x01
	SUBLANG_MACEDONIAN_MACEDONIA                                           = 0x01
	SUBLANG_MALAYALAM_INDIA                                                = 0x01
	SUBLANG_MALAY_BRUNEI_DARUSSALAM                                        = 0x02
	SUBLANG_MALAY_MALAYSIA                                                 = 0x01
	SUBLANG_MALTESE_MALTA                                                  = 0x01
	SUBLANG_MAORI_NEW_ZEALAND                                              = 0x01
	SUBLANG_MAPUDUNGUN_CHILE                                               = 0x01
	SUBLANG_MARATHI_INDIA                                                  = 0x01
	SUBLANG_MOHAWK_MOHAWK                                                  = 0x01
	SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA                                    = 0x01
	SUBLANG_MONGOLIAN_PRC                                                  = 0x02
	SUBLANG_NEPALI_INDIA                                                   = 0x02
	SUBLANG_NEPALI_NEPAL                                                   = 0x01
	SUBLANG_NEUTRAL                                                        = 0x00
	SUBLANG_NORWEGIAN_BOKMAL                                               = 0x01
	SUBLANG_NORWEGIAN_NYNORSK                                              = 0x02
	SUBLANG_OCCITAN_FRANCE                                                 = 0x01
	SUBLANG_ORIYA_INDIA                                                    = 0x01
	SUBLANG_PASHTO_AFGHANISTAN                                             = 0x01
	SUBLANG_PERSIAN_IRAN                                                   = 0x01
	SUBLANG_POLISH_POLAND                                                  = 0x01
	SUBLANG_PORTUGUESE                                                     = 0x02
	SUBLANG_PORTUGUESE_BRAZILIAN                                           = 0x01
	SUBLANG_PULAR_SENEGAL                                                  = 0x02
	SUBLANG_PUNJABI_INDIA                                                  = 0x01
	SUBLANG_PUNJABI_PAKISTAN                                               = 0x02
	SUBLANG_QUECHUA_BOLIVIA                                                = 0x01
	SUBLANG_QUECHUA_ECUADOR                                                = 0x02
	SUBLANG_QUECHUA_PERU                                                   = 0x03
	SUBLANG_ROMANIAN_ROMANIA                                               = 0x01
	SUBLANG_ROMANSH_SWITZERLAND                                            = 0x01
	SUBLANG_RUSSIAN_RUSSIA                                                 = 0x01
	SUBLANG_SAKHA_RUSSIA                                                   = 0x01
	SUBLANG_SAMI_INARI_FINLAND                                             = 0x09
	SUBLANG_SAMI_LULE_NORWAY                                               = 0x04
	SUBLANG_SAMI_LULE_SWEDEN                                               = 0x05
	SUBLANG_SAMI_NORTHERN_FINLAND                                          = 0x03
	SUBLANG_SAMI_NORTHERN_NORWAY                                           = 0x01
	SUBLANG_SAMI_NORTHERN_SWEDEN                                           = 0x02
	SUBLANG_SAMI_SKOLT_FINLAND                                             = 0x08
	SUBLANG_SAMI_SOUTHERN_NORWAY                                           = 0x06
	SUBLANG_SAMI_SOUTHERN_SWEDEN                                           = 0x07
	SUBLANG_SANSKRIT_INDIA                                                 = 0x01
	SUBLANG_SCOTTISH_GAELIC                                                = 0x01
	SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC                            = 0x07
	SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN                               = 0x06
	SUBLANG_SERBIAN_CYRILLIC                                               = 0x03
	SUBLANG_SERBIAN_LATIN                                                  = 0x02
	SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC                                    = 0x0c
	SUBLANG_SERBIAN_MONTENEGRO_LATIN                                       = 0x0b
	SUBLANG_SERBIAN_SERBIA_CYRILLIC                                        = 0x0a
	SUBLANG_SERBIAN_SERBIA_LATIN                                           = 0x09
	SUBLANG_SINDHI_AFGHANISTAN                                             = 0x02
	SUBLANG_SINDHI_INDIA                                                   = 0x01
	SUBLANG_SINDHI_PAKISTAN                                                = 0x02
	SUBLANG_SINHALESE_SRI_LANKA                                            = 0x01
	SUBLANG_SLOVAK_SLOVAKIA                                                = 0x01
	SUBLANG_SLOVENIAN_SLOVENIA                                             = 0x01
	SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA                                    = 0x01
	SUBLANG_SPANISH                                                        = 0x01
	SUBLANG_SPANISH_ARGENTINA                                              = 0x0b
	SUBLANG_SPANISH_BOLIVIA                                                = 0x10
	SUBLANG_SPANISH_CHILE                                                  = 0x0d
	SUBLANG_SPANISH_COLOMBIA                                               = 0x09
	SUBLANG_SPANISH_COSTA_RICA                                             = 0x05
	SUBLANG_SPANISH_DOMINICAN_REPUBLIC                                     = 0x07
	SUBLANG_SPANISH_ECUADOR                                                = 0x0c
	SUBLANG_SPANISH_EL_SALVADOR                                            = 0x11
	SUBLANG_SPANISH_GUATEMALA                                              = 0x04
	SUBLANG_SPANISH_HONDURAS                                               = 0x12
	SUBLANG_SPANISH_MEXICAN                                                = 0x02
	SUBLANG_SPANISH_MODERN                                                 = 0x03
	SUBLANG_SPANISH_NICARAGUA                                              = 0x13
	SUBLANG_SPANISH_PANAMA                                                 = 0x06
	SUBLANG_SPANISH_PARAGUAY                                               = 0x0f
	SUBLANG_SPANISH_PERU                                                   = 0x0a
	SUBLANG_SPANISH_PUERTO_RICO                                            = 0x14
	SUBLANG_SPANISH_URUGUAY                                                = 0x0e
	SUBLANG_SPANISH_US                                                     = 0x15
	SUBLANG_SPANISH_VENEZUELA                                              = 0x08
	SUBLANG_SWAHILI_KENYA                                                  = 0x01
	SUBLANG_SWEDISH                                                        = 0x01
	SUBLANG_SWEDISH_FINLAND                                                = 0x02
	SUBLANG_SYRIAC                                                         = 0x01
	SUBLANG_SYRIAC_SYRIA                                                   = 1
	SUBLANG_SYS_DEFAULT                                                    = 0x02
	SUBLANG_TAJIK_TAJIKISTAN                                               = 0x01
	SUBLANG_TAMAZIGHT_ALGERIA_LATIN                                        = 0x02
	SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH                                     = 0x04
	SUBLANG_TAMIL_INDIA                                                    = 0x01
	SUBLANG_TAMIL_SRI_LANKA                                                = 0x02
	SUBLANG_TATAR_RUSSIA                                                   = 0x01
	SUBLANG_TELUGU_INDIA                                                   = 0x01
	SUBLANG_THAI_THAILAND                                                  = 0x01
	SUBLANG_TIBETAN_BHUTAN                                                 = 0x02
	SUBLANG_TIBETAN_PRC                                                    = 0x01
	SUBLANG_TIGRIGNA_ERITREA                                               = 0x02
	SUBLANG_TIGRINYA_ERITREA                                               = 0x02
	SUBLANG_TIGRINYA_ETHIOPIA                                              = 0x01
	SUBLANG_TSWANA_BOTSWANA                                                = 0x02
	SUBLANG_TSWANA_SOUTH_AFRICA                                            = 0x01
	SUBLANG_TURKISH_TURKEY                                                 = 0x01
	SUBLANG_TURKMEN_TURKMENISTAN                                           = 0x01
	SUBLANG_UIGHUR_PRC                                                     = 0x01
	SUBLANG_UI_CUSTOM_DEFAULT                                              = 0x05
	SUBLANG_UKRAINIAN_UKRAINE                                              = 0x01
	SUBLANG_UPPER_SORBIAN_GERMANY                                          = 0x01
	SUBLANG_URDU_INDIA                                                     = 0x02
	SUBLANG_URDU_PAKISTAN                                                  = 0x01
	SUBLANG_UZBEK_CYRILLIC                                                 = 0x02
	SUBLANG_UZBEK_LATIN                                                    = 0x01
	SUBLANG_VALENCIAN_VALENCIA                                             = 0x02
	SUBLANG_VIETNAMESE_VIETNAM                                             = 0x01
	SUBLANG_WELSH_UNITED_KINGDOM                                           = 0x01
	SUBLANG_WOLOF_SENEGAL                                                  = 0x01
	SUBLANG_XHOSA_SOUTH_AFRICA                                             = 0x01
	SUBLANG_YAKUT_RUSSIA                                                   = 0x01
	SUBLANG_YI_PRC                                                         = 0x01
	SUBLANG_YORUBA_NIGERIA                                                 = 0x01
	SUBLANG_ZULU_SOUTH_AFRICA                                              = 0x01
	SUBVERSION_MASK                                                        = 0x000000FF
	SUCCESSFUL_ACCESS_ACE_FLAG                                             = 64
	SUPPORT_LANG_NUMBER                                                    = 32
	SWP_ASYNCWINDOWPOS                                                     = 0x4000
	SWP_DEFERERASE                                                         = 0x2000
	SWP_DRAWFRAME                                                          = 32
	SWP_FRAMECHANGED                                                       = 0x0020
	SWP_HIDEWINDOW                                                         = 0x0080
	SWP_NOACTIVATE                                                         = 0x0010
	SWP_NOCOPYBITS                                                         = 0x0100
	SWP_NOMOVE                                                             = 0x0002
	SWP_NOOWNERZORDER                                                      = 0x0200
	SWP_NOREDRAW                                                           = 0x0008
	SWP_NOREPOSITION                                                       = 512
	SWP_NOSENDCHANGING                                                     = 0x0400
	SWP_NOSIZE                                                             = 0x0001
	SWP_NOZORDER                                                           = 0x0004
	SWP_SHOWWINDOW                                                         = 0x0040
	SW_ERASE                                                               = 0x0004
	SW_FORCEMINIMIZE                                                       = 11
	SW_HIDE                                                                = 0
	SW_INVALIDATE                                                          = 0x0002
	SW_MAX                                                                 = 11
	SW_MAXIMIZE                                                            = 3
	SW_MINIMIZE                                                            = 6
	SW_NORMAL                                                              = 1
	SW_OTHERUNZOOM                                                         = 4
	SW_OTHERZOOM                                                           = 2
	SW_PARENTCLOSING                                                       = 1
	SW_PARENTOPENING                                                       = 3
	SW_RESTORE                                                             = 9
	SW_SCROLLCHILDREN                                                      = 0x0001
	SW_SHOW                                                                = 5
	SW_SHOWDEFAULT                                                         = 10
	SW_SHOWMAXIMIZED                                                       = 3
	SW_SHOWMINIMIZED                                                       = 2
	SW_SHOWMINNOACTIVE                                                     = 7
	SW_SHOWNA                                                              = 8
	SW_SHOWNOACTIVATE                                                      = 4
	SW_SHOWNORMAL                                                          = 1
	SW_SMOOTHSCROLL                                                        = 0x0010
	SYMBOL_CHARSET                                                         = 2
	SYMLINK_FLAG_RELATIVE                                                  = 1
	SYNCHRONIZATION_BARRIER_FLAGS_BLOCK_ONLY                               = 0x02
	SYNCHRONIZATION_BARRIER_FLAGS_NO_DELETE                                = 0x04
	SYNCHRONIZATION_BARRIER_FLAGS_SPIN_ONLY                                = 0x01
	SYNCHRONIZE                                                            = 1048576
	SYNTHETIC_EVENT_TIME                                                   = 0
	SYSPAL_ERROR                                                           = 0
	SYSPAL_NOSTATIC                                                        = 2
	SYSPAL_NOSTATIC256                                                     = 3
	SYSPAL_STATIC                                                          = 1
	SYSRGN                                                                 = 4
	SYSTEM_ALARM_ACE_TYPE                                                  = 3
	SYSTEM_ALARM_CALLBACK_ACE_TYPE                                         = 14
	SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE                                  = 16
	SYSTEM_ALARM_OBJECT_ACE_TYPE                                           = 8
	SYSTEM_AUDIT_ACE_TYPE                                                  = 2
	SYSTEM_AUDIT_CALLBACK_ACE_TYPE                                         = 13
	SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE                                  = 15
	SYSTEM_AUDIT_OBJECT_ACE_TYPE                                           = 7
	SYSTEM_CACHE_ALIGNMENT_SIZE                                            = 64
	SYSTEM_FIXED_FONT                                                      = 16
	SYSTEM_FONT                                                            = 13
	SYSTEM_MANDATORY_LABEL_ACE_TYPE                                        = 17
	SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP                                   = 0x4
	SYSTEM_MANDATORY_LABEL_NO_READ_UP                                      = 0x2
	SYSTEM_MANDATORY_LABEL_NO_WRITE_UP                                     = 0x1
	SYSTEM_MANDATORY_LABEL_VALID_MASK                                      = 7
	SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE                                     = 18
	SYSTEM_SCOPED_POLICY_ID_ACE_TYPE                                       = 19
	SYS_OPEN                                                               = 20
	S_ALLTHRESHOLD                                                         = 2
	S_IEXEC                                                                = 64
	S_IFBLK                                                                = 12288
	S_IFCHR                                                                = 8192
	S_IFDIR                                                                = 16384
	S_IFIFO                                                                = 4096
	S_IFLNK                                                                = 0120000
	S_IFMT                                                                 = 61440
	S_IFREG                                                                = 32768
	S_IREAD                                                                = 256
	S_IRGRP                                                                = 32
	S_IROTH                                                                = 4
	S_IRUSR                                                                = 256
	S_IRWXG                                                                = 56
	S_IRWXO                                                                = 7
	S_IRWXU                                                                = 448
	S_IWGRP                                                                = 16
	S_IWOTH                                                                = 2
	S_IWRITE                                                               = 128
	S_IWUSR                                                                = 128
	S_IXGRP                                                                = 8
	S_IXOTH                                                                = 1
	S_IXUSR                                                                = 64
	S_LEGATO                                                               = 1
	S_NORMAL                                                               = 0
	S_PERIOD1024                                                           = 1
	S_PERIOD2048                                                           = 2
	S_PERIOD512                                                            = 0
	S_PERIODVOICE                                                          = 3
	S_QUEUEEMPTY                                                           = 0
	S_SERBDNT                                                              = -5
	S_SERDCC                                                               = -7
	S_SERDDR                                                               = -14
	S_SERDFQ                                                               = -13
	S_SERDLN                                                               = -6
	S_SERDMD                                                               = -10
	S_SERDPT                                                               = -12
	S_SERDSH                                                               = -11
	S_SERDSR                                                               = -15
	S_SERDST                                                               = -16
	S_SERDTP                                                               = -8
	S_SERDVL                                                               = -9
	S_SERDVNA                                                              = -1
	S_SERMACT                                                              = -3
	S_SEROFM                                                               = -2
	S_SERQFUL                                                              = -4
	S_STACCATO                                                             = 2
	S_THRESHOLD                                                            = 1
	S_WHITE1024                                                            = 5
	S_WHITE2048                                                            = 6
	S_WHITE512                                                             = 4
	S_WHITEVOICE                                                           = 7
	TAPE_ABSOLUTE_BLOCK                                                    = 1
	TAPE_ABSOLUTE_POSITION                                                 = 0
	TAPE_CHECK_FOR_DRIVE_PROBLEM                                           = 2
	TAPE_DRIVE_ABSOLUTE_BLK                                                = 0x80001000
	TAPE_DRIVE_ABS_BLK_IMMED                                               = 0x80002000
	TAPE_DRIVE_CLEAN_REQUESTS                                              = 0x02000000
	TAPE_DRIVE_COMPRESSION                                                 = 0x00020000
	TAPE_DRIVE_ECC                                                         = 0x00010000
	TAPE_DRIVE_EJECT_MEDIA                                                 = 0x01000000
	TAPE_DRIVE_END_OF_DATA                                                 = 0x80010000
	TAPE_DRIVE_EOT_WZ_SIZE                                                 = 0x00002000
	TAPE_DRIVE_ERASE_BOP_ONLY                                              = 0x00000040
	TAPE_DRIVE_ERASE_IMMEDIATE                                             = 0x00000080
	TAPE_DRIVE_ERASE_LONG                                                  = 0x00000020
	TAPE_DRIVE_ERASE_SHORT                                                 = 0x00000010
	TAPE_DRIVE_FILEMARKS                                                   = 0x80040000
	TAPE_DRIVE_FIXED                                                       = 0x00000001
	TAPE_DRIVE_FIXED_BLOCK                                                 = 0x00000400
	TAPE_DRIVE_FORMAT                                                      = 0xA0000000
	TAPE_DRIVE_FORMAT_IMMEDIATE                                            = 0xC0000000
	TAPE_DRIVE_GET_ABSOLUTE_BLK                                            = 0x00100000
	TAPE_DRIVE_GET_LOGICAL_BLK                                             = 0x00200000
	TAPE_DRIVE_HIGH_FEATURES                                               = 0x80000000
	TAPE_DRIVE_INITIATOR                                                   = 0x00000004
	TAPE_DRIVE_LOAD_UNLD_IMMED                                             = 0x80000020
	TAPE_DRIVE_LOAD_UNLOAD                                                 = 0x80000001
	TAPE_DRIVE_LOCK_UNLK_IMMED                                             = 0x80000080
	TAPE_DRIVE_LOCK_UNLOCK                                                 = 0x80000004
	TAPE_DRIVE_LOGICAL_BLK                                                 = 0x80004000
	TAPE_DRIVE_LOG_BLK_IMMED                                               = 0x80008000
	TAPE_DRIVE_PADDING                                                     = 0x00040000
	TAPE_DRIVE_RELATIVE_BLKS                                               = 0x80020000
	TAPE_DRIVE_REPORT_SMKS                                                 = 0x00080000
	TAPE_DRIVE_RESERVED_BIT                                                = 0x80000000
	TAPE_DRIVE_REVERSE_POSITION                                            = 0x80400000
	TAPE_DRIVE_REWIND_IMMEDIATE                                            = 0x80000008
	TAPE_DRIVE_SELECT                                                      = 0x00000002
	TAPE_DRIVE_SEQUENTIAL_FMKS                                             = 0x80080000
	TAPE_DRIVE_SEQUENTIAL_SMKS                                             = 0x80200000
	TAPE_DRIVE_SETMARKS                                                    = 0x80100000
	TAPE_DRIVE_SET_BLOCK_SIZE                                              = 0x80000010
	TAPE_DRIVE_SET_CMP_BOP_ONLY                                            = 0x04000000
	TAPE_DRIVE_SET_COMPRESSION                                             = 0x80000200
	TAPE_DRIVE_SET_ECC                                                     = 0x80000100
	TAPE_DRIVE_SET_EOT_WZ_SIZE                                             = 0x00400000
	TAPE_DRIVE_SET_PADDING                                                 = 0x80000400
	TAPE_DRIVE_SET_REPORT_SMKS                                             = 0x80000800
	TAPE_DRIVE_SPACE_IMMEDIATE                                             = 0x80800000
	TAPE_DRIVE_TAPE_CAPACITY                                               = 0x00000100
	TAPE_DRIVE_TAPE_REMAINING                                              = 0x00000200
	TAPE_DRIVE_TENSION                                                     = 0x80000002
	TAPE_DRIVE_TENSION_IMMED                                               = 0x80000040
	TAPE_DRIVE_VARIABLE_BLOCK                                              = 0x00000800
	TAPE_DRIVE_WRITE_FILEMARKS                                             = 0x82000000
	TAPE_DRIVE_WRITE_LONG_FMKS                                             = 0x88000000
	TAPE_DRIVE_WRITE_MARK_IMMED                                            = 0x90000000
	TAPE_DRIVE_WRITE_PROTECT                                               = 0x00001000
	TAPE_DRIVE_WRITE_SETMARKS                                              = 0x81000000
	TAPE_DRIVE_WRITE_SHORT_FMKS                                            = 0x84000000
	TAPE_ERASE_LONG                                                        = 1
	TAPE_ERASE_SHORT                                                       = 0
	TAPE_FILEMARKS                                                         = 1
	TAPE_FIXED_PARTITIONS                                                  = 0
	TAPE_FORMAT                                                            = 5
	TAPE_INITIATOR_PARTITIONS                                              = 2
	TAPE_LOAD                                                              = 0
	TAPE_LOCK                                                              = 3
	TAPE_LOGICAL_BLOCK                                                     = 2
	TAPE_LOGICAL_POSITION                                                  = 1
	TAPE_LONG_FILEMARKS                                                    = 3
	TAPE_PSEUDO_LOGICAL_BLOCK                                              = 3
	TAPE_PSEUDO_LOGICAL_POSITION                                           = 2
	TAPE_QUERY_DEVICE_ERROR_DATA                                           = 4
	TAPE_QUERY_DRIVE_PARAMETERS                                            = 0
	TAPE_QUERY_IO_ERROR_DATA                                               = 3
	TAPE_QUERY_MEDIA_CAPACITY                                              = 1
	TAPE_REWIND                                                            = 0
	TAPE_SELECT_PARTITIONS                                                 = 1
	TAPE_SETMARKS                                                          = 0
	TAPE_SHORT_FILEMARKS                                                   = 2
	TAPE_SPACE_END_OF_DATA                                                 = 4
	TAPE_SPACE_FILEMARKS                                                   = 6
	TAPE_SPACE_RELATIVE_BLOCKS                                             = 5
	TAPE_SPACE_SEQUENTIAL_FMKS                                             = 7
	TAPE_SPACE_SEQUENTIAL_SMKS                                             = 9
	TAPE_SPACE_SETMARKS                                                    = 8
	TAPE_TENSION                                                           = 2
	TAPE_UNLOAD                                                            = 1
	TAPE_UNLOCK                                                            = 4
	TA_BASELINE                                                            = 24
	TA_BOTTOM                                                              = 8
	TA_CENTER                                                              = 6
	TA_LEFT                                                                = 0
	TA_MASK                                                                = 287
	TA_NOUPDATECP                                                          = 0
	TA_RIGHT                                                               = 2
	TA_RTLREADING                                                          = 256
	TA_TOP                                                                 = 0
	TA_UPDATECP                                                            = 1
	TCI_SRCCHARSET                                                         = 1
	TCI_SRCCODEPAGE                                                        = 2
	TCI_SRCFONTSIG                                                         = 3
	TCI_SRCLOCALE                                                          = 0x1000
	TCLFLEXARRAY                                                           = 0
	TCLOO_H_INCLUDED                                                       = 0
	TCLOO_VERSION                                                          = "1.1.0"
	TCLTOMMATH_EPOCH                                                       = 0
	TCLTOMMATH_REVISION                                                    = 0
	TCL_ALLOW_EXCEPTIONS                                                   = 0x04
	TCL_ALLOW_INLINE_COMPILATION                                           = 0x20000
	TCL_ALL_EVENTS                                                         = -3
	TCL_ALPHA_RELEASE                                                      = 0
	TCL_APPEND_VALUE                                                       = 4
	TCL_ARGV_CONSTANT                                                      = 15
	TCL_ARGV_END                                                           = 23
	TCL_ARGV_FLOAT                                                         = 19
	TCL_ARGV_FUNC                                                          = 20
	TCL_ARGV_GENFUNC                                                       = 21
	TCL_ARGV_HELP                                                          = 22
	TCL_ARGV_INT                                                           = 16
	TCL_ARGV_REST                                                          = 18
	TCL_ARGV_STRING                                                        = 17
	TCL_AVOID_RESOLVERS                                                    = 0x40000
	TCL_BETA_RELEASE                                                       = 1
	TCL_BREAK                                                              = 3
	TCL_BROKEN_MAINARGS                                                    = 1
	TCL_CANCEL_UNWIND                                                      = 0x100000
	TCL_CFGVAL_ENCODING                                                    = "cp1252"
	TCL_CFG_DO64BIT                                                        = 1
	TCL_CFG_OPTIMIZED                                                      = 1
	TCL_CHANNEL_THREAD_INSERT                                              = 0
	TCL_CHANNEL_THREAD_REMOVE                                              = 1
	TCL_CLOSE_READ                                                         = 2
	TCL_CLOSE_WRITE                                                        = 4
	TCL_CONTINUE                                                           = 4
	TCL_CONVERT_MULTIBYTE                                                  = -1
	TCL_CONVERT_NOSPACE                                                    = -4
	TCL_CONVERT_SYNTAX                                                     = -2
	TCL_CONVERT_UNKNOWN                                                    = -3
	TCL_CREATE_HARD_LINK                                                   = 0x02
	TCL_CREATE_NS_IF_UNKNOWN                                               = 0x800
	TCL_CREATE_SYMBOLIC_LINK                                               = 0x01
	TCL_CUSTOM_PTR_KEYS                                                    = -1
	TCL_CUSTOM_TYPE_KEYS                                                   = -2
	TCL_DD_CONVERSION_TYPE_MASK                                            = 0x3
	TCL_DD_E_FORMAT                                                        = 0x2
	TCL_DD_F_FORMAT                                                        = 0x3
	TCL_DD_NO_QUICK                                                        = 0x8
	TCL_DD_SHORTEN_FLAG                                                    = 0x4
	TCL_DD_SHORTEST                                                        = 0x4
	TCL_DD_SHORTEST0                                                       = 0x0
	TCL_DD_STEELE                                                          = 0x5
	TCL_DD_STEELE0                                                         = 0x1
	TCL_DONT_QUOTE_HASH                                                    = 8
	TCL_DONT_USE_BRACES                                                    = 1
	TCL_DONT_WAIT                                                          = 2
	TCL_DOUBLE_SPACE                                                       = 27
	TCL_DSTRING_STATIC_SIZE                                                = 200
	TCL_EACH_COLLECT                                                       = 1
	TCL_EACH_KEEP_NONE                                                     = 0
	TCL_ENCODING_CHAR_LIMIT                                                = 0x10
	TCL_ENCODING_END                                                       = 0x02
	TCL_ENCODING_NO_TERMINATE                                              = 0x08
	TCL_ENCODING_START                                                     = 0x01
	TCL_ENCODING_STOPONERROR                                               = 0x04
	TCL_ENFORCE_MODE                                                       = 16
	TCL_ENSEMBLE_PREFIX                                                    = 0x02
	TCL_ERROR                                                              = 1
	TCL_EVAL_DIRECT                                                        = 0x040000
	TCL_EVAL_DISCARD_RESULT                                                = 0x40
	TCL_EVAL_FILE                                                          = 0x02
	TCL_EVAL_GLOBAL                                                        = 0x020000
	TCL_EVAL_INVOKE                                                        = 0x080000
	TCL_EVAL_NOERR                                                         = 0x200000
	TCL_EVAL_NORESOLVE                                                     = 0x20
	TCL_EVAL_SOURCE_IN_FRAME                                               = 0x10
	TCL_EXACT                                                              = 1
	TCL_EXCEPTION                                                          = 8
	TCL_FILE_EVENTS                                                        = 8
	TCL_FINAL_RELEASE                                                      = 2
	TCL_FIND_ONLY_NS                                                       = 0x1000
	TCL_GLOBAL_ONLY                                                        = 1
	TCL_GLOBMODE_DIR                                                       = 4
	TCL_GLOBMODE_JOIN                                                      = 2
	TCL_GLOBMODE_NO_COMPLAIN                                               = 1
	TCL_GLOBMODE_TAILS                                                     = 8
	TCL_GLOB_PERM_HIDDEN                                                   = 2
	TCL_GLOB_PERM_R                                                        = 4
	TCL_GLOB_PERM_RONLY                                                    = 1
	TCL_GLOB_PERM_W                                                        = 8
	TCL_GLOB_PERM_X                                                        = 16
	TCL_GLOB_TYPE_BLOCK                                                    = 1
	TCL_GLOB_TYPE_CHAR                                                     = 2
	TCL_GLOB_TYPE_DIR                                                      = 4
	TCL_GLOB_TYPE_FILE                                                     = 16
	TCL_GLOB_TYPE_LINK                                                     = 32
	TCL_GLOB_TYPE_MOUNT                                                    = 128
	TCL_GLOB_TYPE_PIPE                                                     = 8
	TCL_GLOB_TYPE_SOCK                                                     = 64
	TCL_HASH_KEY_RANDOMIZE_HASH                                            = 0x1
	TCL_HASH_KEY_STORE_HASH                                                = 1
	TCL_HASH_KEY_SYSTEM_HASH                                               = 0x2
	TCL_HASH_KEY_TYPE_VERSION                                              = 1
	TCL_IDLE_EVENTS                                                        = 32
	TCL_INDEX_AFTER                                                        = 2147483647
	TCL_INDEX_BEFORE                                                       = -1
	TCL_INDEX_END                                                          = -2
	TCL_INDEX_START                                                        = 0
	TCL_INTEGER_SPACE                                                      = 24
	TCL_INTERP_DESTROYED                                                   = 0x100
	TCL_INVOKE_HIDDEN                                                      = 1
	TCL_INVOKE_NO_TRACEBACK                                                = 4
	TCL_INVOKE_NO_UNKNOWN                                                  = 2
	TCL_LEAVE_ERR_MSG                                                      = 0x200
	TCL_LIMIT_COMMANDS                                                     = 0x01
	TCL_LIMIT_TIME                                                         = 0x02
	TCL_LINK_BOOLEAN                                                       = 3
	TCL_LINK_CHAR                                                          = 6
	TCL_LINK_DOUBLE                                                        = 2
	TCL_LINK_FLOAT                                                         = 13
	TCL_LINK_INT                                                           = 1
	TCL_LINK_LONG                                                          = 11
	TCL_LINK_READ_ONLY                                                     = 0x80
	TCL_LINK_SHORT                                                         = 8
	TCL_LINK_STRING                                                        = 4
	TCL_LINK_UCHAR                                                         = 7
	TCL_LINK_UINT                                                          = 10
	TCL_LINK_ULONG                                                         = 12
	TCL_LINK_USHORT                                                        = 9
	TCL_LINK_WIDE_INT                                                      = 5
	TCL_LINK_WIDE_UINT                                                     = 14
	TCL_LIST_ELEMENT                                                       = 8
	TCL_LL_MODIFIER                                                        = "I64"
	TCL_LOAD_GLOBAL                                                        = 1
	TCL_LOAD_LAZY                                                          = 2
	TCL_LOCATION_BC                                                        = 2
	TCL_LOCATION_EVAL                                                      = 0
	TCL_LOCATION_LAST                                                      = 6
	TCL_LOCATION_PREBC                                                     = 3
	TCL_LOCATION_PROC                                                      = 5
	TCL_LOCATION_SOURCE                                                    = 4
	TCL_MAJOR_VERSION                                                      = 8
	TCL_MATCH_NOCASE                                                       = 1
	TCL_MAX_PREC                                                           = 17
	TCL_MINOR_VERSION                                                      = 6
	TCL_MIN_GROWTH                                                         = 1024
	TCL_MODE_BLOCKING                                                      = 0
	TCL_MODE_NONBLOCKING                                                   = 1
	TCL_NAMESPACE_ONLY                                                     = 2
	TCL_NO_EVAL                                                            = 0x010000
	TCL_NUMBER_BIG                                                         = 3
	TCL_NUMBER_DOUBLE                                                      = 4
	TCL_NUMBER_LONG                                                        = 1
	TCL_NUMBER_NAN                                                         = 5
	TCL_NUMBER_WIDE                                                        = 2
	TCL_OK                                                                 = 0
	TCL_ONE_WORD_KEYS                                                      = 1
	TCL_OO_METADATA_VERSION_CURRENT                                        = 1
	TCL_OO_METHOD_VERSION_CURRENT                                          = 1
	TCL_OUT_LINE_COMPILE                                                   = 1
	TCL_PARSE_BAD_NUMBER                                                   = 9
	TCL_PARSE_BINARY_ONLY                                                  = 64
	TCL_PARSE_BRACE_EXTRA                                                  = 2
	TCL_PARSE_DECIMAL_ONLY                                                 = 1
	TCL_PARSE_HEXADECIMAL_ONLY                                             = 4
	TCL_PARSE_INTEGER_ONLY                                                 = 8
	TCL_PARSE_MISSING_BRACE                                                = 3
	TCL_PARSE_MISSING_BRACKET                                              = 4
	TCL_PARSE_MISSING_PAREN                                                = 5
	TCL_PARSE_MISSING_QUOTE                                                = 6
	TCL_PARSE_MISSING_VAR_BRACE                                            = 7
	TCL_PARSE_NO_WHITESPACE                                                = 32
	TCL_PARSE_OCTAL_ONLY                                                   = 2
	TCL_PARSE_PART1                                                        = 0x400
	TCL_PARSE_QUOTE_EXTRA                                                  = 1
	TCL_PARSE_SCAN_PREFIXES                                                = 16
	TCL_PARSE_SUCCESS                                                      = 0
	TCL_PARSE_SYNTAX                                                       = 8
	TCL_PATCH_LEVEL                                                        = "8.6.12"
	TCL_READABLE                                                           = 2
	TCL_REG_ADVANCED                                                       = 000003
	TCL_REG_ADVF                                                           = 000002
	TCL_REG_BASIC                                                          = 000000
	TCL_REG_BOSONLY                                                        = 002000
	TCL_REG_CANMATCH                                                       = 001000
	TCL_REG_EXPANDED                                                       = 000040
	TCL_REG_EXTENDED                                                       = 000001
	TCL_REG_NEWLINE                                                        = 000300
	TCL_REG_NLANCH                                                         = 000200
	TCL_REG_NLSTOP                                                         = 000100
	TCL_REG_NOCASE                                                         = 000010
	TCL_REG_NOSUB                                                          = 000020
	TCL_REG_NOTBOL                                                         = 0001
	TCL_REG_NOTEOL                                                         = 0002
	TCL_REG_QUOTE                                                          = 000004
	TCL_RELEASE_LEVEL                                                      = 2
	TCL_RELEASE_SERIAL                                                     = 12
	TCL_RESULT_SIZE                                                        = 200
	TCL_RETURN                                                             = 2
	TCL_SERVICE_ALL                                                        = 1
	TCL_SERVICE_NONE                                                       = 0
	TCL_SHLIB_EXT                                                          = ".dll"
	TCL_SMALL_HASH_TABLE                                                   = 4
	TCL_STDERR                                                             = 8
	TCL_STDIN                                                              = 2
	TCL_STDOUT                                                             = 4
	TCL_STRING_KEYS                                                        = 0
	TCL_SUBST_ALL                                                          = 007
	TCL_SUBST_BACKSLASHES                                                  = 004
	TCL_SUBST_COMMANDS                                                     = 001
	TCL_SUBST_VARIABLES                                                    = 002
	TCL_THREAD_JOINABLE                                                    = 1
	TCL_THREAD_NOFLAGS                                                     = 0
	TCL_THREAD_STACK_DEFAULT                                               = 0
	TCL_TIMER_EVENTS                                                       = 16
	TCL_TOKEN_BS                                                           = 8
	TCL_TOKEN_COMMAND                                                      = 16
	TCL_TOKEN_EXPAND_WORD                                                  = 256
	TCL_TOKEN_OPERATOR                                                     = 128
	TCL_TOKEN_SIMPLE_WORD                                                  = 2
	TCL_TOKEN_SUB_EXPR                                                     = 64
	TCL_TOKEN_TEXT                                                         = 4
	TCL_TOKEN_VARIABLE                                                     = 32
	TCL_TOKEN_WORD                                                         = 1
	TCL_TOMMATH                                                            = 1
	TCL_TRACE_ARRAY                                                        = 0x800
	TCL_TRACE_DELETE                                                       = 0x4000
	TCL_TRACE_DESTROYED                                                    = 0x80
	TCL_TRACE_ENTER_EXEC                                                   = 1
	TCL_TRACE_LEAVE_EXEC                                                   = 2
	TCL_TRACE_OLD_STYLE                                                    = 0x1000
	TCL_TRACE_READS                                                        = 0x10
	TCL_TRACE_RENAME                                                       = 0x2000
	TCL_TRACE_RESULT_DYNAMIC                                               = 0x8000
	TCL_TRACE_RESULT_OBJECT                                                = 0x10000
	TCL_TRACE_UNSETS                                                       = 0x40
	TCL_TRACE_WRITES                                                       = 0x20
	TCL_UNLOAD_DETACH_FROM_INTERPRETER                                     = 1
	TCL_UNLOAD_DETACH_FROM_PROCESS                                         = 2
	TCL_UTF_MAX                                                            = 3
	TCL_VERSION                                                            = "8.6"
	TCL_WIDE_CLICKS                                                        = 1
	TCL_WINDOW_EVENTS                                                      = 4
	TCL_WRITABLE                                                           = 4
	TCL_ZLIB_COMPRESS_BEST                                                 = 9
	TCL_ZLIB_COMPRESS_DEFAULT                                              = -1
	TCL_ZLIB_COMPRESS_FAST                                                 = 1
	TCL_ZLIB_COMPRESS_NONE                                                 = 0
	TCL_ZLIB_FINALIZE                                                      = 4
	TCL_ZLIB_FLUSH                                                         = 2
	TCL_ZLIB_FORMAT_AUTO                                                   = 8
	TCL_ZLIB_FORMAT_GZIP                                                   = 4
	TCL_ZLIB_FORMAT_RAW                                                    = 1
	TCL_ZLIB_FORMAT_ZLIB                                                   = 2
	TCL_ZLIB_FULLFLUSH                                                     = 3
	TCL_ZLIB_NO_FLUSH                                                      = 0
	TCL_ZLIB_STREAM_DEFLATE                                                = 16
	TCL_ZLIB_STREAM_INFLATE                                                = 32
	TCP_EXPEDITED_1122                                                     = 0x0002
	TCP_NODELAY                                                            = 0x0001
	TC_CP_STROKE                                                           = 0x00000004
	TC_CR_90                                                               = 0x00000008
	TC_CR_ANY                                                              = 0x00000010
	TC_EA_DOUBLE                                                           = 0x00000200
	TC_GP_TRAP                                                             = 2
	TC_HARDERR                                                             = 1
	TC_IA_ABLE                                                             = 0x00000400
	TC_NONCONF_BORROW                                                      = 0
	TC_NONCONF_BORROW_PLUS                                                 = 3
	TC_NONCONF_DISCARD                                                     = 2
	TC_NONCONF_SHAPE                                                       = 1
	TC_NORMAL                                                              = 0
	TC_OP_CHARACTER                                                        = 0x00000001
	TC_OP_STROKE                                                           = 0x00000002
	TC_RA_ABLE                                                             = 0x00002000
	TC_RESERVED                                                            = 0x00008000
	TC_SA_CONTIN                                                           = 0x00000100
	TC_SA_DOUBLE                                                           = 0x00000040
	TC_SA_INTEGER                                                          = 0x00000080
	TC_SCROLLBLT                                                           = 0x00010000
	TC_SF_X_YINDEP                                                         = 0x00000020
	TC_SIGNAL                                                              = 3
	TC_SO_ABLE                                                             = 0x00001000
	TC_UA_ABLE                                                             = 0x00000800
	TC_VA_ABLE                                                             = 0x00004000
	TECHNOLOGY                                                             = 2
	TEXTCAPS                                                               = 34
	THAI_CHARSET                                                           = 222
	THREAD_ALL_ACCESS                                                      = 2032639
	THREAD_BASE_PRIORITY_IDLE                                              = -15
	THREAD_BASE_PRIORITY_LOWRT                                             = 15
	THREAD_BASE_PRIORITY_MAX                                               = 2
	THREAD_BASE_PRIORITY_MIN                                               = -2
	THREAD_DIRECT_IMPERSONATION                                            = 512
	THREAD_GET_CONTEXT                                                     = 8
	THREAD_IMPERSONATE                                                     = 256
	THREAD_MODE_BACKGROUND_BEGIN                                           = 0x00010000
	THREAD_MODE_BACKGROUND_END                                             = 0x00020000
	THREAD_PRIORITY_ABOVE_NORMAL                                           = 1
	THREAD_PRIORITY_BELOW_NORMAL                                           = -1
	THREAD_PRIORITY_ERROR_RETURN                                           = 2147483647
	THREAD_PRIORITY_HIGHEST                                                = 2
	THREAD_PRIORITY_IDLE                                                   = -15
	THREAD_PRIORITY_LOWEST                                                 = -2
	THREAD_PRIORITY_NORMAL                                                 = 0
	THREAD_PRIORITY_TIME_CRITICAL                                          = 15
	THREAD_PROFILING_FLAG_DISPATCH                                         = 0x1
	THREAD_QUERY_INFORMATION                                               = 64
	THREAD_QUERY_LIMITED_INFORMATION                                       = 2048
	THREAD_SET_CONTEXT                                                     = 16
	THREAD_SET_INFORMATION                                                 = 32
	THREAD_SET_LIMITED_INFORMATION                                         = 1024
	THREAD_SET_THREAD_TOKEN                                                = 128
	THREAD_SUSPEND_RESUME                                                  = 2
	THREAD_TERMINATE                                                       = 1
	TH_NETDEV                                                              = 0x00000001
	TH_TAPI                                                                = 0x00000002
	TIMER_ABSTIME                                                          = 1
	TIMER_ALL_ACCESS                                                       = 2031619
	TIMER_MODIFY_STATE                                                     = 0x0002
	TIMER_QUERY_STATE                                                      = 0x0001
	TIME_FORCE24HOURFORMAT                                                 = 0x00000008
	TIME_NOMINUTESORSECONDS                                                = 0x00000001
	TIME_NOSECONDS                                                         = 0x00000002
	TIME_NOTIMEMARKER                                                      = 0x00000004
	TIME_ZONE_ID_DAYLIGHT                                                  = 2
	TIME_ZONE_ID_STANDARD                                                  = 1
	TIME_ZONE_ID_UNKNOWN                                                   = 0
	TKF_AVAILABLE                                                          = 0x00000002
	TKF_CONFIRMHOTKEY                                                      = 0x00000008
	TKF_HOTKEYACTIVE                                                       = 0x00000004
	TKF_HOTKEYSOUND                                                        = 0x00000010
	TKF_INDICATOR                                                          = 0x00000020
	TKF_TOGGLEKEYSON                                                       = 0x00000001
	TLOSS                                                                  = 5
	TLS_MINIMUM_AVAILABLE                                                  = 64
	TME_CANCEL                                                             = 0x80000000
	TME_HOVER                                                              = 0x00000001
	TME_LEAVE                                                              = 0x00000002
	TME_NONCLIENT                                                          = 0x00000010
	TME_QUERY                                                              = 0x40000000
	TMPF_DEVICE                                                            = 0x08
	TMPF_FIXED_PITCH                                                       = 0x01
	TMPF_TRUETYPE                                                          = 0x04
	TMPF_VECTOR                                                            = 0x02
	TMP_MAX                                                                = 32767
	TMP_MAX_S                                                              = 32767
	TOKEN_ADJUST_DEFAULT                                                   = 128
	TOKEN_ADJUST_GROUPS                                                    = 64
	TOKEN_ADJUST_PRIVILEGES                                                = 32
	TOKEN_ADJUST_SESSIONID                                                 = 256
	TOKEN_ALL_ACCESS                                                       = 983551
	TOKEN_ALL_ACCESS_P                                                     = 983295
	TOKEN_ASSIGN_PRIMARY                                                   = 1
	TOKEN_DUPLICATE                                                        = 2
	TOKEN_EXECUTE                                                          = 131072
	TOKEN_IMPERSONATE                                                      = 4
	TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN                                 = 0x2
	TOKEN_MANDATORY_POLICY_NO_WRITE_UP                                     = 0x1
	TOKEN_MANDATORY_POLICY_OFF                                             = 0x0
	TOKEN_MANDATORY_POLICY_VALID_MASK                                      = 3
	TOKEN_QUERY                                                            = 8
	TOKEN_QUERY_SOURCE                                                     = 16
	TOKEN_READ                                                             = 131080
	TOKEN_SOURCE_LENGTH                                                    = 8
	TOKEN_WRITE                                                            = 131296
	TPM_BOTTOMALIGN                                                        = 32
	TPM_CENTERALIGN                                                        = 4
	TPM_HORIZONTAL                                                         = 0
	TPM_HORNEGANIMATION                                                    = 2048
	TPM_HORPOSANIMATION                                                    = 1024
	TPM_LAYOUTRTL                                                          = 32768
	TPM_LEFTALIGN                                                          = 0
	TPM_LEFTBUTTON                                                         = 0
	TPM_NOANIMATION                                                        = 16384
	TPM_NONOTIFY                                                           = 128
	TPM_RECURSE                                                            = 1
	TPM_RETURNCMD                                                          = 256
	TPM_RIGHTALIGN                                                         = 8
	TPM_RIGHTBUTTON                                                        = 2
	TPM_TOPALIGN                                                           = 0
	TPM_VCENTERALIGN                                                       = 16
	TPM_VERNEGANIMATION                                                    = 8192
	TPM_VERPOSANIMATION                                                    = 4096
	TPM_VERTICAL                                                           = 64
	TRANSACTIONMANAGER_ALL_ACCESS                                          = 983103
	TRANSACTIONMANAGER_BIND_TRANSACTION                                    = 0x00020
	TRANSACTIONMANAGER_CREATE_RM                                           = 0x00010
	TRANSACTIONMANAGER_GENERIC_EXECUTE                                     = 131072
	TRANSACTIONMANAGER_GENERIC_READ                                        = 131073
	TRANSACTIONMANAGER_GENERIC_WRITE                                       = 131102
	TRANSACTIONMANAGER_QUERY_INFORMATION                                   = 0x00001
	TRANSACTIONMANAGER_RECOVER                                             = 0x00004
	TRANSACTIONMANAGER_RENAME                                              = 0x00008
	TRANSACTIONMANAGER_SET_INFORMATION                                     = 0x00002
	TRANSACTION_ALL_ACCESS                                                 = 2031679
	TRANSACTION_COMMIT                                                     = 8
	TRANSACTION_DO_NOT_PROMOTE                                             = 0x00000001
	TRANSACTION_ENLIST                                                     = 4
	TRANSACTION_GENERIC_EXECUTE                                            = 1179672
	TRANSACTION_GENERIC_READ                                               = 1179649
	TRANSACTION_GENERIC_WRITE                                              = 1179710
	TRANSACTION_MANAGER_COMMIT_DEFAULT                                     = 0x00000000
	TRANSACTION_MANAGER_COMMIT_LOWEST                                      = 0x00000008
	TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES                                = 0x00000004
	TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME                               = 0x00000002
	TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS                               = 0x00000020
	TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY                               = 0x00000010
	TRANSACTION_MANAGER_MAXIMUM_OPTION                                     = 0x0000003f
	TRANSACTION_MANAGER_VOLATILE                                           = 0x00000001
	TRANSACTION_MAXIMUM_OPTION                                             = 0x00000001
	TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED                   = 0x1
	TRANSACTION_NOTIFY_COMMIT                                              = 0x00000004
	TRANSACTION_NOTIFY_COMMIT_COMPLETE                                     = 0x00000040
	TRANSACTION_NOTIFY_COMMIT_FINALIZE                                     = 0x40000000
	TRANSACTION_NOTIFY_COMMIT_REQUEST                                      = 0x04000000
	TRANSACTION_NOTIFY_DELEGATE_COMMIT                                     = 0x00000400
	TRANSACTION_NOTIFY_ENLIST_MASK                                         = 0x00040000
	TRANSACTION_NOTIFY_ENLIST_PREPREPARE                                   = 0x00001000
	TRANSACTION_NOTIFY_INDOUBT                                             = 0x00004000
	TRANSACTION_NOTIFY_LAST_RECOVER                                        = 0x00002000
	TRANSACTION_NOTIFY_MARSHAL                                             = 0x00020000
	TRANSACTION_NOTIFY_MASK                                                = 0x3fffffff
	TRANSACTION_NOTIFY_PREPARE                                             = 0x00000002
	TRANSACTION_NOTIFY_PREPARE_COMPLETE                                    = 0x00000020
	TRANSACTION_NOTIFY_PREPREPARE                                          = 0x00000001
	TRANSACTION_NOTIFY_PREPREPARE_COMPLETE                                 = 0x00000010
	TRANSACTION_NOTIFY_PROMOTE                                             = 0x08000000
	TRANSACTION_NOTIFY_PROMOTE_NEW                                         = 0x10000000
	TRANSACTION_NOTIFY_PROPAGATE_PULL                                      = 0x00008000
	TRANSACTION_NOTIFY_PROPAGATE_PUSH                                      = 0x00010000
	TRANSACTION_NOTIFY_RECOVER                                             = 0x00000100
	TRANSACTION_NOTIFY_RECOVER_QUERY                                       = 0x00000800
	TRANSACTION_NOTIFY_REQUEST_OUTCOME                                     = 0x20000000
	TRANSACTION_NOTIFY_RM_DISCONNECTED                                     = 0x01000000
	TRANSACTION_NOTIFY_ROLLBACK                                            = 0x00000008
	TRANSACTION_NOTIFY_ROLLBACK_COMPLETE                                   = 0x00000080
	TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT                                 = 0x00000200
	TRANSACTION_NOTIFY_TM_ONLINE                                           = 0x02000000
	TRANSACTION_PROPAGATE                                                  = 32
	TRANSACTION_QUERY_INFORMATION                                          = 1
	TRANSACTION_RESOURCE_MANAGER_RIGHTS                                    = 1179703
	TRANSACTION_RIGHT_RESERVED1                                            = 64
	TRANSACTION_ROLLBACK                                                   = 16
	TRANSACTION_SET_INFORMATION                                            = 2
	TRANSFORM_CTM                                                          = 4107
	TRANSPARENT                                                            = 1
	TRUE                                                                   = 1
	TRUETYPE_FONTTYPE                                                      = 0x004
	TRUNCATE_EXISTING                                                      = 5
	TRY_AGAIN                                                              = 11002
	TT_AVAILABLE                                                           = 0x0001
	TT_ENABLED                                                             = 0x0002
	TT_POLYGON_TYPE                                                        = 24
	TT_PRIM_CSPLINE                                                        = 3
	TT_PRIM_LINE                                                           = 1
	TT_PRIM_QSPLINE                                                        = 2
	TURKISH_CHARSET                                                        = 162
	TWOSTOPBITS                                                            = 2
	UCHAR_MAX                                                              = 255
	UCLEANUI                                                               = 67108864
	UDIRTYUI                                                               = 134217728
	UDP_CHECKSUM_COVERAGE                                                  = 20
	UDP_NOCHECKSUM                                                         = 1
	UINT16_MAX                                                             = 65535
	UINT32_MAX                                                             = 0xffffffff
	UINT64_MAX                                                             = 0xffffffffffffffff
	UINT8_MAX                                                              = 255
	UINTMAX_MAX                                                            = 18446744073709551615
	UINTPTR_MAX                                                            = 18446744073709551615
	UINT_FAST16_MAX                                                        = 65535
	UINT_FAST32_MAX                                                        = 4294967295
	UINT_FAST64_MAX                                                        = 18446744073709551615
	UINT_FAST8_MAX                                                         = 255
	UINT_LEAST16_MAX                                                       = 65535
	UINT_LEAST32_MAX                                                       = 4294967295
	UINT_LEAST64_MAX                                                       = 18446744073709551615
	UINT_LEAST8_MAX                                                        = 255
	UINT_MAX                                                               = 4294967295
	UISF_ACTIVE                                                            = 0x4
	UISF_HIDEACCEL                                                         = 0x2
	UISF_HIDEFOCUS                                                         = 0x1
	UIS_CLEAR                                                              = 2
	UIS_INITIALIZE                                                         = 3
	UIS_SET                                                                = 1
	UI_CAP_2700                                                            = 0x00000001
	UI_CAP_ROT90                                                           = 0x00000002
	UI_CAP_ROTANY                                                          = 0x00000004
	ULLONG_MAX                                                             = 18446744073709551615
	ULONG_LONG_MAX                                                         = 18446744073709551615
	ULONG_MAX                                                              = 4294967295
	ULW_ALPHA                                                              = 0x00000002
	ULW_COLORKEY                                                           = 0x00000001
	ULW_EX_NORESIZE                                                        = 0x00000008
	ULW_OPAQUE                                                             = 0x00000004
	UNALIGNED                                                              = 0
	UNALIGNED64                                                            = 0
	UNDERFLOW                                                              = 4
	UNICODE_NOCHAR                                                         = 0xFFFF
	UNICODE_STRING_MAX_CHARS                                               = 32767
	UNIVERSAL_NAME_INFO_LEVEL                                              = 0x00000001
	UNLOAD_DLL_DEBUG_EVENT                                                 = 7
	UNPROTECTED_DACL_SECURITY_INFORMATION                                  = 536870912
	UNPROTECTED_SACL_SECURITY_INFORMATION                                  = 268435456
	UNWIND_HISTORY_TABLE_GLOBAL                                            = 1
	UNWIND_HISTORY_TABLE_LOCAL                                             = 2
	UNWIND_HISTORY_TABLE_NONE                                              = 0
	UNWIND_HISTORY_TABLE_SIZE                                              = 12
	UNW_FLAG_CHAININFO                                                     = 0x4
	UNW_FLAG_EHANDLER                                                      = 0x1
	UNW_FLAG_NHANDLER                                                      = 0x0
	UNW_FLAG_UHANDLER                                                      = 0x2
	UOI_FLAGS                                                              = 1
	UOI_NAME                                                               = 2
	UOI_TIMERPROC_EXCEPTION_SUPPRESSION                                    = 7
	UOI_TYPE                                                               = 3
	UOI_USER_SID                                                           = 4
	UPOINTER_32                                                            = 0
	USER_TIMER_MAXIMUM                                                     = 0x7FFFFFFF
	USER_TIMER_MINIMUM                                                     = 0x0000000A
	USE_PUTENV                                                             = 1
	USE_PUTENV_FOR_UNSET                                                   = 1
	USE_TCLALLOC                                                           = 0
	USE_TCLOO_STUBS                                                        = 0
	USE_TCL_STUBS                                                          = 0
	USE___UUIDOF                                                           = 0
	USHRT_MAX                                                              = 65535
	VALID_INHERIT_FLAGS                                                    = 31
	VARIABLE_PITCH                                                         = 2
	VAR_ALL_HASH                                                           = 4236
	VAR_ALL_TRACES                                                         = 2160
	VAR_ARGUMENT                                                           = 0x100
	VAR_ARRAY                                                              = 0x1
	VAR_ARRAY_ELEMENT                                                      = 0x1000
	VAR_DEAD_HASH                                                          = 0x8
	VAR_IN_HASHTABLE                                                       = 0x4
	VAR_IS_ARGS                                                            = 0x400
	VAR_LINK                                                               = 0x2
	VAR_NAMESPACE_VAR                                                      = 0x80
	VAR_RESOLVED                                                           = 0x8000
	VAR_SEARCH_ACTIVE                                                      = 0x4000
	VAR_TEMPORARY                                                          = 0x200
	VAR_TRACED_ARRAY                                                       = 0x800
	VAR_TRACED_READ                                                        = 0x10
	VAR_TRACED_UNSET                                                       = 0x40
	VAR_TRACED_WRITE                                                       = 0x20
	VAR_TRACE_ACTIVE                                                       = 0x2000
	VERTRES                                                                = 10
	VERTSIZE                                                               = 6
	VER_AND                                                                = 6
	VER_BUILDNUMBER                                                        = 0x0000004
	VER_CONDITION_MASK                                                     = 7
	VER_EQUAL                                                              = 1
	VER_GREATER                                                            = 2
	VER_GREATER_EQUAL                                                      = 3
	VER_H                                                                  = 0
	VER_LESS                                                               = 4
	VER_LESS_EQUAL                                                         = 5
	VER_MAJORVERSION                                                       = 0x0000002
	VER_MINORVERSION                                                       = 0x0000001
	VER_NT_DOMAIN_CONTROLLER                                               = 0x0000002
	VER_NT_SERVER                                                          = 0x0000003
	VER_NT_WORKSTATION                                                     = 0x0000001
	VER_NUM_BITS_PER_CONDITION_MASK                                        = 3
	VER_OR                                                                 = 7
	VER_PLATFORMID                                                         = 0x0000008
	VER_PLATFORM_WIN32_NT                                                  = 2
	VER_PLATFORM_WIN32_WINDOWS                                             = 1
	VER_PLATFORM_WIN32s                                                    = 0
	VER_PRODUCT_TYPE                                                       = 0x0000080
	VER_SERVER_NT                                                          = 0x80000000
	VER_SERVICEPACKMAJOR                                                   = 0x0000020
	VER_SERVICEPACKMINOR                                                   = 0x0000010
	VER_SUITENAME                                                          = 0x0000040
	VER_SUITE_BACKOFFICE                                                   = 0x00000004
	VER_SUITE_BLADE                                                        = 0x00000400
	VER_SUITE_COMMUNICATIONS                                               = 0x00000008
	VER_SUITE_COMPUTE_SERVER                                               = 0x00004000
	VER_SUITE_DATACENTER                                                   = 0x00000080
	VER_SUITE_EMBEDDEDNT                                                   = 0x00000040
	VER_SUITE_EMBEDDED_RESTRICTED                                          = 0x00000800
	VER_SUITE_ENTERPRISE                                                   = 0x00000002
	VER_SUITE_PERSONAL                                                     = 0x00000200
	VER_SUITE_SECURITY_APPLIANCE                                           = 0x00001000
	VER_SUITE_SINGLEUSERTS                                                 = 0x00000100
	VER_SUITE_SMALLBUSINESS                                                = 0x00000001
	VER_SUITE_SMALLBUSINESS_RESTRICTED                                     = 0x00000020
	VER_SUITE_STORAGE_SERVER                                               = 0x00002000
	VER_SUITE_TERMINAL                                                     = 0x00000010
	VER_SUITE_WH_SERVER                                                    = 0x00008000
	VER_WORKSTATION_NT                                                     = 0x40000000
	VFFF_ISSHAREDFILE                                                      = 0x0001
	VFF_BUFFTOOSMALL                                                       = 0x0004
	VFF_CURNEDEST                                                          = 0x0001
	VFF_FILEINUSE                                                          = 0x0002
	VFT2_DRV_COMM                                                          = 10
	VFT2_DRV_DISPLAY                                                       = 4
	VFT2_DRV_INPUTMETHOD                                                   = 11
	VFT2_DRV_INSTALLABLE                                                   = 8
	VFT2_DRV_KEYBOARD                                                      = 2
	VFT2_DRV_LANGUAGE                                                      = 3
	VFT2_DRV_MOUSE                                                         = 5
	VFT2_DRV_NETWORK                                                       = 6
	VFT2_DRV_PRINTER                                                       = 1
	VFT2_DRV_SOUND                                                         = 9
	VFT2_DRV_SYSTEM                                                        = 7
	VFT2_DRV_VERSIONED_PRINTER                                             = 12
	VFT2_FONT_RASTER                                                       = 1
	VFT2_FONT_TRUETYPE                                                     = 3
	VFT2_FONT_VECTOR                                                       = 2
	VFT2_UNKNOWN                                                           = 0
	VFT_APP                                                                = 1
	VFT_DLL                                                                = 2
	VFT_DRV                                                                = 3
	VFT_FONT                                                               = 4
	VFT_STATIC_LIB                                                         = 7
	VFT_UNKNOWN                                                            = 0
	VFT_VXD                                                                = 5
	VIETNAMESE_CHARSET                                                     = 163
	VIEW_E_FIRST                                                           = 2147746112
	VIEW_E_LAST                                                            = 2147746127
	VIEW_S_FIRST                                                           = 262464
	VIEW_S_LAST                                                            = 262479
	VIFF_DONTDELETEOLD                                                     = 0x0002
	VIFF_FORCEINSTALL                                                      = 0x0001
	VIF_ACCESSVIOLATION                                                    = 512
	VIF_BUFFTOOSMALL                                                       = 262144
	VIF_CANNOTCREATE                                                       = 2048
	VIF_CANNOTDELETE                                                       = 4096
	VIF_CANNOTDELETECUR                                                    = 16384
	VIF_CANNOTLOADCABINET                                                  = 1048576
	VIF_CANNOTLOADLZ32                                                     = 524288
	VIF_CANNOTREADDST                                                      = 131072
	VIF_CANNOTREADSRC                                                      = 65536
	VIF_CANNOTRENAME                                                       = 8192
	VIF_DIFFCODEPG                                                         = 16
	VIF_DIFFLANG                                                           = 8
	VIF_DIFFTYPE                                                           = 32
	VIF_FILEINUSE                                                          = 128
	VIF_MISMATCH                                                           = 2
	VIF_OUTOFMEMORY                                                        = 32768
	VIF_OUTOFSPACE                                                         = 256
	VIF_SHARINGVIOLATION                                                   = 1024
	VIF_SRCOLD                                                             = 4
	VIF_TEMPFILE                                                           = 1
	VIF_WRITEPROT                                                          = 64
	VK_ACCEPT                                                              = 0x1E
	VK_ADD                                                                 = 0x6B
	VK_APPS                                                                = 0x5D
	VK_ATTN                                                                = 0xF6
	VK_BACK                                                                = 0x08
	VK_BROWSER_BACK                                                        = 0xA6
	VK_BROWSER_FAVORITES                                                   = 0xAB
	VK_BROWSER_FORWARD                                                     = 0xA7
	VK_BROWSER_HOME                                                        = 0xAC
	VK_BROWSER_REFRESH                                                     = 0xA8
	VK_BROWSER_SEARCH                                                      = 0xAA
	VK_BROWSER_STOP                                                        = 0xA9
	VK_CANCEL                                                              = 0x03
	VK_CAPITAL                                                             = 0x14
	VK_CLEAR                                                               = 0x0C
	VK_CONTROL                                                             = 0x11
	VK_CONVERT                                                             = 0x1C
	VK_CRSEL                                                               = 0xF7
	VK_DECIMAL                                                             = 0x6E
	VK_DELETE                                                              = 0x2E
	VK_DIVIDE                                                              = 0x6F
	VK_DOWN                                                                = 0x28
	VK_END                                                                 = 0x23
	VK_EREOF                                                               = 0xF9
	VK_ESCAPE                                                              = 0x1B
	VK_EXECUTE                                                             = 0x2B
	VK_EXSEL                                                               = 0xF8
	VK_F1                                                                  = 0x70
	VK_F10                                                                 = 0x79
	VK_F11                                                                 = 0x7A
	VK_F12                                                                 = 0x7B
	VK_F13                                                                 = 0x7C
	VK_F14                                                                 = 0x7D
	VK_F15                                                                 = 0x7E
	VK_F16                                                                 = 0x7F
	VK_F17                                                                 = 0x80
	VK_F18                                                                 = 0x81
	VK_F19                                                                 = 0x82
	VK_F2                                                                  = 0x71
	VK_F20                                                                 = 0x83
	VK_F21                                                                 = 0x84
	VK_F22                                                                 = 0x85
	VK_F23                                                                 = 0x86
	VK_F24                                                                 = 0x87
	VK_F3                                                                  = 0x72
	VK_F4                                                                  = 0x73
	VK_F5                                                                  = 0x74
	VK_F6                                                                  = 0x75
	VK_F7                                                                  = 0x76
	VK_F8                                                                  = 0x77
	VK_F9                                                                  = 0x78
	VK_FINAL                                                               = 0x18
	VK_HANGEUL                                                             = 0x15
	VK_HANGUL                                                              = 0x15
	VK_HANJA                                                               = 0x19
	VK_HELP                                                                = 0x2F
	VK_HOME                                                                = 0x24
	VK_ICO_00                                                              = 0xE4
	VK_ICO_CLEAR                                                           = 0xE6
	VK_ICO_HELP                                                            = 0xE3
	VK_IME_OFF                                                             = 0x1A
	VK_IME_ON                                                              = 0x16
	VK_INSERT                                                              = 0x2D
	VK_JUNJA                                                               = 0x17
	VK_KANA                                                                = 0x15
	VK_KANJI                                                               = 0x19
	VK_LAUNCH_APP1                                                         = 0xB6
	VK_LAUNCH_APP2                                                         = 0xB7
	VK_LAUNCH_MAIL                                                         = 0xB4
	VK_LAUNCH_MEDIA_SELECT                                                 = 0xB5
	VK_LBUTTON                                                             = 0x01
	VK_LCONTROL                                                            = 0xA2
	VK_LEFT                                                                = 0x25
	VK_LMENU                                                               = 0xA4
	VK_LSHIFT                                                              = 0xA0
	VK_LWIN                                                                = 0x5B
	VK_MBUTTON                                                             = 0x04
	VK_MEDIA_NEXT_TRACK                                                    = 0xB0
	VK_MEDIA_PLAY_PAUSE                                                    = 0xB3
	VK_MEDIA_PREV_TRACK                                                    = 0xB1
	VK_MEDIA_STOP                                                          = 0xB2
	VK_MENU                                                                = 0x12
	VK_MODECHANGE                                                          = 0x1F
	VK_MULTIPLY                                                            = 0x6A
	VK_NEXT                                                                = 0x22
	VK_NONAME                                                              = 0xFC
	VK_NONCONVERT                                                          = 0x1D
	VK_NUMLOCK                                                             = 0x90
	VK_NUMPAD0                                                             = 0x60
	VK_NUMPAD1                                                             = 0x61
	VK_NUMPAD2                                                             = 0x62
	VK_NUMPAD3                                                             = 0x63
	VK_NUMPAD4                                                             = 0x64
	VK_NUMPAD5                                                             = 0x65
	VK_NUMPAD6                                                             = 0x66
	VK_NUMPAD7                                                             = 0x67
	VK_NUMPAD8                                                             = 0x68
	VK_NUMPAD9                                                             = 0x69
	VK_OEM_1                                                               = 0xBA
	VK_OEM_102                                                             = 0xE2
	VK_OEM_2                                                               = 0xBF
	VK_OEM_3                                                               = 0xC0
	VK_OEM_4                                                               = 0xDB
	VK_OEM_5                                                               = 0xDC
	VK_OEM_6                                                               = 0xDD
	VK_OEM_7                                                               = 0xDE
	VK_OEM_8                                                               = 0xDF
	VK_OEM_ATTN                                                            = 0xF0
	VK_OEM_AUTO                                                            = 0xF3
	VK_OEM_AX                                                              = 0xE1
	VK_OEM_BACKTAB                                                         = 0xF5
	VK_OEM_CLEAR                                                           = 0xFE
	VK_OEM_COMMA                                                           = 0xBC
	VK_OEM_COPY                                                            = 0xF2
	VK_OEM_CUSEL                                                           = 0xEF
	VK_OEM_ENLW                                                            = 0xF4
	VK_OEM_FINISH                                                          = 0xF1
	VK_OEM_FJ_JISHO                                                        = 0x92
	VK_OEM_FJ_LOYA                                                         = 0x95
	VK_OEM_FJ_MASSHOU                                                      = 0x93
	VK_OEM_FJ_ROYA                                                         = 0x96
	VK_OEM_FJ_TOUROKU                                                      = 0x94
	VK_OEM_JUMP                                                            = 0xEA
	VK_OEM_MINUS                                                           = 0xBD
	VK_OEM_NEC_EQUAL                                                       = 0x92
	VK_OEM_PA1                                                             = 0xEB
	VK_OEM_PA2                                                             = 0xEC
	VK_OEM_PA3                                                             = 0xED
	VK_OEM_PERIOD                                                          = 0xBE
	VK_OEM_PLUS                                                            = 0xBB
	VK_OEM_RESET                                                           = 0xE9
	VK_OEM_WSCTRL                                                          = 0xEE
	VK_PA1                                                                 = 0xFD
	VK_PACKET                                                              = 0xE7
	VK_PAUSE                                                               = 0x13
	VK_PLAY                                                                = 0xFA
	VK_PRINT                                                               = 0x2A
	VK_PRIOR                                                               = 0x21
	VK_PROCESSKEY                                                          = 0xE5
	VK_RBUTTON                                                             = 0x02
	VK_RCONTROL                                                            = 0xA3
	VK_RETURN                                                              = 0x0D
	VK_RIGHT                                                               = 0x27
	VK_RMENU                                                               = 0xA5
	VK_RSHIFT                                                              = 0xA1
	VK_RWIN                                                                = 0x5C
	VK_SCROLL                                                              = 0x91
	VK_SELECT                                                              = 0x29
	VK_SEPARATOR                                                           = 0x6C
	VK_SHIFT                                                               = 0x10
	VK_SLEEP                                                               = 0x5F
	VK_SNAPSHOT                                                            = 0x2C
	VK_SPACE                                                               = 0x20
	VK_SUBTRACT                                                            = 0x6D
	VK_TAB                                                                 = 0x09
	VK_UP                                                                  = 0x26
	VK_VOLUME_DOWN                                                         = 0xAE
	VK_VOLUME_MUTE                                                         = 0xAD
	VK_VOLUME_UP                                                           = 0xAF
	VK_XBUTTON1                                                            = 0x05
	VK_XBUTTON2                                                            = 0x06
	VK_ZOOM                                                                = 0xFB
	VOLUME_NAME_DOS                                                        = 0x0
	VOLUME_NAME_GUID                                                       = 0x1
	VOLUME_NAME_NONE                                                       = 0x4
	VOLUME_NAME_NT                                                         = 0x2
	VOS_DOS                                                                = 65536
	VOS_DOS_WINDOWS16                                                      = 65537
	VOS_DOS_WINDOWS32                                                      = 65540
	VOS_NT                                                                 = 262144
	VOS_NT_WINDOWS32                                                       = 262148
	VOS_OS216                                                              = 131072
	VOS_OS216_PM16                                                         = 131074
	VOS_OS232                                                              = 196608
	VOS_OS232_PM32                                                         = 196611
	VOS_UNKNOWN                                                            = 0
	VOS_WINCE                                                              = 327680
	VOS__BASE                                                              = 0
	VOS__PM16                                                              = 2
	VOS__PM32                                                              = 3
	VOS__WINDOWS16                                                         = 1
	VOS__WINDOWS32                                                         = 4
	VP_COMMAND_GET                                                         = 0x0001
	VP_COMMAND_SET                                                         = 0x0002
	VP_CP_CMD_ACTIVATE                                                     = 0x0001
	VP_CP_CMD_CHANGE                                                       = 0x0004
	VP_CP_CMD_DEACTIVATE                                                   = 0x0002
	VP_CP_TYPE_APS_TRIGGER                                                 = 0x0001
	VP_CP_TYPE_MACROVISION                                                 = 0x0002
	VP_FLAGS_BRIGHTNESS                                                    = 0x0040
	VP_FLAGS_CONTRAST                                                      = 0x0080
	VP_FLAGS_COPYPROTECT                                                   = 0x0100
	VP_FLAGS_FLICKER                                                       = 0x0004
	VP_FLAGS_MAX_UNSCALED                                                  = 0x0010
	VP_FLAGS_OVERSCAN                                                      = 0x0008
	VP_FLAGS_POSITION                                                      = 0x0020
	VP_FLAGS_TV_MODE                                                       = 0x0001
	VP_FLAGS_TV_STANDARD                                                   = 0x0002
	VP_MODE_TV_PLAYBACK                                                    = 0x0002
	VP_MODE_WIN_GRAPHICS                                                   = 0x0001
	VP_TV_STANDARD_NTSC_433                                                = 0x00010000
	VP_TV_STANDARD_NTSC_M                                                  = 0x0001
	VP_TV_STANDARD_NTSC_M_J                                                = 0x0002
	VP_TV_STANDARD_PAL_60                                                  = 0x00040000
	VP_TV_STANDARD_PAL_B                                                   = 0x0004
	VP_TV_STANDARD_PAL_D                                                   = 0x0008
	VP_TV_STANDARD_PAL_G                                                   = 0x00020000
	VP_TV_STANDARD_PAL_H                                                   = 0x0010
	VP_TV_STANDARD_PAL_I                                                   = 0x0020
	VP_TV_STANDARD_PAL_M                                                   = 0x0040
	VP_TV_STANDARD_PAL_N                                                   = 0x0080
	VP_TV_STANDARD_SECAM_B                                                 = 0x0100
	VP_TV_STANDARD_SECAM_D                                                 = 0x0200
	VP_TV_STANDARD_SECAM_G                                                 = 0x0400
	VP_TV_STANDARD_SECAM_H                                                 = 0x0800
	VP_TV_STANDARD_SECAM_K                                                 = 0x1000
	VP_TV_STANDARD_SECAM_K1                                                = 0x2000
	VP_TV_STANDARD_SECAM_L                                                 = 0x4000
	VP_TV_STANDARD_SECAM_L1                                                = 0x00080000
	VP_TV_STANDARD_WIN_VGA                                                 = 0x8000
	VREFRESH                                                               = 116
	VS_FFI_FILEFLAGSMASK                                                   = 63
	VS_FFI_SIGNATURE                                                       = 4277077181
	VS_FFI_STRUCVERSION                                                    = 65536
	VS_FF_DEBUG                                                            = 1
	VS_FF_INFOINFERRED                                                     = 16
	VS_FF_PATCHED                                                          = 4
	VS_FF_PRERELEASE                                                       = 2
	VS_FF_PRIVATEBUILD                                                     = 8
	VS_FF_SPECIALBUILD                                                     = 32
	VS_USER_DEFINED                                                        = 100
	VS_VERSION_INFO                                                        = 1
	VTA_BASELINE                                                           = 24
	VTA_BOTTOM                                                             = 2
	VTA_CENTER                                                             = 6
	VTA_LEFT                                                               = 8
	VTA_RIGHT                                                              = 0
	VTA_TOP                                                                = 0
	WAIT_CHILD                                                             = 0
	WAIT_GRANDCHILD                                                        = 1
	WAIT_TIMEOUT                                                           = 258
	WARNING_IPSEC_MM_POLICY_PRUNED                                         = 13024
	WARNING_IPSEC_QM_POLICY_PRUNED                                         = 13025
	WA_ACTIVE                                                              = 1
	WA_CLICKACTIVE                                                         = 2
	WA_INACTIVE                                                            = 0
	WB_ISDELIMITER                                                         = 2
	WB_LEFT                                                                = 0
	WB_RIGHT                                                               = 1
	WCHAR_MAX                                                              = 0xffff
	WCHAR_MIN                                                              = 0
	WC_COMPOSITECHECK                                                      = 0x00000200
	WC_DEFAULTCHAR                                                         = 0x00000040
	WC_DISCARDNS                                                           = 0x00000010
	WC_NO_BEST_FIT_CHARS                                                   = 0x00000400
	WC_SEPCHARS                                                            = 0x00000020
	WDK_NTDDI_VERSION                                                      = 167772170
	WGL_FONT_LINES                                                         = 0
	WGL_FONT_POLYGONS                                                      = 1
	WGL_SWAPMULTIPLE_MAX                                                   = 16
	WGL_SWAP_MAIN_PLANE                                                    = 0x00000001
	WGL_SWAP_OVERLAY1                                                      = 0x00000002
	WGL_SWAP_OVERLAY10                                                     = 0x00000400
	WGL_SWAP_OVERLAY11                                                     = 0x00000800
	WGL_SWAP_OVERLAY12                                                     = 0x00001000
	WGL_SWAP_OVERLAY13                                                     = 0x00002000
	WGL_SWAP_OVERLAY14                                                     = 0x00004000
	WGL_SWAP_OVERLAY15                                                     = 0x00008000
	WGL_SWAP_OVERLAY2                                                      = 0x00000004
	WGL_SWAP_OVERLAY3                                                      = 0x00000008
	WGL_SWAP_OVERLAY4                                                      = 0x00000010
	WGL_SWAP_OVERLAY5                                                      = 0x00000020
	WGL_SWAP_OVERLAY6                                                      = 0x00000040
	WGL_SWAP_OVERLAY7                                                      = 0x00000080
	WGL_SWAP_OVERLAY8                                                      = 0x00000100
	WGL_SWAP_OVERLAY9                                                      = 0x00000200
	WGL_SWAP_UNDERLAY1                                                     = 0x00010000
	WGL_SWAP_UNDERLAY10                                                    = 0x02000000
	WGL_SWAP_UNDERLAY11                                                    = 0x04000000
	WGL_SWAP_UNDERLAY12                                                    = 0x08000000
	WGL_SWAP_UNDERLAY13                                                    = 0x10000000
	WGL_SWAP_UNDERLAY14                                                    = 0x20000000
	WGL_SWAP_UNDERLAY15                                                    = 0x40000000
	WGL_SWAP_UNDERLAY2                                                     = 0x00020000
	WGL_SWAP_UNDERLAY3                                                     = 0x00040000
	WGL_SWAP_UNDERLAY4                                                     = 0x00080000
	WGL_SWAP_UNDERLAY5                                                     = 0x00100000
	WGL_SWAP_UNDERLAY6                                                     = 0x00200000
	WGL_SWAP_UNDERLAY7                                                     = 0x00400000
	WGL_SWAP_UNDERLAY8                                                     = 0x00800000
	WGL_SWAP_UNDERLAY9                                                     = 0x01000000
	WHEEL_DELTA                                                            = 120
	WHEEL_PAGESCROLL                                                       = 4294967295
	WHITEONBLACK                                                           = 2
	WHITE_BRUSH                                                            = 0
	WHITE_PEN                                                              = 6
	WH_CALLWNDPROC                                                         = 4
	WH_CALLWNDPROCRET                                                      = 12
	WH_CBT                                                                 = 5
	WH_DEBUG                                                               = 9
	WH_FOREGROUNDIDLE                                                      = 11
	WH_GETMESSAGE                                                          = 3
	WH_HARDWARE                                                            = 8
	WH_JOURNALPLAYBACK                                                     = 1
	WH_JOURNALRECORD                                                       = 0
	WH_KEYBOARD                                                            = 2
	WH_KEYBOARD_LL                                                         = 13
	WH_MAX                                                                 = 14
	WH_MAXHOOK                                                             = 14
	WH_MIN                                                                 = -1
	WH_MINHOOK                                                             = -1
	WH_MOUSE                                                               = 7
	WH_MOUSE_LL                                                            = 14
	WH_MSGFILTER                                                           = -1
	WH_SHELL                                                               = 10
	WH_SYSMSGFILTER                                                        = 6
	WIN32                                                                  = 1
	WIN64                                                                  = 1
	WINAPI                                                                 = 0
	WINAPI_FAMILY                                                          = 3
	WINAPI_FAMILY_APP                                                      = 2
	WINAPI_FAMILY_DESKTOP_APP                                              = 3
	WINAPI_INLINE                                                          = 0
	WINAPI_PARTITION_APP                                                   = 0x2
	WINAPI_PARTITION_DESKTOP                                               = 0x1
	WINDING                                                                = 2
	WINDOW_BUFFER_SIZE_EVENT                                               = 0x4
	WINEVENT_INCONTEXT                                                     = 0x0004
	WINEVENT_OUTOFCONTEXT                                                  = 0x0000
	WINEVENT_SKIPOWNPROCESS                                                = 0x0002
	WINEVENT_SKIPOWNTHREAD                                                 = 0x0001
	WINNT                                                                  = 1
	WINPTHREAD_API                                                         = 0
	WINSTA_ACCESSCLIPBOARD                                                 = 4
	WINSTA_ACCESSGLOBALATOMS                                               = 32
	WINSTA_ALL_ACCESS                                                      = 895
	WINSTA_CREATEDESKTOP                                                   = 8
	WINSTA_ENUMDESKTOPS                                                    = 1
	WINSTA_ENUMERATE                                                       = 256
	WINSTA_EXITWINDOWS                                                     = 64
	WINSTA_READATTRIBUTES                                                  = 2
	WINSTA_READSCREEN                                                      = 512
	WINSTA_WRITEATTRIBUTES                                                 = 16
	WINT_MAX                                                               = 0xffff
	WINT_MIN                                                               = 0
	WINVER                                                                 = 0x0501
	WIN_PTHREADS_SIGNAL_H                                                  = 0
	WIN_PTHREADS_TIME_H                                                    = 0
	WMSZ_BOTTOM                                                            = 6
	WMSZ_BOTTOMLEFT                                                        = 7
	WMSZ_BOTTOMRIGHT                                                       = 8
	WMSZ_LEFT                                                              = 1
	WMSZ_RIGHT                                                             = 2
	WMSZ_TOP                                                               = 3
	WMSZ_TOPLEFT                                                           = 4
	WMSZ_TOPRIGHT                                                          = 5
	WM_ACTIVATE                                                            = 0x0006
	WM_ACTIVATEAPP                                                         = 0x001C
	WM_AFXFIRST                                                            = 0x0360
	WM_AFXLAST                                                             = 0x037F
	WM_APP                                                                 = 0x8000
	WM_APPCOMMAND                                                          = 0x0319
	WM_ASKCBFORMATNAME                                                     = 0x030C
	WM_CANCELJOURNAL                                                       = 0x004B
	WM_CANCELMODE                                                          = 0x001F
	WM_CAPTURECHANGED                                                      = 0x0215
	WM_CHANGECBCHAIN                                                       = 0x030D
	WM_CHANGEUISTATE                                                       = 0x0127
	WM_CHAR                                                                = 0x0102
	WM_CHARTOITEM                                                          = 0x002F
	WM_CHILDACTIVATE                                                       = 0x0022
	WM_CLEAR                                                               = 0x0303
	WM_CLIPBOARDUPDATE                                                     = 0x031d
	WM_CLOSE                                                               = 0x0010
	WM_COMMAND                                                             = 0x0111
	WM_COMMNOTIFY                                                          = 0x0044
	WM_COMPACTING                                                          = 0x0041
	WM_COMPAREITEM                                                         = 0x0039
	WM_CONTEXTMENU                                                         = 0x007B
	WM_COPY                                                                = 0x0301
	WM_COPYDATA                                                            = 0x004A
	WM_CREATE                                                              = 0x0001
	WM_CTLCOLORBTN                                                         = 0x0135
	WM_CTLCOLORDLG                                                         = 0x0136
	WM_CTLCOLOREDIT                                                        = 0x0133
	WM_CTLCOLORLISTBOX                                                     = 0x0134
	WM_CTLCOLORMSGBOX                                                      = 0x0132
	WM_CTLCOLORSCROLLBAR                                                   = 0x0137
	WM_CTLCOLORSTATIC                                                      = 0x0138
	WM_CUT                                                                 = 0x0300
	WM_DEADCHAR                                                            = 0x0103
	WM_DELETEITEM                                                          = 0x002D
	WM_DESTROY                                                             = 0x0002
	WM_DESTROYCLIPBOARD                                                    = 0x0307
	WM_DEVICECHANGE                                                        = 0x0219
	WM_DEVMODECHANGE                                                       = 0x001B
	WM_DISPLAYCHANGE                                                       = 0x007E
	WM_DRAWCLIPBOARD                                                       = 0x0308
	WM_DRAWITEM                                                            = 0x002B
	WM_DROPFILES                                                           = 0x0233
	WM_ENABLE                                                              = 0x000A
	WM_ENDSESSION                                                          = 0x0016
	WM_ENTERIDLE                                                           = 0x0121
	WM_ENTERMENULOOP                                                       = 0x0211
	WM_ENTERSIZEMOVE                                                       = 0x0231
	WM_ERASEBKGND                                                          = 0x0014
	WM_EXITMENULOOP                                                        = 0x0212
	WM_EXITSIZEMOVE                                                        = 0x0232
	WM_FONTCHANGE                                                          = 0x001D
	WM_GETDLGCODE                                                          = 0x0087
	WM_GETFONT                                                             = 0x0031
	WM_GETHOTKEY                                                           = 0x0033
	WM_GETICON                                                             = 0x007F
	WM_GETMINMAXINFO                                                       = 0x0024
	WM_GETOBJECT                                                           = 0x003D
	WM_GETTEXT                                                             = 0x000D
	WM_GETTEXTLENGTH                                                       = 0x000E
	WM_HANDHELDFIRST                                                       = 0x0358
	WM_HANDHELDLAST                                                        = 0x035F
	WM_HELP                                                                = 0x0053
	WM_HOTKEY                                                              = 0x0312
	WM_HSCROLL                                                             = 0x0114
	WM_HSCROLLCLIPBOARD                                                    = 0x030E
	WM_ICONERASEBKGND                                                      = 0x0027
	WM_IME_CHAR                                                            = 0x0286
	WM_IME_COMPOSITION                                                     = 0x010F
	WM_IME_COMPOSITIONFULL                                                 = 0x0284
	WM_IME_CONTROL                                                         = 0x0283
	WM_IME_ENDCOMPOSITION                                                  = 0x010E
	WM_IME_KEYDOWN                                                         = 0x0290
	WM_IME_KEYLAST                                                         = 0x010F
	WM_IME_KEYUP                                                           = 0x0291
	WM_IME_NOTIFY                                                          = 0x0282
	WM_IME_REQUEST                                                         = 0x0288
	WM_IME_SELECT                                                          = 0x0285
	WM_IME_SETCONTEXT                                                      = 0x0281
	WM_IME_STARTCOMPOSITION                                                = 0x010D
	WM_INITDIALOG                                                          = 0x0110
	WM_INITMENU                                                            = 0x0116
	WM_INITMENUPOPUP                                                       = 0x0117
	WM_INPUT                                                               = 0x00FF
	WM_INPUTLANGCHANGE                                                     = 0x0051
	WM_INPUTLANGCHANGEREQUEST                                              = 0x0050
	WM_INPUT_DEVICE_CHANGE                                                 = 0x00fe
	WM_KEYDOWN                                                             = 0x0100
	WM_KEYFIRST                                                            = 0x0100
	WM_KEYLAST                                                             = 0x0109
	WM_KEYUP                                                               = 0x0101
	WM_KILLFOCUS                                                           = 0x0008
	WM_LBUTTONDBLCLK                                                       = 0x0203
	WM_LBUTTONDOWN                                                         = 0x0201
	WM_LBUTTONUP                                                           = 0x0202
	WM_MBUTTONDBLCLK                                                       = 0x0209
	WM_MBUTTONDOWN                                                         = 0x0207
	WM_MBUTTONUP                                                           = 0x0208
	WM_MDIACTIVATE                                                         = 0x0222
	WM_MDICASCADE                                                          = 0x0227
	WM_MDICREATE                                                           = 0x0220
	WM_MDIDESTROY                                                          = 0x0221
	WM_MDIGETACTIVE                                                        = 0x0229
	WM_MDIICONARRANGE                                                      = 0x0228
	WM_MDIMAXIMIZE                                                         = 0x0225
	WM_MDINEXT                                                             = 0x0224
	WM_MDIREFRESHMENU                                                      = 0x0234
	WM_MDIRESTORE                                                          = 0x0223
	WM_MDISETMENU                                                          = 0x0230
	WM_MDITILE                                                             = 0x0226
	WM_MEASUREITEM                                                         = 0x002C
	WM_MENUCHAR                                                            = 0x0120
	WM_MENUCOMMAND                                                         = 0x0126
	WM_MENUDRAG                                                            = 0x0123
	WM_MENUGETOBJECT                                                       = 0x0124
	WM_MENURBUTTONUP                                                       = 0x0122
	WM_MENUSELECT                                                          = 0x011F
	WM_MOUSEACTIVATE                                                       = 0x0021
	WM_MOUSEFIRST                                                          = 0x0200
	WM_MOUSEHOVER                                                          = 0x02A1
	WM_MOUSELAST                                                           = 0x020d
	WM_MOUSELEAVE                                                          = 0x02A3
	WM_MOUSEMOVE                                                           = 0x0200
	WM_MOUSEWHEEL                                                          = 0x020A
	WM_MOVE                                                                = 0x0003
	WM_MOVING                                                              = 0x0216
	WM_NCACTIVATE                                                          = 0x0086
	WM_NCCALCSIZE                                                          = 0x0083
	WM_NCCREATE                                                            = 0x0081
	WM_NCDESTROY                                                           = 0x0082
	WM_NCHITTEST                                                           = 0x0084
	WM_NCLBUTTONDBLCLK                                                     = 0x00A3
	WM_NCLBUTTONDOWN                                                       = 0x00A1
	WM_NCLBUTTONUP                                                         = 0x00A2
	WM_NCMBUTTONDBLCLK                                                     = 0x00A9
	WM_NCMBUTTONDOWN                                                       = 0x00A7
	WM_NCMBUTTONUP                                                         = 0x00A8
	WM_NCMOUSEHOVER                                                        = 0x02A0
	WM_NCMOUSELEAVE                                                        = 0x02A2
	WM_NCMOUSEMOVE                                                         = 0x00A0
	WM_NCPAINT                                                             = 0x0085
	WM_NCRBUTTONDBLCLK                                                     = 0x00A6
	WM_NCRBUTTONDOWN                                                       = 0x00A4
	WM_NCRBUTTONUP                                                         = 0x00A5
	WM_NCXBUTTONDBLCLK                                                     = 0x00AD
	WM_NCXBUTTONDOWN                                                       = 0x00AB
	WM_NCXBUTTONUP                                                         = 0x00AC
	WM_NEXTDLGCTL                                                          = 0x0028
	WM_NEXTMENU                                                            = 0x0213
	WM_NOTIFY                                                              = 0x004E
	WM_NOTIFYFORMAT                                                        = 0x0055
	WM_NULL                                                                = 0x0000
	WM_PAINT                                                               = 0x000F
	WM_PAINTCLIPBOARD                                                      = 0x0309
	WM_PAINTICON                                                           = 0x0026
	WM_PALETTECHANGED                                                      = 0x0311
	WM_PALETTEISCHANGING                                                   = 0x0310
	WM_PARENTNOTIFY                                                        = 0x0210
	WM_PASTE                                                               = 0x0302
	WM_PENWINFIRST                                                         = 0x0380
	WM_PENWINLAST                                                          = 0x038F
	WM_POWER                                                               = 0x0048
	WM_POWERBROADCAST                                                      = 0x0218
	WM_PRINT                                                               = 0x0317
	WM_PRINTCLIENT                                                         = 0x0318
	WM_QUERYDRAGICON                                                       = 0x0037
	WM_QUERYENDSESSION                                                     = 0x0011
	WM_QUERYNEWPALETTE                                                     = 0x030F
	WM_QUERYOPEN                                                           = 0x0013
	WM_QUERYUISTATE                                                        = 0x0129
	WM_QUEUESYNC                                                           = 0x0023
	WM_QUIT                                                                = 0x0012
	WM_RBUTTONDBLCLK                                                       = 0x0206
	WM_RBUTTONDOWN                                                         = 0x0204
	WM_RBUTTONUP                                                           = 0x0205
	WM_RENDERALLFORMATS                                                    = 0x0306
	WM_RENDERFORMAT                                                        = 0x0305
	WM_SETCURSOR                                                           = 0x0020
	WM_SETFOCUS                                                            = 0x0007
	WM_SETFONT                                                             = 0x0030
	WM_SETHOTKEY                                                           = 0x0032
	WM_SETICON                                                             = 0x0080
	WM_SETREDRAW                                                           = 0x000B
	WM_SETTEXT                                                             = 0x000C
	WM_SETTINGCHANGE                                                       = 26
	WM_SHOWWINDOW                                                          = 0x0018
	WM_SIZE                                                                = 0x0005
	WM_SIZECLIPBOARD                                                       = 0x030B
	WM_SIZING                                                              = 0x0214
	WM_SPOOLERSTATUS                                                       = 0x002A
	WM_STYLECHANGED                                                        = 0x007D
	WM_STYLECHANGING                                                       = 0x007C
	WM_SYNCPAINT                                                           = 0x0088
	WM_SYSCHAR                                                             = 0x0106
	WM_SYSCOLORCHANGE                                                      = 0x0015
	WM_SYSCOMMAND                                                          = 0x0112
	WM_SYSDEADCHAR                                                         = 0x0107
	WM_SYSKEYDOWN                                                          = 0x0104
	WM_SYSKEYUP                                                            = 0x0105
	WM_TABLET_FIRST                                                        = 0x02c0
	WM_TABLET_LAST                                                         = 0x02df
	WM_TCARD                                                               = 0x0052
	WM_THEMECHANGED                                                        = 0x031A
	WM_TIMECHANGE                                                          = 0x001E
	WM_TIMER                                                               = 0x0113
	WM_UNDO                                                                = 0x0304
	WM_UNICHAR                                                             = 0x0109
	WM_UNINITMENUPOPUP                                                     = 0x0125
	WM_UPDATEUISTATE                                                       = 0x0128
	WM_USER                                                                = 0x0400
	WM_USERCHANGED                                                         = 0x0054
	WM_VKEYTOITEM                                                          = 0x002E
	WM_VSCROLL                                                             = 0x0115
	WM_VSCROLLCLIPBOARD                                                    = 0x030A
	WM_WINDOWPOSCHANGED                                                    = 0x0047
	WM_WINDOWPOSCHANGING                                                   = 0x0046
	WM_WININICHANGE                                                        = 0x001A
	WM_WTSSESSION_CHANGE                                                   = 0x02B1
	WM_XBUTTONDBLCLK                                                       = 0x020D
	WM_XBUTTONDOWN                                                         = 0x020B
	WM_XBUTTONUP                                                           = 0x020C
	WNCON_DYNAMIC                                                          = 0x00000008
	WNCON_FORNETCARD                                                       = 0x00000001
	WNCON_NOTROUTED                                                        = 0x00000002
	WNCON_SLOWLINK                                                         = 0x00000004
	WNFMT_ABBREVIATED                                                      = 0x02
	WNFMT_CONNECTION                                                       = 0x20
	WNFMT_INENUM                                                           = 0x10
	WNFMT_MULTILINE                                                        = 0x01
	WNNC_CRED_MANAGER                                                      = 0xffff0000
	WNNC_NET_10NET                                                         = 0x00050000
	WNNC_NET_3IN1                                                          = 0x00270000
	WNNC_NET_9TILES                                                        = 0x00090000
	WNNC_NET_APPLETALK                                                     = 0x00130000
	WNNC_NET_AS400                                                         = 0x000b0000
	WNNC_NET_AVID                                                          = 0x001a0000
	WNNC_NET_AVID1                                                         = 0x003a0000
	WNNC_NET_BMC                                                           = 0x00180000
	WNNC_NET_BWNFS                                                         = 0x00100000
	WNNC_NET_CLEARCASE                                                     = 0x00160000
	WNNC_NET_COGENT                                                        = 0x00110000
	WNNC_NET_CSC                                                           = 0x00260000
	WNNC_NET_DAV                                                           = 0x002e0000
	WNNC_NET_DCE                                                           = 0x00190000
	WNNC_NET_DECORB                                                        = 0x00200000
	WNNC_NET_DFS                                                           = 0x003b0000
	WNNC_NET_DISTINCT                                                      = 0x00230000
	WNNC_NET_DOCUSPACE                                                     = 0x001b0000
	WNNC_NET_DRIVEONWEB                                                    = 0x003e0000
	WNNC_NET_EXIFS                                                         = 0x002d0000
	WNNC_NET_EXTENDNET                                                     = 0x00290000
	WNNC_NET_FARALLON                                                      = 0x00120000
	WNNC_NET_FJ_REDIR                                                      = 0x00220000
	WNNC_NET_FOXBAT                                                        = 0x002b0000
	WNNC_NET_FRONTIER                                                      = 0x00170000
	WNNC_NET_FTP_NFS                                                       = 0x000c0000
	WNNC_NET_GOOGLE                                                        = 0x00430000
	WNNC_NET_HOB_NFS                                                       = 0x00320000
	WNNC_NET_IBMAL                                                         = 0x00340000
	WNNC_NET_INTERGRAPH                                                    = 0x00140000
	WNNC_NET_KNOWARE                                                       = 0x002f0000
	WNNC_NET_KWNP                                                          = 0x003c0000
	WNNC_NET_LANMAN                                                        = 131072
	WNNC_NET_LANSTEP                                                       = 0x00080000
	WNNC_NET_LANTASTIC                                                     = 0x000a0000
	WNNC_NET_LIFENET                                                       = 0x000e0000
	WNNC_NET_LOCK                                                          = 0x00350000
	WNNC_NET_LOCUS                                                         = 0x00060000
	WNNC_NET_MANGOSOFT                                                     = 0x001c0000
	WNNC_NET_MASFAX                                                        = 0x00310000
	WNNC_NET_MFILES                                                        = 0x00410000
	WNNC_NET_MSNET                                                         = 0x00010000
	WNNC_NET_MS_NFS                                                        = 0x00420000
	WNNC_NET_NDFS                                                          = 0x00440000
	WNNC_NET_NETWARE                                                       = 0x00030000
	WNNC_NET_OBJECT_DIRE                                                   = 0x00300000
	WNNC_NET_OPENAFS                                                       = 0x00390000
	WNNC_NET_PATHWORKS                                                     = 0x000d0000
	WNNC_NET_POWERLAN                                                      = 0x000f0000
	WNNC_NET_PROTSTOR                                                      = 0x00210000
	WNNC_NET_QUINCY                                                        = 0x00380000
	WNNC_NET_RDR2SAMPLE                                                    = 0x00250000
	WNNC_NET_RIVERFRONT1                                                   = 0x001e0000
	WNNC_NET_RIVERFRONT2                                                   = 0x001f0000
	WNNC_NET_RSFX                                                          = 0x00400000
	WNNC_NET_SERNET                                                        = 0x001d0000
	WNNC_NET_SHIVA                                                         = 0x00330000
	WNNC_NET_SMB                                                           = 0x00020000
	WNNC_NET_SRT                                                           = 0x00370000
	WNNC_NET_STAC                                                          = 0x002a0000
	WNNC_NET_SUN_PC_NFS                                                    = 0x00070000
	WNNC_NET_SYMFONET                                                      = 0x00150000
	WNNC_NET_TERMSRV                                                       = 0x00360000
	WNNC_NET_TWINS                                                         = 0x00240000
	WNNC_NET_VINES                                                         = 0x00040000
	WNNC_NET_VMWARE                                                        = 0x003f0000
	WNNC_NET_YAHOO                                                         = 0x002c0000
	WNNC_NET_ZENWORKS                                                      = 0x003d0000
	WNOHANG                                                                = 1
	WN_ACCESS_DENIED                                                       = 5
	WN_ALREADY_CONNECTED                                                   = 85
	WN_BAD_DEV_TYPE                                                        = 66
	WN_BAD_HANDLE                                                          = 6
	WN_BAD_LEVEL                                                           = 124
	WN_BAD_LOCALNAME                                                       = 1200
	WN_BAD_NETNAME                                                         = 67
	WN_BAD_PASSWORD                                                        = 86
	WN_BAD_POINTER                                                         = 487
	WN_BAD_PROFILE                                                         = 1206
	WN_BAD_PROVIDER                                                        = 1204
	WN_BAD_USER                                                            = 2202
	WN_BAD_VALUE                                                           = 87
	WN_CANCEL                                                              = 1223
	WN_CANNOT_OPEN_PROFILE                                                 = 1205
	WN_CONNECTED_OTHER_PASSWORD                                            = 2108
	WN_CONNECTED_OTHER_PASSWORD_DEFAULT                                    = 2109
	WN_CONNECTION_CLOSED                                                   = 1201
	WN_DEVICE_ALREADY_REMEMBERED                                           = 1202
	WN_DEVICE_ERROR                                                        = 31
	WN_DEVICE_IN_USE                                                       = 2404
	WN_EXTENDED_ERROR                                                      = 1208
	WN_FUNCTION_BUSY                                                       = 170
	WN_MORE_DATA                                                           = 234
	WN_NET_ERROR                                                           = 59
	WN_NOT_AUTHENTICATED                                                   = 1244
	WN_NOT_CONNECTED                                                       = 2250
	WN_NOT_CONTAINER                                                       = 1207
	WN_NOT_INITIALIZING                                                    = 1247
	WN_NOT_LOGGED_ON                                                       = 1245
	WN_NOT_SUPPORTED                                                       = 50
	WN_NOT_VALIDATED                                                       = 1311
	WN_NO_ERROR                                                            = 0
	WN_NO_MORE_DEVICES                                                     = 1248
	WN_NO_MORE_ENTRIES                                                     = 259
	WN_NO_NETWORK                                                          = 1222
	WN_NO_NET_OR_BAD_PATH                                                  = 1203
	WN_OPEN_FILES                                                          = 2401
	WN_OUT_OF_MEMORY                                                       = 8
	WN_RETRY                                                               = 1237
	WN_SUCCESS                                                             = 0
	WN_WINDOWS_ERROR                                                       = 59
	WOW64_CONTEXT_ALL                                                      = 65599
	WOW64_CONTEXT_CONTROL                                                  = 65537
	WOW64_CONTEXT_DEBUG_REGISTERS                                          = 65552
	WOW64_CONTEXT_EXCEPTION_ACTIVE                                         = 0x08000000
	WOW64_CONTEXT_EXCEPTION_REPORTING                                      = 0x80000000
	WOW64_CONTEXT_EXCEPTION_REQUEST                                        = 0x40000000
	WOW64_CONTEXT_EXTENDED_REGISTERS                                       = 65568
	WOW64_CONTEXT_FLOATING_POINT                                           = 65544
	WOW64_CONTEXT_FULL                                                     = 65543
	WOW64_CONTEXT_INTEGER                                                  = 65538
	WOW64_CONTEXT_SEGMENTS                                                 = 65540
	WOW64_CONTEXT_SERVICE_ACTIVE                                           = 0x10000000
	WOW64_CONTEXT_XSTATE                                                   = 65600
	WOW64_CONTEXT_i386                                                     = 0x00010000
	WOW64_CONTEXT_i486                                                     = 0x00010000
	WOW64_MAXIMUM_SUPPORTED_EXTENSION                                      = 512
	WOW64_SIZE_OF_80387_REGISTERS                                          = 80
	WPF_ASYNCWINDOWPLACEMENT                                               = 0x0004
	WPF_RESTORETOMAXIMIZED                                                 = 0x0002
	WPF_SETMINPOSITION                                                     = 0x0001
	WRITE_DAC                                                              = 262144
	WRITE_OWNER                                                            = 524288
	WRITE_RESTRICTED                                                       = 0x8
	WRITE_WATCH_FLAG_RESET                                                 = 0x01
	WSAAPI                                                                 = 0
	WSABASEERR                                                             = 10000
	WSADESCRIPTION_LEN                                                     = 256
	WSAEACCES                                                              = 10013
	WSAEADDRINUSE                                                          = 10048
	WSAEADDRNOTAVAIL                                                       = 10049
	WSAEAFNOSUPPORT                                                        = 10047
	WSAEALREADY                                                            = 10037
	WSAEBADF                                                               = 10009
	WSAECANCELLED                                                          = 10103
	WSAECONNABORTED                                                        = 10053
	WSAECONNREFUSED                                                        = 10061
	WSAECONNRESET                                                          = 10054
	WSAEDESTADDRREQ                                                        = 10039
	WSAEDISCON                                                             = 10101
	WSAEDQUOT                                                              = 10069
	WSAEFAULT                                                              = 10014
	WSAEHOSTDOWN                                                           = 10064
	WSAEHOSTUNREACH                                                        = 10065
	WSAEINPROGRESS                                                         = 10036
	WSAEINTR                                                               = 10004
	WSAEINVAL                                                              = 10022
	WSAEINVALIDPROCTABLE                                                   = 10104
	WSAEINVALIDPROVIDER                                                    = 10105
	WSAEISCONN                                                             = 10056
	WSAELOOP                                                               = 10062
	WSAEMFILE                                                              = 10024
	WSAEMSGSIZE                                                            = 10040
	WSAENAMETOOLONG                                                        = 10063
	WSAENETDOWN                                                            = 10050
	WSAENETRESET                                                           = 10052
	WSAENETUNREACH                                                         = 10051
	WSAENOBUFS                                                             = 10055
	WSAENOMORE                                                             = 10102
	WSAENOPROTOOPT                                                         = 10042
	WSAENOTCONN                                                            = 10057
	WSAENOTEMPTY                                                           = 10066
	WSAENOTSOCK                                                            = 10038
	WSAEOPNOTSUPP                                                          = 10045
	WSAEPFNOSUPPORT                                                        = 10046
	WSAEPROCLIM                                                            = 10067
	WSAEPROTONOSUPPORT                                                     = 10043
	WSAEPROTOTYPE                                                          = 10041
	WSAEPROVIDERFAILEDINIT                                                 = 10106
	WSAEREFUSED                                                            = 10112
	WSAEREMOTE                                                             = 10071
	WSAESHUTDOWN                                                           = 10058
	WSAESOCKTNOSUPPORT                                                     = 10044
	WSAESTALE                                                              = 10070
	WSAETIMEDOUT                                                           = 10060
	WSAETOOMANYREFS                                                        = 10059
	WSAEUSERS                                                              = 10068
	WSAEWOULDBLOCK                                                         = 10035
	WSAHOST_NOT_FOUND                                                      = 11001
	WSANOTINITIALISED                                                      = 10093
	WSANO_ADDRESS                                                          = 11004
	WSANO_DATA                                                             = 11004
	WSANO_RECOVERY                                                         = 11003
	WSAPROTOCOL_LEN                                                        = 255
	WSASERVICE_NOT_FOUND                                                   = 10108
	WSASYSCALLFAILURE                                                      = 10107
	WSASYSNOTREADY                                                         = 10091
	WSASYS_STATUS_LEN                                                      = 128
	WSATRY_AGAIN                                                           = 11002
	WSATYPE_NOT_FOUND                                                      = 10109
	WSAVERNOTSUPPORTED                                                     = 10092
	WSA_E_CANCELLED                                                        = 10111
	WSA_E_NO_MORE                                                          = 10110
	WSA_FLAG_ACCESS_SYSTEM_SECURITY                                        = 0x40
	WSA_FLAG_MULTIPOINT_C_LEAF                                             = 0x04
	WSA_FLAG_MULTIPOINT_C_ROOT                                             = 0x02
	WSA_FLAG_MULTIPOINT_D_LEAF                                             = 0x10
	WSA_FLAG_MULTIPOINT_D_ROOT                                             = 0x08
	WSA_FLAG_NO_HANDLE_INHERIT                                             = 0x80
	WSA_FLAG_OVERLAPPED                                                    = 0x01
	WSA_FLAG_REGISTERED_IO                                                 = 0x100
	WSA_INFINITE                                                           = 4294967295
	WSA_INVALID_HANDLE                                                     = 6
	WSA_INVALID_PARAMETER                                                  = 87
	WSA_IO_INCOMPLETE                                                      = 996
	WSA_IO_PENDING                                                         = 997
	WSA_MAXIMUM_WAIT_EVENTS                                                = 64
	WSA_NOT_ENOUGH_MEMORY                                                  = 8
	WSA_OPERATION_ABORTED                                                  = 995
	WSA_QOS_ADMISSION_FAILURE                                              = 11010
	WSA_QOS_BAD_OBJECT                                                     = 11013
	WSA_QOS_BAD_STYLE                                                      = 11012
	WSA_QOS_EFILTERCOUNT                                                   = 11021
	WSA_QOS_EFILTERSTYLE                                                   = 11019
	WSA_QOS_EFILTERTYPE                                                    = 11020
	WSA_QOS_EFLOWCOUNT                                                     = 11023
	WSA_QOS_EFLOWDESC                                                      = 11026
	WSA_QOS_EFLOWSPEC                                                      = 11017
	WSA_QOS_EOBJLENGTH                                                     = 11022
	WSA_QOS_EPOLICYOBJ                                                     = 11025
	WSA_QOS_EPROVSPECBUF                                                   = 11018
	WSA_QOS_EPSFILTERSPEC                                                  = 11028
	WSA_QOS_EPSFLOWSPEC                                                    = 11027
	WSA_QOS_ESDMODEOBJ                                                     = 11029
	WSA_QOS_ESERVICETYPE                                                   = 11016
	WSA_QOS_ESHAPERATEOBJ                                                  = 11030
	WSA_QOS_EUNKNOWNPSOBJ                                                  = 11024
	WSA_QOS_EUNKOWNPSOBJ                                                   = 11024
	WSA_QOS_GENERIC_ERROR                                                  = 11015
	WSA_QOS_NO_RECEIVERS                                                   = 11008
	WSA_QOS_NO_SENDERS                                                     = 11007
	WSA_QOS_POLICY_FAILURE                                                 = 11011
	WSA_QOS_RECEIVERS                                                      = 11005
	WSA_QOS_REQUEST_CONFIRMED                                              = 11009
	WSA_QOS_RESERVED_PETYPE                                                = 11031
	WSA_QOS_SENDERS                                                        = 11006
	WSA_QOS_TRAFFIC_CTRL_ERROR                                             = 11014
	WSA_WAIT_TIMEOUT                                                       = 258
	WSF_VISIBLE                                                            = 1
	WS_ACTIVECAPTION                                                       = 0x0001
	WS_BORDER                                                              = 8388608
	WS_CAPTION                                                             = 12582912
	WS_CHILD                                                               = 1073741824
	WS_CHILDWINDOW                                                         = 1073741824
	WS_CLIPCHILDREN                                                        = 33554432
	WS_CLIPSIBLINGS                                                        = 67108864
	WS_DISABLED                                                            = 134217728
	WS_DLGFRAME                                                            = 4194304
	WS_EX_ACCEPTFILES                                                      = 16
	WS_EX_APPWINDOW                                                        = 262144
	WS_EX_CLIENTEDGE                                                       = 512
	WS_EX_COMPOSITED                                                       = 33554432
	WS_EX_CONTEXTHELP                                                      = 1024
	WS_EX_CONTROLPARENT                                                    = 65536
	WS_EX_DLGMODALFRAME                                                    = 1
	WS_EX_LAYERED                                                          = 0x00080000
	WS_EX_LAYOUTRTL                                                        = 4194304
	WS_EX_LEFT                                                             = 0
	WS_EX_LEFTSCROLLBAR                                                    = 16384
	WS_EX_LTRREADING                                                       = 0
	WS_EX_MDICHILD                                                         = 64
	WS_EX_NOACTIVATE                                                       = 134217728
	WS_EX_NOINHERITLAYOUT                                                  = 1048576
	WS_EX_NOPARENTNOTIFY                                                   = 4
	WS_EX_OVERLAPPEDWINDOW                                                 = 768
	WS_EX_PALETTEWINDOW                                                    = 392
	WS_EX_RIGHT                                                            = 4096
	WS_EX_RIGHTSCROLLBAR                                                   = 0
	WS_EX_RTLREADING                                                       = 8192
	WS_EX_STATICEDGE                                                       = 131072
	WS_EX_TOOLWINDOW                                                       = 128
	WS_EX_TOPMOST                                                          = 8
	WS_EX_TRANSPARENT                                                      = 32
	WS_EX_WINDOWEDGE                                                       = 256
	WS_GROUP                                                               = 131072
	WS_HSCROLL                                                             = 1048576
	WS_ICONIC                                                              = 536870912
	WS_MAXIMIZE                                                            = 16777216
	WS_MAXIMIZEBOX                                                         = 65536
	WS_MINIMIZE                                                            = 536870912
	WS_MINIMIZEBOX                                                         = 131072
	WS_OVERLAPPED                                                          = 0
	WS_OVERLAPPEDWINDOW                                                    = 13565952
	WS_POPUP                                                               = 2147483648
	WS_POPUPWINDOW                                                         = 2156396544
	WS_SIZEBOX                                                             = 262144
	WS_SYSMENU                                                             = 524288
	WS_TABSTOP                                                             = 65536
	WS_THICKFRAME                                                          = 262144
	WS_TILED                                                               = 0
	WS_TILEDWINDOW                                                         = 13565952
	WS_VISIBLE                                                             = 268435456
	WS_VSCROLL                                                             = 2097152
	WTS_CONSOLE_CONNECT                                                    = 0x1
	WTS_CONSOLE_DISCONNECT                                                 = 0x2
	WTS_REMOTE_CONNECT                                                     = 0x3
	WTS_REMOTE_DISCONNECT                                                  = 0x4
	WTS_SESSION_CREATE                                                     = 0xa
	WTS_SESSION_LOCK                                                       = 0x7
	WTS_SESSION_LOGOFF                                                     = 0x6
	WTS_SESSION_LOGON                                                      = 0x5
	WTS_SESSION_REMOTE_CONTROL                                             = 0x9
	WTS_SESSION_TERMINATE                                                  = 0xb
	WTS_SESSION_UNLOCK                                                     = 0x8
	WT_EXECUTEDEFAULT                                                      = 0x00000000
	WT_EXECUTEDELETEWAIT                                                   = 0x00000008
	WT_EXECUTEINIOTHREAD                                                   = 0x00000001
	WT_EXECUTEINLONGTHREAD                                                 = 0x00000010
	WT_EXECUTEINPERSISTENTIOTHREAD                                         = 0x00000040
	WT_EXECUTEINPERSISTENTTHREAD                                           = 0x00000080
	WT_EXECUTEINTIMERTHREAD                                                = 0x00000020
	WT_EXECUTEINUITHREAD                                                   = 0x00000002
	WT_EXECUTEINWAITTHREAD                                                 = 0x00000004
	WT_EXECUTELONGFUNCTION                                                 = 0x00000010
	WT_EXECUTEONLYONCE                                                     = 0x00000008
	WT_TRANSFER_IMPERSONATION                                              = 0x00000100
	WUNTRACED                                                              = 2
	WVR_ALIGNBOTTOM                                                        = 0x0040
	WVR_ALIGNLEFT                                                          = 0x0020
	WVR_ALIGNRIGHT                                                         = 0x0080
	WVR_ALIGNTOP                                                           = 0x0010
	WVR_HREDRAW                                                            = 0x0100
	WVR_REDRAW                                                             = 768
	WVR_VALIDRECTS                                                         = 0x0400
	WVR_VREDRAW                                                            = 0x0200
	W_OK                                                                   = 2
	X3_BTYPE_QP_INST_VAL_POS_X                                             = 0
	X3_BTYPE_QP_INST_WORD_POS_X                                            = 23
	X3_BTYPE_QP_INST_WORD_X                                                = 2
	X3_BTYPE_QP_SIZE_X                                                     = 9
	X3_D_WH_INST_WORD_POS_X                                                = 24
	X3_D_WH_INST_WORD_X                                                    = 3
	X3_D_WH_SIGN_VAL_POS_X                                                 = 0
	X3_D_WH_SIZE_X                                                         = 3
	X3_EMPTY_INST_VAL_POS_X                                                = 0
	X3_EMPTY_INST_WORD_POS_X                                               = 14
	X3_EMPTY_INST_WORD_X                                                   = 1
	X3_EMPTY_SIZE_X                                                        = 2
	X3_IMM20_INST_WORD_POS_X                                               = 4
	X3_IMM20_INST_WORD_X                                                   = 3
	X3_IMM20_SIGN_VAL_POS_X                                                = 0
	X3_IMM20_SIZE_X                                                        = 20
	X3_IMM39_1_INST_WORD_POS_X                                             = 0
	X3_IMM39_1_INST_WORD_X                                                 = 2
	X3_IMM39_1_SIGN_VAL_POS_X                                              = 36
	X3_IMM39_1_SIZE_X                                                      = 23
	X3_IMM39_2_INST_WORD_POS_X                                             = 16
	X3_IMM39_2_INST_WORD_X                                                 = 1
	X3_IMM39_2_SIGN_VAL_POS_X                                              = 20
	X3_IMM39_2_SIZE_X                                                      = 16
	X3_I_INST_WORD_POS_X                                                   = 27
	X3_I_INST_WORD_X                                                       = 3
	X3_I_SIGN_VAL_POS_X                                                    = 59
	X3_I_SIZE_X                                                            = 1
	X3_OPCODE_INST_WORD_POS_X                                              = 28
	X3_OPCODE_INST_WORD_X                                                  = 3
	X3_OPCODE_SIGN_VAL_POS_X                                               = 0
	X3_OPCODE_SIZE_X                                                       = 4
	X3_P_INST_WORD_POS_X                                                   = 0
	X3_P_INST_WORD_X                                                       = 3
	X3_P_SIGN_VAL_POS_X                                                    = 0
	X3_P_SIZE_X                                                            = 4
	X3_TMPLT_INST_WORD_POS_X                                               = 0
	X3_TMPLT_INST_WORD_X                                                   = 0
	X3_TMPLT_SIGN_VAL_POS_X                                                = 0
	X3_TMPLT_SIZE_X                                                        = 4
	XACT_E_FIRST                                                           = 0x8004D000
	XACT_E_LAST                                                            = 0x8004D029
	XACT_S_FIRST                                                           = 0x0004D000
	XACT_S_LAST                                                            = 0x0004D010
	XBUTTON1                                                               = 0x0001
	XBUTTON2                                                               = 0x0002
	XP1_CONNECTIONLESS                                                     = 0x00000001
	XP1_CONNECT_DATA                                                       = 0x00000080
	XP1_DISCONNECT_DATA                                                    = 0x00000100
	XP1_EXPEDITED_DATA                                                     = 0x00000040
	XP1_GRACEFUL_CLOSE                                                     = 0x00000020
	XP1_GUARANTEED_DELIVERY                                                = 0x00000002
	XP1_GUARANTEED_ORDER                                                   = 0x00000004
	XP1_IFS_HANDLES                                                        = 0x00020000
	XP1_INTERRUPT                                                          = 0x00004000
	XP1_MESSAGE_ORIENTED                                                   = 0x00000008
	XP1_MULTIPOINT_CONTROL_PLANE                                           = 0x00000800
	XP1_MULTIPOINT_DATA_PLANE                                              = 0x00001000
	XP1_PARTIAL_MESSAGE                                                    = 0x00040000
	XP1_PSEUDO_STREAM                                                      = 0x00000010
	XP1_QOS_SUPPORTED                                                      = 0x00002000
	XP1_SAN_SUPPORT_SDP                                                    = 0x00080000
	XP1_SUPPORT_BROADCAST                                                  = 0x00000200
	XP1_SUPPORT_MULTIPOINT                                                 = 0x00000400
	XP1_UNI_RECV                                                           = 0x00010000
	XP1_UNI_SEND                                                           = 0x00008000
	XSTATE_AVX                                                             = 2
	XSTATE_GSSE                                                            = 2
	XSTATE_LEGACY_FLOATING_POINT                                           = 0
	XSTATE_LEGACY_SSE                                                      = 1
	XSTATE_MASK_AVX                                                        = 4
	XSTATE_MASK_GSSE                                                       = 4
	XSTATE_MASK_LEGACY                                                     = 3
	XSTATE_MASK_LEGACY_FLOATING_POINT                                      = 1
	XSTATE_MASK_LEGACY_SSE                                                 = 2
	X_OK                                                                   = 1
	X_ADXINTRIN_H_INCLUDED                                                 = 0
	X_AGLOBAL                                                              = 0
	X_ALLOCA_S_HEAP_MARKER                                                 = 0xDDDD
	X_ALLOCA_S_MARKER_SIZE                                                 = 16
	X_ALLOCA_S_STACK_MARKER                                                = 0xCCCC
	X_ALLOCA_S_THRESHOLD                                                   = 1024
	X_ALPHA                                                                = 259
	X_AMD64_                                                               = 0
	X_AMMINTRIN_H_INCLUDED                                                 = 0
	X_ANONYMOUS_STRUCT                                                     = 0
	X_ANONYMOUS_UNION                                                      = 0
	X_ANSI_STDARG_H_                                                       = 0
	X_ANSI_STDDEF_H                                                        = 0
	X_APIAPPCONTAINER_                                                     = 0
	X_APISECUREBASE_                                                       = 0
	X_APISETCCONV_                                                         = 0
	X_APISETDEBUG_                                                         = 0
	X_APISETFILE_                                                          = 0
	X_APISETHANDLE_                                                        = 0
	X_APISETLIBLOADER_                                                     = 0
	X_APISETNAMESPACE_                                                     = 0
	X_APISETREALTIME_                                                      = 0
	X_APISETSTRING_                                                        = 0
	X_APISETUTIL_                                                          = 0
	X_API_SET_H_                                                           = 0
	X_ARGMAX                                                               = 100
	X_ATL_XP_TARGETING                                                     = 1
	X_AVX2INTRIN_H_INCLUDED                                                = 0
	X_AVX5124FMAPSINTRIN_H_INCLUDED                                        = 0
	X_AVX5124VNNIWINTRIN_H_INCLUDED                                        = 0
	X_AVX512BF16INTRIN_H_INCLUDED                                          = 0
	X_AVX512BF16VLINTRIN_H_INCLUDED                                        = 0
	X_AVX512BITALGINTRIN_H_INCLUDED                                        = 0
	X_AVX512BWINTRIN_H_INCLUDED                                            = 0
	X_AVX512CDINTRIN_H_INCLUDED                                            = 0
	X_AVX512DQINTRIN_H_INCLUDED                                            = 0
	X_AVX512ERINTRIN_H_INCLUDED                                            = 0
	X_AVX512FINTRIN_H_INCLUDED                                             = 0
	X_AVX512IFMAINTRIN_H_INCLUDED                                          = 0
	X_AVX512IFMAVLINTRIN_H_INCLUDED                                        = 0
	X_AVX512PFINTRIN_H_INCLUDED                                            = 0
	X_AVX512VBMI2VLINTRIN_H_INCLUDED                                       = 0
	X_AVX512VBMIINTRIN_H_INCLUDED                                          = 0
	X_AVX512VBMIVLINTRIN_H_INCLUDED                                        = 0
	X_AVX512VLBWINTRIN_H_INCLUDED                                          = 0
	X_AVX512VLDQINTRIN_H_INCLUDED                                          = 0
	X_AVX512VLINTRIN_H_INCLUDED                                            = 0
	X_AVX512VNNIVLINTRIN_H_INCLUDED                                        = 0
	X_AVX512VP2INTERSECTINTRIN_H_INCLUDED                                  = 0
	X_AVX512VP2INTERSECTVLINTRIN_H_INCLUDED                                = 0
	X_AVX512VPOPCNTDQINTRIN_H_INCLUDED                                     = 0
	X_AVX512VPOPCNTDQVLINTRIN_H_INCLUDED                                   = 0
	X_AVXINTRIN_H_INCLUDED                                                 = 0
	X_A_ARCH                                                               = 0x20
	X_A_HIDDEN                                                             = 0x02
	X_A_NORMAL                                                             = 0x00
	X_A_RDONLY                                                             = 0x01
	X_A_SUBDIR                                                             = 0x10
	X_A_SYSTEM                                                             = 0x04
	X_BASETSD_H_                                                           = 0
	X_BEM_H_                                                               = 0
	X_BLANK                                                                = 0x40
	X_BLOB_DEFINED                                                         = 0
	X_BMI2INTRIN_H_INCLUDED                                                = 0
	X_BMIINTRIN_H_INCLUDED                                                 = 0
	X_BOOLEAN_                                                             = 0
	X_BSDTYPES_DEFINED                                                     = 0
	X_Benign_race_begin_                                                   = 0
	X_Benign_race_end_                                                     = 0
	X_CALL_REPORTFAULT                                                     = 0x2
	X_CETINTRIN_H_INCLUDED                                                 = 0
	X_CLDEMOTE_H_INCLUDED                                                  = 0
	X_CLFLUSHOPTINTRIN_H_INCLUDED                                          = 0
	X_CLIENTDATA                                                           = 0
	X_CLOCK_T_DEFINED                                                      = 0
	X_CLWBINTRIN_H_INCLUDED                                                = 0
	X_CLZEROINTRIN_H_INCLUDED                                              = 0
	X_CMP_EQ_OQ                                                            = 0x00
	X_CMP_EQ_OS                                                            = 0x10
	X_CMP_EQ_UQ                                                            = 0x08
	X_CMP_EQ_US                                                            = 0x18
	X_CMP_FALSE_OQ                                                         = 0x0b
	X_CMP_FALSE_OS                                                         = 0x1b
	X_CMP_GE_OQ                                                            = 0x1d
	X_CMP_GE_OS                                                            = 0x0d
	X_CMP_GT_OQ                                                            = 0x1e
	X_CMP_GT_OS                                                            = 0x0e
	X_CMP_LE_OQ                                                            = 0x12
	X_CMP_LE_OS                                                            = 0x02
	X_CMP_LT_OQ                                                            = 0x11
	X_CMP_LT_OS                                                            = 0x01
	X_CMP_NEQ_OQ                                                           = 0x0c
	X_CMP_NEQ_OS                                                           = 0x1c
	X_CMP_NEQ_UQ                                                           = 0x04
	X_CMP_NEQ_US                                                           = 0x14
	X_CMP_NGE_UQ                                                           = 0x19
	X_CMP_NGE_US                                                           = 0x09
	X_CMP_NGT_UQ                                                           = 0x1a
	X_CMP_NGT_US                                                           = 0x0a
	X_CMP_NLE_UQ                                                           = 0x16
	X_CMP_NLE_US                                                           = 0x06
	X_CMP_NLT_UQ                                                           = 0x15
	X_CMP_NLT_US                                                           = 0x05
	X_CMP_ORD_Q                                                            = 0x07
	X_CMP_ORD_S                                                            = 0x17
	X_CMP_TRUE_UQ                                                          = 0x0f
	X_CMP_TRUE_US                                                          = 0x1f
	X_CMP_UNORD_Q                                                          = 0x03
	X_CMP_UNORD_S                                                          = 0x13
	X_COMPLEX_DEFINED                                                      = 0
	X_COM_Outptr_                                                          = 0
	X_COM_Outptr_opt_                                                      = 0
	X_COM_Outptr_opt_result_maybenull_                                     = 0
	X_COM_Outptr_result_maybenull_                                         = 0
	X_CONFIG_LOCALE_SWT                                                    = 0
	X_CONST_RETURN                                                         = 0
	X_CONTROL                                                              = 0x20
	X_CRTNOALIAS                                                           = 0
	X_CRTRESTRICT                                                          = 0
	X_CRT_ABS_DEFINED                                                      = 0
	X_CRT_ALGO_DEFINED                                                     = 0
	X_CRT_ALLOCATION_DEFINED                                               = 0
	X_CRT_ALTERNATIVE_IMPORTED                                             = 0
	X_CRT_ATOF_DEFINED                                                     = 0
	X_CRT_CTYPEDATA_DEFINED                                                = 0
	X_CRT_DIRECTORY_DEFINED                                                = 0
	X_CRT_DOUBLE_DEC                                                       = 0
	X_CRT_ERRNO_DEFINED                                                    = 0
	X_CRT_GETPID_DEFINED                                                   = 0
	X_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS                                    = 4
	X_CRT_INTERNAL_LOCAL_SCANF_OPTIONS                                     = 2
	X_CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY                      = 0x0008
	X_CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS                     = 0x0010
	X_CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION                 = 0x0001
	X_CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS                           = 0x0004
	X_CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR                       = 0x0002
	X_CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY                       = 0x0004
	X_CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS                            = 0x0002
	X_CRT_INTERNAL_SCANF_SECURECRT                                         = 0x0001
	X_CRT_MANAGED_HEAP_DEPRECATE                                           = 0
	X_CRT_MATHERR_DEFINED                                                  = 0
	X_CRT_MEMORY_DEFINED                                                   = 0
	X_CRT_PACKING                                                          = 8
	X_CRT_PERROR_DEFINED                                                   = 0
	X_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES                                 = 0
	X_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY                          = 0
	X_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES                               = 0
	X_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT                         = 0
	X_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY                        = 0
	X_CRT_SECURE_NO_DEPRECATE                                              = 0
	X_CRT_SWAB_DEFINED                                                     = 0
	X_CRT_SYSTEM_DEFINED                                                   = 0
	X_CRT_TERMINATE_DEFINED                                                = 0
	X_CRT_USE_WINAPI_FAMILY_DESKTOP_APP                                    = 0
	X_CRT_WCTYPEDATA_DEFINED                                               = 0
	X_CRT_WPERROR_DEFINED                                                  = 0
	X_CRT_WSYSTEM_DEFINED                                                  = 0
	X_CTYPE_DEFINED                                                        = 0
	X_CVTBUFSIZE                                                           = 349
	X_CW_DEFAULT                                                           = 524319
	X_Const_                                                               = 0
	X_DATETIMEAPI_H_                                                       = 0
	X_DEF_WINBOOL_                                                         = 0
	X_DEV_T_DEFINED                                                        = 0
	X_DIGIT                                                                = 0x4
	X_DISABLE_PER_THREAD_LOCALE                                            = 0x2
	X_DISABLE_PER_THREAD_LOCALE_GLOBAL                                     = 0x20
	X_DISABLE_PER_THREAD_LOCALE_NEW                                        = 0x200
	X_DIV_T_DEFINED                                                        = 0
	X_DLL                                                                  = 0
	X_DN_FLUSH                                                             = 0x01000000
	X_DN_SAVE                                                              = 0x00000000
	X_DOMAIN                                                               = 1
	X_DPI_AWARENESS_CONTEXTS_                                              = 0
	X_DWORDLONG_                                                           = 0
	X_EMMINTRIN_H_INCLUDED                                                 = 0
	X_EM_DENORMAL                                                          = 0x00080000
	X_EM_INEXACT                                                           = 0x00000001
	X_EM_INVALID                                                           = 0x00000010
	X_EM_OVERFLOW                                                          = 0x00000004
	X_EM_UNDERFLOW                                                         = 0x00000002
	X_EM_ZERODIVIDE                                                        = 0x00000008
	X_ENABLE_PER_THREAD_LOCALE                                             = 0x1
	X_ENABLE_PER_THREAD_LOCALE_GLOBAL                                      = 0x10
	X_ENABLE_PER_THREAD_LOCALE_NEW                                         = 0x100
	X_ENQCMDINTRIN_H_INCLUDED                                              = 0
	X_ERRCODE_DEFINED                                                      = 0
	X_ERRHANDLING_H_                                                       = 0
	X_EXCEPTION_DEFINED                                                    = 0
	X_F16CINTRIN_H_INCLUDED                                                = 0
	X_FIBERS_H_                                                            = 0
	X_FILETIME_                                                            = 0
	X_FILE_DEFINED                                                         = 0
	X_FILE_OFFSET_BITS                                                     = 64
	X_FILE_OFFSET_BITS_SET_FSEEKO                                          = 0
	X_FILE_OFFSET_BITS_SET_FTELLO                                          = 0
	X_FILE_OFFSET_BITS_SET_LSEEK                                           = 0
	X_FILE_OFFSET_BITS_SET_OFFT                                            = 0
	X_FINDDATA_T_DEFINED                                                   = 0
	X_FLOAT_H___                                                           = 0
	X_FLT_WINERROR_                                                        = 0
	X_FMA4INTRIN_H_INCLUDED                                                = 0
	X_FMAINTRIN_H_INCLUDED                                                 = 0
	X_FPCLASS_ND                                                           = 0x0010
	X_FPCLASS_NINF                                                         = 0x0004
	X_FPCLASS_NN                                                           = 0x0008
	X_FPCLASS_NZ                                                           = 0x0020
	X_FPCLASS_PD                                                           = 0x0080
	X_FPCLASS_PINF                                                         = 0x0200
	X_FPCLASS_PN                                                           = 0x0100
	X_FPCLASS_PZ                                                           = 0x0040
	X_FPCLASS_QNAN                                                         = 0x0002
	X_FPCLASS_SNAN                                                         = 0x0001
	X_FPE_DENORMAL                                                         = 0x82
	X_FPE_EXPLICITGEN                                                      = 0x8c
	X_FPE_INEXACT                                                          = 0x86
	X_FPE_INVALID                                                          = 0x81
	X_FPE_OVERFLOW                                                         = 0x84
	X_FPE_SQRTNEG                                                          = 0x88
	X_FPE_STACKOVERFLOW                                                    = 0x8a
	X_FPE_STACKUNDERFLOW                                                   = 0x8b
	X_FPE_UNDERFLOW                                                        = 0x85
	X_FPE_UNEMULATED                                                       = 0x87
	X_FPE_ZERODIVIDE                                                       = 0x83
	X_FPOS_T_DEFINED                                                       = 0
	X_FREEA_INLINE                                                         = 0
	X_FREEENTRY                                                            = 0
	X_FSIZE_T_DEFINED                                                      = 0
	X_FXSRINTRIN_H_INCLUDED                                                = 0
	X_Field_z_                                                             = 0
	X_GCC_LIMITS_H_                                                        = 0
	X_GCC_MAX_ALIGN_T                                                      = 0
	X_GCC_WRAP_STDINT_H                                                    = 0
	X_GFNIINTRIN_H_INCLUDED                                                = 0
	X_GUIDDEF_H_                                                           = 0
	X_HEAPAPI_H_                                                           = 0
	X_HEAPBADBEGIN                                                         = -3
	X_HEAPBADNODE                                                          = -4
	X_HEAPBADPTR                                                           = -6
	X_HEAPEMPTY                                                            = -1
	X_HEAPEND                                                              = -5
	X_HEAPINFO_DEFINED                                                     = 0
	X_HEAPOK                                                               = -2
	X_HEAP_MAXREQ                                                          = 0xFFFFFFFFFFFFFFE0
	X_HEX                                                                  = 0x80
	X_HRESULT_DEFINED                                                      = 0
	X_I16_MAX                                                              = 32767
	X_I16_MIN                                                              = -32768
	X_I32_MAX                                                              = 2147483647
	X_I32_MIN                                                              = -2147483648
	X_I64_MAX                                                              = 9223372036854775807
	X_I64_MIN                                                              = -9223372036854775808
	X_I8_MAX                                                               = 127
	X_I8_MIN                                                               = -128
	X_IC_AFFINE                                                            = 0x00040000
	X_IC_PROJECTIVE                                                        = 0x00000000
	X_IMMINTRIN_H_INCLUDED                                                 = 0
	X_IMM_                                                                 = 0
	X_IMM_SDK_DEFINED_                                                     = 0
	X_INC_CORECRT                                                          = 0
	X_INC_CORECRT_STARTUP                                                  = 0
	X_INC_CORECRT_WSTDLIB                                                  = 0
	X_INC_CRTDEFS                                                          = 0
	X_INC_CRTDEFS_MACRO                                                    = 0
	X_INC_CRT_UNICODE_MACROS                                               = 2
	X_INC_CTYPE                                                            = 0
	X_INC_ERRNO                                                            = 0
	X_INC_EXCPT                                                            = 0
	X_INC_FCNTL                                                            = 0
	X_INC_LIMITS                                                           = 0
	X_INC_LOCALE                                                           = 0
	X_INC_MINGW_SECAPI                                                     = 0
	X_INC_PROCESS                                                          = 0
	X_INC_SDKDDKVER                                                        = 0
	X_INC_SIGNAL                                                           = 0
	X_INC_STAT                                                             = 0
	X_INC_STDARG                                                           = 0
	X_INC_STDDEF                                                           = 0
	X_INC_STDIO                                                            = 0
	X_INC_STDIO_S                                                          = 0
	X_INC_STDLIB                                                           = 0
	X_INC_STDLIB_S                                                         = 0
	X_INC_STRING                                                           = 0
	X_INC_STRING_S                                                         = 0
	X_INC_SWPRINTF_INL                                                     = 0
	X_INC_TCHAR                                                            = 0
	X_INC_TCHAR_S                                                          = 0
	X_INC_TYPES                                                            = 0
	X_INC_UTIME                                                            = 0
	X_INC_VADEFS                                                           = 0
	X_INC_VIRTDISK                                                         = 0
	X_INC_WCHAR                                                            = 0
	X_INC_WCHAR_S                                                          = 0
	X_INC_WINAPIFAMILY                                                     = 0
	X_INC_WINDOWS                                                          = 0
	X_INC_WTIME_INL                                                        = 0
	X_INC_WTIME_S_INL                                                      = 0
	X_INC__MINGW_H                                                         = 0
	X_INO_T_DEFINED                                                        = 0
	X_INT128_DEFINED                                                       = 0
	X_INTEGRAL_MAX_BITS                                                    = 64
	X_INTERLOCKAPI_H_                                                      = 0
	X_INTPTR_T_DEFINED                                                     = 0
	X_INTRIN_MAC_                                                          = 0
	X_INTTYPES_H_                                                          = 0
	X_IOB_ENTRIES                                                          = 20
	X_IOEOF                                                                = 0x0010
	X_IOERR                                                                = 0x0020
	X_IOFBF                                                                = 0x0000
	X_IOLBF                                                                = 0x0040
	X_IOMYBUF                                                              = 0x0008
	X_IONBF                                                                = 0x0004
	X_IOREAD                                                               = 0x0001
	X_IORW                                                                 = 0x0080
	X_IOSTRG                                                               = 0x0040
	X_IOWRT                                                                = 0x0002
	X_IO_APISET_H_                                                         = 0
	X_IO_H_                                                                = 0
	X_IRQL_requires_same_                                                  = 0
	X_IRQL_restores_                                                       = 0
	X_IRQL_saves_                                                          = 0
	X_In_                                                                  = 0
	X_In_opt_                                                              = 0
	X_In_opt_z_                                                            = 0
	X_In_z_                                                                = 0
	X_Inout_                                                               = 0
	X_Inout_opt_                                                           = 0
	X_Inout_opt_z_                                                         = 0
	X_Inout_z_                                                             = 0
	X_Interlocked_                                                         = 0
	X_JOBAPISET_H_                                                         = 0
	X_KTMTYPES_                                                            = 0
	X_LANGID_DEFINED                                                       = 0
	X_LARGE_INTEGER_DEFINED                                                = 0
	X_LCID_DEFINED                                                         = 0
	X_LCONV_DEFINED                                                        = 0
	X_LDT_ENTRY_DEFINED                                                    = 0
	X_LEADBYTE                                                             = 0x8000
	X_LIMITS_H___                                                          = 0
	X_LIST_ENTRY_DEFINED                                                   = 0
	X_LOGPALETTE_DEFINED                                                   = 0
	X_LOWER                                                                = 0x2
	X_LPBLOB_DEFINED                                                       = 0
	X_LPCVOID_DEFINED                                                      = 0
	X_LWPINTRIN_H_INCLUDED                                                 = 0
	X_LZCNTINTRIN_H_INCLUDED                                               = 0
	X_Literal_                                                             = 0
	X_MALLOC_H_                                                            = 0
	X_MATH_H_                                                              = 0
	X_MAX_DIR                                                              = 256
	X_MAX_DRIVE                                                            = 3
	X_MAX_ENV                                                              = 32767
	X_MAX_EXT                                                              = 256
	X_MAX_FNAME                                                            = 256
	X_MAX_PATH                                                             = 260
	X_MAX_WAIT_MALLOC_CRT                                                  = 60000
	X_MCW_DN                                                               = 0x03000000
	X_MCW_EM                                                               = 0x0008001F
	X_MCW_IC                                                               = 0x00040000
	X_MCW_PC                                                               = 0x00030000
	X_MCW_RC                                                               = 0x00000300
	X_MCX_H_                                                               = 0
	X_MEMORYAPI_H_                                                         = 0
	X_MINGW_FLOAT_H_                                                       = 0
	X_MINGW_IP_MREQ1_H                                                     = 0
	X_MINGW_IP_TYPES_H                                                     = 0
	X_MINWINBASE_                                                          = 0
	X_MINWINDEF_                                                           = 0
	X_MM3DNOW_H_INCLUDED                                                   = 0
	X_MMINTRIN_H_INCLUDED                                                  = 0
	X_MM_CMPINT_EQ                                                         = 0x0
	X_MM_CMPINT_GE                                                         = 0x5
	X_MM_CMPINT_GT                                                         = 0x6
	X_MM_CMPINT_LE                                                         = 0x2
	X_MM_CMPINT_LT                                                         = 0x1
	X_MM_CMPINT_NE                                                         = 0x4
	X_MM_CMPINT_NLE                                                        = 0x6
	X_MM_CMPINT_NLT                                                        = 0x5
	X_MM_CMPINT_UNUSED                                                     = 0x3
	X_MM_DENORMALS_ZERO_MASK                                               = 0x0040
	X_MM_DENORMALS_ZERO_OFF                                                = 0x0000
	X_MM_DENORMALS_ZERO_ON                                                 = 0x0040
	X_MM_EXCEPT_DENORM                                                     = 0x0002
	X_MM_EXCEPT_DIV_ZERO                                                   = 0x0004
	X_MM_EXCEPT_INEXACT                                                    = 0x0020
	X_MM_EXCEPT_INVALID                                                    = 0x0001
	X_MM_EXCEPT_MASK                                                       = 0x003f
	X_MM_EXCEPT_OVERFLOW                                                   = 0x0008
	X_MM_EXCEPT_UNDERFLOW                                                  = 0x0010
	X_MM_FLUSH_ZERO_MASK                                                   = 0x8000
	X_MM_FLUSH_ZERO_OFF                                                    = 0x0000
	X_MM_FLUSH_ZERO_ON                                                     = 0x8000
	X_MM_FROUND_CEIL                                                       = 2
	X_MM_FROUND_CUR_DIRECTION                                              = 0x04
	X_MM_FROUND_FLOOR                                                      = 1
	X_MM_FROUND_NEARBYINT                                                  = 12
	X_MM_FROUND_NINT                                                       = 0
	X_MM_FROUND_NO_EXC                                                     = 0x08
	X_MM_FROUND_RAISE_EXC                                                  = 0x00
	X_MM_FROUND_RINT                                                       = 4
	X_MM_FROUND_TO_NEAREST_INT                                             = 0x00
	X_MM_FROUND_TO_NEG_INF                                                 = 0x01
	X_MM_FROUND_TO_POS_INF                                                 = 0x02
	X_MM_FROUND_TO_ZERO                                                    = 0x03
	X_MM_FROUND_TRUNC                                                      = 3
	X_MM_MALLOC_H_INCLUDED                                                 = 0
	X_MM_MASK_DENORM                                                       = 0x0100
	X_MM_MASK_DIV_ZERO                                                     = 0x0200
	X_MM_MASK_INEXACT                                                      = 0x1000
	X_MM_MASK_INVALID                                                      = 0x0080
	X_MM_MASK_MASK                                                         = 0x1f80
	X_MM_MASK_OVERFLOW                                                     = 0x0400
	X_MM_MASK_UNDERFLOW                                                    = 0x0800
	X_MM_ROUND_DOWN                                                        = 0x2000
	X_MM_ROUND_MASK                                                        = 0x6000
	X_MM_ROUND_NEAREST                                                     = 0x0000
	X_MM_ROUND_TOWARD_ZERO                                                 = 0x6000
	X_MM_ROUND_UP                                                          = 0x4000
	X_MODE_T_                                                              = 0
	X_MOVDIRINTRIN_H_INCLUDED                                              = 0
	X_MSTCPIP_                                                             = 0
	X_MT                                                                   = 0
	X_MWAITXINTRIN_H_INCLUDED                                              = 0
	X_M_AMD64                                                              = 100
	X_M_X64                                                                = 100
	X_Maybe_raises_SEH_exception_                                          = 0
	X_Must_inspect_result_                                                 = 0
	X_NAMEDPIPE_H_                                                         = 0
	X_NFILE                                                                = 512
	X_NLSCMPERROR                                                          = 2147483647
	X_NLSCMP_DEFINED                                                       = 0
	X_NSTREAM_                                                             = 512
	X_NTDDTAPE_WINNT_                                                      = 0
	X_NTTMAPI_                                                             = 0
	X_NT_TIB_DEFINED                                                       = 0
	X_No_competing_thread_                                                 = 0
	X_No_competing_thread_begin_                                           = 0
	X_No_competing_thread_end_                                             = 0
	X_Notliteral_                                                          = 0
	X_NullNull_terminated_                                                 = 0
	X_Null_terminated_                                                     = 0
	X_OFF64_T_DEFINED                                                      = 0
	X_OFF_T_                                                               = 0
	X_OFF_T_DEFINED                                                        = 0
	X_OLD_P_OVERLAY                                                        = 2
	X_ONEXIT_T_DEFINED                                                     = 0
	X_OUT_TO_DEFAULT                                                       = 0
	X_OUT_TO_MSGBOX                                                        = 2
	X_OUT_TO_STDERR                                                        = 1
	X_OVERFLOW                                                             = 3
	X_O_ACCMODE                                                            = 3
	X_O_APPEND                                                             = 0x0008
	X_O_BINARY                                                             = 0x8000
	X_O_CREAT                                                              = 0x0100
	X_O_EXCL                                                               = 0x0400
	X_O_NOINHERIT                                                          = 0x0080
	X_O_RANDOM                                                             = 0x0010
	X_O_RAW                                                                = 32768
	X_O_RDONLY                                                             = 0x0000
	X_O_RDWR                                                               = 0x0002
	X_O_SEQUENTIAL                                                         = 0x0020
	X_O_SHORT_LIVED                                                        = 0x1000
	X_O_TEMPORARY                                                          = 0x0040
	X_O_TEXT                                                               = 0x4000
	X_O_TRUNC                                                              = 0x0200
	X_O_U16TEXT                                                            = 0x20000
	X_O_U8TEXT                                                             = 0x40000
	X_O_WRONLY                                                             = 0x0001
	X_O_WTEXT                                                              = 0x10000
	X_Out_                                                                 = 0
	X_Out_opt_                                                             = 0
	X_Outptr_                                                              = 0
	X_Outptr_opt_                                                          = 0
	X_Outptr_opt_result_maybenull_                                         = 0
	X_Outptr_opt_result_maybenull_z_                                       = 0
	X_Outptr_opt_result_nullonfailure_                                     = 0
	X_Outptr_opt_result_z_                                                 = 0
	X_Outptr_result_maybenull_                                             = 0
	X_Outptr_result_maybenull_z_                                           = 0
	X_Outptr_result_nullonfailure_                                         = 0
	X_Outptr_result_z_                                                     = 0
	X_Outref_                                                              = 0
	X_Outref_result_maybenull_                                             = 0
	X_Outref_result_nullonfailure_                                         = 0
	X_PALETTEENTRY_DEFINED                                                 = 0
	X_PCONFIGINTRIN_H_INCLUDED                                             = 0
	X_PC_24                                                                = 0x00020000
	X_PC_53                                                                = 0x00010000
	X_PC_64                                                                = 0x00000000
	X_PGLOBAL                                                              = 0
	X_PID_T_                                                               = 0
	X_PKUINTRIN_H_INCLUDED                                                 = 0
	X_PLOSS                                                                = 6
	X_PMMINTRIN_H_INCLUDED                                                 = 0
	X_POPCNTINTRIN_H_INCLUDED                                              = 0
	X_POSIX_CPUTIME                                                        = 200809
	X_POSIX_MONOTONIC_CLOCK                                                = 200809
	X_POSIX_THREAD_CPUTIME                                                 = 200809
	X_POSIX_TIMERS                                                         = 200809
	X_PRFCHWINTRIN_H_INCLUDED                                              = 0
	X_PROCESSENV_                                                          = 0
	X_PROCESSTHREADSAPI_H_                                                 = 0
	X_PROCESSTOPOLOGYAPI_H_                                                = 0
	X_PROFILEAPI_H_                                                        = 0
	X_PROVIDER_STRUCTS_DEFINED                                             = 0
	X_PTRDIFF_T_                                                           = 0
	X_PTRDIFF_T_DEFINED                                                    = 0
	X_PUNCT                                                                = 0x10
	X_P_DETACH                                                             = 4
	X_P_NOWAIT                                                             = 1
	X_P_NOWAITO                                                            = 3
	X_P_OVERLAY                                                            = 2
	X_P_WAIT                                                               = 0
	X_P_tmpdir                                                             = "\\"
	X_Points_to_data_                                                      = 0
	X_Post_                                                                = 0
	X_Post_equals_last_error_                                              = 0
	X_Pre_notnull_                                                         = 0
	X_Printf_format_string_                                                = 0
	X_QSORT_S_DEFINED                                                      = 0
	X_RC_CHOP                                                              = 0x00000300
	X_RC_DOWN                                                              = 0x00000100
	X_RC_NEAR                                                              = 0x00000000
	X_RC_UP                                                                = 0x00000200
	X_RDSEEDINTRIN_H_INCLUDED                                              = 0
	X_REFCLSID_DEFINED                                                     = 0
	X_REFFMTID_DEFINED                                                     = 0
	X_REFGUID_DEFINED                                                      = 0
	X_REFIID_DEFINED                                                       = 0
	X_REGEX_H_                                                             = 0
	X_REPORT_ERRMODE                                                       = 3
	X_RSIZE_T_DEFINED                                                      = 0
	X_RTL_RUN_ONCE_DEF                                                     = 1
	X_RTMINTRIN_H_INCLUDED                                                 = 0
	X_Raises_SEH_exception_                                                = 0
	X_Requires_no_locks_held_                                              = 0
	X_Reserved_                                                            = 0
	X_Result_nullonfailure_                                                = 0
	X_Result_zeroonfailure_                                                = 0
	X_Ret_maybenull_                                                       = 0
	X_Ret_maybenull_z_                                                     = 0
	X_Ret_notnull_                                                         = 0
	X_Ret_null_                                                            = 0
	X_Ret_valid_                                                           = 0
	X_Ret_z_                                                               = 0
	X_SECURECRT_ERRCODE_VALUES_DEFINED                                     = 0
	X_SECURECRT_FILL_BUFFER_PATTERN                                        = 0xFD
	X_SGXINTRIN_H_INCLUDED                                                 = 0
	X_SHAINTRIN_H_INCLUDED                                                 = 0
	X_SIDD_BIT_MASK                                                        = 0x00
	X_SIDD_CMP_EQUAL_ANY                                                   = 0x00
	X_SIDD_CMP_EQUAL_EACH                                                  = 0x08
	X_SIDD_CMP_EQUAL_ORDERED                                               = 0x0c
	X_SIDD_CMP_RANGES                                                      = 0x04
	X_SIDD_LEAST_SIGNIFICANT                                               = 0x00
	X_SIDD_MASKED_NEGATIVE_POLARITY                                        = 0x30
	X_SIDD_MASKED_POSITIVE_POLARITY                                        = 0x20
	X_SIDD_MOST_SIGNIFICANT                                                = 0x40
	X_SIDD_NEGATIVE_POLARITY                                               = 0x10
	X_SIDD_POSITIVE_POLARITY                                               = 0x00
	X_SIDD_SBYTE_OPS                                                       = 0x02
	X_SIDD_SWORD_OPS                                                       = 0x03
	X_SIDD_UBYTE_OPS                                                       = 0x00
	X_SIDD_UNIT_MASK                                                       = 0x40
	X_SIDD_UWORD_OPS                                                       = 0x01
	X_SIGN_DEFINED                                                         = 0
	X_SIGSET_T_                                                            = 0
	X_SIG_ATOMIC_T_DEFINED                                                 = 0
	X_SING                                                                 = 2
	X_SIZE_T_DEFINED                                                       = 0
	X_SLIST_HEADER_                                                        = 0
	X_SMMINTRIN_H_INCLUDED                                                 = 0
	X_SPACE                                                                = 0x8
	X_SPAWNV_DEFINED                                                       = 0
	X_SSIZE_T_DEFINED                                                      = 0
	X_SS_ALIGNSIZE                                                         = 8
	X_SS_MAXSIZE                                                           = 128
	X_STAT_DEFINED                                                         = 0
	X_STDARG_H                                                             = 0
	X_STDDEF_H                                                             = 0
	X_STDDEF_H_                                                            = 0
	X_STDINT_H                                                             = 0
	X_STDIO_CONFIG_DEFINED                                                 = 0
	X_STDIO_DEFINED                                                        = 0
	X_STDIO_S_DEFINED                                                      = 0
	X_STDSTREAM_DEFINED                                                    = 0
	X_STRALIGN_USE_SECURE_CRT                                              = 0
	X_SW_SQRTNEG                                                           = 0x0080
	X_SW_STACKOVERFLOW                                                     = 0x0200
	X_SW_STACKUNDERFLOW                                                    = 0x0400
	X_SW_UNEMULATED                                                        = 0x0040
	X_SYNCHAPI_H_                                                          = 0
	X_SYSINFOAPI_H_                                                        = 0
	X_SYSTEMTIME_                                                          = 0
	X_SYSTEMTOPOLOGY_H_                                                    = 0
	X_SYS_GUID_OPERATORS_                                                  = 0
	X_SYS_GUID_OPERATOR_EQ_                                                = 0
	X_SYS_OPEN                                                             = 20
	X_S_IEXEC                                                              = 0x0040
	X_S_IFBLK                                                              = 0x3000
	X_S_IFCHR                                                              = 0x2000
	X_S_IFDIR                                                              = 0x4000
	X_S_IFIFO                                                              = 0x1000
	X_S_IFMT                                                               = 0xF000
	X_S_IFREG                                                              = 0x8000
	X_S_IREAD                                                              = 0x0100
	X_S_IRUSR                                                              = 256
	X_S_IRWXU                                                              = 448
	X_S_IWRITE                                                             = 0x0080
	X_S_IWUSR                                                              = 128
	X_S_IXUSR                                                              = 64
	X_Scanf_format_string_                                                 = 0
	X_Scanf_s_format_string_                                               = 0
	X_Strict_type_match_                                                   = 0
	X_TAGLC_ID_DEFINED                                                     = 0
	X_TBMINTRIN_H_INCLUDED                                                 = 0
	X_TCHAR_DEFINED                                                        = 0
	X_TCL                                                                  = 0
	X_TCLDECLS                                                             = 0
	X_TCLINT                                                               = 0
	X_TCLINTDECLS                                                          = 0
	X_TCLINTPLATDECLS                                                      = 0
	X_TCLOODECLS                                                           = 0
	X_TCLPLATDECLS                                                         = 0
	X_TCLPORT                                                              = 0
	X_TCLREGEXP                                                            = 0
	X_TCLTOMMATHDECLS                                                      = 0
	X_TCLWINPORT                                                           = 0
	X_TEOF                                                                 = -1
	X_TEXTMETRIC_DEFINED                                                   = 0
	X_THREADLOCALEINFO                                                     = 0
	X_THREADPOOLAPISET_H_                                                  = 0
	X_THREADPOOLLEGACYAPISET_H_                                            = 0
	X_TIME32_T_DEFINED                                                     = 0
	X_TIME64_T_DEFINED                                                     = 0
	X_TIMEB_DEFINED                                                        = 0
	X_TIMEB_H_                                                             = 0
	X_TIMEB_H_S                                                            = 0
	X_TIMESPEC_DEFINED                                                     = 0
	X_TIMEVAL_DEFINED                                                      = 0
	X_TIMEZONEAPI_H_                                                       = 0
	X_TIMEZONE_DEFINED                                                     = 0
	X_TIME_H_                                                              = 0
	X_TIME_T_DEFINED                                                       = 0
	X_TLOSS                                                                = 5
	X_TMMINTRIN_H_INCLUDED                                                 = 0
	X_TM_DEFINED                                                           = 0
	X_TWO_DIGIT_EXPONENT                                                   = 0x1
	X_UI16_MAX                                                             = 0xffff
	X_UI32_MAX                                                             = 0xffffffff
	X_UI64_MAX                                                             = 0xffffffffffffffff
	X_UI8_MAX                                                              = 0xff
	X_UINTPTR_T_DEFINED                                                    = 0
	X_ULONGLONG_                                                           = 0
	X_UNDERFLOW                                                            = 4
	X_UPPER                                                                = 0x1
	X_USEDENTRY                                                            = 1
	X_UTIMBUF_DEFINED                                                      = 0
	X_Use_decl_annotations_                                                = 0
	X_VA_LIST                                                              = 0
	X_VA_LIST_                                                             = 0
	X_VA_LIST_DEFINED                                                      = 0
	X_VA_LIST_T_H                                                          = 0
	X_VPCLMULQDQINTRIN_H_INCLUDED                                          = 0
	X_W64                                                                  = 0
	X_WAITPKG_H_INCLUDED                                                   = 0
	X_WAIT_CHILD                                                           = 0
	X_WAIT_GRANDCHILD                                                      = 1
	X_WBNOINVDINTRIN_H_INCLUDED                                            = 0
	X_WCHAR_T_DEFINED                                                      = 0
	X_WCONIO_DEFINED                                                       = 0
	X_WCONIO_S_DEFINED                                                     = 0
	X_WCTYPE_DEFINED                                                       = 0
	X_WCTYPE_INLINE_DEFINED                                                = 0
	X_WCTYPE_T_DEFINED                                                     = 0
	X_WConst_return                                                        = 0
	X_WDIRECT_DEFINED                                                      = 0
	X_WEXEC_DEFINED                                                        = 0
	X_WFINDDATA_T_DEFINED                                                  = 0
	X_WIN32                                                                = 1
	X_WIN32_IE                                                             = 1536
	X_WIN32_IE_IE100                                                       = 0x0a00
	X_WIN32_IE_IE110                                                       = 0x0A00
	X_WIN32_IE_IE20                                                        = 0x0200
	X_WIN32_IE_IE30                                                        = 0x0300
	X_WIN32_IE_IE302                                                       = 0x0302
	X_WIN32_IE_IE40                                                        = 0x0400
	X_WIN32_IE_IE401                                                       = 0x0401
	X_WIN32_IE_IE50                                                        = 0x0500
	X_WIN32_IE_IE501                                                       = 0x0501
	X_WIN32_IE_IE55                                                        = 0x0550
	X_WIN32_IE_IE60                                                        = 0x0600
	X_WIN32_IE_IE60SP1                                                     = 0x0601
	X_WIN32_IE_IE60SP2                                                     = 0x0603
	X_WIN32_IE_IE70                                                        = 0x0700
	X_WIN32_IE_IE80                                                        = 0x0800
	X_WIN32_IE_IE90                                                        = 0x0900
	X_WIN32_IE_LONGHORN                                                    = 1792
	X_WIN32_IE_NT4                                                         = 512
	X_WIN32_IE_NT4SP1                                                      = 512
	X_WIN32_IE_NT4SP2                                                      = 512
	X_WIN32_IE_NT4SP3                                                      = 770
	X_WIN32_IE_NT4SP4                                                      = 1025
	X_WIN32_IE_NT4SP5                                                      = 1025
	X_WIN32_IE_NT4SP6                                                      = 1280
	X_WIN32_IE_WIN10                                                       = 2560
	X_WIN32_IE_WIN2K                                                       = 1281
	X_WIN32_IE_WIN2KSP1                                                    = 1281
	X_WIN32_IE_WIN2KSP2                                                    = 1281
	X_WIN32_IE_WIN2KSP3                                                    = 1281
	X_WIN32_IE_WIN2KSP4                                                    = 1281
	X_WIN32_IE_WIN6                                                        = 1792
	X_WIN32_IE_WIN7                                                        = 2048
	X_WIN32_IE_WIN8                                                        = 2560
	X_WIN32_IE_WIN98                                                       = 1025
	X_WIN32_IE_WIN98SE                                                     = 1280
	X_WIN32_IE_WINBLUE                                                     = 2560
	X_WIN32_IE_WINME                                                       = 1360
	X_WIN32_IE_WINTHRESHOLD                                                = 2560
	X_WIN32_IE_WS03                                                        = 0x0602
	X_WIN32_IE_WS03SP1                                                     = 1539
	X_WIN32_IE_XP                                                          = 1536
	X_WIN32_IE_XPSP1                                                       = 1537
	X_WIN32_IE_XPSP2                                                       = 1539
	X_WIN32_WINNT                                                          = 0x0501
	X_WIN32_WINNT_LONGHORN                                                 = 0x0600
	X_WIN32_WINNT_NT4                                                      = 0x0400
	X_WIN32_WINNT_VISTA                                                    = 0x0600
	X_WIN32_WINNT_WIN10                                                    = 0x0A00
	X_WIN32_WINNT_WIN2K                                                    = 0x0500
	X_WIN32_WINNT_WIN6                                                     = 0x0600
	X_WIN32_WINNT_WIN7                                                     = 0x0601
	X_WIN32_WINNT_WIN8                                                     = 0x0602
	X_WIN32_WINNT_WINBLUE                                                  = 0x0603
	X_WIN32_WINNT_WINTHRESHOLD                                             = 0x0A00
	X_WIN32_WINNT_WINXP                                                    = 0x0501
	X_WIN32_WINNT_WS03                                                     = 0x0502
	X_WIN32_WINNT_WS08                                                     = 0x0600
	X_WIN64                                                                = 1
	X_WINBASE_                                                             = 0
	X_WINCON_                                                              = 0
	X_WINDEF_                                                              = 0
	X_WINDOWS_                                                             = 0
	X_WINERROR_                                                            = 0
	X_WINGDI_                                                              = 0
	X_WINNETWK_                                                            = 0
	X_WINNLS_                                                              = 0
	X_WINNT_                                                               = 0
	X_WINREG_                                                              = 0
	X_WINSOCK2API_                                                         = 0
	X_WINSOCKAPI_                                                          = 0
	X_WINSVC_                                                              = 0
	X_WINT_T                                                               = 0
	X_WINUSER_                                                             = 0
	X_WIO_DEFINED                                                          = 0
	X_WIO_S_DEFINED                                                        = 0
	X_WLOCALE_DEFINED                                                      = 0
	X_WMMINTRIN_H_INCLUDED                                                 = 0
	X_WNNC_                                                                = 0
	X_WOW64APISET_H_                                                       = 0
	X_WRITE_ABORT_MSG                                                      = 0x1
	X_WS2DEF_                                                              = 0
	X_WS2IPDEF_                                                            = 0
	X_WS2TCPIP_H_                                                          = 0
	X_WSPAWN_DEFINED                                                       = 0
	X_WSPIAPI_H_                                                           = 0
	X_WSTAT_DEFINED                                                        = 0
	X_WSTDIO_DEFINED                                                       = 0
	X_WSTDIO_S_DEFINED                                                     = 0
	X_WSTDLIBP_DEFINED                                                     = 0
	X_WSTDLIB_DEFINED                                                      = 0
	X_WSTRING_DEFINED                                                      = 0
	X_WSTRING_S_DEFINED                                                    = 0
	X_WTIME_DEFINED                                                        = 0
	X_WTIME_S_DEFINED                                                      = 0
	X_X86INTRIN_H_INCLUDED                                                 = 0
	X_XABORT_CAPACITY                                                      = 8
	X_XABORT_CONFLICT                                                      = 4
	X_XABORT_DEBUG                                                         = 16
	X_XABORT_EXPLICIT                                                      = 1
	X_XABORT_NESTED                                                        = 32
	X_XABORT_RETRY                                                         = 2
	X_XBEGIN_STARTED                                                       = 18446744073709551615
	X_XFORM_                                                               = 0
	X_XMMINTRIN_H_INCLUDED                                                 = 0
	X_XOPMMINTRIN_H_INCLUDED                                               = 0
	X_XSAVECINTRIN_H_INCLUDED                                              = 0
	X_XSAVEINTRIN_H_INCLUDED                                               = 0
	X_XSAVEOPTINTRIN_H_INCLUDED                                            = 0
	X_XSAVESINTRIN_H_INCLUDED                                              = 0
	X_XTESTINTRIN_H_INCLUDED                                               = 0
	X_tagBLOB_DEFINED                                                      = 0
	Cdecl                                                                  = 0
	Far                                                                    = 0
	Near                                                                   = 0
	Pascal                                                                 = 0
	EDEADLOCK                                                              = 36
	PBT_POWERSETTINGCHANGE                                                 = 32787
	STATIC_BUILD                                                           = 1
	TCL_TEST                                                               = 1
	UNICODE                                                                = 1
	X_HPOWERNOTIFY_DEF_                                                    = 0
	X_UNICODE                                                              = 1
	BN_CUTOFFS_C                                                           = 0
	BN_DEPRECATED_C                                                        = 0
	BN_FAST_MP_INVMOD_C                                                    = 0
	BN_FAST_MP_MONTGOMERY_REDUCE_C                                         = 0
	BN_FAST_S_MP_MUL_DIGS_C                                                = 0
	BN_FAST_S_MP_MUL_HIGH_DIGS_C                                           = 0
	BN_FAST_S_MP_SQR_C                                                     = 0
	BN_MP_2EXPT_C                                                          = 0
	BN_MP_ABS_C                                                            = 0
	BN_MP_ADDMOD_C                                                         = 0
	BN_MP_ADD_C                                                            = 0
	BN_MP_ADD_D_C                                                          = 0
	BN_MP_AND_C                                                            = 0
	BN_MP_BALANCE_MUL_C                                                    = 0
	BN_MP_CLAMP_C                                                          = 0
	BN_MP_CLEAR_C                                                          = 0
	BN_MP_CLEAR_MULTI_C                                                    = 0
	BN_MP_CMP_C                                                            = 0
	BN_MP_CMP_D_C                                                          = 0
	BN_MP_CMP_MAG_C                                                        = 0
	BN_MP_CNT_LSB_C                                                        = 0
	BN_MP_COMPLEMENT_C                                                     = 0
	BN_MP_COPY_C                                                           = 0
	BN_MP_COUNT_BITS_C                                                     = 0
	BN_MP_DECR_C                                                           = 0
	BN_MP_DIV_2D_C                                                         = 0
	BN_MP_DIV_2_C                                                          = 0
	BN_MP_DIV_3_C                                                          = 0
	BN_MP_DIV_C                                                            = 0
	BN_MP_DIV_D_C                                                          = 0
	BN_MP_DR_IS_MODULUS_C                                                  = 0
	BN_MP_DR_REDUCE_C                                                      = 0
	BN_MP_DR_SETUP_C                                                       = 0
	BN_MP_ERROR_TO_STRING_C                                                = 0
	BN_MP_EXCH_C                                                           = 0
	BN_MP_EXPORT_C                                                         = 0
	BN_MP_EXPTMOD_C                                                        = 0
	BN_MP_EXPTMOD_FAST_C                                                   = 0
	BN_MP_EXPT_D_C                                                         = 0
	BN_MP_EXPT_D_EX_C                                                      = 0
	BN_MP_EXPT_U32_C                                                       = 0
	BN_MP_EXTEUCLID_C                                                      = 0
	BN_MP_FREAD_C                                                          = 0
	BN_MP_FROM_SBIN_C                                                      = 0
	BN_MP_FROM_UBIN_C                                                      = 0
	BN_MP_FWRITE_C                                                         = 0
	BN_MP_GCD_C                                                            = 0
	BN_MP_GET_BIT_C                                                        = 0
	BN_MP_GET_DOUBLE_C                                                     = 0
	BN_MP_GET_I32_C                                                        = 0
	BN_MP_GET_I64_C                                                        = 0
	BN_MP_GET_INT_C                                                        = 0
	BN_MP_GET_LL_C                                                         = 0
	BN_MP_GET_LONG_C                                                       = 0
	BN_MP_GET_LONG_LONG_C                                                  = 0
	BN_MP_GET_L_C                                                          = 0
	BN_MP_GET_MAG_U32_C                                                    = 0
	BN_MP_GET_MAG_U64_C                                                    = 0
	BN_MP_GET_MAG_ULL_C                                                    = 0
	BN_MP_GET_MAG_UL_C                                                     = 0
	BN_MP_GROW_C                                                           = 0
	BN_MP_IMPORT_C                                                         = 0
	BN_MP_INCR_C                                                           = 0
	BN_MP_INIT_C                                                           = 0
	BN_MP_INIT_COPY_C                                                      = 0
	BN_MP_INIT_I32_C                                                       = 0
	BN_MP_INIT_I64_C                                                       = 0
	BN_MP_INIT_LL_C                                                        = 0
	BN_MP_INIT_L_C                                                         = 0
	BN_MP_INIT_MULTI_C                                                     = 0
	BN_MP_INIT_SET_C                                                       = 0
	BN_MP_INIT_SET_INT_C                                                   = 0
	BN_MP_INIT_SIZE_C                                                      = 0
	BN_MP_INIT_U32_C                                                       = 0
	BN_MP_INIT_U64_C                                                       = 0
	BN_MP_INIT_ULL_C                                                       = 0
	BN_MP_INIT_UL_C                                                        = 0
	BN_MP_INVMOD_C                                                         = 0
	BN_MP_INVMOD_SLOW_C                                                    = 0
	BN_MP_ISEVEN_C                                                         = 0
	BN_MP_ISODD_C                                                          = 0
	BN_MP_IS_SQUARE_C                                                      = 0
	BN_MP_JACOBI_C                                                         = 0
	BN_MP_KARATSUBA_MUL_C                                                  = 0
	BN_MP_KARATSUBA_SQR_C                                                  = 0
	BN_MP_KRONECKER_C                                                      = 0
	BN_MP_LCM_C                                                            = 0
	BN_MP_LOG_U32_C                                                        = 0
	BN_MP_LSHD_C                                                           = 0
	BN_MP_MOD_2D_C                                                         = 0
	BN_MP_MOD_C                                                            = 0
	BN_MP_MOD_D_C                                                          = 0
	BN_MP_MONTGOMERY_CALC_NORMALIZATION_C                                  = 0
	BN_MP_MONTGOMERY_REDUCE_C                                              = 0
	BN_MP_MONTGOMERY_SETUP_C                                               = 0
	BN_MP_MULMOD_C                                                         = 0
	BN_MP_MUL_2D_C                                                         = 0
	BN_MP_MUL_2_C                                                          = 0
	BN_MP_MUL_C                                                            = 0
	BN_MP_MUL_D_C                                                          = 0
	BN_MP_NEG_C                                                            = 0
	BN_MP_N_ROOT_C                                                         = 0
	BN_MP_N_ROOT_EX_C                                                      = 0
	BN_MP_OR_C                                                             = 0
	BN_MP_PACK_C                                                           = 0
	BN_MP_PACK_COUNT_C                                                     = 0
	BN_MP_PRIME_FERMAT_C                                                   = 0
	BN_MP_PRIME_FROBENIUS_UNDERWOOD_C                                      = 0
	BN_MP_PRIME_IS_DIVISIBLE_C                                             = 0
	BN_MP_PRIME_IS_PRIME_C                                                 = 0
	BN_MP_PRIME_MILLER_RABIN_C                                             = 0
	BN_MP_PRIME_NEXT_PRIME_C                                               = 0
	BN_MP_PRIME_RABIN_MILLER_TRIALS_C                                      = 0
	BN_MP_PRIME_RANDOM_EX_C                                                = 0
	BN_MP_PRIME_RAND_C                                                     = 0
	BN_MP_PRIME_STRONG_LUCAS_SELFRIDGE_C                                   = 0
	BN_MP_RADIX_SIZE_C                                                     = 0
	BN_MP_RADIX_SMAP_C                                                     = 0
	BN_MP_RAND_C                                                           = 0
	BN_MP_RAND_DIGIT_C                                                     = 0
	BN_MP_RAND_SOURCE_C                                                    = 0
	BN_MP_READ_RADIX_C                                                     = 0
	BN_MP_READ_SIGNED_BIN_C                                                = 0
	BN_MP_READ_UNSIGNED_BIN_C                                              = 0
	BN_MP_REDUCE_2K_C                                                      = 0
	BN_MP_REDUCE_2K_L_C                                                    = 0
	BN_MP_REDUCE_2K_SETUP_C                                                = 0
	BN_MP_REDUCE_2K_SETUP_L_C                                              = 0
	BN_MP_REDUCE_C                                                         = 0
	BN_MP_REDUCE_IS_2K_C                                                   = 0
	BN_MP_REDUCE_IS_2K_L_C                                                 = 0
	BN_MP_REDUCE_SETUP_C                                                   = 0
	BN_MP_ROOT_U32_C                                                       = 0
	BN_MP_RSHD_C                                                           = 0
	BN_MP_SBIN_SIZE_C                                                      = 0
	BN_MP_SET_C                                                            = 0
	BN_MP_SET_DOUBLE_C                                                     = 0
	BN_MP_SET_I32_C                                                        = 0
	BN_MP_SET_I64_C                                                        = 0
	BN_MP_SET_INT_C                                                        = 0
	BN_MP_SET_LL_C                                                         = 0
	BN_MP_SET_LONG_C                                                       = 0
	BN_MP_SET_LONG_LONG_C                                                  = 0
	BN_MP_SET_L_C                                                          = 0
	BN_MP_SET_U32_C                                                        = 0
	BN_MP_SET_U64_C                                                        = 0
	BN_MP_SET_ULL_C                                                        = 0
	BN_MP_SET_UL_C                                                         = 0
	BN_MP_SHRINK_C                                                         = 0
	BN_MP_SIGNED_BIN_SIZE_C                                                = 0
	BN_MP_SIGNED_RSH_C                                                     = 0
	BN_MP_SQRMOD_C                                                         = 0
	BN_MP_SQRTMOD_PRIME_C                                                  = 0
	BN_MP_SQRT_C                                                           = 0
	BN_MP_SQR_C                                                            = 0
	BN_MP_SUBMOD_C                                                         = 0
	BN_MP_SUB_C                                                            = 0
	BN_MP_SUB_D_C                                                          = 0
	BN_MP_TC_AND_C                                                         = 0
	BN_MP_TC_DIV_2D_C                                                      = 0
	BN_MP_TC_OR_C                                                          = 0
	BN_MP_TC_XOR_C                                                         = 0
	BN_MP_TOOM_MUL_C                                                       = 0
	BN_MP_TOOM_SQR_C                                                       = 0
	BN_MP_TORADIX_C                                                        = 0
	BN_MP_TORADIX_N_C                                                      = 0
	BN_MP_TO_RADIX_C                                                       = 0
	BN_MP_TO_SBIN_C                                                        = 0
	BN_MP_TO_SIGNED_BIN_C                                                  = 0
	BN_MP_TO_SIGNED_BIN_N_C                                                = 0
	BN_MP_TO_UBIN_C                                                        = 0
	BN_MP_TO_UNSIGNED_BIN_C                                                = 0
	BN_MP_TO_UNSIGNED_BIN_N_C                                              = 0
	BN_MP_UBIN_SIZE_C                                                      = 0
	BN_MP_UNPACK_C                                                         = 0
	BN_MP_UNSIGNED_BIN_SIZE_C                                              = 0
	BN_MP_XOR_C                                                            = 0
	BN_MP_ZERO_C                                                           = 0
	BN_PRIME_TAB_C                                                         = 0
	BN_S_MP_ADD_C                                                          = 0
	BN_S_MP_BALANCE_MUL_C                                                  = 0
	BN_S_MP_EXPTMOD_C                                                      = 0
	BN_S_MP_EXPTMOD_FAST_C                                                 = 0
	BN_S_MP_GET_BIT_C                                                      = 0
	BN_S_MP_INVMOD_FAST_C                                                  = 0
	BN_S_MP_INVMOD_SLOW_C                                                  = 0
	BN_S_MP_KARATSUBA_MUL_C                                                = 0
	BN_S_MP_KARATSUBA_SQR_C                                                = 0
	BN_S_MP_MONTGOMERY_REDUCE_FAST_C                                       = 0
	BN_S_MP_MUL_DIGS_C                                                     = 0
	BN_S_MP_MUL_DIGS_FAST_C                                                = 0
	BN_S_MP_MUL_HIGH_DIGS_C                                                = 0
	BN_S_MP_MUL_HIGH_DIGS_FAST_C                                           = 0
	BN_S_MP_MUL_SI_C                                                       = 0
	BN_S_MP_PRIME_IS_DIVISIBLE_C                                           = 0
	BN_S_MP_PRIME_RANDOM_EX_C                                              = 0
	BN_S_MP_RAND_CB_C                                                      = 0
	BN_S_MP_RAND_JENKINS_C                                                 = 0
	BN_S_MP_RAND_JENKINS_INIT_C                                            = 0
	BN_S_MP_RAND_PLATFORM_C                                                = 0
	BN_S_MP_RAND_SOURCE_C                                                  = 0
	BN_S_MP_REVERSE_C                                                      = 0
	BN_S_MP_SQR_C                                                          = 0
	BN_S_MP_SQR_FAST_C                                                     = 0
	BN_S_MP_SUB_C                                                          = 0
	BN_S_MP_TOOM_MUL_C                                                     = 0
	BN_S_MP_TOOM_SQR_C                                                     = 0
	LTM1                                                                   = 0
	LTM2                                                                   = 0
	LTM3                                                                   = 0
	LTM_ALL                                                                = 0
	LTM_LAST                                                               = 0
	MAX_STRINGS                                                            = 11
	NUMBER_OF_OBJECT_VARS                                                  = 20
	VARPTR_KEY                                                             = "TCLOBJTEST_VARPTR"
	ACCCTRL_DEFAULT_PROVIDERA                                              = "Windows NT Access Provider"
	ACTIVEOBJECT_STRONG                                                    = 0x0
	ACTIVEOBJECT_WEAK                                                      = 0x1
	ACTRL_ACCESS_ALLOWED                                                   = 0x00000001
	ACTRL_ACCESS_DENIED                                                    = 0x00000002
	ACTRL_ACCESS_NO_OPTIONS                                                = 0x0
	ACTRL_ACCESS_PROTECTED                                                 = 0x00000001
	ACTRL_ACCESS_SUPPORTS_OBJECT_ENTRIES                                   = 0x1
	ACTRL_AUDIT_FAILURE                                                    = 0x00000008
	ACTRL_AUDIT_SUCCESS                                                    = 0x00000004
	ACTRL_CHANGE_ACCESS                                                    = 0x20000000
	ACTRL_CHANGE_OWNER                                                     = 0x40000000
	ACTRL_DELETE                                                           = 0x08000000
	ACTRL_DIR_CREATE_CHILD                                                 = 4
	ACTRL_DIR_CREATE_OBJECT                                                = 2
	ACTRL_DIR_DELETE_CHILD                                                 = 64
	ACTRL_DIR_LIST                                                         = 1
	ACTRL_DIR_TRAVERSE                                                     = 32
	ACTRL_DS_CONTROL_ACCESS                                                = 256
	ACTRL_DS_CREATE_CHILD                                                  = 1
	ACTRL_DS_DELETE_CHILD                                                  = 2
	ACTRL_DS_DELETE_TREE                                                   = 64
	ACTRL_DS_LIST                                                          = 4
	ACTRL_DS_LIST_OBJECT                                                   = 128
	ACTRL_DS_OPEN                                                          = 0
	ACTRL_DS_READ_PROP                                                     = 16
	ACTRL_DS_SELF                                                          = 8
	ACTRL_DS_WRITE_PROP                                                    = 32
	ACTRL_FILE_APPEND                                                      = 4
	ACTRL_FILE_CREATE_PIPE                                                 = 512
	ACTRL_FILE_EXECUTE                                                     = 32
	ACTRL_FILE_READ                                                        = 1
	ACTRL_FILE_READ_ATTRIB                                                 = 128
	ACTRL_FILE_READ_PROP                                                   = 8
	ACTRL_FILE_WRITE                                                       = 2
	ACTRL_FILE_WRITE_ATTRIB                                                = 256
	ACTRL_FILE_WRITE_PROP                                                  = 16
	ACTRL_KERNEL_ALERT                                                     = 1024
	ACTRL_KERNEL_CONTROL                                                   = 512
	ACTRL_KERNEL_DIMPERSONATE                                              = 32768
	ACTRL_KERNEL_DUP_HANDLE                                                = 32
	ACTRL_KERNEL_GET_CONTEXT                                               = 2048
	ACTRL_KERNEL_GET_INFO                                                  = 256
	ACTRL_KERNEL_IMPERSONATE                                               = 16384
	ACTRL_KERNEL_PROCESS                                                   = 64
	ACTRL_KERNEL_SET_CONTEXT                                               = 4096
	ACTRL_KERNEL_SET_INFO                                                  = 128
	ACTRL_KERNEL_TERMINATE                                                 = 1
	ACTRL_KERNEL_THREAD                                                    = 2
	ACTRL_KERNEL_TOKEN                                                     = 8192
	ACTRL_KERNEL_VM                                                        = 4
	ACTRL_KERNEL_VM_READ                                                   = 8
	ACTRL_KERNEL_VM_WRITE                                                  = 16
	ACTRL_PERM_1                                                           = 0x00000001
	ACTRL_PERM_10                                                          = 0x00000200
	ACTRL_PERM_11                                                          = 0x00000400
	ACTRL_PERM_12                                                          = 0x00000800
	ACTRL_PERM_13                                                          = 0x00001000
	ACTRL_PERM_14                                                          = 0x00002000
	ACTRL_PERM_15                                                          = 0x00004000
	ACTRL_PERM_16                                                          = 0x00008000
	ACTRL_PERM_17                                                          = 0x00010000
	ACTRL_PERM_18                                                          = 0x00020000
	ACTRL_PERM_19                                                          = 0x00040000
	ACTRL_PERM_2                                                           = 0x00000002
	ACTRL_PERM_20                                                          = 0x00080000
	ACTRL_PERM_3                                                           = 0x00000004
	ACTRL_PERM_4                                                           = 0x00000008
	ACTRL_PERM_5                                                           = 0x00000010
	ACTRL_PERM_6                                                           = 0x00000020
	ACTRL_PERM_7                                                           = 0x00000040
	ACTRL_PERM_8                                                           = 0x00000080
	ACTRL_PERM_9                                                           = 0x00000100
	ACTRL_PRINT_JADMIN                                                     = 16
	ACTRL_PRINT_PADMIN                                                     = 4
	ACTRL_PRINT_PUSE                                                       = 8
	ACTRL_PRINT_SADMIN                                                     = 1
	ACTRL_PRINT_SLIST                                                      = 2
	ACTRL_READ_CONTROL                                                     = 0x10000000
	ACTRL_REG_CREATE_CHILD                                                 = 4
	ACTRL_REG_LINK                                                         = 32
	ACTRL_REG_LIST                                                         = 8
	ACTRL_REG_NOTIFY                                                       = 16
	ACTRL_REG_QUERY                                                        = 1
	ACTRL_REG_SET                                                          = 2
	ACTRL_RESERVED                                                         = 0x00000000
	ACTRL_STD_RIGHTS_ALL                                                   = 0xf8000000
	ACTRL_STD_RIGHT_REQUIRED                                               = 2013265920
	ACTRL_SVC_GET_INFO                                                     = 1
	ACTRL_SVC_INTERROGATE                                                  = 128
	ACTRL_SVC_LIST                                                         = 8
	ACTRL_SVC_PAUSE                                                        = 64
	ACTRL_SVC_SET_INFO                                                     = 2
	ACTRL_SVC_START                                                        = 16
	ACTRL_SVC_STATUS                                                       = 4
	ACTRL_SVC_STOP                                                         = 32
	ACTRL_SVC_UCONTROL                                                     = 256
	ACTRL_SYNCHRONIZE                                                      = 0x80000000
	ACTRL_SYSTEM_ACCESS                                                    = 0x04000000
	ACTRL_WIN_CLIPBRD                                                      = 1
	ACTRL_WIN_CREATE                                                       = 4
	ACTRL_WIN_EXIT                                                         = 256
	ACTRL_WIN_GLOBAL_ATOMS                                                 = 2
	ACTRL_WIN_LIST                                                         = 16
	ACTRL_WIN_LIST_DESK                                                    = 8
	ACTRL_WIN_READ_ATTRIBS                                                 = 32
	ACTRL_WIN_SCREEN                                                       = 128
	ACTRL_WIN_WRITE_ATTRIBS                                                = 64
	APPIDREGFLAGS_ACTIVATE_IUSERVER_INDESKTOP                              = 0x1
	APPIDREGFLAGS_ISSUE_ACTIVATION_RPC_AT_IDENTIFY                         = 0x4
	APPIDREGFLAGS_IUSERVER_ACTIVATE_IN_CLIENT_SESSION_ONLY                 = 0x20
	APPIDREGFLAGS_IUSERVER_SELF_SID_IN_LAUNCH_PERMISSION                   = 0x10
	APPIDREGFLAGS_IUSERVER_UNMODIFIED_LOGON_TOKEN                          = 0x8
	APPIDREGFLAGS_RESERVED1                                                = 0x40
	APPIDREGFLAGS_SECURE_SERVER_PROCESS_SD_AND_BIND                        = 0x2
	ASYNC_MODE_COMPATIBILITY                                               = 1
	ASYNC_MODE_DEFAULT                                                     = 0
	BEGIN_INTERFACE                                                        = 0
	CCH_MAX_PROPSTG_NAME                                                   = 31
	CF_NULL                                                                = 0
	COM_RIGHTS_ACTIVATE_LOCAL                                              = 8
	COM_RIGHTS_ACTIVATE_REMOTE                                             = 16
	COM_RIGHTS_EXECUTE                                                     = 1
	COM_RIGHTS_EXECUTE_LOCAL                                               = 2
	COM_RIGHTS_EXECUTE_REMOTE                                              = 4
	CONFIRMSAFETYACTION_LOADOBJECT                                         = 0x1
	CONST_VTBL                                                             = 0
	CWCSTORAGENAME                                                         = 32
	CWMO_MAX_HANDLES                                                       = 56
	DCE_C_ERROR_STRING_LEN                                                 = 256
	DCOMSCM_ACTIVATION_DISALLOW_UNSECURE_CALL                              = 0x2
	DCOMSCM_ACTIVATION_USE_ALL_AUTHNSERVICES                               = 0x1
	DCOMSCM_PING_DISALLOW_UNSECURE_CALL                                    = 0x20
	DCOMSCM_PING_USE_MID_AUTHNSERVICE                                      = 0x10
	DCOMSCM_RESOLVE_DISALLOW_UNSECURE_CALL                                 = 0x8
	DCOMSCM_RESOLVE_USE_ALL_AUTHNSERVICES                                  = 0x4
	DD_DEFDRAGDELAY                                                        = 200
	DD_DEFDRAGMINDIST                                                      = 2
	DD_DEFSCROLLDELAY                                                      = 50
	DD_DEFSCROLLINSET                                                      = 11
	DD_DEFSCROLLINTERVAL                                                   = 50
	DEFINDE_LPTYPEINFO                                                     = 0
	DEFINED_DISPID_MEMBERID                                                = 0
	DEFINED_LPCREATETYPELIB                                                = 0
	DEFINED_LPDISPATCH                                                     = 0
	DEFINED_LPTYPECOMP                                                     = 0
	DEFINED_LPTYPELIB                                                      = 0
	DEFINE_LPCREATETYPEINFO                                                = 0
	DISPATCH_METHOD                                                        = 0x1
	DISPATCH_PROPERTYGET                                                   = 0x2
	DISPATCH_PROPERTYPUT                                                   = 0x4
	DISPATCH_PROPERTYPUTREF                                                = 0x8
	DISPID_COLLECT                                                         = -8
	DISPID_CONSTRUCTOR                                                     = -6
	DISPID_DESTRUCTOR                                                      = -7
	DISPID_EVALUATE                                                        = -5
	DISPID_NEWENUM                                                         = -4
	DISPID_PROPERTYPUT                                                     = -3
	DISPID_UNKNOWN                                                         = -1
	DISPID_VALUE                                                           = 0
	DROPEFFECT_COPY                                                        = 1
	DROPEFFECT_LINK                                                        = 4
	DROPEFFECT_MOVE                                                        = 2
	DROPEFFECT_NONE                                                        = 0
	DROPEFFECT_SCROLL                                                      = 2147483648
	EEInfoGCCOM                                                            = 11
	EEInfoGCFRS                                                            = 12
	EEInfoNextRecordsMissing                                               = 2
	EEInfoPreviousRecordsMissing                                           = 1
	EEInfoUseFileTime                                                      = 4
	EMBDHLP_CREATENOW                                                      = 0
	EMBDHLP_DELAYCREATE                                                    = 65536
	EMBDHLP_INPROC_HANDLER                                                 = 0
	EMBDHLP_INPROC_SERVER                                                  = 1
	END_INTERFACE                                                          = 0
	FADF_AUTO                                                              = 1
	FADF_BSTR                                                              = 256
	FADF_DISPATCH                                                          = 1024
	FADF_EMBEDDED                                                          = 4
	FADF_FIXEDSIZE                                                         = 16
	FADF_HAVEIID                                                           = 64
	FADF_HAVEVARTYPE                                                       = 128
	FADF_RECORD                                                            = 32
	FADF_RESERVED                                                          = 61448
	FADF_STATIC                                                            = 2
	FADF_UNKNOWN                                                           = 512
	FADF_VARIANT                                                           = 2048
	FARSTRUCT                                                              = 0
	FIEF_FLAG_FORCE_JITUI                                                  = 0x1
	FIEF_FLAG_PEEK                                                         = 0x2
	FIEF_FLAG_SKIP_INSTALLED_VERSION_CHECK                                 = 0x4
	FMFD_DEFAULT                                                           = 0x0
	FMFD_RESPECTTEXTPLAIN                                                  = 0x10
	FMFD_RETURNUPDATEDIMGMIMES                                             = 0x20
	FMFD_SERVERMIME                                                        = 0x8
	FMFD_URLASFILENAME                                                     = 0x1
	HUGEP                                                                  = 0
	IDLFLAG_FIN                                                            = 1
	IDLFLAG_FLCID                                                          = 4
	IDLFLAG_FOUT                                                           = 2
	IDLFLAG_FRETVAL                                                        = 8
	IDLFLAG_NONE                                                           = 0
	ID_DEFAULTINST                                                         = -2
	IFID_DEFINED                                                           = 0
	IMPLTYPEFLAG_FDEFAULT                                                  = 1
	IMPLTYPEFLAG_FDEFAULTVTABLE                                            = 8
	IMPLTYPEFLAG_FRESTRICTED                                               = 4
	IMPLTYPEFLAG_FSOURCE                                                   = 2
	INHERITED_ACCESS_ENTRY                                                 = 0x10
	INHERITED_GRANDPARENT                                                  = 0x20000000
	INHERITED_PARENT                                                       = 0x10000000
	INHERIT_NO_PROPAGATE                                                   = 0x4
	INHERIT_ONLY                                                           = 0x8
	LOAD_TLB_AS_32BIT                                                      = 0x20
	LOAD_TLB_AS_64BIT                                                      = 0x40
	LOCALE_USE_NLS                                                         = 0x10000000
	MARSHALINTERFACE_MIN                                                   = 500
	MASK_TO_RESET_TLB_BITS                                                 = -97
	MAX_SIZE_SECURITY_ID                                                   = 512
	MEMBERID_NIL                                                           = -1
	MKSYS_URLMONIKER                                                       = 6
	MK_ALT                                                                 = 32
	MUTZ_ACCEPT_WILDCARD_SCHEME                                            = 0x80
	MUTZ_DONT_UNESCAPE                                                     = 0x800
	MUTZ_DONT_USE_CACHE                                                    = 0x1000
	MUTZ_ENFORCERESTRICTED                                                 = 0x100
	MUTZ_FORCE_INTRANET_FLAGS                                              = 0x2000
	MUTZ_IGNORE_ZONE_MAPPINGS                                              = 0x4000
	MUTZ_ISFILE                                                            = 0x2
	MUTZ_NOSAVEDFILECHECK                                                  = 0x1
	MUTZ_REQUIRESAVEDFILECHECK                                             = 0x400
	MUTZ_RESERVED                                                          = 0x200
	MaxNumberOfEEInfoParams                                                = 4
	NDR_ASCII_CHAR                                                         = 0
	NDR_BIG_ENDIAN                                                         = 0
	NDR_CHAR_REP_MASK                                                      = 15
	NDR_EBCDIC_CHAR                                                        = 1
	NDR_FLOAT_REP_MASK                                                     = 65280
	NDR_IBM_FLOAT                                                          = 768
	NDR_IEEE_FLOAT                                                         = 0
	NDR_INT_REP_MASK                                                       = 240
	NDR_LITTLE_ENDIAN                                                      = 16
	NDR_LOCAL_DATA_REPRESENTATION                                          = 16
	NDR_LOCAL_ENDIAN                                                       = 16
	NDR_VAX_FLOAT                                                          = 256
	NO_INHERITANCE                                                         = 0x0
	NT351_INTERFACE_SIZE                                                   = 0x40
	NUMPRS_CURRENCY                                                        = 0x0400
	NUMPRS_DECIMAL                                                         = 0x0100
	NUMPRS_EXPONENT                                                        = 0x0800
	NUMPRS_HEX_OCT                                                         = 0x0040
	NUMPRS_INEXACT                                                         = 0x20000
	NUMPRS_LEADING_MINUS                                                   = 0x0010
	NUMPRS_LEADING_PLUS                                                    = 0x0004
	NUMPRS_LEADING_WHITE                                                   = 0x0001
	NUMPRS_NEG                                                             = 0x10000
	NUMPRS_PARENS                                                          = 0x0080
	NUMPRS_STD                                                             = 0x1FFF
	NUMPRS_THOUSANDS                                                       = 0x0200
	NUMPRS_TRAILING_MINUS                                                  = 0x0020
	NUMPRS_TRAILING_PLUS                                                   = 0x0008
	NUMPRS_TRAILING_WHITE                                                  = 0x0002
	NUMPRS_USE_ALL                                                         = 0x1000
	OLECREATE_LEAVERUNNING                                                 = 0x1
	OLEIVERB_DISCARDUNDOSTATE                                              = -6
	OLEIVERB_HIDE                                                          = -3
	OLEIVERB_INPLACEACTIVATE                                               = -5
	OLEIVERB_OPEN                                                          = -2
	OLEIVERB_PRIMARY                                                       = 0
	OLEIVERB_SHOW                                                          = -1
	OLEIVERB_UIACTIVATE                                                    = -4
	PARAMFLAG_FHASCUSTDATA                                                 = 64
	PARAMFLAG_FHASDEFAULT                                                  = 32
	PARAMFLAG_FIN                                                          = 1
	PARAMFLAG_FLCID                                                        = 4
	PARAMFLAG_FOPT                                                         = 16
	PARAMFLAG_FOUT                                                         = 2
	PARAMFLAG_FRETVAL                                                      = 8
	PARAMFLAG_NONE                                                         = 0
	PIDDI_THUMBNAIL                                                        = 2
	PIDDSI_BYTECOUNT                                                       = 0x00000004
	PIDDSI_CATEGORY                                                        = 0x00000002
	PIDDSI_COMPANY                                                         = 0x0000000F
	PIDDSI_DOCPARTS                                                        = 0x0000000D
	PIDDSI_HEADINGPAIR                                                     = 0x0000000C
	PIDDSI_HIDDENCOUNT                                                     = 0x00000009
	PIDDSI_LINECOUNT                                                       = 0x00000005
	PIDDSI_LINKSDIRTY                                                      = 0x00000010
	PIDDSI_MANAGER                                                         = 0x0000000E
	PIDDSI_MMCLIPCOUNT                                                     = 0x0000000A
	PIDDSI_NOTECOUNT                                                       = 0x00000008
	PIDDSI_PARCOUNT                                                        = 0x00000006
	PIDDSI_PRESFORMAT                                                      = 0x00000003
	PIDDSI_SCALE                                                           = 0x0000000B
	PIDDSI_SLIDECOUNT                                                      = 0x00000007
	PIDMSI_COPYRIGHT                                                       = 11
	PIDMSI_EDITOR                                                          = 2
	PIDMSI_OWNER                                                           = 8
	PIDMSI_PRODUCTION                                                      = 10
	PIDMSI_PROJECT                                                         = 6
	PIDMSI_RATING                                                          = 9
	PIDMSI_SEQUENCE_NO                                                     = 5
	PIDMSI_SOURCE                                                          = 4
	PIDMSI_STATUS                                                          = 7
	PIDMSI_SUPPLIER                                                        = 3
	PIDSI_APPNAME                                                          = 18
	PIDSI_AUTHOR                                                           = 4
	PIDSI_CHARCOUNT                                                        = 16
	PIDSI_COMMENTS                                                         = 6
	PIDSI_CREATE_DTM                                                       = 12
	PIDSI_DOC_SECURITY                                                     = 19
	PIDSI_EDITTIME                                                         = 10
	PIDSI_KEYWORDS                                                         = 5
	PIDSI_LASTAUTHOR                                                       = 8
	PIDSI_LASTPRINTED                                                      = 11
	PIDSI_LASTSAVE_DTM                                                     = 13
	PIDSI_PAGECOUNT                                                        = 14
	PIDSI_REVNUMBER                                                        = 9
	PIDSI_SUBJECT                                                          = 3
	PIDSI_TEMPLATE                                                         = 7
	PIDSI_THUMBNAIL                                                        = 17
	PIDSI_TITLE                                                            = 2
	PIDSI_WORDCOUNT                                                        = 15
	PID_BEHAVIOR                                                           = 2147483651
	PID_CODEPAGE                                                           = 1
	PID_DICTIONARY                                                         = 0
	PID_FIRST_NAME_DEFAULT                                                 = 4095
	PID_FIRST_USABLE                                                       = 2
	PID_ILLEGAL                                                            = 4294967295
	PID_LOCALE                                                             = 2147483648
	PID_MAX_READONLY                                                       = 3221225471
	PID_MIN_READONLY                                                       = 2147483648
	PID_MODIFY_TIME                                                        = 2147483649
	PID_SECURITY                                                           = 2147483650
	PROPERTYKEY_DEFINED                                                    = 0
	PROPSETFLAG_ANSI                                                       = 2
	PROPSETFLAG_CASE_SENSITIVE                                             = 8
	PROPSETFLAG_DEFAULT                                                    = 0
	PROPSETFLAG_NONSIMPLE                                                  = 1
	PROPSETFLAG_UNBUFFERED                                                 = 4
	PROPSETHDR_OSVERSION_UNKNOWN                                           = 0xffffffff
	PROPSET_BEHAVIOR_CASE_SENSITIVE                                        = 1
	PROTOCOLFLAG_NO_PICS_CHECK                                             = 0x1
	PRSPEC_INVALID                                                         = 4294967295
	PRSPEC_LPWSTR                                                          = 0
	PRSPEC_PROPID                                                          = 1
	PURE                                                                   = 0
	ROTFLAGS_ALLOWANYCLIENT                                                = 0x2
	ROTFLAGS_REGISTRATIONKEEPSALIVE                                        = 0x1
	ROTREGFLAGS_ALLOWANYCLIENT                                             = 0x1
	ROT_COMPARE_MAX                                                        = 2048
	RPCFLG_ASYNCHRONOUS                                                    = 1073741824
	RPCFLG_AUTO_COMPLETE                                                   = 134217728
	RPCFLG_HAS_CALLBACK                                                    = 67108864
	RPCFLG_HAS_MULTI_SYNTAXES                                              = 33554432
	RPCFLG_INPUT_SYNCHRONOUS                                               = 536870912
	RPCFLG_LOCAL_CALL                                                      = 268435456
	RPCFLG_MESSAGE                                                         = 16777216
	RPCFLG_NON_NDR                                                         = 2147483648
	RPC_BUFFER_ASYNC                                                       = 0x00008000
	RPC_BUFFER_COMPLETE                                                    = 0x00001000
	RPC_BUFFER_EXTRA                                                       = 0x00004000
	RPC_BUFFER_NONOTIFY                                                    = 0x00010000
	RPC_BUFFER_PARTIAL                                                     = 0x00002000
	RPC_CALL_ATTRIBUTES_VERSION                                            = 1
	RPC_CONTEXT_HANDLE_DEFAULT_FLAGS                                       = 0
	RPC_CONTEXT_HANDLE_DONT_SERIALIZE                                      = 536870912
	RPC_CONTEXT_HANDLE_FLAGS                                               = 805306368
	RPC_CONTEXT_HANDLE_SERIALIZE                                           = 268435456
	RPC_C_AUTHN_DCE_PRIVATE                                                = 1
	RPC_C_AUTHN_DCE_PUBLIC                                                 = 2
	RPC_C_AUTHN_DEC_PUBLIC                                                 = 4
	RPC_C_AUTHN_DEFAULT                                                    = 4294967295
	RPC_C_AUTHN_DIGEST                                                     = 21
	RPC_C_AUTHN_DPA                                                        = 17
	RPC_C_AUTHN_GSS_KERBEROS                                               = 16
	RPC_C_AUTHN_GSS_NEGOTIATE                                              = 9
	RPC_C_AUTHN_GSS_SCHANNEL                                               = 14
	RPC_C_AUTHN_INFO_TYPE_HTTP                                             = 1
	RPC_C_AUTHN_LEVEL_CALL                                                 = 3
	RPC_C_AUTHN_LEVEL_CONNECT                                              = 2
	RPC_C_AUTHN_LEVEL_DEFAULT                                              = 0
	RPC_C_AUTHN_LEVEL_NONE                                                 = 1
	RPC_C_AUTHN_LEVEL_PKT                                                  = 4
	RPC_C_AUTHN_LEVEL_PKT_INTEGRITY                                        = 5
	RPC_C_AUTHN_LEVEL_PKT_PRIVACY                                          = 6
	RPC_C_AUTHN_MQ                                                         = 100
	RPC_C_AUTHN_MSN                                                        = 18
	RPC_C_AUTHN_NONE                                                       = 0
	RPC_C_AUTHN_WINNT                                                      = 10
	RPC_C_AUTHZ_DCE                                                        = 2
	RPC_C_AUTHZ_DEFAULT                                                    = 0xffffffff
	RPC_C_AUTHZ_NAME                                                       = 1
	RPC_C_AUTHZ_NONE                                                       = 0
	RPC_C_BINDING_DEFAULT_TIMEOUT                                          = 5
	RPC_C_BINDING_INFINITE_TIMEOUT                                         = 10
	RPC_C_BINDING_MAX_TIMEOUT                                              = 9
	RPC_C_BINDING_MIN_TIMEOUT                                              = 0
	RPC_C_BIND_TO_ALL_NICS                                                 = 1
	RPC_C_CANCEL_INFINITE_TIMEOUT                                          = -1
	RPC_C_DONT_FAIL                                                        = 0x4
	RPC_C_EP_ALL_ELTS                                                      = 0
	RPC_C_EP_MATCH_BY_BOTH                                                 = 3
	RPC_C_EP_MATCH_BY_IF                                                   = 1
	RPC_C_EP_MATCH_BY_OBJ                                                  = 2
	RPC_C_FULL_CERT_CHAIN                                                  = 0x0001
	RPC_C_HTTP_AUTHN_SCHEME_BASIC                                          = 0x00000001
	RPC_C_HTTP_AUTHN_SCHEME_CERT                                           = 0x00010000
	RPC_C_HTTP_AUTHN_SCHEME_DIGEST                                         = 0x00000008
	RPC_C_HTTP_AUTHN_SCHEME_NEGOTIATE                                      = 0x00000010
	RPC_C_HTTP_AUTHN_SCHEME_NTLM                                           = 0x00000002
	RPC_C_HTTP_AUTHN_SCHEME_PASSPORT                                       = 0x00000004
	RPC_C_HTTP_AUTHN_TARGET_PROXY                                          = 2
	RPC_C_HTTP_AUTHN_TARGET_SERVER                                         = 1
	RPC_C_HTTP_FLAG_IGNORE_CERT_CN_INVALID                                 = 8
	RPC_C_HTTP_FLAG_USE_FIRST_AUTH_SCHEME                                  = 2
	RPC_C_HTTP_FLAG_USE_SSL                                                = 1
	RPC_C_IMP_LEVEL_ANONYMOUS                                              = 1
	RPC_C_IMP_LEVEL_DEFAULT                                                = 0
	RPC_C_IMP_LEVEL_DELEGATE                                               = 4
	RPC_C_IMP_LEVEL_IDENTIFY                                               = 2
	RPC_C_IMP_LEVEL_IMPERSONATE                                            = 3
	RPC_C_INFINITE_TIMEOUT                                                 = 4294967295
	RPC_C_LISTEN_MAX_CALLS_DEFAULT                                         = 1234
	RPC_C_MGMT_INQ_IF_IDS                                                  = 0
	RPC_C_MGMT_INQ_PRINC_NAME                                              = 1
	RPC_C_MGMT_INQ_STATS                                                   = 2
	RPC_C_MGMT_IS_SERVER_LISTEN                                            = 3
	RPC_C_MGMT_STOP_SERVER_LISTEN                                          = 4
	RPC_C_MQ_AUTHN_LEVEL_NONE                                              = 0x0000
	RPC_C_MQ_AUTHN_LEVEL_PKT_INTEGRITY                                     = 0x0008
	RPC_C_MQ_AUTHN_LEVEL_PKT_PRIVACY                                       = 0x0010
	RPC_C_MQ_CLEAR_ON_OPEN                                                 = 0x0002
	RPC_C_MQ_EXPRESS                                                       = 0
	RPC_C_MQ_JOURNAL_ALWAYS                                                = 2
	RPC_C_MQ_JOURNAL_DEADLETTER                                            = 1
	RPC_C_MQ_JOURNAL_NONE                                                  = 0
	RPC_C_MQ_PERMANENT                                                     = 0x0001
	RPC_C_MQ_RECOVERABLE                                                   = 1
	RPC_C_MQ_TEMPORARY                                                     = 0x0000
	RPC_C_MQ_USE_EXISTING_SECURITY                                         = 0x0004
	RPC_C_NOTIFY_ON_SEND_COMPLETE                                          = 0x1
	RPC_C_NS_DEFAULT_EXP_AGE                                               = -1
	RPC_C_NS_SYNTAX_DCE                                                    = 3
	RPC_C_NS_SYNTAX_DEFAULT                                                = 0
	RPC_C_OPT_BINDING_NONCAUSAL                                            = 9
	RPC_C_OPT_CALL_TIMEOUT                                                 = 12
	RPC_C_OPT_DONT_LINGER                                                  = 13
	RPC_C_OPT_MAX_OPTIONS                                                  = 14
	RPC_C_OPT_MQ_ACKNOWLEDGE                                               = 4
	RPC_C_OPT_MQ_AUTHN_LEVEL                                               = 6
	RPC_C_OPT_MQ_AUTHN_SERVICE                                             = 5
	RPC_C_OPT_MQ_DELIVERY                                                  = 1
	RPC_C_OPT_MQ_JOURNAL                                                   = 3
	RPC_C_OPT_MQ_PRIORITY                                                  = 2
	RPC_C_OPT_MQ_TIME_TO_BE_RECEIVED                                       = 8
	RPC_C_OPT_MQ_TIME_TO_REACH_QUEUE                                       = 7
	RPC_C_OPT_SECURITY_CALLBACK                                            = 10
	RPC_C_OPT_UNIQUE_BINDING                                               = 11
	RPC_C_PARM_BUFFER_LENGTH                                               = 2
	RPC_C_PARM_MAX_PACKET_LENGTH                                           = 1
	RPC_C_PROFILE_ALL_ELT                                                  = 1
	RPC_C_PROFILE_ALL_ELTS                                                 = 1
	RPC_C_PROFILE_DEFAULT_ELT                                              = 0
	RPC_C_PROFILE_MATCH_BY_BOTH                                            = 4
	RPC_C_PROFILE_MATCH_BY_IF                                              = 2
	RPC_C_PROFILE_MATCH_BY_MBR                                             = 3
	RPC_C_PROTECT_LEVEL_CALL                                               = 3
	RPC_C_PROTECT_LEVEL_CONNECT                                            = 2
	RPC_C_PROTECT_LEVEL_DEFAULT                                            = 0
	RPC_C_PROTECT_LEVEL_NONE                                               = 1
	RPC_C_PROTECT_LEVEL_PKT                                                = 4
	RPC_C_PROTECT_LEVEL_PKT_INTEGRITY                                      = 5
	RPC_C_PROTECT_LEVEL_PKT_PRIVACY                                        = 6
	RPC_C_PROTSEQ_MAX_REQS_DEFAULT                                         = 10
	RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY                                   = 0x4
	RPC_C_QOS_CAPABILITIES_DEFAULT                                         = 0x0
	RPC_C_QOS_CAPABILITIES_IGNORE_DELEGATE_FAILURE                         = 0x8
	RPC_C_QOS_CAPABILITIES_LOCAL_MA_HINT                                   = 0x10
	RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC                                    = 0x2
	RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH                                     = 0x1
	RPC_C_QOS_IDENTITY_DYNAMIC                                             = 1
	RPC_C_QOS_IDENTITY_STATIC                                              = 0
	RPC_C_SECURITY_QOS_VERSION                                             = 1
	RPC_C_SECURITY_QOS_VERSION_1                                           = 1
	RPC_C_SECURITY_QOS_VERSION_2                                           = 2
	RPC_C_SECURITY_QOS_VERSION_3                                           = 3
	RPC_C_STATS_CALLS_IN                                                   = 0
	RPC_C_STATS_CALLS_OUT                                                  = 1
	RPC_C_STATS_PKTS_IN                                                    = 2
	RPC_C_STATS_PKTS_OUT                                                   = 3
	RPC_C_USE_INTERNET_PORT                                                = 0x1
	RPC_C_USE_INTRANET_PORT                                                = 0x2
	RPC_C_VERS_ALL                                                         = 1
	RPC_C_VERS_COMPATIBLE                                                  = 2
	RPC_C_VERS_EXACT                                                       = 3
	RPC_C_VERS_MAJOR_ONLY                                                  = 4
	RPC_C_VERS_UPTO                                                        = 5
	RPC_EEINFO_VERSION                                                     = 1
	RPC_ENTRY                                                              = 0
	RPC_FLAGS_VALID_BIT                                                    = 0x00008000
	RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH                                    = 0x0010
	RPC_IF_ALLOW_LOCAL_ONLY                                                = 0x0020
	RPC_IF_ALLOW_SECURE_ONLY                                               = 0x0008
	RPC_IF_ALLOW_UNKNOWN_AUTHORITY                                         = 0x0004
	RPC_IF_AUTOLISTEN                                                      = 0x0001
	RPC_IF_OLE                                                             = 0x0002
	RPC_IF_SEC_NO_CACHE                                                    = 0x0040
	RPC_INTERFACE_HAS_PIPES                                                = 0x0001
	RPC_NCA_FLAGS_BROADCAST                                                = 0x00000002
	RPC_NCA_FLAGS_DEFAULT                                                  = 0x00000000
	RPC_NCA_FLAGS_IDEMPOTENT                                               = 0x00000001
	RPC_NCA_FLAGS_MAYBE                                                    = 0x00000004
	RPC_PROXY_CONNECTION_TYPE_IN_PROXY                                     = 0
	RPC_PROXY_CONNECTION_TYPE_OUT_PROXY                                    = 1
	RPC_P_ADDR_FORMAT_TCP_IPV4                                             = 1
	RPC_P_ADDR_FORMAT_TCP_IPV6                                             = 2
	RPC_QUERY_CLIENT_PRINCIPAL_NAME                                        = 4
	RPC_QUERY_SERVER_PRINCIPAL_NAME                                        = 2
	RPC_S_ACCESS_DENIED                                                    = 5
	RPC_S_ASYNC_CALL_PENDING                                               = 997
	RPC_S_BUFFER_TOO_SMALL                                                 = 122
	RPC_S_INVALID_ARG                                                      = 87
	RPC_S_INVALID_LEVEL                                                    = 87
	RPC_S_INVALID_SECURITY_DESC                                            = 1338
	RPC_S_OK                                                               = 0
	RPC_S_OUT_OF_MEMORY                                                    = 14
	RPC_S_OUT_OF_THREADS                                                   = 164
	RPC_S_SERVER_OUT_OF_MEMORY                                             = 1130
	RPC_S_TIMEOUT                                                          = 1460
	RPC_S_UNKNOWN_PRINCIPAL                                                = 1332
	RPC_UNICODE_SUPPORTED                                                  = 0
	RPC_X_ENUM_VALUE_TOO_LARGE                                             = 1781
	RPC_X_INVALID_BOUND                                                    = 1734
	RPC_X_INVALID_BUFFER                                                   = 1784
	RPC_X_INVALID_PIPE_OPERATION                                           = 1831
	RPC_X_INVALID_TAG                                                      = 1733
	RPC_X_NO_MEMORY                                                        = 14
	RPC_X_PIPE_APP_MEMORY                                                  = 14
	RPC_X_SS_CONTEXT_MISMATCH                                              = 6
	SEC_WINNT_AUTH_IDENTITY_ANSI                                           = 0x1
	SEC_WINNT_AUTH_IDENTITY_UNICODE                                        = 0x2
	SOFTDIST_ADSTATE_AVAILABLE                                             = 0x1
	SOFTDIST_ADSTATE_DOWNLOADED                                            = 0x2
	SOFTDIST_ADSTATE_INSTALLED                                             = 0x3
	SOFTDIST_ADSTATE_NONE                                                  = 0x0
	SOFTDIST_FLAG_DELETE_SUBSCRIPTION                                      = 0x8
	SOFTDIST_FLAG_USAGE_AUTOINSTALL                                        = 0x4
	SOFTDIST_FLAG_USAGE_EMAIL                                              = 0x1
	SOFTDIST_FLAG_USAGE_PRECACHE                                           = 0x2
	STDOLE2_LCID                                                           = 0x0000
	STDOLE2_MAJORVERNUM                                                    = 0x2
	STDOLE2_MINORVERNUM                                                    = 0x0
	STDOLE_LCID                                                            = 0x0000
	STDOLE_MAJORVERNUM                                                     = 0x1
	STDOLE_MINORVERNUM                                                     = 0x0
	STGFMT_ANY                                                             = 4
	STGFMT_DOCFILE                                                         = 5
	STGFMT_DOCUMENT                                                        = 0
	STGFMT_FILE                                                            = 3
	STGFMT_NATIVE                                                          = 1
	STGFMT_STORAGE                                                         = 0
	STGM_CONVERT                                                           = 131072
	STGM_CREATE                                                            = 4096
	STGM_DELETEONRELEASE                                                   = 67108864
	STGM_DIRECT                                                            = 0
	STGM_DIRECT_SWMR                                                       = 4194304
	STGM_FAILIFTHERE                                                       = 0
	STGM_NOSCRATCH                                                         = 1048576
	STGM_NOSNAPSHOT                                                        = 2097152
	STGM_PRIORITY                                                          = 262144
	STGM_READ                                                              = 0
	STGM_READWRITE                                                         = 2
	STGM_SHARE_DENY_NONE                                                   = 64
	STGM_SHARE_DENY_READ                                                   = 48
	STGM_SHARE_DENY_WRITE                                                  = 32
	STGM_SHARE_EXCLUSIVE                                                   = 16
	STGM_SIMPLE                                                            = 134217728
	STGM_TRANSACTED                                                        = 65536
	STGM_WRITE                                                             = 1
	STGOPTIONS_VERSION                                                     = 2
	STGTY_REPEAT                                                           = 256
	STG_LAYOUT_INTERLEAVED                                                 = 1
	STG_LAYOUT_SEQUENTIAL                                                  = 0
	STG_TOEND                                                              = 4294967295
	SUB_CONTAINERS_AND_OBJECTS_INHERIT                                     = 0x3
	SUB_CONTAINERS_ONLY_INHERIT                                            = 0x2
	SUB_OBJECTS_ONLY_INHERIT                                               = 0x1
	TARGET_IS_NT351_OR_WIN95_OR_LATER                                      = 1
	TARGET_IS_NT40_OR_LATER                                                = 1
	TARGET_IS_NT50_OR_LATER                                                = 1
	TARGET_IS_NT51_OR_LATER                                                = 1
	TARGET_IS_NT60_OR_LATER                                                = 0
	TARGET_IS_NT61_OR_LATER                                                = 0
	TRANSPORT_TYPE_CN                                                      = 0x01
	TRANSPORT_TYPE_DG                                                      = 0x02
	TRANSPORT_TYPE_LPC                                                     = 0x04
	TRANSPORT_TYPE_WMSG                                                    = 0x08
	TRUSTEE_ACCESS_ALL                                                     = 4294967295
	TRUSTEE_ACCESS_ALLOWED                                                 = 1
	TRUSTEE_ACCESS_EXPLICIT                                                = 1
	TRUSTEE_ACCESS_READ                                                    = 2
	TRUSTEE_ACCESS_READ_WRITE                                              = 6
	TRUSTEE_ACCESS_WRITE                                                   = 4
	UAS_EXACTLEGACY                                                        = 0x1000
	UPDFCACHE_IFBLANK                                                      = 16
	UPDFCACHE_IFBLANKORONSAVECACHE                                         = 18
	UPDFCACHE_NODATACACHE                                                  = 1
	UPDFCACHE_NORMALCACHE                                                  = 8
	UPDFCACHE_ONLYIFBLANK                                                  = 2147483648
	UPDFCACHE_ONSAVECACHE                                                  = 2
	UPDFCACHE_ONSTOPCACHE                                                  = 4
	URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY                               = 0x1204
	URLACTION_ACTIVEX_CURR_MAX                                             = 0x120B
	URLACTION_ACTIVEX_DYNSRC_VIDEO_AND_ANIMATION                           = 0x120A
	URLACTION_ACTIVEX_MAX                                                  = 0x13ff
	URLACTION_ACTIVEX_MIN                                                  = 0x1200
	URLACTION_ACTIVEX_NO_WEBOC_SCRIPT                                      = 0x1206
	URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY                                 = 0x1202
	URLACTION_ACTIVEX_OVERRIDE_DOMAINLIST                                  = 0x120B
	URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY                               = 0x1201
	URLACTION_ACTIVEX_OVERRIDE_OPTIN                                       = 0x1208
	URLACTION_ACTIVEX_OVERRIDE_REPURPOSEDETECTION                          = 0x1207
	URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY                               = 0x1203
	URLACTION_ACTIVEX_RUN                                                  = 0x1200
	URLACTION_ACTIVEX_SCRIPTLET_RUN                                        = 0x1209
	URLACTION_ACTIVEX_TREATASUNTRUSTED                                     = 0x1205
	URLACTION_ALLOW_ACTIVEX_FILTERING                                      = 0x2702
	URLACTION_ALLOW_AUDIO_VIDEO                                            = 0x2701
	URLACTION_ALLOW_AUDIO_VIDEO_PLUGINS                                    = 0x2704
	URLACTION_ALLOW_CROSSDOMAIN_APPCACHE_MANIFEST                          = 0x270A
	URLACTION_ALLOW_CROSSDOMAIN_DROP_ACROSS_WINDOWS                        = 0x2709
	URLACTION_ALLOW_CROSSDOMAIN_DROP_WITHIN_WINDOW                         = 0x2708
	URLACTION_ALLOW_RENDER_LEGACY_DXTFILTERS                               = 0x270B
	URLACTION_ALLOW_STRUCTURED_STORAGE_SNIFFING                            = 0x2703
	URLACTION_ALLOW_XDOMAIN_SUBFRAME_RESIZE                                = 0x1408
	URLACTION_ALLOW_ZONE_ELEVATION_OPT_OUT_ADDITION                        = 0x2706
	URLACTION_ALLOW_ZONE_ELEVATION_VIA_OPT_OUT                             = 0x2705
	URLACTION_AUTHENTICATE_CLIENT                                          = 0x1A01
	URLACTION_CHANNEL_SOFTDIST_MAX                                         = 0x1Eff
	URLACTION_CHANNEL_SOFTDIST_MIN                                         = 0x1E00
	URLACTION_CHANNEL_SOFTDIST_PERMISSIONS                                 = 0x1E05
	URLACTION_CLIENT_CERT_PROMPT                                           = 0x1A04
	URLACTION_COOKIES                                                      = 0x1A02
	URLACTION_COOKIES_ENABLED                                              = 0x1A10
	URLACTION_COOKIES_SESSION                                              = 0x1A03
	URLACTION_COOKIES_SESSION_THIRD_PARTY                                  = 0x1A06
	URLACTION_COOKIES_THIRD_PARTY                                          = 0x1A05
	URLACTION_CREDENTIALS_USE                                              = 0x1A00
	URLACTION_CROSS_DOMAIN_DATA                                            = 0x1406
	URLACTION_DOWNLOAD_CURR_MAX                                            = 0x1004
	URLACTION_DOWNLOAD_MAX                                                 = 0x11FF
	URLACTION_DOWNLOAD_MIN                                                 = 0x1000
	URLACTION_DOWNLOAD_SIGNED_ACTIVEX                                      = 0x1001
	URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX                                    = 0x1004
	URLACTION_HTML_ALLOW_CROSS_DOMAIN_CANVAS                               = 0x160D
	URLACTION_HTML_ALLOW_CROSS_DOMAIN_TEXTTRACK                            = 0x1610
	URLACTION_HTML_ALLOW_CROSS_DOMAIN_WEBWORKER                            = 0x160F
	URLACTION_HTML_ALLOW_INDEXEDDB                                         = 0x1611
	URLACTION_HTML_ALLOW_INJECTED_DYNAMIC_HTML                             = 0x160B
	URLACTION_HTML_ALLOW_WINDOW_CLOSE                                      = 0x160E
	URLACTION_HTML_FONT_DOWNLOAD                                           = 0x1604
	URLACTION_HTML_INCLUDE_FILE_PATH                                       = 0x160A
	URLACTION_HTML_JAVA_RUN                                                = 0x1605
	URLACTION_HTML_MAX                                                     = 0x17ff
	URLACTION_HTML_META_REFRESH                                            = 0x1608
	URLACTION_HTML_MIN                                                     = 0x1600
	URLACTION_HTML_MIXED_CONTENT                                           = 0x1609
	URLACTION_HTML_REQUIRE_UTF8_DOCUMENT_CODEPAGE                          = 0x160C
	URLACTION_HTML_SUBFRAME_NAVIGATE                                       = 0x1607
	URLACTION_HTML_SUBMIT_FORMS                                            = 0x1601
	URLACTION_HTML_SUBMIT_FORMS_FROM                                       = 0x1602
	URLACTION_HTML_SUBMIT_FORMS_TO                                         = 0x1603
	URLACTION_HTML_USERDATA_SAVE                                           = 0x1606
	URLACTION_INFODELIVERY_CURR_MAX                                        = 0x1D06
	URLACTION_INFODELIVERY_MAX                                             = 0x1Dff
	URLACTION_INFODELIVERY_MIN                                             = 0x1D00
	URLACTION_INFODELIVERY_NO_ADDING_CHANNELS                              = 0x1D00
	URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS                         = 0x1D03
	URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING                              = 0x1D06
	URLACTION_INFODELIVERY_NO_EDITING_CHANNELS                             = 0x1D01
	URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS                        = 0x1D04
	URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS                            = 0x1D02
	URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS                       = 0x1D05
	URLACTION_JAVA_CURR_MAX                                                = 0x1C00
	URLACTION_JAVA_MAX                                                     = 0x1Cff
	URLACTION_JAVA_MIN                                                     = 0x1C00
	URLACTION_JAVA_PERMISSIONS                                             = 0x1C00
	URLACTION_MIN                                                          = 0x1000
	URLACTION_NETWORK_CURR_MAX                                             = 0x1A10
	URLACTION_NETWORK_MAX                                                  = 0x1Bff
	URLACTION_NETWORK_MIN                                                  = 0x1A00
	URLACTION_PLUGGABLE_PROTOCOL_XHR                                       = 0x140B
	URLACTION_SCRIPT_CURR_MAX                                              = 0x140B
	URLACTION_SCRIPT_JAVA_USE                                              = 0x1402
	URLACTION_SCRIPT_MAX                                                   = 0x15ff
	URLACTION_SCRIPT_MIN                                                   = 0x1400
	URLACTION_SCRIPT_NAVIGATE                                              = 0x140A
	URLACTION_SCRIPT_OVERRIDE_SAFETY                                       = 0x1401
	URLACTION_SCRIPT_PASTE                                                 = 0x1407
	URLACTION_SCRIPT_RUN                                                   = 0x1400
	URLACTION_SCRIPT_SAFE_ACTIVEX                                          = 0x1405
	URLACTION_SCRIPT_XSSFILTER                                             = 0x1409
	URLACTION_SHELL_CURR_MAX                                               = 0x1811
	URLACTION_SHELL_FILE_DOWNLOAD                                          = 0x1803
	URLACTION_SHELL_INSTALL_DTITEMS                                        = 0x1800
	URLACTION_SHELL_MAX                                                    = 0x19ff
	URLACTION_SHELL_MIN                                                    = 0x1800
	URLACTION_SHELL_MOVE_OR_COPY                                           = 0x1802
	URLACTION_SHELL_SHELLEXECUTE                                           = 0x1806
	URLACTION_SHELL_VERB                                                   = 0x1804
	URLACTION_SHELL_WEBVIEW_VERB                                           = 0x1805
	URLMON_OPTION_URL_ENCODING                                             = 0x10000004
	URLMON_OPTION_USERAGENT                                                = 0x10000001
	URLMON_OPTION_USERAGENT_REFRESH                                        = 0x10000002
	URLOSTRM_GETNEWESTVERSION                                              = 0x3
	URLOSTRM_USECACHEDCOPY                                                 = 0x2
	URLOSTRM_USECACHEDCOPY_ONLY                                            = 0x1
	URLPOLICY_ACTIVEX_CHECK_LIST                                           = 0x10000
	URLPOLICY_ALLOW                                                        = 0x0
	URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE                              = 0x10000
	URLPOLICY_AUTHENTICATE_CLEARTEXT_OK                                    = 0x0
	URLPOLICY_AUTHENTICATE_MUTUAL_ONLY                                     = 0x30000
	URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL                                 = 0x30000
	URLPOLICY_CHANNEL_SOFTDIST_PRECACHE                                    = 0x20000
	URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT                                    = 0x10000
	URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY                                   = 0x30000
	URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT                               = 0x20000
	URLPOLICY_CREDENTIALS_MUST_PROMPT_USER                                 = 0x10000
	URLPOLICY_CREDENTIALS_SILENT_LOGON_OK                                  = 0x0
	URLPOLICY_DISALLOW                                                     = 0x3
	URLPOLICY_DONTCHECKDLGBOX                                              = 0x100
	URLPOLICY_JAVA_CUSTOM                                                  = 0x800000
	URLPOLICY_JAVA_HIGH                                                    = 0x10000
	URLPOLICY_JAVA_LOW                                                     = 0x30000
	URLPOLICY_JAVA_MEDIUM                                                  = 0x20000
	URLPOLICY_JAVA_PROHIBIT                                                = 0x0
	URLPOLICY_LOG_ON_ALLOW                                                 = 0x40
	URLPOLICY_LOG_ON_DISALLOW                                              = 0x80
	URLPOLICY_MASK_PERMISSIONS                                             = 0x0f
	URLPOLICY_NOTIFY_ON_ALLOW                                              = 0x10
	URLPOLICY_NOTIFY_ON_DISALLOW                                           = 0x20
	URLPOLICY_QUERY                                                        = 0x1
	URLZONE_ESC_FLAG                                                       = 0x100
	URL_MK_LEGACY                                                          = 0
	URL_MK_NO_CANONICALIZE                                                 = 2
	URL_MK_UNIFORM                                                         = 1
	USER_CALL_IS_ASYNC                                                     = 0x0100
	USER_CALL_NEW_CORRELATION_DESC                                         = 0x0200
	USER_MARSHAL_CB_SIGNATURE                                              = 85
	USER_MARSHAL_FC_BYTE                                                   = 1
	USER_MARSHAL_FC_CHAR                                                   = 2
	USER_MARSHAL_FC_DOUBLE                                                 = 12
	USER_MARSHAL_FC_FLOAT                                                  = 10
	USER_MARSHAL_FC_HYPER                                                  = 11
	USER_MARSHAL_FC_LONG                                                   = 8
	USER_MARSHAL_FC_SHORT                                                  = 6
	USER_MARSHAL_FC_SMALL                                                  = 3
	USER_MARSHAL_FC_ULONG                                                  = 9
	USER_MARSHAL_FC_USHORT                                                 = 7
	USER_MARSHAL_FC_USMALL                                                 = 4
	USER_MARSHAL_FC_WCHAR                                                  = 5
	UUID_DEFINED                                                           = 0
	VARCMP_EQ                                                              = 1
	VARCMP_GT                                                              = 2
	VARCMP_LT                                                              = 0
	VARCMP_NULL                                                            = 3
	VARIANT_ALPHABOOL                                                      = 0x02
	VARIANT_CALENDAR_GREGORIAN                                             = 0x40
	VARIANT_CALENDAR_HIJRI                                                 = 0x08
	VARIANT_CALENDAR_THAI                                                  = 0x20
	VARIANT_LOCALBOOL                                                      = 0x10
	VARIANT_NOUSEROVERRIDE                                                 = 0x04
	VARIANT_NOVALUEPROP                                                    = 0x01
	VARIANT_USE_NLS                                                        = 0x80
	VTDATEGRE_MAX                                                          = 2958465
	VTDATEGRE_MIN                                                          = -657434
	WDT_INPROC64_CALL                                                      = 1349805143
	WDT_INPROC_CALL                                                        = 1215587415
	WDT_REMOTE_CALL                                                        = 1383359575
	WININETINFO_OPTION_LOCK_HANDLE                                         = 65534
	X_APPIDREGFLAGS_DEFINED                                                = 0
	X_AUTH_IDENTITY_DEFINED                                                = 0
	X_COMBASEAPI_H_                                                        = 0
	X_CY_DEFINED                                                           = 0
	X_DCOMSCM_REMOTECALL_FLAGS_DEFINED                                     = 0
	X_DS_CONTROL_BITS_DEFINED_                                             = 0
	X_ERROR_STATUS_T_DEFINED                                               = 0
	X_FORCENAMELESSUNION                                                   = 1
	X_HITLOGGING_DEFINED                                                   = 0
	X_HYPER_DEFINED                                                        = 0
	X_LPAUTHENTICATIONEX_DEFINED                                           = 0
	X_LPAUTHENTICATION_DEFINED                                             = 0
	X_LPBINDCALLBACKREDIRECT_DEFINED                                       = 0
	X_LPBINDHOST_DEFINED                                                   = 0
	X_LPBINDING_DEFINED                                                    = 0
	X_LPBINDPROTOCOL_DEFINED                                               = 0
	X_LPBINDSTATUSCALLBACKEX_DEFINED                                       = 0
	X_LPBINDSTATUSCALLBACK_DEFINED                                         = 0
	X_LPCATALOGFILEINFO_DEFINED                                            = 0
	X_LPCODEINSTALL_DEFINED                                                = 0
	X_LPDATAFILTER_DEFINED                                                 = 0
	X_LPENCODINGFILTERFACTORY_DEFINED                                      = 0
	X_LPGETBINDHANDLE_DEFINED                                              = 0
	X_LPHTTPNEGOTIATE2_DEFINED                                             = 0
	X_LPHTTPNEGOTIATE3_DEFINED                                             = 0
	X_LPHTTPNEGOTIATE_DEFINED                                              = 0
	X_LPHTTPSECURITY_DEFINED                                               = 0
	X_LPIINTERNET                                                          = 0
	X_LPIINTERNETBINDINFO                                                  = 0
	X_LPIINTERNETBINDINFOEX                                                = 0
	X_LPIINTERNETPRIORITY_DEFINED                                          = 0
	X_LPIINTERNETPROTOCOLINFO_DEFINED                                      = 0
	X_LPIINTERNETPROTOCOLROOT_DEFINED                                      = 0
	X_LPIINTERNETPROTOCOLSINKSTACKABLE_DEFINED                             = 0
	X_LPIINTERNETPROTOCOLSINK_DEFINED                                      = 0
	X_LPIINTERNETPROTOCOL_DEFINED                                          = 0
	X_LPIINTERNETSESSION_DEFINED                                           = 0
	X_LPIINTERNETTHREADSWITCH_DEFINED                                      = 0
	X_LPINTERNETHOSTSECURITYMANANGER_DEFINED                               = 0
	X_LPINTERNETSECURITYMANANGER_DEFINED                                   = 0
	X_LPINTERNETSECURITYMGRSITE_DEFINED                                    = 0
	X_LPINTERNETZONEMANAGER_DEFINED                                        = 0
	X_LPIWRAPPEDPROTOCOL_DEFINED                                           = 0
	X_LPMONIKERPROP_DEFINED                                                = 0
	X_LPPERSISTMONIKER_DEFINED                                             = 0
	X_LPSOFTDISTEXT_DEFINED                                                = 0
	X_LPWINDOWFORBINDINGUI_DEFINED                                         = 0
	X_LPWININETFILESTREAM_DEFINED                                          = 0
	X_LPWININETHTTPINFO_DEFINED                                            = 0
	X_LPWININETHTTPTIMEOUTS_DEFINED                                        = 0
	X_LPWININETINFO_DEFINED                                                = 0
	X_OBJBASE_H_                                                           = 0
	X_OBJIDLBASE_                                                          = 0
	X_OLE2_H_                                                              = 0
	X_OLEAUTO_H_                                                           = 0
	X_PROPVARIANTINIT_DEFINED_                                             = 0
	X_REFPROPVARIANT_DEFINED                                               = 0
	X_REFVARIANT_DEFINED                                                   = 0
	X_ROTFLAGS_DEFINED                                                     = 0
	X_ROTREGFLAGS_DEFINED                                                  = 0
	X_ROT_COMPARE_MAX_DEFINED                                              = 0
	X_SERIALIZEDPROPERTYVALUE_DEFINED_                                     = 0
	X_XHRPLUGGABLEPROTOCOL_DEFINED                                         = 0
	X_tagBSTRBLOB_DEFINED                                                  = 0
	X_tagCY_DEFINED                                                        = 0
	CbNDRContext                                                           = 20
	Tag_inner_PROPVARIANT                                                  = 0
)

// Positions to pass to Tcl_QueueEvent:

const ( /* tcl.h:1402:1: */
	TCL_QUEUE_TAIL = 0
	TCL_QUEUE_HEAD = 1
	TCL_QUEUE_MARK = 2
)

// The following flags determine whether the blockModeProc above should set
// the channel into blocking or nonblocking mode. They are passed as arguments
// to the blockModeProc function in the above structure.

//----------------------------------------------------------------------------
// Enum for different types of file paths.

const ( /* tcl.h:1624:1: */
	TCL_PATH_ABSOLUTE        = 0
	TCL_PATH_RELATIVE        = 1
	TCL_PATH_VOLUME_RELATIVE = 2
)

//----------------------------------------------------------------------------
// When a TCL command returns, the interpreter contains a result from the
// command. Programmers are strongly encouraged to use one of the functions
// Tcl_GetObjResult() or Tcl_GetStringResult() to read the interpreter's
// result. See the SetResult man page for details. Besides this result, the
// command function returns an integer code, which is one of the following:
//
// TCL_OK		Command completed normally; the interpreter's result
//			contains the command's result.
// TCL_ERROR		The command couldn't be completed successfully; the
//			interpreter's result describes what went wrong.
// TCL_RETURN		The command requests that the current function return;
//			the interpreter's result contains the function's
//			return value.
// TCL_BREAK		The command requests that the innermost loop be
//			exited; the interpreter's result is meaningless.
// TCL_CONTINUE		Go on to the next iteration of the current loop; the
//			interpreter's result is meaningless.

//----------------------------------------------------------------------------
// Flags to control what substitutions are performed by Tcl_SubstObj():

// Argument descriptors for math function callbacks in expressions:

const ( /* tcl.h:705:1: */
	TCL_INT      = 0
	TCL_DOUBLE   = 1
	TCL_EITHER   = 2
	TCL_WIDE_INT = 3
)

// TIP #268.
// Values for the selection mode, i.e the package require preferences.

const ( /* tclInt.h:1736:1: */
	PKG_PREFER_LATEST = 0
	PKG_PREFER_STABLE = 1
)

// Macros that use the TSD-ekeko.

// Macros for script cancellation support (TIP #285).

// Macros for splicing into and out of doubly linked lists. They assume
// existence of struct items 'prevPtr' and 'nextPtr'.
//
// a = element to add or remove.
// b = list head.
//
// TclSpliceIn adds to the head of the list.

// EvalFlag bits for Interp structures:
//
// TCL_ALLOW_EXCEPTIONS	1 means it's OK for the script to terminate with a
//			code other than TCL_OK or TCL_ERROR; 0 means codes
//			other than these should be turned into errors.

// Flag bits for Interp structures:
//
// DELETED:		Non-zero means the interpreter has been deleted:
//			don't process any more commands for it, and destroy
//			the structure as soon as all nested invocations of
//			Tcl_Eval are done.
// ERR_ALREADY_LOGGED:	Non-zero means information has already been logged in
//			iPtr->errorInfo for the current Tcl_Eval instance, so
//			Tcl_Eval needn't log it (used to implement the "error
//			message log" command).
// DONT_COMPILE_CMDS_INLINE: Non-zero means that the bytecode compiler should
//			not compile any commands into an inline sequence of
//			instructions. This is set 1, for example, when command
//			traces are requested.
// RAND_SEED_INITIALIZED: Non-zero means that the randSeed value of the interp
//			has not be initialized. This is set 1 when we first
//			use the rand() or srand() functions.
// SAFE_INTERP:		Non zero means that the current interp is a safe
//			interp (i.e. it has only the safe commands installed,
//			less privilege than a regular interp).
// INTERP_DEBUG_FRAME:	Used for switching on various extra interpreter
//			debug/info mechanisms (e.g. info frame eval/uplevel
//			tracing) which are performance intensive.
// INTERP_TRACE_IN_PROGRESS: Non-zero means that an interp trace is currently
//			active; so no further trace callbacks should be
//			invoked.
// INTERP_ALTERNATE_WRONG_ARGS: Used for listing second and subsequent forms
//			of the wrong-num-args string in Tcl_WrongNumArgs.
//			Makes it append instead of replacing and uses
//			different intermediate text.
// CANCELED:		Non-zero means that the script in progress should be
//			canceled as soon as possible. This can be checked by
//			extensions (and the core itself) by calling
//			Tcl_Canceled and checking if TCL_ERROR is returned.
//			This is a one-shot flag that is reset immediately upon
//			being detected; however, if the TCL_CANCEL_UNWIND flag
//			is set Tcl_Canceled will continue to report that the
//			script in progress has been canceled thereby allowing
//			the evaluation stack for the interp to be fully
//			unwound.
//
// WARNING: For the sake of some extensions that have made use of former
// internal values, do not re-use the flag values 2 (formerly ERR_IN_PROGRESS)
// or 8 (formerly ERROR_CODE_SET).

// Maximum number of levels of nesting permitted in Tcl commands (used to
// catch infinite recursion).

// The macro below is used to modify a "char" value (e.g. by casting it to an
// unsigned character) so that it can be used safely with macros such as
// isspace.

// This macro is used to properly align the memory allocated by Tcl, giving
// the same alignment as the native malloc.

// This macro is used to determine the offset needed to safely allocate any
// data structure in memory. Given a starting offset or size, it "rounds up"
// or "aligns" the offset to the next 8-byte boundary so that any data
// structure can be placed at the resulting offset without fear of an
// alignment error.
//
// WARNING!! DO NOT USE THIS MACRO TO ALIGN POINTERS: it will produce the
// wrong result on platforms that allocate addresses that are divisible by 4
// or 2. Only use it for offsets or sizes.
//
// This macro is only used by tclCompile.c in the core (Bug 926445). It
// however not be made file static, as extensions that touch bytecodes
// (notably tbcload) require it.

// The following enum values are used to specify the runtime platform setting
// of the tclPlatform variable.

const ( /* tclInt.h:2325:1: */
	TCL_PLATFORM_UNIX    = 0 // Any Unix-like OS.
	TCL_PLATFORM_WINDOWS = 2
)

// The following enum values are used to indicate the translation of a Tcl
// channel. Declared here so that each platform can define
// TCL_PLATFORM_TRANSLATION to the native translation on that platform.

const ( /* tclInt.h:2336:1: */
	TCL_TRANSLATE_AUTO = 0 // Eol == \r, \n and \r\n.
	TCL_TRANSLATE_CR   = 1 // Eol == \r.
	TCL_TRANSLATE_LF   = 2 // Eol == \n.
	TCL_TRANSLATE_CRLF = 3
)

// The "globParameters" argument of the function TclGlob is an or'ed
// combination of the following values:

const ( /* tclInt.h:2572:1: */
	TCL_PATH_DIRNAME   = 0
	TCL_PATH_TAIL      = 1
	TCL_PATH_EXTENSION = 2
	TCL_PATH_ROOT      = 3
)

const ( /* tclInt.h:2746:1: */
	TCL_EMPTYSTRING_UNKNOWN = -1
	TCL_EMPTYSTRING_NO      = 0
	TCL_EMPTYSTRING_YES     = 1
)

const ( /* avx512fintrin.h:4271:1: */
	_MM_PERM_AAAA = 0
	_MM_PERM_AAAB = 1
	_MM_PERM_AAAC = 2
	_MM_PERM_AAAD = 3
	_MM_PERM_AABA = 4
	_MM_PERM_AABB = 5
	_MM_PERM_AABC = 6
	_MM_PERM_AABD = 7
	_MM_PERM_AACA = 8
	_MM_PERM_AACB = 9
	_MM_PERM_AACC = 10
	_MM_PERM_AACD = 11
	_MM_PERM_AADA = 12
	_MM_PERM_AADB = 13
	_MM_PERM_AADC = 14
	_MM_PERM_AADD = 15
	_MM_PERM_ABAA = 16
	_MM_PERM_ABAB = 17
	_MM_PERM_ABAC = 18
	_MM_PERM_ABAD = 19
	_MM_PERM_ABBA = 20
	_MM_PERM_ABBB = 21
	_MM_PERM_ABBC = 22
	_MM_PERM_ABBD = 23
	_MM_PERM_ABCA = 24
	_MM_PERM_ABCB = 25
	_MM_PERM_ABCC = 26
	_MM_PERM_ABCD = 27
	_MM_PERM_ABDA = 28
	_MM_PERM_ABDB = 29
	_MM_PERM_ABDC = 30
	_MM_PERM_ABDD = 31
	_MM_PERM_ACAA = 32
	_MM_PERM_ACAB = 33
	_MM_PERM_ACAC = 34
	_MM_PERM_ACAD = 35
	_MM_PERM_ACBA = 36
	_MM_PERM_ACBB = 37
	_MM_PERM_ACBC = 38
	_MM_PERM_ACBD = 39
	_MM_PERM_ACCA = 40
	_MM_PERM_ACCB = 41
	_MM_PERM_ACCC = 42
	_MM_PERM_ACCD = 43
	_MM_PERM_ACDA = 44
	_MM_PERM_ACDB = 45
	_MM_PERM_ACDC = 46
	_MM_PERM_ACDD = 47
	_MM_PERM_ADAA = 48
	_MM_PERM_ADAB = 49
	_MM_PERM_ADAC = 50
	_MM_PERM_ADAD = 51
	_MM_PERM_ADBA = 52
	_MM_PERM_ADBB = 53
	_MM_PERM_ADBC = 54
	_MM_PERM_ADBD = 55
	_MM_PERM_ADCA = 56
	_MM_PERM_ADCB = 57
	_MM_PERM_ADCC = 58
	_MM_PERM_ADCD = 59
	_MM_PERM_ADDA = 60
	_MM_PERM_ADDB = 61
	_MM_PERM_ADDC = 62
	_MM_PERM_ADDD = 63
	_MM_PERM_BAAA = 64
	_MM_PERM_BAAB = 65
	_MM_PERM_BAAC = 66
	_MM_PERM_BAAD = 67
	_MM_PERM_BABA = 68
	_MM_PERM_BABB = 69
	_MM_PERM_BABC = 70
	_MM_PERM_BABD = 71
	_MM_PERM_BACA = 72
	_MM_PERM_BACB = 73
	_MM_PERM_BACC = 74
	_MM_PERM_BACD = 75
	_MM_PERM_BADA = 76
	_MM_PERM_BADB = 77
	_MM_PERM_BADC = 78
	_MM_PERM_BADD = 79
	_MM_PERM_BBAA = 80
	_MM_PERM_BBAB = 81
	_MM_PERM_BBAC = 82
	_MM_PERM_BBAD = 83
	_MM_PERM_BBBA = 84
	_MM_PERM_BBBB = 85
	_MM_PERM_BBBC = 86
	_MM_PERM_BBBD = 87
	_MM_PERM_BBCA = 88
	_MM_PERM_BBCB = 89
	_MM_PERM_BBCC = 90
	_MM_PERM_BBCD = 91
	_MM_PERM_BBDA = 92
	_MM_PERM_BBDB = 93
	_MM_PERM_BBDC = 94
	_MM_PERM_BBDD = 95
	_MM_PERM_BCAA = 96
	_MM_PERM_BCAB = 97
	_MM_PERM_BCAC = 98
	_MM_PERM_BCAD = 99
	_MM_PERM_BCBA = 100
	_MM_PERM_BCBB = 101
	_MM_PERM_BCBC = 102
	_MM_PERM_BCBD = 103
	_MM_PERM_BCCA = 104
	_MM_PERM_BCCB = 105
	_MM_PERM_BCCC = 106
	_MM_PERM_BCCD = 107
	_MM_PERM_BCDA = 108
	_MM_PERM_BCDB = 109
	_MM_PERM_BCDC = 110
	_MM_PERM_BCDD = 111
	_MM_PERM_BDAA = 112
	_MM_PERM_BDAB = 113
	_MM_PERM_BDAC = 114
	_MM_PERM_BDAD = 115
	_MM_PERM_BDBA = 116
	_MM_PERM_BDBB = 117
	_MM_PERM_BDBC = 118
	_MM_PERM_BDBD = 119
	_MM_PERM_BDCA = 120
	_MM_PERM_BDCB = 121
	_MM_PERM_BDCC = 122
	_MM_PERM_BDCD = 123
	_MM_PERM_BDDA = 124
	_MM_PERM_BDDB = 125
	_MM_PERM_BDDC = 126
	_MM_PERM_BDDD = 127
	_MM_PERM_CAAA = 128
	_MM_PERM_CAAB = 129
	_MM_PERM_CAAC = 130
	_MM_PERM_CAAD = 131
	_MM_PERM_CABA = 132
	_MM_PERM_CABB = 133
	_MM_PERM_CABC = 134
	_MM_PERM_CABD = 135
	_MM_PERM_CACA = 136
	_MM_PERM_CACB = 137
	_MM_PERM_CACC = 138
	_MM_PERM_CACD = 139
	_MM_PERM_CADA = 140
	_MM_PERM_CADB = 141
	_MM_PERM_CADC = 142
	_MM_PERM_CADD = 143
	_MM_PERM_CBAA = 144
	_MM_PERM_CBAB = 145
	_MM_PERM_CBAC = 146
	_MM_PERM_CBAD = 147
	_MM_PERM_CBBA = 148
	_MM_PERM_CBBB = 149
	_MM_PERM_CBBC = 150
	_MM_PERM_CBBD = 151
	_MM_PERM_CBCA = 152
	_MM_PERM_CBCB = 153
	_MM_PERM_CBCC = 154
	_MM_PERM_CBCD = 155
	_MM_PERM_CBDA = 156
	_MM_PERM_CBDB = 157
	_MM_PERM_CBDC = 158
	_MM_PERM_CBDD = 159
	_MM_PERM_CCAA = 160
	_MM_PERM_CCAB = 161
	_MM_PERM_CCAC = 162
	_MM_PERM_CCAD = 163
	_MM_PERM_CCBA = 164
	_MM_PERM_CCBB = 165
	_MM_PERM_CCBC = 166
	_MM_PERM_CCBD = 167
	_MM_PERM_CCCA = 168
	_MM_PERM_CCCB = 169
	_MM_PERM_CCCC = 170
	_MM_PERM_CCCD = 171
	_MM_PERM_CCDA = 172
	_MM_PERM_CCDB = 173
	_MM_PERM_CCDC = 174
	_MM_PERM_CCDD = 175
	_MM_PERM_CDAA = 176
	_MM_PERM_CDAB = 177
	_MM_PERM_CDAC = 178
	_MM_PERM_CDAD = 179
	_MM_PERM_CDBA = 180
	_MM_PERM_CDBB = 181
	_MM_PERM_CDBC = 182
	_MM_PERM_CDBD = 183
	_MM_PERM_CDCA = 184
	_MM_PERM_CDCB = 185
	_MM_PERM_CDCC = 186
	_MM_PERM_CDCD = 187
	_MM_PERM_CDDA = 188
	_MM_PERM_CDDB = 189
	_MM_PERM_CDDC = 190
	_MM_PERM_CDDD = 191
	_MM_PERM_DAAA = 192
	_MM_PERM_DAAB = 193
	_MM_PERM_DAAC = 194
	_MM_PERM_DAAD = 195
	_MM_PERM_DABA = 196
	_MM_PERM_DABB = 197
	_MM_PERM_DABC = 198
	_MM_PERM_DABD = 199
	_MM_PERM_DACA = 200
	_MM_PERM_DACB = 201
	_MM_PERM_DACC = 202
	_MM_PERM_DACD = 203
	_MM_PERM_DADA = 204
	_MM_PERM_DADB = 205
	_MM_PERM_DADC = 206
	_MM_PERM_DADD = 207
	_MM_PERM_DBAA = 208
	_MM_PERM_DBAB = 209
	_MM_PERM_DBAC = 210
	_MM_PERM_DBAD = 211
	_MM_PERM_DBBA = 212
	_MM_PERM_DBBB = 213
	_MM_PERM_DBBC = 214
	_MM_PERM_DBBD = 215
	_MM_PERM_DBCA = 216
	_MM_PERM_DBCB = 217
	_MM_PERM_DBCC = 218
	_MM_PERM_DBCD = 219
	_MM_PERM_DBDA = 220
	_MM_PERM_DBDB = 221
	_MM_PERM_DBDC = 222
	_MM_PERM_DBDD = 223
	_MM_PERM_DCAA = 224
	_MM_PERM_DCAB = 225
	_MM_PERM_DCAC = 226
	_MM_PERM_DCAD = 227
	_MM_PERM_DCBA = 228
	_MM_PERM_DCBB = 229
	_MM_PERM_DCBC = 230
	_MM_PERM_DCBD = 231
	_MM_PERM_DCCA = 232
	_MM_PERM_DCCB = 233
	_MM_PERM_DCCC = 234
	_MM_PERM_DCCD = 235
	_MM_PERM_DCDA = 236
	_MM_PERM_DCDB = 237
	_MM_PERM_DCDC = 238
	_MM_PERM_DCDD = 239
	_MM_PERM_DDAA = 240
	_MM_PERM_DDAB = 241
	_MM_PERM_DDAC = 242
	_MM_PERM_DDAD = 243
	_MM_PERM_DDBA = 244
	_MM_PERM_DDBB = 245
	_MM_PERM_DDBC = 246
	_MM_PERM_DDBD = 247
	_MM_PERM_DDCA = 248
	_MM_PERM_DDCB = 249
	_MM_PERM_DDCC = 250
	_MM_PERM_DDCD = 251
	_MM_PERM_DDDA = 252
	_MM_PERM_DDDB = 253
	_MM_PERM_DDDC = 254
	_MM_PERM_DDDD = 255
)

// Constants for mantissa extraction
const ( /* avx512fintrin.h:8686:1: */
	_MM_MANT_NORM_1_2     = 0 // interval [1, 2)
	_MM_MANT_NORM_p5_2    = 1 // interval [0.5, 2)
	_MM_MANT_NORM_p5_1    = 2 // interval [0.5, 1)
	_MM_MANT_NORM_p75_1p5 = 3
)

const ( /* avx512fintrin.h:8694:1: */
	_MM_MANT_SIGN_src  = 0 // sign = sign(SRC)
	_MM_MANT_SIGN_zero = 1 // sign = 0
	_MM_MANT_SIGN_nan  = 2
)

// Constants for use with _mm_prefetch.
const ( /* xmmintrin.h:37:1: */
	// _MM_HINT_ET is _MM_HINT_T with set 3rd bit.
	_MM_HINT_ET0 = 7
	_MM_HINT_ET1 = 6
	_MM_HINT_T0  = 3
	_MM_HINT_T1  = 2
	_MM_HINT_T2  = 1
	_MM_HINT_NTA = 0
)

const ( /* accctrl.h:127:3: */
	NOT_USED_ACCESS   = 0
	GRANT_ACCESS      = 1
	SET_ACCESS        = 2
	DENY_ACCESS       = 3
	REVOKE_ACCESS     = 4
	SET_AUDIT_SUCCESS = 5
	SET_AUDIT_FAILURE = 6
)

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

const ( /* accctrl.h:22:3: */
	SE_UNKNOWN_OBJECT_TYPE     = 0
	SE_FILE_OBJECT             = 1
	SE_SERVICE                 = 2
	SE_PRINTER                 = 3
	SE_REGISTRY_KEY            = 4
	SE_LMSHARE                 = 5
	SE_KERNEL_OBJECT           = 6
	SE_WINDOW_OBJECT           = 7
	SE_DS_OBJECT               = 8
	SE_DS_OBJECT_ALL           = 9
	SE_PROVIDER_DEFINED_OBJECT = 10
	SE_WMIGUID_OBJECT          = 11
	SE_REGISTRY_WOW64_32KEY    = 12
)

const ( /* accctrl.h:38:3: */
	TRUSTEE_IS_UNKNOWN          = 0
	TRUSTEE_IS_USER             = 1
	TRUSTEE_IS_GROUP            = 2
	TRUSTEE_IS_DOMAIN           = 3
	TRUSTEE_IS_ALIAS            = 4
	TRUSTEE_IS_WELL_KNOWN_GROUP = 5
	TRUSTEE_IS_DELETED          = 6
	TRUSTEE_IS_INVALID          = 7
	TRUSTEE_IS_COMPUTER         = 8
)

const ( /* accctrl.h:433:3: */
	ProgressInvokeNever       = 1
	ProgressInvokeEveryObject = 2
	ProgressInvokeOnError     = 3
	ProgressCancelOperation   = 4
	ProgressRetryOperation    = 5
)
const ( /* accctrl.h:49:3: */
	TRUSTEE_IS_SID              = 0
	TRUSTEE_IS_NAME             = 1
	TRUSTEE_BAD_FORM            = 2
	TRUSTEE_IS_OBJECTS_AND_SID  = 3
	TRUSTEE_IS_OBJECTS_AND_NAME = 4
)

const ( /* accctrl.h:57:3: */
	NO_MULTIPLE_TRUSTEE    = 0
	TRUSTEE_IS_IMPERSONATE = 1
)

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

const ( /* combaseapi.h:138:1: */
	REGCLS_SINGLEUSE      = 0
	REGCLS_MULTIPLEUSE    = 1
	REGCLS_MULTI_SEPARATE = 2
	REGCLS_SUSPENDED      = 4
	REGCLS_SURROGATE      = 8
)

const ( /* combaseapi.h:149:1: */
	COINITBASE_MULTITHREADED = 0
)

const ( /* combaseapi.h:216:1: */
	SMEXF_SERVER  = 1
	SMEXF_HANDLER = 2
)

const ( /* combaseapi.h:320:1: */
	COWAIT_DEFAULT                  = 0
	COWAIT_WAITALL                  = 1
	COWAIT_ALERTABLE                = 2
	COWAIT_INPUTAVAILABLE           = 4
	COWAIT_DISPATCH_CALLS           = 8
	COWAIT_DISPATCH_WINDOW_MESSAGES = 16
)

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

const ( /* memoryapi.h:18:3: */
	LowMemoryResourceNotification  = 0
	HighMemoryResourceNotification = 1
)

const ( /* minwinbase.h:102:3: */
	FindExInfoStandard     = 0
	FindExInfoBasic        = 1
	FindExInfoMaxInfoLevel = 2
)

const ( /* minwinbase.h:114:3: */
	FindExSearchNameMatch          = 0
	FindExSearchLimitToDirectories = 1
	FindExSearchLimitToDevices     = 2
	FindExSearchMaxSearchOp        = 3
)

const ( /* minwinbase.h:131:3: */
	GetFileExInfoStandard = 0
	GetFileExMaxInfoLevel = 1
)

const ( /* msxml.h:242:3: */
	NODE_INVALID                = 0
	NODE_ELEMENT                = 1
	NODE_ATTRIBUTE              = 2
	NODE_TEXT                   = 3
	NODE_CDATA_SECTION          = 4
	NODE_ENTITY_REFERENCE       = 5
	NODE_ENTITY                 = 6
	NODE_PROCESSING_INSTRUCTION = 7
	NODE_COMMENT                = 8
	NODE_DOCUMENT               = 9
	NODE_DOCUMENT_TYPE          = 10
	NODE_DOCUMENT_FRAGMENT      = 11
	NODE_NOTATION               = 12
)

const ( /* msxml.h:248:3: */
	XMLELEMTYPE_ELEMENT  = 0
	XMLELEMTYPE_TEXT     = 1
	XMLELEMTYPE_COMMENT  = 2
	XMLELEMTYPE_DOCUMENT = 3
	XMLELEMTYPE_DTD      = 4
	XMLELEMTYPE_PI       = 5
	XMLELEMTYPE_OTHER    = 6
)

const ( /* oaidl.h:2472:1: */
	DESCKIND_NONE           = 0
	DESCKIND_FUNCDESC       = 1
	DESCKIND_VARDESC        = 2
	DESCKIND_TYPECOMP       = 3
	DESCKIND_IMPLICITAPPOBJ = 4
	DESCKIND_MAX            = 5
)

// ****************************************************************************
//
// ITypeLib interface

const ( /* oaidl.h:3732:1: */
	SYS_WIN16 = 0
	SYS_WIN32 = 1
	SYS_MAC   = 2
	SYS_WIN64 = 3
)

const ( /* oaidl.h:3739:1: */
	LIBFLAG_FRESTRICTED   = 1
	LIBFLAG_FCONTROL      = 2
	LIBFLAG_FHIDDEN       = 4
	LIBFLAG_FHASDISKIMAGE = 8
)

const ( /* oaidl.h:399:1: */
	SF_ERROR    = 10
	SF_I1       = 16
	SF_I2       = 2
	SF_I4       = 3
	SF_I8       = 20
	SF_BSTR     = 8
	SF_UNKNOWN  = 13
	SF_DISPATCH = 9
	SF_VARIANT  = 12
	SF_RECORD   = 36
	SF_HAVEIID  = 32781
)

const ( /* oaidl.h:4348:1: */
	CHANGEKIND_ADDMEMBER        = 0
	CHANGEKIND_DELETEMEMBER     = 1
	CHANGEKIND_SETNAMES         = 2
	CHANGEKIND_SETDOCUMENTATION = 3
	CHANGEKIND_GENERAL          = 4
	CHANGEKIND_INVALIDATE       = 5
	CHANGEKIND_CHANGEFAILED     = 6
	CHANGEKIND_MAX              = 7
)
const ( /* oaidl.h:640:1: */
	TKIND_ENUM      = 0
	TKIND_RECORD    = 1
	TKIND_MODULE    = 2
	TKIND_INTERFACE = 3
	TKIND_DISPATCH  = 4
	TKIND_COCLASS   = 5
	TKIND_ALIAS     = 6
	TKIND_UNION     = 7
	TKIND_MAX       = 8
)

const ( /* oaidl.h:784:1: */
	CC_FASTCALL   = 0
	CC_CDECL      = 1
	CC_MSCPASCAL  = 2
	CC_PASCAL     = 2
	CC_MACPASCAL  = 3
	CC_STDCALL    = 4
	CC_FPFASTCALL = 5
	CC_SYSCALL    = 6
	CC_MPWCDECL   = 7
	CC_MPWPASCAL  = 8
	CC_MAX        = 9
)

const ( /* oaidl.h:798:1: */
	FUNC_VIRTUAL     = 0
	FUNC_PUREVIRTUAL = 1
	FUNC_NONVIRTUAL  = 2
	FUNC_STATIC      = 3
	FUNC_DISPATCH    = 4
)

const ( /* oaidl.h:806:1: */
	INVOKE_FUNC           = 1
	INVOKE_PROPERTYGET    = 2
	INVOKE_PROPERTYPUT    = 4
	INVOKE_PROPERTYPUTREF = 8
)

const ( /* oaidl.h:829:1: */
	VAR_PERINSTANCE = 0
	VAR_STATIC      = 1
	VAR_CONST       = 2
	VAR_DISPATCH    = 3
)

const ( /* oaidl.h:858:1: */
	TYPEFLAG_FAPPOBJECT     = 1
	TYPEFLAG_FCANCREATE     = 2
	TYPEFLAG_FLICENSED      = 4
	TYPEFLAG_FPREDECLID     = 8
	TYPEFLAG_FHIDDEN        = 16
	TYPEFLAG_FCONTROL       = 32
	TYPEFLAG_FDUAL          = 64
	TYPEFLAG_FNONEXTENSIBLE = 128
	TYPEFLAG_FOLEAUTOMATION = 256
	TYPEFLAG_FRESTRICTED    = 512
	TYPEFLAG_FAGGREGATABLE  = 1024
	TYPEFLAG_FREPLACEABLE   = 2048
	TYPEFLAG_FDISPATCHABLE  = 4096
	TYPEFLAG_FREVERSEBIND   = 8192
	TYPEFLAG_FPROXY         = 16384
)

const ( /* oaidl.h:876:1: */
	FUNCFLAG_FRESTRICTED       = 1
	FUNCFLAG_FSOURCE           = 2
	FUNCFLAG_FBINDABLE         = 4
	FUNCFLAG_FREQUESTEDIT      = 8
	FUNCFLAG_FDISPLAYBIND      = 16
	FUNCFLAG_FDEFAULTBIND      = 32
	FUNCFLAG_FHIDDEN           = 64
	FUNCFLAG_FUSESGETLASTERROR = 128
	FUNCFLAG_FDEFAULTCOLLELEM  = 256
	FUNCFLAG_FUIDEFAULT        = 512
	FUNCFLAG_FNONBROWSABLE     = 1024
	FUNCFLAG_FREPLACEABLE      = 2048
	FUNCFLAG_FIMMEDIATEBIND    = 4096
)

const ( /* oaidl.h:892:1: */
	VARFLAG_FREADONLY        = 1
	VARFLAG_FSOURCE          = 2
	VARFLAG_FBINDABLE        = 4
	VARFLAG_FREQUESTEDIT     = 8
	VARFLAG_FDISPLAYBIND     = 16
	VARFLAG_FDEFAULTBIND     = 32
	VARFLAG_FHIDDEN          = 64
	VARFLAG_FRESTRICTED      = 128
	VARFLAG_FDEFAULTCOLLELEM = 256
	VARFLAG_FUIDEFAULT       = 512
	VARFLAG_FNONBROWSABLE    = 1024
	VARFLAG_FREPLACEABLE     = 2048
	VARFLAG_FIMMEDIATEBIND   = 4096
)

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

const ( /* objbase.h:16:1: */
	COINIT_APARTMENTTHREADED = 2
	COINIT_MULTITHREADED     = 0
	COINIT_DISABLE_OLE1DDE   = 4
	COINIT_SPEED_OVER_MEMORY = 8
)

const ( /* objbase.h:87:1: */
	SD_LAUNCHPERMISSIONS  = 0
	SD_ACCESSPERMISSIONS  = 1
	SD_LAUNCHRESTRICTIONS = 2
	SD_ACCESSRESTRICTIONS = 3
)
const ( /* objidl.h:11100:1: */
	ADVF_NODATA            = 1
	ADVF_PRIMEFIRST        = 2
	ADVF_ONLYONCE          = 4
	ADVF_DATAONSTOP        = 64
	ADVFCACHE_NOHANDLER    = 8
	ADVFCACHE_FORCEBUILTIN = 16
	ADVFCACHE_ONSAVE       = 32
)
const ( /* objidl.h:11357:1: */
	TYMED_HGLOBAL  = 1
	TYMED_FILE     = 2
	TYMED_ISTREAM  = 4
	TYMED_ISTORAGE = 8
	TYMED_GDI      = 16
	TYMED_MFPICT   = 32
	TYMED_ENHMF    = 64
	TYMED_NULL     = 0
)
const ( /* objidl.h:12272:1: */
	DATADIR_GET = 1
	DATADIR_SET = 2
)
const ( /* objidl.h:12728:1: */
	CALLTYPE_TOPLEVEL             = 1
	CALLTYPE_NESTED               = 2
	CALLTYPE_ASYNC                = 3
	CALLTYPE_TOPLEVEL_CALLPENDING = 4
	CALLTYPE_ASYNC_CALLPENDING    = 5
)
const ( /* objidl.h:12735:1: */
	SERVERCALL_ISHANDLED  = 0
	SERVERCALL_REJECTED   = 1
	SERVERCALL_RETRYLATER = 2
)
const ( /* objidl.h:12740:1: */
	PENDINGTYPE_TOPLEVEL = 1
	PENDINGTYPE_NESTED   = 2
)
const ( /* objidl.h:12744:1: */
	PENDINGMSG_CANCELCALL     = 0
	PENDINGMSG_WAITNOPROCESS  = 1
	PENDINGMSG_WAITDEFPROCESS = 2
)

const ( /* objidl.h:14295:1: */
	ServerApplication  = 0
	LibraryApplication = 1
)
const ( /* objidl.h:14299:1: */
	IdleShutdown   = 0
	ForcedShutdown = 1
)
const ( /* objidl.h:7990:1: */
	BIND_MAYBOTHERUSER     = 1
	BIND_JUSTTESTEXISTENCE = 2
)
const ( /* objidl.h:9048:1: */
	MKSYS_NONE             = 0
	MKSYS_GENERICCOMPOSITE = 1
	MKSYS_FILEMONIKER      = 2
	MKSYS_ANTIMONIKER      = 3
	MKSYS_ITEMMONIKER      = 4
	MKSYS_POINTERMONIKER   = 5
	MKSYS_CLASSMONIKER     = 7
	MKSYS_OBJREFMONIKER    = 8
	MKSYS_SESSIONMONIKER   = 9
	MKSYS_LUAMONIKER       = 10
)
const ( /* objidl.h:9060:1: */
	MKRREDUCE_ONE         = 196608
	MKRREDUCE_TOUSER      = 131072
	MKRREDUCE_THROUGHUSER = 65536
	MKRREDUCE_ALL         = 0
)

const ( /* objidlbase.h:1267:1: */
	EXTCONN_STRONG   = 1
	EXTCONN_WEAK     = 2
	EXTCONN_CALLABLE = 4
)

const ( /* objidlbase.h:2057:1: */
	STGTY_STORAGE   = 1
	STGTY_STREAM    = 2
	STGTY_LOCKBYTES = 3
	STGTY_PROPERTY  = 4
)

const ( /* objidlbase.h:2064:1: */
	STREAM_SEEK_SET = 0
	STREAM_SEEK_CUR = 1
	STREAM_SEEK_END = 2
)

const ( /* objidlbase.h:2070:1: */
	LOCK_WRITE     = 1
	LOCK_EXCLUSIVE = 2
	LOCK_ONLYONCE  = 4
)

const ( /* objidlbase.h:3588:1: */
	EOAC_NONE              = 0
	EOAC_MUTUAL_AUTH       = 1
	EOAC_STATIC_CLOAKING   = 32
	EOAC_DYNAMIC_CLOAKING  = 64
	EOAC_ANY_AUTHORITY     = 128
	EOAC_MAKE_FULLSIC      = 256
	EOAC_DEFAULT           = 2048
	EOAC_SECURE_REFS       = 2
	EOAC_ACCESS_CONTROL    = 4
	EOAC_APPID             = 8
	EOAC_DYNAMIC           = 16
	EOAC_REQUIRE_FULLSIC   = 512
	EOAC_AUTO_IMPERSONATE  = 1024
	EOAC_NO_CUSTOM_MARSHAL = 8192
	EOAC_DISABLE_AAA       = 4096
)

const ( /* objidlbase.h:3870:1: */
	COMBND_RPCTIMEOUT      = 1
	COMBND_SERVER_LOCALITY = 2
	COMBND_RESERVED1       = 4
)

const ( /* objidlbase.h:3876:1: */
	SERVER_LOCALITY_PROCESS_LOCAL = 0
	SERVER_LOCALITY_MACHINE_LOCAL = 1
	SERVER_LOCALITY_REMOTE        = 2
)

const ( /* objidlbase.h:3981:1: */
	COMGLB_EXCEPTION_HANDLING     = 1
	COMGLB_APPID                  = 2
	COMGLB_RPC_THREADPOOL_SETTING = 3
	COMGLB_RO_SETTINGS            = 4
	COMGLB_UNMARSHALING_POLICY    = 5
)

const ( /* objidlbase.h:3989:1: */
	COMGLB_EXCEPTION_HANDLE             = 0
	COMGLB_EXCEPTION_DONOT_HANDLE_FATAL = 1
	COMGLB_EXCEPTION_DONOT_HANDLE       = 1
	COMGLB_EXCEPTION_DONOT_HANDLE_ANY   = 2
)

const ( /* objidlbase.h:3996:1: */
	COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL = 0
	COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL = 1
)

const ( /* objidlbase.h:4001:1: */
	COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES                    = 1
	COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES       = 2
	COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES = 4
	COMGLB_FAST_RUNDOWN                                           = 8
	COMGLB_RESERVED1                                              = 16
	COMGLB_RESERVED2                                              = 32
	COMGLB_RESERVED3                                              = 64
	COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES    = 128
)

const ( /* objidlbase.h:4012:1: */
	COMGLB_UNMARSHALING_POLICY_NORMAL = 0
	COMGLB_UNMARSHALING_POLICY_STRONG = 1
	COMGLB_UNMARSHALING_POLICY_HYBRID = 2
)

// ****************************************************************************
//
// IAsyncManager interface

const ( /* objidlbase.h:4875:1: */
	DCOM_NONE          = 0
	DCOM_CALL_COMPLETE = 1
	DCOM_CALL_CANCELED = 2
)

const ( /* objidlbase.h:6049:1: */
	APTTYPEQUALIFIER_NONE               = 0
	APTTYPEQUALIFIER_IMPLICIT_MTA       = 1
	APTTYPEQUALIFIER_NA_ON_MTA          = 2
	APTTYPEQUALIFIER_NA_ON_STA          = 3
	APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA = 4
	APTTYPEQUALIFIER_NA_ON_MAINSTA      = 5
	APTTYPEQUALIFIER_APPLICATION_STA    = 6
)

const ( /* objidlbase.h:6059:1: */
	APTTYPE_CURRENT = -1
	APTTYPE_STA     = 0
	APTTYPE_MTA     = 1
	APTTYPE_NA      = 2
	APTTYPE_MAINSTA = 3
)

const ( /* objidlbase.h:6069:1: */
	THDTYPE_BLOCKMESSAGES   = 0
	THDTYPE_PROCESSMESSAGES = 1
)

const ( /* objidlbase.h:6329:1: */
	CO_MARSHALING_SOURCE_IS_APP_CONTAINER = 0
)

const ( /* oleauto.h:590:1: */
	REGKIND_DEFAULT  = 0
	REGKIND_REGISTER = 1
	REGKIND_NONE     = 2
)

const ( /* oleidl.h:1123:1: */
	OLEGETMONIKER_ONLYIFTHERE = 1
	OLEGETMONIKER_FORCEASSIGN = 2
	OLEGETMONIKER_UNASSIGN    = 3
	OLEGETMONIKER_TEMPFORUSER = 4
)

const ( /* oleidl.h:1130:1: */
	OLEWHICHMK_CONTAINER = 1
	OLEWHICHMK_OBJREL    = 2
	OLEWHICHMK_OBJFULL   = 3
)

const ( /* oleidl.h:1136:1: */
	USERCLASSTYPE_FULL    = 1
	USERCLASSTYPE_SHORT   = 2
	USERCLASSTYPE_APPNAME = 3
)

const ( /* oleidl.h:1142:1: */
	OLEMISC_RECOMPOSEONRESIZE            = 1
	OLEMISC_ONLYICONIC                   = 2
	OLEMISC_INSERTNOTREPLACE             = 4
	OLEMISC_STATIC                       = 8
	OLEMISC_CANTLINKINSIDE               = 16
	OLEMISC_CANLINKBYOLE1                = 32
	OLEMISC_ISLINKOBJECT                 = 64
	OLEMISC_INSIDEOUT                    = 128
	OLEMISC_ACTIVATEWHENVISIBLE          = 256
	OLEMISC_RENDERINGISDEVICEINDEPENDENT = 512
	OLEMISC_INVISIBLEATRUNTIME           = 1024
	OLEMISC_ALWAYSRUN                    = 2048
	OLEMISC_ACTSLIKEBUTTON               = 4096
	OLEMISC_ACTSLIKELABEL                = 8192
	OLEMISC_NOUIACTIVATE                 = 16384
	OLEMISC_ALIGNABLE                    = 32768
	OLEMISC_SIMPLEFRAME                  = 65536
	OLEMISC_SETCLIENTSITEFIRST           = 131072
	OLEMISC_IMEMODE                      = 262144
	OLEMISC_IGNOREACTIVATEWHENVISIBLE    = 524288
	OLEMISC_WANTSTOMENUMERGE             = 1048576
	OLEMISC_SUPPORTSMULTILEVELUNDO       = 2097152
)
const ( /* oleidl.h:1166:1: */
	OLECLOSE_SAVEIFDIRTY = 0
	OLECLOSE_NOSAVE      = 1
	OLECLOSE_PROMPTSAVE  = 2
)
const ( /* oleidl.h:1504:1: */
	OLERENDER_NONE   = 0
	OLERENDER_DRAW   = 1
	OLERENDER_FORMAT = 2
	OLERENDER_ASIS   = 3
)

const ( /* oleidl.h:1631:1: */
	OLEUPDATE_ALWAYS = 1
	OLEUPDATE_ONCALL = 3
)

const ( /* oleidl.h:1639:1: */
	OLELINKBIND_EVENIFCLASSDIFF = 1
)

const ( /* oleidl.h:1835:1: */
	BINDSPEED_INDEFINITE = 1
	BINDSPEED_MODERATE   = 2
	BINDSPEED_IMMEDIATE  = 3
)

const ( /* oleidl.h:1841:1: */
	OLECONTF_EMBEDDINGS    = 1
	OLECONTF_LINKS         = 2
	OLECONTF_OTHERS        = 4
	OLECONTF_ONLYUSER      = 8
	OLECONTF_ONLYIFRUNNING = 16
)

const ( /* oleidl.h:3732:1: */
	OLEVERBATTRIB_NEVERDIRTIES    = 1
	OLEVERBATTRIB_ONCONTAINERMENU = 2
)

const ( /* oleidl.h:535:1: */
	DISCARDCACHE_SAVEIFDIRTY = 0
	DISCARDCACHE_NOSAVE      = 1
)

const ( /* propidl.h:402:1: */
	PIDMSI_STATUS_NORMAL     = 0
	PIDMSI_STATUS_NEW        = 1
	PIDMSI_STATUS_PRELIM     = 2
	PIDMSI_STATUS_DRAFT      = 3
	PIDMSI_STATUS_INPROGRESS = 4
	PIDMSI_STATUS_EDIT       = 5
	PIDMSI_STATUS_REVIEW     = 6
	PIDMSI_STATUS_PROOF      = 7
	PIDMSI_STATUS_FINAL      = 8
	PIDMSI_STATUS_OTHER      = 32767
)

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// TODO:  This isn't actual working on gcc.  Either we need to implement
//    their __try/__except/__finally feature, or we need to do at least for x64
//    emulation-code via inline-assembler ...

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

const ( /* rpcasync.h:20:3: */
	RpcNotificationTypeNone     = 0
	RpcNotificationTypeEvent    = 1
	RpcNotificationTypeApc      = 2
	RpcNotificationTypeIoc      = 3
	RpcNotificationTypeHwnd     = 4
	RpcNotificationTypeCallback = 5
)

const ( /* rpcasync.h:214:1: */
	rctInvalid    = 0
	rctNormal     = 1
	rctTraining   = 2
	rctGuaranteed = 3
)

const ( /* rpcasync.h:221:1: */
	rlafInvalid = 0
	rlafIPv4    = 1
	rlafIPv6    = 2
)

const ( /* rpcasync.h:227:1: */
	RpcNotificationCallNone         = 0
	RpcNotificationClientDisconnect = 1
	RpcNotificationCallCancel       = 2
)

const ( /* rpcasync.h:233:1: */
	rcclInvalid               = 0
	rcclLocal                 = 1
	rcclRemote                = 2
	rcclClientUnknownLocality = 3
)

const ( /* rpcasync.h:25:3: */
	RpcCallComplete    = 0
	RpcSendComplete    = 1
	RpcReceiveComplete = 2
)

const ( /* rpcasync.h:78:3: */
	eeptAnsiString    = 1
	eeptUnicodeString = 2
	eeptLongVal       = 3
	eeptShortVal      = 4
	eeptPointerVal    = 5
	eeptNone          = 6
	eeptBinary        = 7
)

const ( /* rpcdce.h:443:3: */
	RPCHTTP_RS_REDIRECT  = 1
	RPCHTTP_RS_ACCESS_1  = 2
	RPCHTTP_RS_SESSION   = 3
	RPCHTTP_RS_ACCESS_2  = 4
	RPCHTTP_RS_INTERFACE = 5
)

const ( /* rpcdcep.h:41:3: */
	PROTOCOL_NOT_LOADED     = 1
	PROTOCOL_LOADED         = 2
	PROTOCOL_ADDRESS_CHANGE = 3
)

const ( /* rpcndr.h:360:3: */
	USER_MARSHAL_CB_BUFFER_SIZE = 0
	USER_MARSHAL_CB_MARSHALL    = 1
	USER_MARSHAL_CB_UNMARSHALL  = 2
	USER_MARSHAL_CB_FREE        = 3
)

const ( /* rpcndr.h:391:3: */
	IDL_CS_NO_CONVERT         = 0
	IDL_CS_IN_PLACE_CONVERT   = 1
	IDL_CS_NEW_BUFFER_CONVERT = 2
)

const ( /* rpcndr.h:495:3: */
	XLAT_SERVER = 1
	XLAT_CLIENT = 2
)

const ( /* rpcndr.h:672:3: */
	STUB_UNMARSHAL              = 0
	STUB_CALL_SERVER            = 1
	STUB_MARSHAL                = 2
	STUB_CALL_SERVER_NO_HRESULT = 3
)

const ( /* rpcndr.h:676:3: */
	PROXY_CALCSIZE    = 0
	PROXY_GETBUFFER   = 1
	PROXY_MARSHAL     = 2
	PROXY_SENDRECEIVE = 3
	PROXY_UNMARSHAL   = 4
)

const ( /* sysinfoapi.h:70:3: */
	ComputerNameNetBIOS                   = 0
	ComputerNameDnsHostname               = 1
	ComputerNameDnsDomain                 = 2
	ComputerNameDnsFullyQualified         = 3
	ComputerNamePhysicalNetBIOS           = 4
	ComputerNamePhysicalDnsHostname       = 5
	ComputerNamePhysicalDnsDomain         = 6
	ComputerNamePhysicalDnsFullyQualified = 7
	ComputerNameMax                       = 8
)

const ( /* urlmon.h:1295:1: */
	BINDVERB_GET       = 0
	BINDVERB_POST      = 1
	BINDVERB_PUT       = 2
	BINDVERB_CUSTOM    = 3
	BINDVERB_RESERVED1 = 4
)

const ( /* urlmon.h:1303:1: */
	BINDINFOF_URLENCODESTGMEDDATA = 1
	BINDINFOF_URLENCODEDEXTRAINFO = 2
)

const ( /* urlmon.h:1308:1: */
	BINDF_ASYNCHRONOUS             = 1
	BINDF_ASYNCSTORAGE             = 2
	BINDF_NOPROGRESSIVERENDERING   = 4
	BINDF_OFFLINEOPERATION         = 8
	BINDF_GETNEWESTVERSION         = 16
	BINDF_NOWRITECACHE             = 32
	BINDF_NEEDFILE                 = 64
	BINDF_PULLDATA                 = 128
	BINDF_IGNORESECURITYPROBLEM    = 256
	BINDF_RESYNCHRONIZE            = 512
	BINDF_HYPERLINK                = 1024
	BINDF_NO_UI                    = 2048
	BINDF_SILENTOPERATION          = 4096
	BINDF_PRAGMA_NO_CACHE          = 8192
	BINDF_GETCLASSOBJECT           = 16384
	BINDF_RESERVED_1               = 32768
	BINDF_FREE_THREADED            = 65536
	BINDF_DIRECT_READ              = 131072
	BINDF_FORMS_SUBMIT             = 262144
	BINDF_GETFROMCACHE_IF_NET_FAIL = 524288
	BINDF_FROMURLMON               = 1048576
	BINDF_FWD_BACK                 = 2097152
	BINDF_PREFERDEFAULTHANDLER     = 4194304
	BINDF_ENFORCERESTRICTED        = 8388608
	BINDF_RESERVED_2               = 2147483648
	BINDF_RESERVED_3               = 16777216
	BINDF_RESERVED_4               = 33554432
	BINDF_RESERVED_5               = 67108864
	BINDF_RESERVED_6               = 134217728
	BINDF_RESERVED_7               = 1073741824
	BINDF_RESERVED_8               = 536870912
)

const ( /* urlmon.h:1342:1: */
	URL_ENCODING_NONE         = 0
	URL_ENCODING_ENABLE_UTF8  = 268435456
	URL_ENCODING_DISABLE_UTF8 = 536870912
)

const ( /* urlmon.h:1398:1: */
	BINDINFO_OPTIONS_WININETFLAG              = 65536
	BINDINFO_OPTIONS_ENABLE_UTF8              = 131072
	BINDINFO_OPTIONS_DISABLE_UTF8             = 262144
	BINDINFO_OPTIONS_USE_IE_ENCODING          = 524288
	BINDINFO_OPTIONS_BINDTOOBJECT             = 1048576
	BINDINFO_OPTIONS_SECURITYOPTOUT           = 2097152
	BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN      = 4194304
	BINDINFO_OPTIONS_USEBINDSTRINGCREDS       = 8388608
	BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS = 16777216
	BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE    = 33554432
	BINDINFO_WPC_DOWNLOADBLOCKED              = 134217728
	BINDINFO_WPC_LOGGING_ENABLED              = 268435456
	BINDINFO_OPTIONS_ALLOWCONNECTDATA         = 536870912
	BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS     = 1073741824
	BINDINFO_OPTIONS_SHDOCVW_NAVIGATE         = -2147483648
)

const ( /* urlmon.h:1416:1: */
	BSCF_FIRSTDATANOTIFICATION        = 1
	BSCF_INTERMEDIATEDATANOTIFICATION = 2
	BSCF_LASTDATANOTIFICATION         = 4
	BSCF_DATAFULLYAVAILABLE           = 8
	BSCF_AVAILABLEDATASIZEUNKNOWN     = 16
	BSCF_SKIPDRAINDATAFORFILEURLS     = 32
	BSCF_64BITLENGTHDOWNLOAD          = 64
)

const ( /* urlmon.h:1426:1: */
	BINDSTATUS_FINDINGRESOURCE            = 1
	BINDSTATUS_CONNECTING                 = 2
	BINDSTATUS_REDIRECTING                = 3
	BINDSTATUS_BEGINDOWNLOADDATA          = 4
	BINDSTATUS_DOWNLOADINGDATA            = 5
	BINDSTATUS_ENDDOWNLOADDATA            = 6
	BINDSTATUS_BEGINDOWNLOADCOMPONENTS    = 7
	BINDSTATUS_INSTALLINGCOMPONENTS       = 8
	BINDSTATUS_ENDDOWNLOADCOMPONENTS      = 9
	BINDSTATUS_USINGCACHEDCOPY            = 10
	BINDSTATUS_SENDINGREQUEST             = 11
	BINDSTATUS_CLASSIDAVAILABLE           = 12
	BINDSTATUS_MIMETYPEAVAILABLE          = 13
	BINDSTATUS_CACHEFILENAMEAVAILABLE     = 14
	BINDSTATUS_BEGINSYNCOPERATION         = 15
	BINDSTATUS_ENDSYNCOPERATION           = 16
	BINDSTATUS_BEGINUPLOADDATA            = 17
	BINDSTATUS_UPLOADINGDATA              = 18
	BINDSTATUS_ENDUPLOADDATA              = 19
	BINDSTATUS_PROTOCOLCLASSID            = 20
	BINDSTATUS_ENCODING                   = 21
	BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE  = 22
	BINDSTATUS_CLASSINSTALLLOCATION       = 23
	BINDSTATUS_DECODING                   = 24
	BINDSTATUS_LOADINGMIMEHANDLER         = 25
	BINDSTATUS_CONTENTDISPOSITIONATTACH   = 26
	BINDSTATUS_FILTERREPORTMIMETYPE       = 27
	BINDSTATUS_CLSIDCANINSTANTIATE        = 28
	BINDSTATUS_IUNKNOWNAVAILABLE          = 29
	BINDSTATUS_DIRECTBIND                 = 30
	BINDSTATUS_RAWMIMETYPE                = 31
	BINDSTATUS_PROXYDETECTING             = 32
	BINDSTATUS_ACCEPTRANGES               = 33
	BINDSTATUS_COOKIE_SENT                = 34
	BINDSTATUS_COMPACT_POLICY_RECEIVED    = 35
	BINDSTATUS_COOKIE_SUPPRESSED          = 36
	BINDSTATUS_COOKIE_STATE_UNKNOWN       = 37
	BINDSTATUS_COOKIE_STATE_ACCEPT        = 38
	BINDSTATUS_COOKIE_STATE_REJECT        = 39
	BINDSTATUS_COOKIE_STATE_PROMPT        = 40
	BINDSTATUS_COOKIE_STATE_LEASH         = 41
	BINDSTATUS_COOKIE_STATE_DOWNGRADE     = 42
	BINDSTATUS_POLICY_HREF                = 43
	BINDSTATUS_P3P_HEADER                 = 44
	BINDSTATUS_SESSION_COOKIE_RECEIVED    = 45
	BINDSTATUS_PERSISTENT_COOKIE_RECEIVED = 46
	BINDSTATUS_SESSION_COOKIES_ALLOWED    = 47
	BINDSTATUS_CACHECONTROL               = 48
	BINDSTATUS_CONTENTDISPOSITIONFILENAME = 49
	BINDSTATUS_MIMETEXTPLAINMISMATCH      = 50
	BINDSTATUS_PUBLISHERAVAILABLE         = 51
	BINDSTATUS_DISPLAYNAMEAVAILABLE       = 52
	BINDSTATUS_SSLUX_NAVBLOCKED           = 53
	BINDSTATUS_SERVER_MIMETYPEAVAILABLE   = 54
	BINDSTATUS_SNIFFED_CLASSIDAVAILABLE   = 55
	BINDSTATUS_64BIT_PROGRESS             = 56
	BINDSTATUS_LAST                       = 56
	BINDSTATUS_RESERVED_0                 = 57
	BINDSTATUS_RESERVED_1                 = 58
	BINDSTATUS_RESERVED_2                 = 59
	BINDSTATUS_RESERVED_3                 = 60
	BINDSTATUS_RESERVED_4                 = 61
	BINDSTATUS_RESERVED_5                 = 62
	BINDSTATUS_RESERVED_6                 = 63
	BINDSTATUS_RESERVED_7                 = 64
	BINDSTATUS_RESERVED_8                 = 65
	BINDSTATUS_RESERVED_9                 = 66
	BINDSTATUS_LAST_PRIVATE               = 66
)

const ( /* urlmon.h:1722:1: */
	BINDF2_DISABLEBASICOVERHTTP              = 1
	BINDF2_DISABLEAUTOCOOKIEHANDLING         = 2
	BINDF2_READ_DATA_GREATER_THAN_4GB        = 4
	BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID = 8
	BINDF2_SETDOWNLOADMODE                   = 32
	BINDF2_DISABLE_HTTP_REDIRECT_CACHING     = 64
	BINDF2_KEEP_CALLBACK_MODULE_LOADED       = 128
	BINDF2_ALLOW_PROXY_CRED_PROMPT           = 256
	BINDF2_RESERVED_F                        = 131072
	BINDF2_RESERVED_E                        = 262144
	BINDF2_RESERVED_D                        = 524288
	BINDF2_RESERVED_C                        = 1048576
	BINDF2_RESERVED_B                        = 2097152
	BINDF2_RESERVED_A                        = 4194304
	BINDF2_RESERVED_9                        = 8388608
	BINDF2_RESERVED_8                        = 16777216
	BINDF2_RESERVED_7                        = 33554432
	BINDF2_RESERVED_6                        = 67108864
	BINDF2_RESERVED_5                        = 134217728
	BINDF2_RESERVED_4                        = 268435456
	BINDF2_RESERVED_3                        = 536870912
	BINDF2_RESERVED_2                        = 1073741824
	BINDF2_RESERVED_1                        = 2147483648
)

const ( /* urlmon.h:2028:1: */
	AUTHENTICATEF_PROXY = 1
	AUTHENTICATEF_BASIC = 2
	AUTHENTICATEF_HTTP  = 4
)

const ( /* urlmon.h:2669:1: */
	CIP_DISK_FULL                            = 0
	CIP_ACCESS_DENIED                        = 1
	CIP_NEWER_VERSION_EXISTS                 = 2
	CIP_OLDER_VERSION_EXISTS                 = 3
	CIP_NAME_CONFLICT                        = 4
	CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 5
	CIP_EXE_SELF_REGISTERATION_TIMEOUT       = 6
	CIP_UNSAFE_TO_ABORT                      = 7
	CIP_NEED_REBOOT                          = 8
	CIP_NEED_REBOOT_UI_PERMISSION            = 9
)

const ( /* urlmon.h:4774:1: */
	BINDSTRING_HEADERS             = 1
	BINDSTRING_ACCEPT_MIMES        = 2
	BINDSTRING_EXTRA_URL           = 3
	BINDSTRING_LANGUAGE            = 4
	BINDSTRING_USERNAME            = 5
	BINDSTRING_PASSWORD            = 6
	BINDSTRING_UA_PIXELS           = 7
	BINDSTRING_UA_COLOR            = 8
	BINDSTRING_OS                  = 9
	BINDSTRING_USER_AGENT          = 10
	BINDSTRING_ACCEPT_ENCODINGS    = 11
	BINDSTRING_POST_COOKIE         = 12
	BINDSTRING_POST_DATA_MIME      = 13
	BINDSTRING_URL                 = 14
	BINDSTRING_IID                 = 15
	BINDSTRING_FLAG_BIND_TO_OBJECT = 16
	BINDSTRING_PTR_BIND_CONTEXT    = 17
	BINDSTRING_XDR_ORIGIN          = 18
	BINDSTRING_DOWNLOADPATH        = 19
	BINDSTRING_ROOTDOC_URL         = 20
	BINDSTRING_INITIAL_FILENAME    = 21
	BINDSTRING_PROXY_USERNAME      = 22
	BINDSTRING_PROXY_PASSWORD      = 23
)

const ( /* urlmon.h:5016:1: */
	PI_PARSE_URL            = 1
	PI_FILTER_MODE          = 2
	PI_FORCE_ASYNC          = 4
	PI_USE_WORKERTHREAD     = 8
	PI_MIMEVERIFICATION     = 16
	PI_CLSIDLOOKUP          = 32
	PI_DATAPROGRESS         = 64
	PI_SYNCHRONOUS          = 128
	PI_APARTMENTTHREADED    = 256
	PI_CLASSINSTALL         = 512
	PI_PASSONBINDCTX        = 8192
	PI_NOMIMEHANDLER        = 32768
	PI_LOADAPPDIRECT        = 16384
	PD_FORCE_SWITCH         = 65536
	PI_PREFERDEFAULTHANDLER = 131072
)

const ( /* urlmon.h:5785:1: */
	OIBDG_APARTMENTTHREADED = 256
	OIBDG_DATAONLY          = 4096
)

const ( /* urlmon.h:6168:1: */
	PARSE_CANONICALIZE       = 1
	PARSE_FRIENDLY           = 2
	PARSE_SECURITY_URL       = 3
	PARSE_ROOTDOCUMENT       = 4
	PARSE_DOCUMENT           = 5
	PARSE_ANCHOR             = 6
	PARSE_ENCODE_IS_UNESCAPE = 7
	PARSE_DECODE_IS_ESCAPE   = 8
	PARSE_PATH_FROM_URL      = 9
	PARSE_URL_FROM_PATH      = 10
	PARSE_MIME               = 11
	PARSE_SERVER             = 12
	PARSE_SCHEMA             = 13
	PARSE_SITE               = 14
	PARSE_DOMAIN             = 15
	PARSE_LOCATION           = 16
	PARSE_SECURITY_DOMAIN    = 17
	PARSE_ESCAPE             = 18
	PARSE_UNESCAPE           = 19
)

const ( /* urlmon.h:6190:1: */
	PSU_DEFAULT           = 1
	PSU_SECURITY_URL_ONLY = 2
)

const ( /* urlmon.h:6195:1: */
	QUERY_EXPIRATION_DATE              = 1
	QUERY_TIME_OF_LAST_CHANGE          = 2
	QUERY_CONTENT_ENCODING             = 3
	QUERY_CONTENT_TYPE                 = 4
	QUERY_REFRESH                      = 5
	QUERY_RECOMBINE                    = 6
	QUERY_CAN_NAVIGATE                 = 7
	QUERY_USES_NETWORK                 = 8
	QUERY_IS_CACHED                    = 9
	QUERY_IS_INSTALLEDENTRY            = 10
	QUERY_IS_CACHED_OR_MAPPED          = 11
	QUERY_USES_CACHE                   = 12
	QUERY_IS_SECURE                    = 13
	QUERY_IS_SAFE                      = 14
	QUERY_USES_HISTORYFOLDER           = 15
	QUERY_IS_CACHED_AND_USABLE_OFFLINE = 16
)

// ****************************************************************************
//
// IInternetSecurityManager interface

const ( /* urlmon.h:6653:1: */
	PUAF_DEFAULT                      = 0
	PUAF_NOUI                         = 1
	PUAF_ISFILE                       = 2
	PUAF_WARN_IF_DENIED               = 4
	PUAF_FORCEUI_FOREGROUND           = 8
	PUAF_CHECK_TIFS                   = 16
	PUAF_DONTCHECKBOXINDIALOG         = 32
	PUAF_TRUSTED                      = 64
	PUAF_ACCEPT_WILDCARD_SCHEME       = 128
	PUAF_ENFORCERESTRICTED            = 256
	PUAF_NOSAVEDFILECHECK             = 512
	PUAF_REQUIRESAVEDFILECHECK        = 1024
	PUAF_DONT_USE_CACHE               = 4096
	PUAF_RESERVED1                    = 8192
	PUAF_RESERVED2                    = 16384
	PUAF_LMZ_UNLOCKED                 = 65536
	PUAF_LMZ_LOCKED                   = 131072
	PUAF_DEFAULTZONEPOL               = 262144
	PUAF_NPL_USE_LOCKED_IF_RESTRICTED = 524288
	PUAF_NOUIIFLOCKED                 = 1048576
	PUAF_DRAGPROTOCOLCHECK            = 2097152
)
const ( /* urlmon.h:6676:1: */
	PUAFOUT_DEFAULT          = 0
	PUAFOUT_ISLOCKZONEPOLICY = 1
)

const ( /* urlmon.h:6682:1: */
	SZM_CREATE = 0
	SZM_DELETE = 1
)

const ( /* urlmon.h:7782:1: */
	URLZONE_INVALID        = -1
	URLZONE_PREDEFINED_MIN = 0
	URLZONE_LOCAL_MACHINE  = 0
	URLZONE_INTRANET       = 1
	URLZONE_TRUSTED        = 2
	URLZONE_INTERNET       = 3
	URLZONE_UNTRUSTED      = 4
	URLZONE_PREDEFINED_MAX = 999
	URLZONE_USER_MIN       = 1000
	URLZONE_USER_MAX       = 10000
)

const ( /* urlmon.h:7797:1: */
	URLTEMPLATE_CUSTOM         = 0
	URLTEMPLATE_PREDEFINED_MIN = 65536
	URLTEMPLATE_LOW            = 65536
	URLTEMPLATE_MEDLOW         = 66816
	URLTEMPLATE_MEDIUM         = 69632
	URLTEMPLATE_MEDHIGH        = 70912
	URLTEMPLATE_HIGH           = 73728
	URLTEMPLATE_PREDEFINED_MAX = 131072
)

const ( /* urlmon.h:7808:1: */
	MAX_ZONE_PATH        = 260
	MAX_ZONE_DESCRIPTION = 200
)

const ( /* urlmon.h:7813:1: */
	ZAFLAGS_CUSTOM_EDIT              = 1
	ZAFLAGS_ADD_SITES                = 2
	ZAFLAGS_REQUIRE_VERIFICATION     = 4
	ZAFLAGS_INCLUDE_PROXY_OVERRIDE   = 8
	ZAFLAGS_INCLUDE_INTRANET_SITES   = 16
	ZAFLAGS_NO_UI                    = 32
	ZAFLAGS_SUPPORTS_VERIFICATION    = 64
	ZAFLAGS_UNC_AS_INTRANET          = 128
	ZAFLAGS_DETECT_INTRANET          = 256
	ZAFLAGS_USE_LOCKED_ZONES         = 65536
	ZAFLAGS_VERIFY_TEMPLATE_SETTINGS = 131072
	ZAFLAGS_NO_CACHE                 = 262144
)

const ( /* urlmon.h:7841:1: */
	URLZONEREG_DEFAULT = 0
	URLZONEREG_HKLM    = 1
	URLZONEREG_HKCU    = 2
)

const ( /* urlmon.h:9292:1: */
	BINDHANDLETYPES_APPCACHE   = 0
	BINDHANDLETYPES_DEPENDENCY = 1
	BINDHANDLETYPES_COUNT      = 2
)

const ( /* urlmon.h:946:1: */
	MIMETYPEPROP        = 0
	USE_SRC_URL         = 1
	CLASSIDPROP         = 2
	TRUSTEDDOWNLOADPROP = 3
	POPUPLEVELPROP      = 4
)

const ( /* winbase.h:1184:3: */
	ThreadMemoryPriority      = 0
	ThreadAbsoluteCpuPriority = 1
	ThreadInformationClassMax = 2
)

const ( /* winbase.h:1279:3: */
	DEPPolicyAlwaysOff  = 0
	DEPPolicyAlwaysOn   = 1
	DEPPolicyOptIn      = 2
	DEPPolicyOptOut     = 3
	DEPTotalPolicyCount = 4
)

const ( /* winbase.h:1570:3: */
	ProcessMemoryPriority      = 0
	ProcessInformationClassMax = 1
)

const ( /* winbase.h:2216:3: */
	FindStreamInfoStandard     = 0
	FindStreamInfoMaxInfoLevel = 1
)

const ( /* windef.h:157:1: */
	DPI_AWARENESS_INVALID           = -1
	DPI_AWARENESS_UNAWARE           = 0
	DPI_AWARENESS_SYSTEM_AWARE      = 1
	DPI_AWARENESS_PER_MONITOR_AWARE = 2
)

const ( /* windef.h:170:1: */
	DPI_HOSTING_BEHAVIOR_INVALID = -1
	DPI_HOSTING_BEHAVIOR_DEFAULT = 0
	DPI_HOSTING_BEHAVIOR_MIXED   = 1
)

const ( /* winnls.h:720:3: */
	COMPARE_STRING = 1
)

const ( /* winnls.h:756:3: */
	GEO_NATION            = 1
	GEO_LATITUDE          = 2
	GEO_LONGITUDE         = 3
	GEO_ISO2              = 4
	GEO_ISO3              = 5
	GEO_RFC1766           = 6
	GEO_LCID              = 7
	GEO_FRIENDLYNAME      = 8
	GEO_OFFICIALNAME      = 9
	GEO_TIMEZONES         = 10
	GEO_OFFICIALLANGUAGES = 11
	GEO_ISO_UN_NUMBER     = 12
	GEO_PARENT            = 13
)

const ( /* winnls.h:772:3: */
	GEOCLASS_NATION = 16
	GEOCLASS_REGION = 14
	GEOCLASS_ALL    = 0
)

const ( /* winnt.h:2946:5: */
	SidTypeUser           = 1
	SidTypeGroup          = 2
	SidTypeDomain         = 3
	SidTypeAlias          = 4
	SidTypeWellKnownGroup = 5
	SidTypeDeletedAccount = 6
	SidTypeInvalid        = 7
	SidTypeUnknown        = 8
	SidTypeComputer       = 9
	SidTypeLabel          = 10
	SidTypeLogonSession   = 11
)

const ( /* winnt.h:3189:5: */
	WinNullSid                                    = 0
	WinWorldSid                                   = 1
	WinLocalSid                                   = 2
	WinCreatorOwnerSid                            = 3
	WinCreatorGroupSid                            = 4
	WinCreatorOwnerServerSid                      = 5
	WinCreatorGroupServerSid                      = 6
	WinNtAuthoritySid                             = 7
	WinDialupSid                                  = 8
	WinNetworkSid                                 = 9
	WinBatchSid                                   = 10
	WinInteractiveSid                             = 11
	WinServiceSid                                 = 12
	WinAnonymousSid                               = 13
	WinProxySid                                   = 14
	WinEnterpriseControllersSid                   = 15
	WinSelfSid                                    = 16
	WinAuthenticatedUserSid                       = 17
	WinRestrictedCodeSid                          = 18
	WinTerminalServerSid                          = 19
	WinRemoteLogonIdSid                           = 20
	WinLogonIdsSid                                = 21
	WinLocalSystemSid                             = 22
	WinLocalServiceSid                            = 23
	WinNetworkServiceSid                          = 24
	WinBuiltinDomainSid                           = 25
	WinBuiltinAdministratorsSid                   = 26
	WinBuiltinUsersSid                            = 27
	WinBuiltinGuestsSid                           = 28
	WinBuiltinPowerUsersSid                       = 29
	WinBuiltinAccountOperatorsSid                 = 30
	WinBuiltinSystemOperatorsSid                  = 31
	WinBuiltinPrintOperatorsSid                   = 32
	WinBuiltinBackupOperatorsSid                  = 33
	WinBuiltinReplicatorSid                       = 34
	WinBuiltinPreWindows2000CompatibleAccessSid   = 35
	WinBuiltinRemoteDesktopUsersSid               = 36
	WinBuiltinNetworkConfigurationOperatorsSid    = 37
	WinAccountAdministratorSid                    = 38
	WinAccountGuestSid                            = 39
	WinAccountKrbtgtSid                           = 40
	WinAccountDomainAdminsSid                     = 41
	WinAccountDomainUsersSid                      = 42
	WinAccountDomainGuestsSid                     = 43
	WinAccountComputersSid                        = 44
	WinAccountControllersSid                      = 45
	WinAccountCertAdminsSid                       = 46
	WinAccountSchemaAdminsSid                     = 47
	WinAccountEnterpriseAdminsSid                 = 48
	WinAccountPolicyAdminsSid                     = 49
	WinAccountRasAndIasServersSid                 = 50
	WinNTLMAuthenticationSid                      = 51
	WinDigestAuthenticationSid                    = 52
	WinSChannelAuthenticationSid                  = 53
	WinThisOrganizationSid                        = 54
	WinOtherOrganizationSid                       = 55
	WinBuiltinIncomingForestTrustBuildersSid      = 56
	WinBuiltinPerfMonitoringUsersSid              = 57
	WinBuiltinPerfLoggingUsersSid                 = 58
	WinBuiltinAuthorizationAccessSid              = 59
	WinBuiltinTerminalServerLicenseServersSid     = 60
	WinBuiltinDCOMUsersSid                        = 61
	WinBuiltinIUsersSid                           = 62
	WinIUserSid                                   = 63
	WinBuiltinCryptoOperatorsSid                  = 64
	WinUntrustedLabelSid                          = 65
	WinLowLabelSid                                = 66
	WinMediumLabelSid                             = 67
	WinHighLabelSid                               = 68
	WinSystemLabelSid                             = 69
	WinWriteRestrictedCodeSid                     = 70
	WinCreatorOwnerRightsSid                      = 71
	WinCacheablePrincipalsGroupSid                = 72
	WinNonCacheablePrincipalsGroupSid             = 73
	WinEnterpriseReadonlyControllersSid           = 74
	WinAccountReadonlyControllersSid              = 75
	WinBuiltinEventLogReadersGroup                = 76
	WinNewEnterpriseReadonlyControllersSid        = 77
	WinBuiltinCertSvcDComAccessGroup              = 78
	WinMediumPlusLabelSid                         = 79
	WinLocalLogonSid                              = 80
	WinConsoleLogonSid                            = 81
	WinThisOrganizationCertificateSid             = 82
	WinApplicationPackageAuthoritySid             = 83
	WinBuiltinAnyPackageSid                       = 84
	WinCapabilityInternetClientSid                = 85
	WinCapabilityInternetClientServerSid          = 86
	WinCapabilityPrivateNetworkClientServerSid    = 87
	WinCapabilityPicturesLibrarySid               = 88
	WinCapabilityVideosLibrarySid                 = 89
	WinCapabilityMusicLibrarySid                  = 90
	WinCapabilityDocumentsLibrarySid              = 91
	WinCapabilitySharedUserCertificatesSid        = 92
	WinCapabilityEnterpriseAuthenticationSid      = 93
	WinCapabilityRemovableStorageSid              = 94
	WinBuiltinRDSRemoteAccessServersSid           = 95
	WinBuiltinRDSEndpointServersSid               = 96
	WinBuiltinRDSManagementServersSid             = 97
	WinUserModeDriversSid                         = 98
	WinBuiltinHyperVAdminsSid                     = 99
	WinAccountCloneableControllersSid             = 100
	WinBuiltinAccessControlAssistanceOperatorsSid = 101
	WinBuiltinRemoteManagementUsersSid            = 102
	WinAuthenticationAuthorityAssertedSid         = 103
	WinAuthenticationServiceAssertedSid           = 104
	WinLocalAccountSid                            = 105
	WinLocalAccountAndAdministratorSid            = 106
	WinAccountProtectedUsersSid                   = 107
	WinCapabilityAppointmentsSid                  = 108
	WinCapabilityContactsSid                      = 109
	WinAccountDefaultSystemManagedSid             = 110
	WinBuiltinDefaultSystemManagedGroupSid        = 111
	WinBuiltinStorageReplicaAdminsSid             = 112
	WinAccountKeyAdminsSid                        = 113
	WinAccountEnterpriseKeyAdminsSid              = 114
	WinAuthenticationKeyTrustSid                  = 115
	WinAuthenticationKeyPropertyMFASid            = 116
	WinAuthenticationKeyPropertyAttestationSid    = 117
)

const ( /* winnt.h:3500:5: */
	AclRevisionInformation = 1
	AclSizeInformation     = 2
)

const ( /* winnt.h:3570:5: */
	AuditEventObjectAccess           = 0
	AuditEventDirectoryServiceAccess = 1
)

const ( /* winnt.h:3602:5: */
	AccessReasonNone                     = 0
	AccessReasonAllowedAce               = 65536
	AccessReasonDeniedAce                = 131072
	AccessReasonAllowedParentAce         = 196608
	AccessReasonDeniedParentAce          = 262144
	AccessReasonNotGrantedByCape         = 327680
	AccessReasonNotGrantedByParentCape   = 393216
	AccessReasonNotGrantedToAppContainer = 458752
	AccessReasonMissingPrivilege         = 1048576
	AccessReasonFromPrivilege            = 2097152
	AccessReasonIntegrityLevel           = 3145728
	AccessReasonOwnership                = 4194304
	AccessReasonNullDacl                 = 5242880
	AccessReasonEmptyDacl                = 6291456
	AccessReasonNoSD                     = 7340032
	AccessReasonNoGrant                  = 8388608
)

const ( /* winnt.h:3692:5: */
	SecurityAnonymous      = 0
	SecurityIdentification = 1
	SecurityImpersonation  = 2
	SecurityDelegation     = 3
)

const ( /* winnt.h:3719:5: */
	TokenPrimary       = 1
	TokenImpersonation = 2
)

const ( /* winnt.h:3724:5: */
	TokenElevationTypeDefault = 1
	TokenElevationTypeFull    = 2
	TokenElevationTypeLimited = 3
)

const ( /* winnt.h:3730:5: */
	TokenUser                            = 1
	TokenGroups                          = 2
	TokenPrivileges                      = 3
	TokenOwner                           = 4
	TokenPrimaryGroup                    = 5
	TokenDefaultDacl                     = 6
	TokenSource                          = 7
	TokenType                            = 8
	TokenImpersonationLevel              = 9
	TokenStatistics                      = 10
	TokenRestrictedSids                  = 11
	TokenSessionId                       = 12
	TokenGroupsAndPrivileges             = 13
	TokenSessionReference                = 14
	TokenSandBoxInert                    = 15
	TokenAuditPolicy                     = 16
	TokenOrigin                          = 17
	TokenElevationType                   = 18
	TokenLinkedToken                     = 19
	TokenElevation                       = 20
	TokenHasRestrictions                 = 21
	TokenAccessInformation               = 22
	TokenVirtualizationAllowed           = 23
	TokenVirtualizationEnabled           = 24
	TokenIntegrityLevel                  = 25
	TokenUIAccess                        = 26
	TokenMandatoryPolicy                 = 27
	TokenLogonSid                        = 28
	TokenIsAppContainer                  = 29
	TokenCapabilities                    = 30
	TokenAppContainerSid                 = 31
	TokenAppContainerNumber              = 32
	TokenUserClaimAttributes             = 33
	TokenDeviceClaimAttributes           = 34
	TokenRestrictedUserClaimAttributes   = 35
	TokenRestrictedDeviceClaimAttributes = 36
	TokenDeviceGroups                    = 37
	TokenRestrictedDeviceGroups          = 38
	TokenSecurityAttributes              = 39
	TokenIsRestricted                    = 40
	MaxTokenInfoClass                    = 41
)

const ( /* winnt.h:3898:5: */
	MandatoryLevelUntrusted     = 0
	MandatoryLevelLow           = 1
	MandatoryLevelMedium        = 2
	MandatoryLevelHigh          = 3
	MandatoryLevelSystem        = 4
	MandatoryLevelSecureProcess = 5
	MandatoryLevelCount         = 6
)

const ( /* winnt.h:4024:5: */
	SeLearningModeInvalidType = 0
	SeLearningModeSettings    = 1
	SeLearningModeMax         = 2
)

const ( /* winnt.h:4228:5: */
	PMCCounter             = 0
	MaxHardwareCounterType = 1
)

const ( /* winnt.h:4233:5: */
	ProcessDEPPolicy                   = 0
	ProcessASLRPolicy                  = 1
	ProcessDynamicCodePolicy           = 2
	ProcessStrictHandleCheckPolicy     = 3
	ProcessSystemCallDisablePolicy     = 4
	ProcessMitigationOptionsMask       = 5
	ProcessExtensionPointDisablePolicy = 6
	ProcessControlFlowGuardPolicy      = 7
	ProcessSignaturePolicy             = 8
	ProcessFontDisablePolicy           = 9
	ProcessImageLoadPolicy             = 10
	MaxProcessMitigationPolicy         = 11
)

const ( /* winnt.h:4431:5: */
	ToleranceLow    = 1
	ToleranceMedium = 2
	ToleranceHigh   = 3
)

const ( /* winnt.h:4437:5: */
	ToleranceIntervalShort  = 1
	ToleranceIntervalMedium = 2
	ToleranceIntervalLong   = 3
)

const ( /* winnt.h:4556:5: */
	JobObjectBasicAccountingInformation         = 1
	JobObjectBasicLimitInformation              = 2
	JobObjectBasicProcessIdList                 = 3
	JobObjectBasicUIRestrictions                = 4
	JobObjectSecurityLimitInformation           = 5
	JobObjectEndOfJobTimeInformation            = 6
	JobObjectAssociateCompletionPortInformation = 7
	JobObjectBasicAndIoAccountingInformation    = 8
	JobObjectExtendedLimitInformation           = 9
	JobObjectJobSetInformation                  = 10
	JobObjectGroupInformation                   = 11
	JobObjectNotificationLimitInformation       = 12
	JobObjectLimitViolationInformation          = 13
	JobObjectGroupInformationEx                 = 14
	JobObjectCpuRateControlInformation          = 15
	JobObjectCompletionFilter                   = 16
	JobObjectCompletionCounter                  = 17
	JobObjectReserved1Information               = 18
	JobObjectReserved2Information               = 19
	JobObjectReserved3Information               = 20
	JobObjectReserved4Information               = 21
	JobObjectReserved5Information               = 22
	JobObjectReserved6Information               = 23
	JobObjectReserved7Information               = 24
	JobObjectReserved8Information               = 25
	MaxJobObjectInfoClass                       = 26
)

const ( /* winnt.h:4580:5: */
	FirmwareTypeUnknown = 0
	FirmwareTypeBios    = 1
	FirmwareTypeUefi    = 2
	FirmwareTypeMax     = 3
)

const ( /* winnt.h:4605:5: */
	RelationProcessorCore    = 0
	RelationNumaNode         = 1
	RelationCache            = 2
	RelationProcessorPackage = 3
	RelationGroup            = 4
	RelationAll              = 65535
)

const ( /* winnt.h:4612:5: */
	CacheUnified     = 0
	CacheInstruction = 1
	CacheData        = 2
	CacheTrace       = 3
)

const ( /* winnt.h:467:1: */
	UNSPECIFIED_COMPARTMENT_ID = 0
	DEFAULT_COMPARTMENT_ID     = 1
)

const ( /* winnt.h:4908:3: */
	MemExtendedParameterInvalidType         = 0
	MemExtendedParameterAddressRequirements = 1
	MemExtendedParameterNumaNode            = 2
	MemExtendedParameterPartitionHandle     = 3
	MemExtendedParameterUserPhysicalHandle  = 4
	MemExtendedParameterAttributeFlags      = 5
	MemExtendedParameterMax                 = 6
)

const ( /* winnt.h:4946:3: */
	MemSectionExtendedParameterInvalidType       = 0
	MemSectionExtendedParameterUserPhysicalFlags = 1
	MemSectionExtendedParameterNumaNode          = 2
	MemSectionExtendedParameterMax               = 3
)

const ( /* winnt.h:5346:3: */
	PowerSystemUnspecified = 0
	PowerSystemWorking     = 1
	PowerSystemSleeping1   = 2
	PowerSystemSleeping2   = 3
	PowerSystemSleeping3   = 4
	PowerSystemHibernate   = 5
	PowerSystemShutdown    = 6
	PowerSystemMaximum     = 7
)

const ( /* winnt.h:5352:3: */
	PowerActionNone          = 0
	PowerActionReserved      = 1
	PowerActionSleep         = 2
	PowerActionHibernate     = 3
	PowerActionShutdown      = 4
	PowerActionShutdownReset = 5
	PowerActionShutdownOff   = 6
	PowerActionWarmEject     = 7
)

const ( /* winnt.h:5358:3: */
	PowerDeviceUnspecified = 0
	PowerDeviceD0          = 1
	PowerDeviceD1          = 2
	PowerDeviceD2          = 3
	PowerDeviceD3          = 4
	PowerDeviceMaximum     = 5
)

const ( /* winnt.h:5363:3: */
	PowerMonitorOff = 0
	PowerMonitorOn  = 1
	PowerMonitorDim = 2
)

const ( /* winnt.h:5367:3: */
	PowerUserPresent    = 0
	PowerUserNotPresent = 1
	PowerUserInactive   = 2
	PowerUserMaximum    = 3
	PowerUserInvalid    = 3
)

const ( /* winnt.h:5383:3: */
	LT_DONT_CARE      = 0
	LT_LOWEST_LATENCY = 1
)

const ( /* winnt.h:5398:3: */
	PowerRequestDisplayRequired   = 0
	PowerRequestSystemRequired    = 1
	PowerRequestAwayModeRequired  = 2
	PowerRequestExecutionRequired = 3
)

const ( /* winnt.h:5426:5: */
	SystemPowerPolicyAc                = 0
	SystemPowerPolicyDc                = 1
	VerifySystemPolicyAc               = 2
	VerifySystemPolicyDc               = 3
	SystemPowerCapabilities            = 4
	SystemBatteryState                 = 5
	SystemPowerStateHandler            = 6
	ProcessorStateHandler              = 7
	SystemPowerPolicyCurrent           = 8
	AdministratorPowerPolicy           = 9
	SystemReserveHiberFile             = 10
	ProcessorInformation               = 11
	SystemPowerInformation             = 12
	ProcessorStateHandler2             = 13
	LastWakeTime                       = 14
	LastSleepTime                      = 15
	SystemExecutionState               = 16
	SystemPowerStateNotifyHandler      = 17
	ProcessorPowerPolicyAc             = 18
	ProcessorPowerPolicyDc             = 19
	VerifyProcessorPowerPolicyAc       = 20
	VerifyProcessorPowerPolicyDc       = 21
	ProcessorPowerPolicyCurrent        = 22
	SystemPowerStateLogging            = 23
	SystemPowerLoggingEntry            = 24
	SetPowerSettingValue               = 25
	NotifyUserPowerSetting             = 26
	PowerInformationLevelUnused0       = 27
	SystemMonitorHiberBootPowerOff     = 28
	SystemVideoState                   = 29
	TraceApplicationPowerMessage       = 30
	TraceApplicationPowerMessageEnd    = 31
	ProcessorPerfStates                = 32
	ProcessorIdleStates                = 33
	ProcessorCap                       = 34
	SystemWakeSource                   = 35
	SystemHiberFileInformation         = 36
	TraceServicePowerMessage           = 37
	ProcessorLoad                      = 38
	PowerShutdownNotification          = 39
	MonitorCapabilities                = 40
	SessionPowerInit                   = 41
	SessionDisplayState                = 42
	PowerRequestCreate                 = 43
	PowerRequestAction                 = 44
	GetPowerRequestList                = 45
	ProcessorInformationEx             = 46
	NotifyUserModeLegacyPowerEvent     = 47
	GroupPark                          = 48
	ProcessorIdleDomains               = 49
	WakeTimerList                      = 50
	SystemHiberFileSize                = 51
	ProcessorIdleStatesHv              = 52
	ProcessorPerfStatesHv              = 53
	ProcessorPerfCapHv                 = 54
	ProcessorSetIdle                   = 55
	LogicalProcessorIdling             = 56
	UserPresence                       = 57
	PowerSettingNotificationName       = 58
	GetPowerSettingValue               = 59
	IdleResiliency                     = 60
	SessionRITState                    = 61
	SessionConnectNotification         = 62
	SessionPowerCleanup                = 63
	SessionLockState                   = 64
	SystemHiberbootState               = 65
	PlatformInformation                = 66
	PdcInvocation                      = 67
	MonitorInvocation                  = 68
	FirmwareTableInformationRegistered = 69
	SetShutdownSelectedTime            = 70
	SuspendResumeInvocation            = 71
	PlmPowerRequestCreate              = 72
	ScreenOff                          = 73
	CsDeviceNotification               = 74
	PlatformRole                       = 75
	LastResumePerformance              = 76
	DisplayBurst                       = 77
	ExitLatencySamplingPercentage      = 78
	ApplyLowPowerScenarioSettings      = 79
	PowerInformationLevelMaximum       = 80
)

const ( /* winnt.h:5510:5: */
	UserNotPresent = 0
	UserPresent    = 1
	UserUnknown    = 255
)

const ( /* winnt.h:5546:5: */
	MonitorRequestReasonUnknown                 = 0
	MonitorRequestReasonPowerButton             = 1
	MonitorRequestReasonRemoteConnection        = 2
	MonitorRequestReasonScMonitorpower          = 3
	MonitorRequestReasonUserInput               = 4
	MonitorRequestReasonAcDcDisplayBurst        = 5
	MonitorRequestReasonUserDisplayBurst        = 6
	MonitorRequestReasonPoSetSystemState        = 7
	MonitorRequestReasonSetThreadExecutionState = 8
	MonitorRequestReasonFullWake                = 9
	MonitorRequestReasonSessionUnlock           = 10
	MonitorRequestReasonScreenOffRequest        = 11
	MonitorRequestReasonIdleTimeout             = 12
	MonitorRequestReasonPolicyChange            = 13
	MonitorRequestReasonMax                     = 14
)

const ( /* winnt.h:5576:5: */
	PoAc               = 0
	PoDc               = 1
	PoHot              = 2
	PoConditionMaximum = 3
)

const ( /* winnt.h:5603:5: */
	PlatformRoleUnspecified       = 0
	PlatformRoleDesktop           = 1
	PlatformRoleMobile            = 2
	PlatformRoleWorkstation       = 3
	PlatformRoleEnterpriseServer  = 4
	PlatformRoleSOHOServer        = 5
	PlatformRoleAppliancePC       = 6
	PlatformRolePerformanceServer = 7
	PlatformRoleSlate             = 8
	PlatformRoleMaximum           = 9
)

const ( /* winnt.h:6740:5: */
	IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1
)

const ( /* winnt.h:7611:5: */
	IMPORT_OBJECT_CODE  = 0
	IMPORT_OBJECT_DATA  = 1
	IMPORT_OBJECT_CONST = 2
)

const ( /* winnt.h:7615:5: */
	IMPORT_OBJECT_ORDINAL         = 0
	IMPORT_OBJECT_NAME            = 1
	IMPORT_OBJECT_NAME_NO_PREFIX  = 2
	IMPORT_OBJECT_NAME_UNDECORATE = 3
)

const ( /* winnt.h:7621:5: */
	COMIMAGE_FLAGS_ILONLY                = 1
	COMIMAGE_FLAGS_32BITREQUIRED         = 2
	COMIMAGE_FLAGS_IL_LIBRARY            = 4
	COMIMAGE_FLAGS_STRONGNAMESIGNED      = 8
	COMIMAGE_FLAGS_TRACKDEBUGDATA        = 65536
	COR_VERSION_MAJOR_V2                 = 2
	COR_VERSION_MAJOR                    = 2
	COR_VERSION_MINOR                    = 0
	COR_DELETED_NAME_LENGTH              = 8
	COR_VTABLEGAP_NAME_LENGTH            = 8
	NATIVE_TYPE_MAX_CB                   = 1
	COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255
	IMAGE_COR_MIH_METHODRVA              = 1
	IMAGE_COR_MIH_EHRVA                  = 2
	IMAGE_COR_MIH_BASICBLOCK             = 8
	COR_VTABLE_32BIT                     = 1
	COR_VTABLE_64BIT                     = 2
	COR_VTABLE_FROM_UNMANAGED            = 4
	COR_VTABLE_CALL_MOST_DERIVED         = 16
	IMAGE_COR_EATJ_THUNK_SIZE            = 32
	MAX_CLASS_NAME                       = 1024
	MAX_PACKAGE_NAME                     = 1024
)

const ( /* winnt.h:8028:5: */
	UmsThreadInvalidInfoClass = 0
	UmsThreadUserContext      = 1
	UmsThreadPriority         = 2
	UmsThreadAffinity         = 3
	UmsThreadTeb              = 4
	UmsThreadIsSuspended      = 5
	UmsThreadIsTerminated     = 6
	UmsThreadMaxInfoClass     = 7
)

const ( /* winnt.h:8039:5: */
	UmsSchedulerStartup       = 0
	UmsSchedulerThreadBlocked = 1
	UmsSchedulerThreadYield   = 2
)

const ( /* winnt.h:8114:5: */
	HeapCompatibilityInformation      = 0
	HeapEnableTerminationOnCorruption = 1
)

const ( /* winnt.h:8142:5: */
	ActivationContextBasicInformation                      = 1
	ActivationContextDetailedInformation                   = 2
	AssemblyDetailedInformationInActivationContext         = 3
	FileInformationInAssemblyOfAssemblyInActivationContext = 4
	RunlevelInformationInActivationContext                 = 5
	CompatibilityInformationInActivationContext            = 6
	ActivationContextManifestResourceName                  = 7
	MaxActivationContextInfoClass                          = 8
	AssemblyDetailedInformationInActivationContxt          = 3
	FileInformationInAssemblyOfAssemblyInActivationContxt  = 4
)

const ( /* winnt.h:8155:5: */
	ACTCTX_RUN_LEVEL_UNSPECIFIED       = 0
	ACTCTX_RUN_LEVEL_AS_INVOKER        = 1
	ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 2
	ACTCTX_RUN_LEVEL_REQUIRE_ADMIN     = 3
	ACTCTX_RUN_LEVEL_NUMBERS           = 4
)

const ( /* winnt.h:8163:5: */
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN    = 0
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS         = 1
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 2
)

const ( /* winnt.h:8584:5: */
	DriverType               = 1
	FileSystemType           = 2
	Win32ServiceOwnProcess   = 16
	Win32ServiceShareProcess = 32
	AdapterType              = 4
	RecognizerType           = 8
)

const ( /* winnt.h:8589:5: */
	BootLoad    = 0
	SystemLoad  = 1
	AutoLoad    = 2
	DemandLoad  = 3
	DisableLoad = 4
)

const ( /* winnt.h:8594:5: */
	IgnoreError   = 0
	NormalError   = 1
	SevereError   = 2
	CriticalError = 3
)

const ( /* winnt.h:8794:5: */
	TapeDriveProblemNone         = 0
	TapeDriveReadWriteWarning    = 1
	TapeDriveReadWriteError      = 2
	TapeDriveReadWarning         = 3
	TapeDriveWriteWarning        = 4
	TapeDriveReadError           = 5
	TapeDriveWriteError          = 6
	TapeDriveHardwareError       = 7
	TapeDriveUnsupportedMedia    = 8
	TapeDriveScsiConnectionError = 9
	TapeDriveTimetoClean         = 10
	TapeDriveCleanDriveNow       = 11
	TapeDriveMediaLifeExpired    = 12
	TapeDriveSnappedTape         = 13
)

const ( /* winnt.h:8804:3: */
	TP_CALLBACK_PRIORITY_HIGH    = 0
	TP_CALLBACK_PRIORITY_NORMAL  = 1
	TP_CALLBACK_PRIORITY_LOW     = 2
	TP_CALLBACK_PRIORITY_INVALID = 3
	TP_CALLBACK_PRIORITY_COUNT   = 3
)

const ( /* winnt.h:8997:7: */
	TransactionOutcomeUndetermined = 1
	TransactionOutcomeCommitted    = 2
	TransactionOutcomeAborted      = 3
)

const ( /* winnt.h:9003:7: */
	TransactionStateNormal          = 1
	TransactionStateIndoubt         = 2
	TransactionStateCommittedNotify = 3
)

const ( /* winnt.h:9075:7: */
	TransactionBasicInformation              = 0
	TransactionPropertiesInformation         = 1
	TransactionEnlistmentInformation         = 2
	TransactionSuperiorEnlistmentInformation = 3
	TransactionBindInformation               = 4
	TransactionDTCPrivateInformation         = 5
)

const ( /* winnt.h:9084:7: */
	TransactionManagerBasicInformation             = 0
	TransactionManagerLogInformation               = 1
	TransactionManagerLogPathInformation           = 2
	TransactionManagerOnlineProbeInformation       = 3
	TransactionManagerRecoveryInformation          = 4
	TransactionManagerOldestTransactionInformation = 5
)

const ( /* winnt.h:9093:7: */
	ResourceManagerBasicInformation      = 0
	ResourceManagerCompletionInformation = 1
)

const ( /* winnt.h:9110:7: */
	EnlistmentBasicInformation    = 0
	EnlistmentRecoveryInformation = 1
	EnlistmentCrmInformation      = 2
)

const ( /* winnt.h:9125:7: */
	KTMOBJECT_TRANSACTION         = 0
	KTMOBJECT_TRANSACTION_MANAGER = 1
	KTMOBJECT_RESOURCE_MANAGER    = 2
	KTMOBJECT_ENLISTMENT          = 3
	KTMOBJECT_INVALID             = 4
)

const ( /* winsock2.h:567:3: */
	NSP_NOTIFY_IMMEDIATELY = 0
	NSP_NOTIFY_HWND        = 1
	NSP_NOTIFY_EVENT       = 2
	NSP_NOTIFY_PORT        = 3
	NSP_NOTIFY_APC         = 4
)

const ( /* winsock2.h:709:3: */
	COMP_EQUAL   = 0
	COMP_NOTLESS = 1
)

const ( /* winsock2.h:799:3: */
	RNRSERVICE_REGISTER   = 0
	RNRSERVICE_DEREGISTER = 1
	RNRSERVICE_DELETE     = 2
)

const ( /* winsvc.h:106:3: */
	SC_ACTION_NONE        = 0
	SC_ACTION_RESTART     = 1
	SC_ACTION_REBOOT      = 2
	SC_ACTION_RUN_COMMAND = 3
)

const ( /* winsvc.h:139:3: */
	SC_STATUS_PROCESS_INFO = 0
)

const ( /* winsvc.h:143:3: */
	SC_ENUM_PROCESS_INFO = 0
)

const ( /* winuser.h:2440:3: */
	DCDC_DEFAULT             = 0
	DCDC_DISABLE_FONT_UPDATE = 1
	DCDC_DISABLE_RELAYOUT    = 2
)

const ( /* winuser.h:2449:3: */
	DDC_DEFAULT                  = 0
	DDC_DISABLE_ALL              = 1
	DDC_DISABLE_RESIZE           = 2
	DDC_DISABLE_CONTROL_RELAYOUT = 4
)

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// FIXME FIXME FIXME FIXME FIXME: Much more data need moving here.
// This holds only SCOPE_LEVEL and SCOPE_ID so that compilations
// do not fail.

const ( /* ws2def.h:17:1: */
	ScopeLevelInterface    = 1
	ScopeLevelLink         = 2
	ScopeLevelSubnet       = 3
	ScopeLevelAdmin        = 4
	ScopeLevelSite         = 5
	ScopeLevelOrganization = 8
	ScopeLevelGlobal       = 14
	ScopeLevelCount        = 16
)

const ( /* ws2ipdef.h:63:1: */
	MCAST_INCLUDE = 0
	MCAST_EXCLUDE = 1
)

const ( /* wtypes.h:182:1: */
	DVASPECT_CONTENT   = 1
	DVASPECT_THUMBNAIL = 2
	DVASPECT_ICON      = 4
	DVASPECT_DOCPRINT  = 8
)

const ( /* wtypes.h:189:1: */
	STGC_DEFAULT                            = 0
	STGC_OVERWRITE                          = 1
	STGC_ONLYIFCURRENT                      = 2
	STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4
	STGC_CONSOLIDATE                        = 8
)

const ( /* wtypes.h:197:1: */
	STGMOVE_MOVE        = 0
	STGMOVE_COPY        = 1
	STGMOVE_SHALLOWCOPY = 2
)

const ( /* wtypes.h:203:1: */
	STATFLAG_DEFAULT = 0
	STATFLAG_NONAME  = 1
	STATFLAG_NOOPEN  = 2
)

const ( /* wtypes.h:513:1: */
	VT_EMPTY            = 0
	VT_NULL             = 1
	VT_I2               = 2
	VT_I4               = 3
	VT_R4               = 4
	VT_R8               = 5
	VT_CY               = 6
	VT_DATE             = 7
	VT_BSTR             = 8
	VT_DISPATCH         = 9
	VT_ERROR            = 10
	VT_BOOL             = 11
	VT_VARIANT          = 12
	VT_UNKNOWN          = 13
	VT_DECIMAL          = 14
	VT_I1               = 16
	VT_UI1              = 17
	VT_UI2              = 18
	VT_UI4              = 19
	VT_I8               = 20
	VT_UI8              = 21
	VT_INT              = 22
	VT_UINT             = 23
	VT_VOID             = 24
	VT_HRESULT          = 25
	VT_PTR              = 26
	VT_SAFEARRAY        = 27
	VT_CARRAY           = 28
	VT_USERDEFINED      = 29
	VT_LPSTR            = 30
	VT_LPWSTR           = 31
	VT_RECORD           = 36
	VT_INT_PTR          = 37
	VT_UINT_PTR         = 38
	VT_FILETIME         = 64
	VT_BLOB             = 65
	VT_STREAM           = 66
	VT_STORAGE          = 67
	VT_STREAMED_OBJECT  = 68
	VT_STORED_OBJECT    = 69
	VT_BLOB_OBJECT      = 70
	VT_CF               = 71
	VT_CLSID            = 72
	VT_VERSIONED_STREAM = 73
	VT_BSTR_BLOB        = 4095
	VT_VECTOR           = 4096
	VT_ARRAY            = 8192
	VT_BYREF            = 16384
	VT_RESERVED         = 32768
	VT_ILLEGAL          = 65535
	VT_ILLEGALMASKED    = 4095
	VT_TYPEMASK         = 4095
)

const ( /* wtypes.h:594:1: */
	TYSPEC_CLSID       = 0
	TYSPEC_FILEEXT     = 1
	TYSPEC_MIMETYPE    = 2
	TYSPEC_FILENAME    = 3
	TYSPEC_PROGID      = 4
	TYSPEC_PACKAGENAME = 5
	TYSPEC_OBJECTID    = 6
)

const ( /* wtypesbase.h:233:1: */
	MEMCTX_TASK      = 1
	MEMCTX_SHARED    = 2
	MEMCTX_MACSYSTEM = 3
	MEMCTX_UNKNOWN   = -1
	MEMCTX_SAME      = -2
)

const ( /* wtypesbase.h:269:1: */
	CLSCTX_INPROC_SERVER          = 1
	CLSCTX_INPROC_HANDLER         = 2
	CLSCTX_LOCAL_SERVER           = 4
	CLSCTX_INPROC_SERVER16        = 8
	CLSCTX_REMOTE_SERVER          = 16
	CLSCTX_INPROC_HANDLER16       = 32
	CLSCTX_RESERVED1              = 64
	CLSCTX_RESERVED2              = 128
	CLSCTX_RESERVED3              = 256
	CLSCTX_RESERVED4              = 512
	CLSCTX_NO_CODE_DOWNLOAD       = 1024
	CLSCTX_RESERVED5              = 2048
	CLSCTX_NO_CUSTOM_MARSHAL      = 4096
	CLSCTX_ENABLE_CODE_DOWNLOAD   = 8192
	CLSCTX_NO_FAILURE_LOG         = 16384
	CLSCTX_DISABLE_AAA            = 32768
	CLSCTX_ENABLE_AAA             = 65536
	CLSCTX_FROM_DEFAULT_CONTEXT   = 131072
	CLSCTX_ACTIVATE_32_BIT_SERVER = 262144
	CLSCTX_ACTIVATE_64_BIT_SERVER = 524288
	CLSCTX_ENABLE_CLOAKING        = 1048576
	CLSCTX_APPCONTAINER           = 4194304
	CLSCTX_ACTIVATE_AAA_AS_IU     = 8388608
	CLSCTX_PS_DLL                 = -2147483648
)

const ( /* wtypesbase.h:298:1: */
	MSHLFLAGS_NORMAL      = 0
	MSHLFLAGS_TABLESTRONG = 1
	MSHLFLAGS_TABLEWEAK   = 2
	MSHLFLAGS_NOPING      = 4
	MSHLFLAGS_RESERVED1   = 8
	MSHLFLAGS_RESERVED2   = 16
	MSHLFLAGS_RESERVED3   = 32
	MSHLFLAGS_RESERVED4   = 64
)

const ( /* wtypesbase.h:309:1: */
	MSHCTX_LOCAL            = 0
	MSHCTX_NOSHAREDMEM      = 1
	MSHCTX_DIFFERENTMACHINE = 2
	MSHCTX_INPROC           = 3
	MSHCTX_CROSSCTX         = 4
)

type ptrdiff_t = int64 /* <builtin>:3:26 */

type size_t = uint64 /* <builtin>:9:23 */

type wchar_t = uint16 /* <builtin>:15:24 */

type va_list = uintptr /* <builtin>:50:27 */

type ssize_t = int64 /* corecrt.h:50:35 */

type rsize_t = size_t /* corecrt.h:57:16 */

type intptr_t = int64 /* corecrt.h:67:35 */

type uintptr_t = uint64 /* corecrt.h:80:44 */

type wint_t = uint16   /* corecrt.h:111:24 */
type wctype_t = uint16 /* corecrt.h:112:24 */

type errno_t = int32 /* corecrt.h:118:13 */

type time_t = int64 /* corecrt.h:143:20 */

type threadlocaleinfostruct = struct {
	refcount      int32
	lc_codepage   uint32
	lc_collate_cp uint32
	lc_handle     [6]uint32
	lc_id         [6]LC_ID
	lc_category   [6]struct {
		locale    uintptr
		wlocale   uintptr
		refcount  uintptr
		wrefcount uintptr
	}
	lc_clike            int32
	mb_cur_max          int32
	lconv_intl_refcount uintptr
	lconv_num_refcount  uintptr
	lconv_mon_refcount  uintptr
	lconv               uintptr
	ctype1_refcount     uintptr
	ctype1              uintptr
	pctype              uintptr
	pclmap              uintptr
	pcumap              uintptr
	lc_time_curr        uintptr
} /* corecrt.h:435:1 */

type pthreadlocinfo = uintptr /* corecrt.h:437:39 */
type pthreadmbcinfo = uintptr /* corecrt.h:438:36 */

type localeinfo_struct = struct {
	locinfo pthreadlocinfo
	mbcinfo pthreadmbcinfo
} /* corecrt.h:441:9 */

type _locale_tstruct = localeinfo_struct /* corecrt.h:444:3 */
type _locale_t = uintptr                 /* corecrt.h:444:19 */

type tagLC_ID = struct {
	wLanguage uint16
	wCountry  uint16
	wCodePage uint16
} /* corecrt.h:435:1 */

type LC_ID = tagLC_ID  /* corecrt.h:452:3 */
type LPLC_ID = uintptr /* corecrt.h:452:9 */

type lconv = struct {
	decimal_point     uintptr
	thousands_sep     uintptr
	grouping          uintptr
	int_curr_symbol   uintptr
	currency_symbol   uintptr
	mon_decimal_point uintptr
	mon_thousands_sep uintptr
	mon_grouping      uintptr
	positive_sign     uintptr
	negative_sign     uintptr
	int_frac_digits   int8
	frac_digits       int8
	p_cs_precedes     int8
	p_sep_by_space    int8
	n_cs_precedes     int8
	n_sep_by_space    int8
	p_sign_posn       int8
	n_sign_posn       int8
} /* corecrt.h:435:1 */

type threadlocinfo = threadlocaleinfostruct /* corecrt.h:487:3 */

type _EXCEPTION_POINTERS = struct {
	ExceptionRecord PEXCEPTION_RECORD
	ContextRecord   PCONTEXT
} /* excpt.h:17:3 */

type _EXCEPTION_RECORD = struct {
	ExceptionCode        DWORD
	ExceptionFlags       DWORD
	ExceptionRecord      uintptr
	ExceptionAddress     PVOID
	NumberParameters     DWORD
	_                    [4]byte
	ExceptionInformation [15]ULONG_PTR
} /* excpt.h:17:3 */

type _CONTEXT = struct {
	P1Home               DWORD64
	P2Home               DWORD64
	P3Home               DWORD64
	P4Home               DWORD64
	P5Home               DWORD64
	P6Home               DWORD64
	ContextFlags         DWORD
	MxCsr                DWORD
	SegCs                WORD
	SegDs                WORD
	SegEs                WORD
	SegFs                WORD
	SegGs                WORD
	SegSs                WORD
	EFlags               DWORD
	Dr0                  DWORD64
	Dr1                  DWORD64
	Dr2                  DWORD64
	Dr3                  DWORD64
	Dr6                  DWORD64
	Dr7                  DWORD64
	Rax                  DWORD64
	Rcx                  DWORD64
	Rdx                  DWORD64
	Rbx                  DWORD64
	Rsp                  DWORD64
	Rbp                  DWORD64
	Rsi                  DWORD64
	Rdi                  DWORD64
	R8                   DWORD64
	R9                   DWORD64
	R10                  DWORD64
	R11                  DWORD64
	R12                  DWORD64
	R13                  DWORD64
	R14                  DWORD64
	R15                  DWORD64
	Rip                  DWORD64
	__256                struct{ FltSave XMM_SAVE_AREA32 }
	VectorRegister       [26]M128A
	VectorControl        DWORD64
	DebugControl         DWORD64
	LastBranchToRip      DWORD64
	LastBranchFromRip    DWORD64
	LastExceptionToRip   DWORD64
	LastExceptionFromRip DWORD64
} /* excpt.h:17:3 */

type _DISPATCHER_CONTEXT = struct {
	ControlPc        ULONG64
	ImageBase        ULONG64
	FunctionEntry    PRUNTIME_FUNCTION
	EstablisherFrame ULONG64
	TargetIp         ULONG64
	ContextRecord    PCONTEXT
	LanguageHandler  PEXCEPTION_ROUTINE
	HandlerData      PVOID
	HistoryTable     PUNWIND_HISTORY_TABLE
	ScopeIndex       ULONG
	Fill0            ULONG
} /* excpt.h:45:3 */

// CRT stuff
type _PHNDLR = uintptr /* excpt.h:66:16 */

type _XCPT_ACTION = struct {
	XcptNum    uint32
	SigNum     int32
	XcptAction _PHNDLR
} /* excpt.h:68:3 */

// The type of function that is expected as an exception handler to be
// installed with __try1.
type PEXCEPTION_HANDLER = uintptr /* excpt.h:87:33 */

// Copyright (C) 1989, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with GCC; see the file COPYING.  If not, write to
// the Free Software Foundation, 51 Franklin Street, Fifth Floor,
// Boston, MA 02110-1301, USA.

// As a special exception, if you include this header file into source
//    files compiled by GCC, this header file does not by itself cause
//    the resulting executable to be covered by the GNU General Public
//    License.  This exception does not however invalidate any other
//    reasons why the executable file might be covered by the GNU General
//    Public License.

// ISO C Standard:  7.15  Variable arguments  <stdarg.h>

// Define __gnuc_va_list.

// Define the standard macros for the user,
//    if this invocation was from the user program.

// Define va_list, if desired, from __gnuc_va_list.
// We deliberately do not define va_list when called from
//    stdio.h, because ANSI C says that stdio.h is not supposed to define
//    va_list.  stdio.h needs to have access to that data type,
//    but must not use that name.  It should use the name __gnuc_va_list,
//    which is safe because it is reserved for the implementation.

// The macro _VA_LIST_ is the same thing used by this file in Ultrix.
//    But on BSD NET2 we must not test or define or undef it.
//    (Note that the comments in NET 2's ansi.h
//    are incorrect for _VA_LIST_--see stdio.h!)
// The macro _VA_LIST_DEFINED is used in Windows NT 3.5

// include mingw stuff
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Copyright (C) 1989-2020 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

// ISO C Standard:  7.15  Variable arguments  <stdarg.h>

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// WINAPI_FAMILY can be either desktop + App, or App.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Input parameters

// Output parameters

// Inout parameters

// Pointer to pointer parameters

// Output reference parameters

// Return values

// Optional pointer parameters

// Other common annotations

// Function annotations

// Success/failure annotations

// Buffer properties

// Field properties

// Structural annotations

// printf/scanf annotations

// Analysis

// FIXME: __in macro conflicts with argument names in libstdc++. For this reason,
// we disable it for C++. This should be fixed in libstdc++ so we can uncomment
// it in fixed version here.

// Renamed __null to SAL__null for avoiding private keyword conflicts between
//    gcc and MS world.

// PROJECT:         ReactOS DDK
// COPYRIGHT:       This file is in the Public Domain.
// FILE:            driverspecs.h
// ABSTRACT:        This header stubs out Driver Verifier annotations to
//                  allow drivers using them to compile with our header set.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type ULONG = uint32    /* minwindef.h:24:29 */
type PULONG = uintptr  /* minwindef.h:25:17 */
type USHORT = uint16   /* minwindef.h:26:26 */
type PUSHORT = uintptr /* minwindef.h:27:18 */
type UCHAR = uint8     /* minwindef.h:28:25 */
type PUCHAR = uintptr  /* minwindef.h:29:17 */
type PSZ = uintptr     /* minwindef.h:30:16 */

type WINBOOL = int32  /* minwindef.h:127:13 */
type BOOL = int32     /* minwindef.h:131:15 */
type PBOOL = uintptr  /* minwindef.h:134:14 */
type LPBOOL = uintptr /* minwindef.h:135:14 */

type BYTE = uint8      /* minwindef.h:139:25 */
type WORD = uint16     /* minwindef.h:140:26 */
type DWORD = uint32    /* minwindef.h:141:29 */
type FLOAT = float32   /* minwindef.h:142:17 */
type PFLOAT = uintptr  /* minwindef.h:143:17 */
type PBYTE = uintptr   /* minwindef.h:144:16 */
type LPBYTE = uintptr  /* minwindef.h:145:16 */
type PINT = uintptr    /* minwindef.h:146:15 */
type LPINT = uintptr   /* minwindef.h:147:15 */
type PWORD = uintptr   /* minwindef.h:148:16 */
type LPWORD = uintptr  /* minwindef.h:149:16 */
type LPLONG = uintptr  /* minwindef.h:150:20 */
type PDWORD = uintptr  /* minwindef.h:151:17 */
type LPDWORD = uintptr /* minwindef.h:152:17 */
type LPVOID = uintptr  /* minwindef.h:153:16 */
type LPCVOID = uintptr /* minwindef.h:156:22 */
type INT = int32       /* minwindef.h:158:15 */
type UINT = uint32     /* minwindef.h:159:24 */
type PUINT = uintptr   /* minwindef.h:160:24 */

// GCC 8 has already defined _xgetbv, Clang 9 has _xgetbv defined as a macro
// redirecting to the __builtin_ia32_xgetbv builtin.

// *****************************************************

// *
// sdkddkver.h: Version definitions for SDK and DDK. Originally
// from ReactOS PSDK/DDK, this file is in the public domain:
//
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type POINTER_64_INT = uint64 /* basetsd.h:11:44 */

type INT8 = int8        /* basetsd.h:29:23 */
type PINT8 = uintptr    /* basetsd.h:29:28 */
type INT16 = int16      /* basetsd.h:30:24 */
type PINT16 = uintptr   /* basetsd.h:30:30 */
type INT32 = int32      /* basetsd.h:31:22 */
type PINT32 = uintptr   /* basetsd.h:31:28 */
type INT64 = int64      /* basetsd.h:32:44 */
type PINT64 = uintptr   /* basetsd.h:32:50 */
type UINT8 = uint8      /* basetsd.h:33:25 */
type PUINT8 = uintptr   /* basetsd.h:33:31 */
type UINT16 = uint16    /* basetsd.h:34:26 */
type PUINT16 = uintptr  /* basetsd.h:34:33 */
type UINT32 = uint32    /* basetsd.h:35:24 */
type PUINT32 = uintptr  /* basetsd.h:35:31 */
type UINT64 = uint64    /* basetsd.h:36:46 */
type PUINT64 = uintptr  /* basetsd.h:36:53 */
type LONG32 = int32     /* basetsd.h:37:22 */
type PLONG32 = uintptr  /* basetsd.h:37:29 */
type ULONG32 = uint32   /* basetsd.h:38:24 */
type PULONG32 = uintptr /* basetsd.h:38:32 */
type DWORD32 = uint32   /* basetsd.h:39:24 */
type PDWORD32 = uintptr /* basetsd.h:39:32 */

type INT_PTR = int64      /* basetsd.h:46:37 */
type PINT_PTR = uintptr   /* basetsd.h:46:45 */
type UINT_PTR = uint64    /* basetsd.h:47:46 */
type PUINT_PTR = uintptr  /* basetsd.h:47:55 */
type LONG_PTR = int64     /* basetsd.h:48:37 */
type PLONG_PTR = uintptr  /* basetsd.h:48:46 */
type ULONG_PTR = uint64   /* basetsd.h:49:46 */
type PULONG_PTR = uintptr /* basetsd.h:49:56 */

type SHANDLE_PTR = int64  /* basetsd.h:62:37 */
type HANDLE_PTR = uint64  /* basetsd.h:63:46 */
type UHALF_PTR = uint32   /* basetsd.h:64:24 */
type PUHALF_PTR = uintptr /* basetsd.h:64:34 */
type HALF_PTR = int32     /* basetsd.h:65:15 */
type PHALF_PTR = uintptr  /* basetsd.h:65:24 */

type SIZE_T = ULONG_PTR /* basetsd.h:147:39 */
type PSIZE_T = uintptr  /* basetsd.h:147:46 */
type SSIZE_T = LONG_PTR /* basetsd.h:148:38 */
type PSSIZE_T = uintptr /* basetsd.h:148:46 */

type DWORD_PTR = ULONG_PTR /* basetsd.h:191:39 */
type PDWORD_PTR = uintptr  /* basetsd.h:191:49 */
type LONG64 = int64        /* basetsd.h:192:37 */
type PLONG64 = uintptr     /* basetsd.h:192:44 */
type ULONG64 = uint64      /* basetsd.h:193:46 */
type PULONG64 = uintptr    /* basetsd.h:193:54 */
type DWORD64 = uint64      /* basetsd.h:194:46 */
type PDWORD64 = uintptr    /* basetsd.h:194:54 */
type KAFFINITY = ULONG_PTR /* basetsd.h:195:39 */
type PKAFFINITY = uintptr  /* basetsd.h:196:39 */

type PVOID = uintptr   /* winnt.h:257:16 */
type PVOID64 = uintptr /* winnt.h:258:16 */

type CHAR = int8   /* winnt.h:285:16 */
type SHORT = int16 /* winnt.h:286:17 */
type LONG = int32  /* winnt.h:287:20 */

type WCHAR = wchar_t     /* winnt.h:295:19 */
type PWCHAR = uintptr    /* winnt.h:297:17 */
type LPWCH = uintptr     /* winnt.h:297:25 */
type PWCH = uintptr      /* winnt.h:297:32 */
type LPCWCH = uintptr    /* winnt.h:298:23 */
type PCWCH = uintptr     /* winnt.h:298:31 */
type NWPSTR = uintptr    /* winnt.h:299:17 */
type LPWSTR = uintptr    /* winnt.h:299:25 */
type PWSTR = uintptr     /* winnt.h:299:33 */
type PZPWSTR = uintptr   /* winnt.h:300:17 */
type PCZPWSTR = uintptr  /* winnt.h:301:23 */
type LPUWSTR = uintptr   /* winnt.h:302:27 */
type PUWSTR = uintptr    /* winnt.h:302:36 */
type LPCWSTR = uintptr   /* winnt.h:303:23 */
type PCWSTR = uintptr    /* winnt.h:303:32 */
type PZPCWSTR = uintptr  /* winnt.h:304:18 */
type LPCUWSTR = uintptr  /* winnt.h:305:33 */
type PCUWSTR = uintptr   /* winnt.h:305:43 */
type PZZWSTR = uintptr   /* winnt.h:306:17 */
type PCZZWSTR = uintptr  /* winnt.h:307:23 */
type PUZZWSTR = uintptr  /* winnt.h:308:27 */
type PCUZZWSTR = uintptr /* winnt.h:309:33 */
type PNZWCH = uintptr    /* winnt.h:310:17 */
type PCNZWCH = uintptr   /* winnt.h:311:23 */
type PUNZWCH = uintptr   /* winnt.h:312:27 */
type PCUNZWCH = uintptr  /* winnt.h:313:33 */

type PCHAR = uintptr   /* winnt.h:334:16 */
type LPCH = uintptr    /* winnt.h:334:23 */
type PCH = uintptr     /* winnt.h:334:29 */
type LPCCH = uintptr   /* winnt.h:335:22 */
type PCCH = uintptr    /* winnt.h:335:29 */
type NPSTR = uintptr   /* winnt.h:336:16 */
type LPSTR = uintptr   /* winnt.h:336:23 */
type PSTR = uintptr    /* winnt.h:336:30 */
type PZPSTR = uintptr  /* winnt.h:337:16 */
type PCZPSTR = uintptr /* winnt.h:338:22 */
type LPCSTR = uintptr  /* winnt.h:339:22 */
type PCSTR = uintptr   /* winnt.h:339:30 */
type PZPCSTR = uintptr /* winnt.h:340:17 */
type PZZSTR = uintptr  /* winnt.h:341:16 */
type PCZZSTR = uintptr /* winnt.h:342:22 */
type PNZCH = uintptr   /* winnt.h:343:16 */
type PCNZCH = uintptr  /* winnt.h:344:22 */

type TCHAR = int8     /* winnt.h:373:16 */
type PTCHAR = uintptr /* winnt.h:373:23 */
type TBYTE = uint8    /* winnt.h:374:25 */
type PTBYTE = uintptr /* winnt.h:374:32 */

type LPTCH = LPSTR       /* winnt.h:377:17 */
type PTCH = LPSTR        /* winnt.h:377:23 */
type LPCTCH = LPCCH      /* winnt.h:378:17 */
type PCTCH = LPCCH       /* winnt.h:378:24 */
type PTSTR = LPSTR       /* winnt.h:379:17 */
type LPTSTR = LPSTR      /* winnt.h:379:23 */
type PUTSTR = LPSTR      /* winnt.h:379:30 */
type LPUTSTR = LPSTR     /* winnt.h:379:37 */
type PCTSTR = LPCSTR     /* winnt.h:380:18 */
type LPCTSTR = LPCSTR    /* winnt.h:380:25 */
type PCUTSTR = LPCSTR    /* winnt.h:380:33 */
type LPCUTSTR = LPCSTR   /* winnt.h:380:41 */
type PZZTSTR = PZZSTR    /* winnt.h:381:18 */
type PUZZTSTR = PZZSTR   /* winnt.h:381:27 */
type PCZZTSTR = PCZZSTR  /* winnt.h:382:19 */
type PCUZZTSTR = PCZZSTR /* winnt.h:382:29 */
type PZPTSTR = PZPSTR    /* winnt.h:383:18 */
type PNZTCH = PNZCH      /* winnt.h:384:17 */
type PUNZTCH = PNZCH     /* winnt.h:384:25 */
type PCNZTCH = PCNZCH    /* winnt.h:385:18 */
type PCUNZTCH = PCNZCH   /* winnt.h:385:27 */

type PSHORT = uintptr /* winnt.h:392:17 */
type PLONG = uintptr  /* winnt.h:393:16 */

type _GROUP_AFFINITY = struct {
	Mask     KAFFINITY
	Group    WORD
	Reserved [3]WORD
} /* winnt.h:397:9 */

type GROUP_AFFINITY = _GROUP_AFFINITY /* winnt.h:401:3 */
type PGROUP_AFFINITY = uintptr        /* winnt.h:401:19 */

type HANDLE = uintptr /* winnt.h:405:16 */

type PHANDLE = uintptr /* winnt.h:412:18 */
type FCHAR = BYTE      /* winnt.h:413:16 */
type FSHORT = WORD     /* winnt.h:414:16 */
type FLONG = DWORD     /* winnt.h:415:17 */

type HRESULT = LONG /* winnt.h:419:16 */

// Keep in sync with basetyps.h header.

type CCHAR = int8   /* winnt.h:453:16 */
type LCID = DWORD   /* winnt.h:456:15 */
type PLCID = PDWORD /* winnt.h:458:18 */
type LANGID = WORD  /* winnt.h:461:16 */

type COMPARTMENT_ID = uint32   /* winnt.h:470:3 */
type PCOMPARTMENT_ID = uintptr /* winnt.h:470:18 */

type _FLOAT128 = struct {
	LowPart  int64
	HighPart int64
} /* winnt.h:482:13 */

type FLOAT128 = _FLOAT128 /* winnt.h:485:5 */

type PFLOAT128 = uintptr /* winnt.h:487:20 */

type LONGLONG = int64   /* winnt.h:490:37 */
type ULONGLONG = uint64 /* winnt.h:491:46 */

type PLONGLONG = uintptr  /* winnt.h:495:20 */
type PULONGLONG = uintptr /* winnt.h:496:21 */
type USN = LONGLONG       /* winnt.h:497:20 */

type _LARGE_INTEGER = struct {
	_   [0]uint64
	__0 struct {
		LowPart  DWORD
		HighPart LONG
	}
} /* winnt.h:505:11 */

type LARGE_INTEGER = _LARGE_INTEGER /* winnt.h:516:5 */

type PLARGE_INTEGER = uintptr /* winnt.h:518:25 */

type _ULARGE_INTEGER = struct {
	_   [0]uint64
	__0 struct {
		LowPart  DWORD
		HighPart DWORD
	}
} /* winnt.h:523:11 */

type ULARGE_INTEGER = _ULARGE_INTEGER /* winnt.h:534:5 */

type PULARGE_INTEGER = uintptr /* winnt.h:536:26 */

type _LUID = struct {
	LowPart  DWORD
	HighPart LONG
} /* winnt.h:538:11 */

type LUID = _LUID    /* winnt.h:541:5 */
type PLUID = uintptr /* winnt.h:541:10 */

type DWORDLONG = ULONGLONG /* winnt.h:546:21 */
type PDWORDLONG = uintptr  /* winnt.h:547:21 */

type BOOLEAN = BYTE     /* winnt.h:605:16 */
type PBOOLEAN = uintptr /* winnt.h:607:19 */

type _LIST_ENTRY = struct {
	Flink uintptr
	Blink uintptr
} /* winnt.h:612:11 */

type LIST_ENTRY = _LIST_ENTRY /* winnt.h:615:5 */
type PLIST_ENTRY = uintptr    /* winnt.h:615:16 */
type PRLIST_ENTRY = uintptr   /* winnt.h:615:29 */

type _SINGLE_LIST_ENTRY = struct{ Next uintptr } /* winnt.h:617:11 */

type SINGLE_LIST_ENTRY = _SINGLE_LIST_ENTRY /* winnt.h:619:5 */
type PSINGLE_LIST_ENTRY = uintptr           /* winnt.h:619:23 */

type LIST_ENTRY321 = struct {
	Flink DWORD
	Blink DWORD
} /* winnt.h:621:11 */

type LIST_ENTRY32 = LIST_ENTRY321 /* winnt.h:624:5 */
type PLIST_ENTRY32 = uintptr      /* winnt.h:625:24 */

type LIST_ENTRY641 = struct {
	Flink ULONGLONG
	Blink ULONGLONG
} /* winnt.h:627:11 */

type LIST_ENTRY64 = LIST_ENTRY641 /* winnt.h:630:5 */
type PLIST_ENTRY64 = uintptr      /* winnt.h:631:24 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Make sure __LONG32 is defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _GUID = struct {
	Data1 uint32
	Data2 uint16
	Data3 uint16
	Data4 [8]uint8
} /* guiddef.h:19:9 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Make sure __LONG32 is defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type GUID = _GUID /* guiddef.h:24:3 */

// __declspec(selectany) must be applied to initialized objects on GCC 5 hence must not be used here.

type LPGUID = uintptr /* guiddef.h:77:14 */

type LPCGUID = uintptr /* guiddef.h:82:20 */

type IID = GUID      /* guiddef.h:88:14 */
type LPIID = uintptr /* guiddef.h:89:13 */

type CLSID = GUID /* guiddef.h:96:14 */

type LPCLSID = uintptr /* guiddef.h:99:15 */

type FMTID = GUID      /* guiddef.h:103:14 */
type LPFMTID = uintptr /* guiddef.h:104:15 */

type _OBJECTID = struct {
	Lineage    GUID
	Uniquifier DWORD
} /* winnt.h:639:11 */

type OBJECTID = _OBJECTID         /* winnt.h:642:5 */
type PEXCEPTION_ROUTINE = uintptr /* winnt.h:709:31 */

// ??? #define SUBLANG_ROMANIAN_MOLDOVA                  0x01 ???

type KSPIN_LOCK = ULONG_PTR /* winnt.h:1384:21 */
type PKSPIN_LOCK = uintptr  /* winnt.h:1385:22 */

type _M128A = struct {
	Low  ULONGLONG
	High LONGLONG
} /* excpt.h:17:3 */

type M128A = _M128A   /* winnt.h:1390:7 */
type PM128A = uintptr /* winnt.h:1390:13 */

type _XSAVE_FORMAT = struct {
	ControlWord    WORD
	StatusWord     WORD
	TagWord        BYTE
	Reserved1      BYTE
	ErrorOpcode    WORD
	ErrorOffset    DWORD
	ErrorSelector  WORD
	Reserved2      WORD
	DataOffset     DWORD
	DataSelector   WORD
	Reserved3      WORD
	MxCsr          DWORD
	MxCsr_Mask     DWORD
	FloatRegisters [8]M128A
	XmmRegisters   [16]M128A
	Reserved4      [96]BYTE
} /* winnt.h:1392:13 */

type XSAVE_FORMAT = _XSAVE_FORMAT /* winnt.h:1415:7 */
type PXSAVE_FORMAT = uintptr      /* winnt.h:1415:20 */

type _XSAVE_AREA_HEADER = struct {
	Mask     DWORD64
	Reserved [7]DWORD64
} /* winnt.h:1417:13 */

type XSAVE_AREA_HEADER = _XSAVE_AREA_HEADER /* winnt.h:1420:7 */
type PXSAVE_AREA_HEADER = uintptr           /* winnt.h:1420:25 */

type _XSAVE_AREA = struct {
	LegacyState XSAVE_FORMAT
	Header      XSAVE_AREA_HEADER
} /* winnt.h:1422:13 */

type XSAVE_AREA = _XSAVE_AREA /* winnt.h:1425:7 */
type PXSAVE_AREA = uintptr    /* winnt.h:1425:18 */

type _XSTATE_CONTEXT = struct {
	Mask      DWORD64
	Length    DWORD
	Reserved1 DWORD
	Area      PXSAVE_AREA
	Buffer    PVOID
} /* winnt.h:1427:13 */

type XSTATE_CONTEXT = _XSTATE_CONTEXT /* winnt.h:1439:7 */
type PXSTATE_CONTEXT = uintptr        /* winnt.h:1439:22 */

type _SCOPE_TABLE_AMD64 = struct {
	Count       DWORD
	ScopeRecord [1]struct {
		BeginAddress   DWORD
		EndAddress     DWORD
		HandlerAddress DWORD
		JumpTarget     DWORD
	}
} /* winnt.h:1441:13 */

type SCOPE_TABLE_AMD64 = _SCOPE_TABLE_AMD64 /* winnt.h:1449:7 */
type PSCOPE_TABLE_AMD64 = uintptr           /* winnt.h:1449:25 */

// Copyright (C) 1992-2020 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 3, or (at your option) any later
// version.
//
// GCC is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

// This administrivia gets added to the beginning of limits.h
//    if the system has its own version of limits.h.

// We use _GCC_LIMITS_H_ because we want this not to match
//    any macros that the system's limits.h uses for its own purposes.

// Use "..." so that we find syslimits.h only in this same directory.
// syslimits.h stands for the system's own limits.h file.
//    If we can use it ok unmodified, then we install this text.
//    If fixincludes fixes it, then the fixed version is installed
//    instead of this text.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// File system limits
//
// NOTE: Apparently the actual size of PATH_MAX is 260, but a space is
//       required for the NUL. TODO: Test?
// NOTE: PATH_MAX is the POSIX equivalent for Microsoft's MAX_PATH; the two
//       are semantically identical, with a limit of 259 characters for the
//       path name, plus one for a terminating NUL, for a total of 260.

// Copyright (C) 1991-2020 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 3, or (at your option) any later
// version.
//
// GCC is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

// Number of bits in a `char'.

// Maximum length of a multibyte character.

// Minimum and maximum values a `signed char' can hold.

// Maximum value an `unsigned char' can hold.  (Minimum is 0).

// Minimum and maximum values a `char' can hold.

// Minimum and maximum values a `signed short int' can hold.

// Maximum value an `unsigned short int' can hold.  (Minimum is 0).

// Minimum and maximum values a `signed int' can hold.

// Maximum value an `unsigned int' can hold.  (Minimum is 0).

// Minimum and maximum values a `signed long int' can hold.
//    (Same as `int').

// Maximum value an `unsigned long int' can hold.  (Minimum is 0).

// Minimum and maximum values a `signed long long int' can hold.

// Maximum value an `unsigned long long int' can hold.  (Minimum is 0).

// Minimum and maximum values a `signed long long int' can hold.

// Maximum value an `unsigned long long int' can hold.  (Minimum is 0).

// This administrivia gets added to the end of limits.h
//    if the system has its own version of limits.h.

type _onexit_t = uintptr /* stdlib.h:50:15 */

type _div_t = struct {
	quot int32
	rem  int32
} /* stdlib.h:60:11 */

type div_t = _div_t /* stdlib.h:63:5 */

type _ldiv_t = struct {
	quot int32
	rem  int32
} /* stdlib.h:65:11 */

type ldiv_t = _ldiv_t /* stdlib.h:68:5 */

type _LDOUBLE = struct{ ld [10]uint8 } /* stdlib.h:77:5 */

type _CRT_DOUBLE = struct{ x float64 } /* stdlib.h:84:5 */

type _CRT_FLOAT = struct{ f float32 } /* stdlib.h:88:5 */

type _LONGDOUBLE = struct{ x float64 } /* stdlib.h:95:5 */

type _LDBL12 = struct{ ld12 [12]uint8 } /* stdlib.h:102:5 */

type _purecall_handler = uintptr /* stdlib.h:143:16 */

type _invalid_parameter_handler = uintptr /* stdlib.h:148:16 */

type lldiv_t = struct {
	quot int64
	rem  int64
} /* stdlib.h:727:61 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Return codes for _heapwalk()

// Values for _heapinfo.useflag

// The structure used to walk through the heap with _heapwalk.
type _heapinfo = struct {
	_pentry  uintptr
	_size    size_t
	_useflag int32
	_        [4]byte
} /* malloc.h:46:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Return codes for _heapwalk()

// Values for _heapinfo.useflag

// The structure used to walk through the heap with _heapwalk.
type _HEAPINFO = _heapinfo /* malloc.h:50:5 */

type _MM_PERM_ENUM = uint32 /* avx512fintrin.h:4359:3 */

// Constants for mantissa extraction
type _MM_MANTISSA_NORM_ENUM = uint32 /* avx512fintrin.h:8692:3 */

type _MM_MANTISSA_SIGN_ENUM = uint32 /* avx512fintrin.h:8699:3 */

// unsigned char __readgsbyte(unsigned __LONG32 Offset); moved to psdk_inc/intrin-impl.h
// unsigned short __readgsword(unsigned __LONG32 Offset); moved to psdk_inc/intrin-impl.h
// unsigned __LONG32 __readgsdword(unsigned __LONG32 Offset); moved to psdk_inc/intrin-impl.h
// __MINGW_EXTENSION unsigned __int64 __readgsqword(unsigned __LONG32 Offset); moved to psdk_inc/intrin-impl.h

// void __writegsbyte(unsigned __LONG32 Offset,unsigned char Data); moved to psdk_inc/intrin-impl.h
// void __writegsword(unsigned __LONG32 Offset,unsigned short Data); moved to psdk_inc/intrin-impl.h
// void __writegsdword(unsigned __LONG32 Offset,unsigned __LONG32 Data); moved to psdk_inc/intrin-impl.h

type _XMM_SAVE_AREA32 = struct {
	ControlWord    WORD
	StatusWord     WORD
	TagWord        BYTE
	Reserved1      BYTE
	ErrorOpcode    WORD
	ErrorOffset    DWORD
	ErrorSelector  WORD
	Reserved2      WORD
	DataOffset     DWORD
	DataSelector   WORD
	Reserved3      WORD
	MxCsr          DWORD
	MxCsr_Mask     DWORD
	FloatRegisters [8]M128A
	XmmRegisters   [16]M128A
	Reserved4      [96]BYTE
} /* winnt.h:1679:11 */

// unsigned char __readgsbyte(unsigned __LONG32 Offset); moved to psdk_inc/intrin-impl.h
// unsigned short __readgsword(unsigned __LONG32 Offset); moved to psdk_inc/intrin-impl.h
// unsigned __LONG32 __readgsdword(unsigned __LONG32 Offset); moved to psdk_inc/intrin-impl.h
// __MINGW_EXTENSION unsigned __int64 __readgsqword(unsigned __LONG32 Offset); moved to psdk_inc/intrin-impl.h

// void __writegsbyte(unsigned __LONG32 Offset,unsigned char Data); moved to psdk_inc/intrin-impl.h
// void __writegsword(unsigned __LONG32 Offset,unsigned short Data); moved to psdk_inc/intrin-impl.h
// void __writegsdword(unsigned __LONG32 Offset,unsigned __LONG32 Data); moved to psdk_inc/intrin-impl.h

type XMM_SAVE_AREA32 = _XMM_SAVE_AREA32 /* winnt.h:1696:5 */
type PXMM_SAVE_AREA32 = uintptr         /* winnt.h:1696:21 */

type CONTEXT = _CONTEXT /* winnt.h:1770:5 */
type PCONTEXT = uintptr /* winnt.h:1770:13 */

type _RUNTIME_FUNCTION = struct {
	BeginAddress DWORD
	EndAddress   DWORD
	UnwindData   DWORD
} /* excpt.h:45:3 */

type RUNTIME_FUNCTION = _RUNTIME_FUNCTION /* winnt.h:1778:5 */
type PRUNTIME_FUNCTION = uintptr          /* winnt.h:1778:22 */

type PGET_RUNTIME_FUNCTION_CALLBACK = uintptr          /* winnt.h:1780:29 */
type POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK = uintptr /* winnt.h:1781:17 */

// LONG WINAPI InterlockedIncrement(LONG volatile *); moved to psdk_inc/intrin-impl.h
// LONG WINAPI InterlockedDecrement(LONG volatile *); moved to psdk_inc/intrin-impl.h
// LONG WINAPI InterlockedExchange(LONG volatile *, LONG); moved to psdk_inc/intrin-impl.h

type _LDT_ENTRY = struct {
	LimitLow WORD
	BaseLow  WORD
	HighWord struct {
		_     [0]uint32
		Bytes struct {
			BaseMid BYTE
			Flags1  BYTE
			Flags2  BYTE
			BaseHi  BYTE
		}
	}
} /* winnt.h:2416:13 */

// LONG WINAPI InterlockedIncrement(LONG volatile *); moved to psdk_inc/intrin-impl.h
// LONG WINAPI InterlockedDecrement(LONG volatile *); moved to psdk_inc/intrin-impl.h
// LONG WINAPI InterlockedExchange(LONG volatile *, LONG); moved to psdk_inc/intrin-impl.h

type LDT_ENTRY = _LDT_ENTRY /* winnt.h:2439:7 */
type PLDT_ENTRY = uintptr   /* winnt.h:2439:17 */

// http://www.nynaeve.net/?p=99

type EXCEPTION_RECORD = _EXCEPTION_RECORD /* winnt.h:2784:7 */

type PEXCEPTION_RECORD = uintptr /* winnt.h:2786:30 */

type _EXCEPTION_RECORD32 = struct {
	ExceptionCode        DWORD
	ExceptionFlags       DWORD
	ExceptionRecord      DWORD
	ExceptionAddress     DWORD
	NumberParameters     DWORD
	ExceptionInformation [15]DWORD
} /* winnt.h:2788:13 */

type EXCEPTION_RECORD32 = _EXCEPTION_RECORD32 /* winnt.h:2795:7 */
type PEXCEPTION_RECORD32 = uintptr            /* winnt.h:2795:26 */

type _EXCEPTION_RECORD64 = struct {
	ExceptionCode        DWORD
	ExceptionFlags       DWORD
	ExceptionRecord      DWORD64
	ExceptionAddress     DWORD64
	NumberParameters     DWORD
	__unusedAlignment    DWORD
	ExceptionInformation [15]DWORD64
} /* winnt.h:2797:13 */

type EXCEPTION_RECORD64 = _EXCEPTION_RECORD64 /* winnt.h:2805:7 */
type PEXCEPTION_RECORD64 = uintptr            /* winnt.h:2805:26 */

type EXCEPTION_POINTERS = _EXCEPTION_POINTERS /* winnt.h:2810:7 */
type PEXCEPTION_POINTERS = uintptr            /* winnt.h:2810:26 */

// http://msdn.microsoft.com/en-us/library/ms680597(VS.85).aspx

type _UNWIND_HISTORY_TABLE_ENTRY = struct {
	ImageBase     ULONG64
	FunctionEntry PRUNTIME_FUNCTION
} /* excpt.h:45:3 */

// http://msdn.microsoft.com/en-us/library/ms680597(VS.85).aspx

type UNWIND_HISTORY_TABLE_ENTRY = _UNWIND_HISTORY_TABLE_ENTRY /* winnt.h:2825:5 */
type PUNWIND_HISTORY_TABLE_ENTRY = uintptr                    /* winnt.h:2825:33 */

type _UNWIND_HISTORY_TABLE = struct {
	Count       ULONG
	LocalHint   BYTE
	GlobalHint  BYTE
	Search      BYTE
	Once        BYTE
	LowAddress  ULONG64
	HighAddress ULONG64
	Entry       [12]UNWIND_HISTORY_TABLE_ENTRY
} /* excpt.h:45:3 */

type UNWIND_HISTORY_TABLE = _UNWIND_HISTORY_TABLE /* winnt.h:2840:5 */
type PUNWIND_HISTORY_TABLE = uintptr              /* winnt.h:2840:27 */
type DISPATCHER_CONTEXT = _DISPATCHER_CONTEXT     /* winnt.h:2845:38 */
type PDISPATCHER_CONTEXT = uintptr                /* winnt.h:2846:38 */

// http://msdn.microsoft.com/en-us/library/ms680617(VS.85).aspx

type _KNONVOLATILE_CONTEXT_POINTERS = struct {
	FloatingContext [16]PM128A
	IntegerContext  [16]PULONG64
} /* winnt.h:2865:11 */

// http://msdn.microsoft.com/en-us/library/ms680617(VS.85).aspx

type KNONVOLATILE_CONTEXT_POINTERS = _KNONVOLATILE_CONTEXT_POINTERS /* winnt.h:2869:5 */
type PKNONVOLATILE_CONTEXT_POINTERS = uintptr                       /* winnt.h:2869:36 */

type PACCESS_TOKEN = PVOID        /* winnt.h:2872:19 */
type PSECURITY_DESCRIPTOR = PVOID /* winnt.h:2873:19 */
type PSID = PVOID                 /* winnt.h:2874:19 */
type PCLAIMS_BLOB = PVOID         /* winnt.h:2875:19 */
type ACCESS_MASK = DWORD          /* winnt.h:2876:19 */
type PACCESS_MASK = uintptr       /* winnt.h:2877:25 */

type _GENERIC_MAPPING = struct {
	GenericRead    ACCESS_MASK
	GenericWrite   ACCESS_MASK
	GenericExecute ACCESS_MASK
	GenericAll     ACCESS_MASK
} /* winnt.h:2903:13 */

type GENERIC_MAPPING = _GENERIC_MAPPING /* winnt.h:2908:7 */
type PGENERIC_MAPPING = uintptr         /* winnt.h:2909:29 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type _LUID_AND_ATTRIBUTES = struct {
	Luid       LUID
	Attributes DWORD
} /* winnt.h:2912:13 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type LUID_AND_ATTRIBUTES = _LUID_AND_ATTRIBUTES         /* winnt.h:2915:7 */
type PLUID_AND_ATTRIBUTES = uintptr                     /* winnt.h:2915:27 */
type LUID_AND_ATTRIBUTES_ARRAY = [1]LUID_AND_ATTRIBUTES /* winnt.h:2916:33 */
type PLUID_AND_ATTRIBUTES_ARRAY = uintptr               /* winnt.h:2917:39 */
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _SID_IDENTIFIER_AUTHORITY = struct{ Value [6]BYTE } /* winnt.h:2922:13 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type SID_IDENTIFIER_AUTHORITY = _SID_IDENTIFIER_AUTHORITY /* winnt.h:2924:7 */
type PSID_IDENTIFIER_AUTHORITY = uintptr                  /* winnt.h:2924:32 */

type _SID = struct {
	Revision            BYTE
	SubAuthorityCount   BYTE
	IdentifierAuthority SID_IDENTIFIER_AUTHORITY
	SubAuthority        [1]DWORD
} /* winnt.h:2929:13 */

type SID = _SID      /* winnt.h:2934:7 */
type PISID = uintptr /* winnt.h:2934:11 */

type SID_NAME_USE = uint32   /* winnt.h:2948:7 */
type PSID_NAME_USE = uintptr /* winnt.h:2948:20 */

type _SID_AND_ATTRIBUTES = struct {
	Sid        PSID
	Attributes DWORD
	_          [4]byte
} /* winnt.h:2950:13 */

type SID_AND_ATTRIBUTES = _SID_AND_ATTRIBUTES /* winnt.h:2957:7 */
type PSID_AND_ATTRIBUTES = uintptr            /* winnt.h:2957:26 */

type SID_AND_ATTRIBUTES_ARRAY = [1]SID_AND_ATTRIBUTES /* winnt.h:2959:32 */
type PSID_AND_ATTRIBUTES_ARRAY = uintptr              /* winnt.h:2960:38 */

type SID_HASH_ENTRY = ULONG_PTR /* winnt.h:2962:23 */
type PSID_HASH_ENTRY = uintptr  /* winnt.h:2962:39 */

type _SID_AND_ATTRIBUTES_HASH = struct {
	SidCount DWORD
	_        [4]byte
	SidAttr  PSID_AND_ATTRIBUTES
	Hash     [32]SID_HASH_ENTRY
} /* winnt.h:2964:13 */

type SID_AND_ATTRIBUTES_HASH = _SID_AND_ATTRIBUTES_HASH /* winnt.h:2968:7 */
type PSID_AND_ATTRIBUTES_HASH = uintptr                 /* winnt.h:2968:32 */

type WELL_KNOWN_SID_TYPE = uint32 /* winnt.h:3256:3 */

type _ACL = struct {
	AclRevision BYTE
	Sbz1        BYTE
	AclSize     WORD
	AceCount    WORD
	Sbz2        WORD
} /* winnt.h:3286:13 */

type ACL = _ACL     /* winnt.h:3292:7 */
type PACL = uintptr /* winnt.h:3293:17 */

type _ACE_HEADER = struct {
	AceType  BYTE
	AceFlags BYTE
	AceSize  WORD
} /* winnt.h:3295:13 */

type ACE_HEADER = _ACE_HEADER /* winnt.h:3299:7 */
type PACE_HEADER = uintptr    /* winnt.h:3300:24 */

type _ACCESS_ALLOWED_ACE = struct {
	Header   ACE_HEADER
	Mask     ACCESS_MASK
	SidStart DWORD
} /* winnt.h:3346:13 */

type ACCESS_ALLOWED_ACE = _ACCESS_ALLOWED_ACE /* winnt.h:3350:7 */

type PACCESS_ALLOWED_ACE = uintptr /* winnt.h:3352:32 */

type _ACCESS_DENIED_ACE = struct {
	Header   ACE_HEADER
	Mask     ACCESS_MASK
	SidStart DWORD
} /* winnt.h:3354:13 */

type ACCESS_DENIED_ACE = _ACCESS_DENIED_ACE /* winnt.h:3358:7 */
type PACCESS_DENIED_ACE = uintptr           /* winnt.h:3359:31 */

type _SYSTEM_AUDIT_ACE = struct {
	Header   ACE_HEADER
	Mask     ACCESS_MASK
	SidStart DWORD
} /* winnt.h:3361:13 */

type SYSTEM_AUDIT_ACE = _SYSTEM_AUDIT_ACE /* winnt.h:3365:7 */
type PSYSTEM_AUDIT_ACE = uintptr          /* winnt.h:3366:30 */

type _SYSTEM_ALARM_ACE = struct {
	Header   ACE_HEADER
	Mask     ACCESS_MASK
	SidStart DWORD
} /* winnt.h:3368:13 */

type SYSTEM_ALARM_ACE = _SYSTEM_ALARM_ACE /* winnt.h:3372:7 */
type PSYSTEM_ALARM_ACE = uintptr          /* winnt.h:3373:30 */

type _SYSTEM_RESOURCE_ATTRIBUTE_ACE = struct {
	Header   ACE_HEADER
	Mask     ACCESS_MASK
	SidStart DWORD
} /* winnt.h:3375:13 */

type SYSTEM_RESOURCE_ATTRIBUTE_ACE = _SYSTEM_RESOURCE_ATTRIBUTE_ACE /* winnt.h:3379:7 */
type PSYSTEM_RESOURCE_ATTRIBUTE_ACE = uintptr                       /* winnt.h:3379:37 */

type _SYSTEM_SCOPED_POLICY_ID_ACE = struct {
	Header   ACE_HEADER
	Mask     ACCESS_MASK
	SidStart DWORD
} /* winnt.h:3381:13 */

type SYSTEM_SCOPED_POLICY_ID_ACE = _SYSTEM_SCOPED_POLICY_ID_ACE /* winnt.h:3385:7 */
type PSYSTEM_SCOPED_POLICY_ID_ACE = uintptr                     /* winnt.h:3385:35 */

type _SYSTEM_MANDATORY_LABEL_ACE = struct {
	Header   ACE_HEADER
	Mask     ACCESS_MASK
	SidStart DWORD
} /* winnt.h:3387:13 */

type SYSTEM_MANDATORY_LABEL_ACE = _SYSTEM_MANDATORY_LABEL_ACE /* winnt.h:3391:7 */
type PSYSTEM_MANDATORY_LABEL_ACE = uintptr                    /* winnt.h:3391:35 */

type _ACCESS_ALLOWED_OBJECT_ACE = struct {
	Header              ACE_HEADER
	Mask                ACCESS_MASK
	Flags               DWORD
	ObjectType          GUID
	InheritedObjectType GUID
	SidStart            DWORD
} /* winnt.h:3399:13 */

type ACCESS_ALLOWED_OBJECT_ACE = _ACCESS_ALLOWED_OBJECT_ACE /* winnt.h:3406:7 */
type PACCESS_ALLOWED_OBJECT_ACE = uintptr                   /* winnt.h:3406:33 */

type _ACCESS_DENIED_OBJECT_ACE = struct {
	Header              ACE_HEADER
	Mask                ACCESS_MASK
	Flags               DWORD
	ObjectType          GUID
	InheritedObjectType GUID
	SidStart            DWORD
} /* winnt.h:3408:13 */

type ACCESS_DENIED_OBJECT_ACE = _ACCESS_DENIED_OBJECT_ACE /* winnt.h:3415:7 */
type PACCESS_DENIED_OBJECT_ACE = uintptr                  /* winnt.h:3415:32 */

type _SYSTEM_AUDIT_OBJECT_ACE = struct {
	Header              ACE_HEADER
	Mask                ACCESS_MASK
	Flags               DWORD
	ObjectType          GUID
	InheritedObjectType GUID
	SidStart            DWORD
} /* winnt.h:3417:13 */

type SYSTEM_AUDIT_OBJECT_ACE = _SYSTEM_AUDIT_OBJECT_ACE /* winnt.h:3424:7 */
type PSYSTEM_AUDIT_OBJECT_ACE = uintptr                 /* winnt.h:3424:31 */

type _SYSTEM_ALARM_OBJECT_ACE = struct {
	Header              ACE_HEADER
	Mask                ACCESS_MASK
	Flags               DWORD
	ObjectType          GUID
	InheritedObjectType GUID
	SidStart            DWORD
} /* winnt.h:3426:13 */

type SYSTEM_ALARM_OBJECT_ACE = _SYSTEM_ALARM_OBJECT_ACE /* winnt.h:3433:7 */
type PSYSTEM_ALARM_OBJECT_ACE = uintptr                 /* winnt.h:3433:31 */

type _ACCESS_ALLOWED_CALLBACK_ACE = struct {
	Header   ACE_HEADER
	Mask     ACCESS_MASK
	SidStart DWORD
} /* winnt.h:3435:13 */

type ACCESS_ALLOWED_CALLBACK_ACE = _ACCESS_ALLOWED_CALLBACK_ACE /* winnt.h:3439:7 */
type PACCESS_ALLOWED_CALLBACK_ACE = uintptr                     /* winnt.h:3439:35 */

type _ACCESS_DENIED_CALLBACK_ACE = struct {
	Header   ACE_HEADER
	Mask     ACCESS_MASK
	SidStart DWORD
} /* winnt.h:3441:13 */

type ACCESS_DENIED_CALLBACK_ACE = _ACCESS_DENIED_CALLBACK_ACE /* winnt.h:3445:7 */
type PACCESS_DENIED_CALLBACK_ACE = uintptr                    /* winnt.h:3445:34 */

type _SYSTEM_AUDIT_CALLBACK_ACE = struct {
	Header   ACE_HEADER
	Mask     ACCESS_MASK
	SidStart DWORD
} /* winnt.h:3447:13 */

type SYSTEM_AUDIT_CALLBACK_ACE = _SYSTEM_AUDIT_CALLBACK_ACE /* winnt.h:3451:7 */
type PSYSTEM_AUDIT_CALLBACK_ACE = uintptr                   /* winnt.h:3451:33 */

type _SYSTEM_ALARM_CALLBACK_ACE = struct {
	Header   ACE_HEADER
	Mask     ACCESS_MASK
	SidStart DWORD
} /* winnt.h:3453:13 */

type SYSTEM_ALARM_CALLBACK_ACE = _SYSTEM_ALARM_CALLBACK_ACE /* winnt.h:3457:7 */
type PSYSTEM_ALARM_CALLBACK_ACE = uintptr                   /* winnt.h:3457:33 */

type _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = struct {
	Header              ACE_HEADER
	Mask                ACCESS_MASK
	Flags               DWORD
	ObjectType          GUID
	InheritedObjectType GUID
	SidStart            DWORD
} /* winnt.h:3459:13 */

type ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE /* winnt.h:3467:7 */
type PACCESS_ALLOWED_CALLBACK_OBJECT_ACE = uintptr                            /* winnt.h:3467:42 */

type _ACCESS_DENIED_CALLBACK_OBJECT_ACE = struct {
	Header              ACE_HEADER
	Mask                ACCESS_MASK
	Flags               DWORD
	ObjectType          GUID
	InheritedObjectType GUID
	SidStart            DWORD
} /* winnt.h:3469:13 */

type ACCESS_DENIED_CALLBACK_OBJECT_ACE = _ACCESS_DENIED_CALLBACK_OBJECT_ACE /* winnt.h:3476:7 */
type PACCESS_DENIED_CALLBACK_OBJECT_ACE = uintptr                           /* winnt.h:3476:41 */

type _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = struct {
	Header              ACE_HEADER
	Mask                ACCESS_MASK
	Flags               DWORD
	ObjectType          GUID
	InheritedObjectType GUID
	SidStart            DWORD
} /* winnt.h:3478:13 */

type SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE /* winnt.h:3485:7 */
type PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE = uintptr                          /* winnt.h:3485:40 */

type _SYSTEM_ALARM_CALLBACK_OBJECT_ACE = struct {
	Header              ACE_HEADER
	Mask                ACCESS_MASK
	Flags               DWORD
	ObjectType          GUID
	InheritedObjectType GUID
	SidStart            DWORD
} /* winnt.h:3487:13 */

type SYSTEM_ALARM_CALLBACK_OBJECT_ACE = _SYSTEM_ALARM_CALLBACK_OBJECT_ACE /* winnt.h:3495:7 */
type PSYSTEM_ALARM_CALLBACK_OBJECT_ACE = uintptr                          /* winnt.h:3495:40 */

type ACL_INFORMATION_CLASS = uint32 /* winnt.h:3502:7 */

type _ACL_REVISION_INFORMATION = struct{ AclRevision DWORD } /* winnt.h:3504:13 */

type ACL_REVISION_INFORMATION = _ACL_REVISION_INFORMATION /* winnt.h:3506:7 */
type PACL_REVISION_INFORMATION = uintptr                  /* winnt.h:3507:38 */

type _ACL_SIZE_INFORMATION = struct {
	AceCount      DWORD
	AclBytesInUse DWORD
	AclBytesFree  DWORD
} /* winnt.h:3509:13 */

type ACL_SIZE_INFORMATION = _ACL_SIZE_INFORMATION /* winnt.h:3513:7 */
type PACL_SIZE_INFORMATION = uintptr              /* winnt.h:3514:34 */

type SECURITY_DESCRIPTOR_CONTROL = WORD     /* winnt.h:3521:18 */
type PSECURITY_DESCRIPTOR_CONTROL = uintptr /* winnt.h:3521:46 */

type _SECURITY_DESCRIPTOR_RELATIVE = struct {
	Revision BYTE
	Sbz1     BYTE
	Control  SECURITY_DESCRIPTOR_CONTROL
	Owner    DWORD
	Group    DWORD
	Sacl     DWORD
	Dacl     DWORD
} /* winnt.h:3538:13 */

type SECURITY_DESCRIPTOR_RELATIVE = _SECURITY_DESCRIPTOR_RELATIVE /* winnt.h:3546:7 */
type PISECURITY_DESCRIPTOR_RELATIVE = uintptr                     /* winnt.h:3546:36 */

type _SECURITY_DESCRIPTOR = struct {
	Revision BYTE
	Sbz1     BYTE
	Control  SECURITY_DESCRIPTOR_CONTROL
	_        [4]byte
	Owner    PSID
	Group    PSID
	Sacl     PACL
	Dacl     PACL
} /* winnt.h:3548:13 */

type SECURITY_DESCRIPTOR = _SECURITY_DESCRIPTOR /* winnt.h:3556:7 */
type PISECURITY_DESCRIPTOR = uintptr            /* winnt.h:3556:27 */

type _OBJECT_TYPE_LIST = struct {
	Level      WORD
	Sbz        WORD
	_          [4]byte
	ObjectType uintptr
} /* winnt.h:3558:13 */

type OBJECT_TYPE_LIST = _OBJECT_TYPE_LIST /* winnt.h:3562:7 */
type POBJECT_TYPE_LIST = uintptr          /* winnt.h:3562:24 */

type AUDIT_EVENT_TYPE = uint32   /* winnt.h:3572:7 */
type PAUDIT_EVENT_TYPE = uintptr /* winnt.h:3572:24 */

type _PRIVILEGE_SET = struct {
	PrivilegeCount DWORD
	Control        DWORD
	Privilege      [1]LUID_AND_ATTRIBUTES
} /* winnt.h:3590:13 */

type PRIVILEGE_SET = _PRIVILEGE_SET /* winnt.h:3594:7 */
type PPRIVILEGE_SET = uintptr       /* winnt.h:3594:21 */

type ACCESS_REASON_TYPE = uint32 /* winnt.h:3619:7 */
type ACCESS_REASON = DWORD       /* winnt.h:3620:19 */

type _ACCESS_REASONS = struct{ Data [32]ACCESS_REASON } /* winnt.h:3622:13 */

type ACCESS_REASONS = _ACCESS_REASONS /* winnt.h:3624:7 */
type PACCESS_REASONS = uintptr        /* winnt.h:3624:22 */

type _SE_SECURITY_DESCRIPTOR = struct {
	Size               DWORD
	Flags              DWORD
	SecurityDescriptor PSECURITY_DESCRIPTOR
} /* winnt.h:3630:13 */

type SE_SECURITY_DESCRIPTOR = _SE_SECURITY_DESCRIPTOR /* winnt.h:3634:7 */
type PSE_SECURITY_DESCRIPTOR = uintptr                /* winnt.h:3634:30 */

type _SE_ACCESS_REQUEST = struct {
	Size                    DWORD
	_                       [4]byte
	SeSecurityDescriptor    PSE_SECURITY_DESCRIPTOR
	DesiredAccess           ACCESS_MASK
	PreviouslyGrantedAccess ACCESS_MASK
	PrincipalSelfSid        PSID
	GenericMapping          PGENERIC_MAPPING
	ObjectTypeListCount     DWORD
	_                       [4]byte
	ObjectTypeList          POBJECT_TYPE_LIST
} /* winnt.h:3636:13 */

type SE_ACCESS_REQUEST = _SE_ACCESS_REQUEST /* winnt.h:3645:7 */
type PSE_ACCESS_REQUEST = uintptr           /* winnt.h:3645:25 */

type _SE_ACCESS_REPLY = struct {
	Size            DWORD
	ResultListCount DWORD
	GrantedAccess   PACCESS_MASK
	AccessStatus    PDWORD
	AccessReason    PACCESS_REASONS
	Privileges      uintptr
} /* winnt.h:3647:13 */

type SE_ACCESS_REPLY = _SE_ACCESS_REPLY /* winnt.h:3654:7 */
type PSE_ACCESS_REPLY = uintptr         /* winnt.h:3654:23 */

type SECURITY_IMPERSONATION_LEVEL = uint32   /* winnt.h:3694:7 */
type PSECURITY_IMPERSONATION_LEVEL = uintptr /* winnt.h:3694:36 */

type TOKEN_TYPE = uint32   /* winnt.h:3721:7 */
type PTOKEN_TYPE = uintptr /* winnt.h:3722:24 */

type TOKEN_ELEVATION_TYPE = uint32   /* winnt.h:3728:7 */
type PTOKEN_ELEVATION_TYPE = uintptr /* winnt.h:3728:29 */

type TOKEN_INFORMATION_CLASS = uint32   /* winnt.h:3772:7 */
type PTOKEN_INFORMATION_CLASS = uintptr /* winnt.h:3772:31 */

type _TOKEN_USER = struct{ User SID_AND_ATTRIBUTES } /* winnt.h:3774:13 */

type TOKEN_USER = _TOKEN_USER /* winnt.h:3776:7 */
type PTOKEN_USER = uintptr    /* winnt.h:3776:18 */

type _TOKEN_GROUPS = struct {
	GroupCount DWORD
	_          [4]byte
	Groups     [1]SID_AND_ATTRIBUTES
} /* winnt.h:3778:13 */

type TOKEN_GROUPS = _TOKEN_GROUPS /* winnt.h:3785:7 */
type PTOKEN_GROUPS = uintptr      /* winnt.h:3785:20 */

type _TOKEN_PRIVILEGES = struct {
	PrivilegeCount DWORD
	Privileges     [1]LUID_AND_ATTRIBUTES
} /* winnt.h:3787:13 */

type TOKEN_PRIVILEGES = _TOKEN_PRIVILEGES /* winnt.h:3790:7 */
type PTOKEN_PRIVILEGES = uintptr          /* winnt.h:3790:24 */

type _TOKEN_OWNER = struct{ Owner PSID } /* winnt.h:3792:13 */

type TOKEN_OWNER = _TOKEN_OWNER /* winnt.h:3794:7 */
type PTOKEN_OWNER = uintptr     /* winnt.h:3794:19 */

type _TOKEN_PRIMARY_GROUP = struct{ PrimaryGroup PSID } /* winnt.h:3796:13 */

type TOKEN_PRIMARY_GROUP = _TOKEN_PRIMARY_GROUP /* winnt.h:3798:7 */
type PTOKEN_PRIMARY_GROUP = uintptr             /* winnt.h:3798:27 */

type _TOKEN_DEFAULT_DACL = struct{ DefaultDacl PACL } /* winnt.h:3800:13 */

type TOKEN_DEFAULT_DACL = _TOKEN_DEFAULT_DACL /* winnt.h:3802:7 */
type PTOKEN_DEFAULT_DACL = uintptr            /* winnt.h:3802:26 */

type _TOKEN_USER_CLAIMS = struct{ UserClaims PCLAIMS_BLOB } /* winnt.h:3804:13 */

type TOKEN_USER_CLAIMS = _TOKEN_USER_CLAIMS /* winnt.h:3806:7 */
type PTOKEN_USER_CLAIMS = uintptr           /* winnt.h:3806:25 */

type _TOKEN_DEVICE_CLAIMS = struct{ DeviceClaims PCLAIMS_BLOB } /* winnt.h:3808:13 */

type TOKEN_DEVICE_CLAIMS = _TOKEN_DEVICE_CLAIMS /* winnt.h:3810:7 */
type PTOKEN_DEVICE_CLAIMS = uintptr             /* winnt.h:3810:27 */

type _TOKEN_GROUPS_AND_PRIVILEGES = struct {
	SidCount            DWORD
	SidLength           DWORD
	Sids                PSID_AND_ATTRIBUTES
	RestrictedSidCount  DWORD
	RestrictedSidLength DWORD
	RestrictedSids      PSID_AND_ATTRIBUTES
	PrivilegeCount      DWORD
	PrivilegeLength     DWORD
	Privileges          PLUID_AND_ATTRIBUTES
	AuthenticationId    LUID
} /* winnt.h:3812:13 */

type TOKEN_GROUPS_AND_PRIVILEGES = _TOKEN_GROUPS_AND_PRIVILEGES /* winnt.h:3823:7 */
type PTOKEN_GROUPS_AND_PRIVILEGES = uintptr                     /* winnt.h:3823:35 */

type _TOKEN_LINKED_TOKEN = struct{ LinkedToken HANDLE } /* winnt.h:3825:13 */

type TOKEN_LINKED_TOKEN = _TOKEN_LINKED_TOKEN /* winnt.h:3827:7 */
type PTOKEN_LINKED_TOKEN = uintptr            /* winnt.h:3827:26 */

type _TOKEN_ELEVATION = struct{ TokenIsElevated DWORD } /* winnt.h:3829:13 */

type TOKEN_ELEVATION = _TOKEN_ELEVATION /* winnt.h:3831:7 */
type PTOKEN_ELEVATION = uintptr         /* winnt.h:3831:23 */

type _TOKEN_MANDATORY_LABEL = struct{ Label SID_AND_ATTRIBUTES } /* winnt.h:3833:13 */

type TOKEN_MANDATORY_LABEL = _TOKEN_MANDATORY_LABEL /* winnt.h:3835:7 */
type PTOKEN_MANDATORY_LABEL = uintptr               /* winnt.h:3835:29 */

type _TOKEN_MANDATORY_POLICY = struct{ Policy DWORD } /* winnt.h:3843:13 */

type TOKEN_MANDATORY_POLICY = _TOKEN_MANDATORY_POLICY /* winnt.h:3845:7 */
type PTOKEN_MANDATORY_POLICY = uintptr                /* winnt.h:3845:30 */

type _TOKEN_ACCESS_INFORMATION = struct {
	SidHash            PSID_AND_ATTRIBUTES_HASH
	RestrictedSidHash  PSID_AND_ATTRIBUTES_HASH
	Privileges         PTOKEN_PRIVILEGES
	AuthenticationId   LUID
	TokenType          TOKEN_TYPE
	ImpersonationLevel SECURITY_IMPERSONATION_LEVEL
	MandatoryPolicy    TOKEN_MANDATORY_POLICY
	Flags              DWORD
	AppContainerNumber DWORD
	_                  [4]byte
	PackageSid         PSID
	CapabilitiesHash   PSID_AND_ATTRIBUTES_HASH
} /* winnt.h:3847:13 */

type TOKEN_ACCESS_INFORMATION = _TOKEN_ACCESS_INFORMATION /* winnt.h:3859:7 */
type PTOKEN_ACCESS_INFORMATION = uintptr                  /* winnt.h:3859:32 */

type _TOKEN_AUDIT_POLICY = struct{ PerUserPolicy [29]UCHAR } /* winnt.h:3863:13 */

type TOKEN_AUDIT_POLICY = _TOKEN_AUDIT_POLICY /* winnt.h:3865:7 */
type PTOKEN_AUDIT_POLICY = uintptr            /* winnt.h:3865:27 */

type _TOKEN_SOURCE = struct {
	SourceName       [8]CHAR
	SourceIdentifier LUID
} /* winnt.h:3869:13 */

type TOKEN_SOURCE = _TOKEN_SOURCE /* winnt.h:3872:7 */
type PTOKEN_SOURCE = uintptr      /* winnt.h:3872:20 */

type _TOKEN_STATISTICS = struct {
	TokenId            LUID
	AuthenticationId   LUID
	ExpirationTime     LARGE_INTEGER
	TokenType          TOKEN_TYPE
	ImpersonationLevel SECURITY_IMPERSONATION_LEVEL
	DynamicCharged     DWORD
	DynamicAvailable   DWORD
	GroupCount         DWORD
	PrivilegeCount     DWORD
	ModifiedId         LUID
} /* winnt.h:3874:13 */

type TOKEN_STATISTICS = _TOKEN_STATISTICS /* winnt.h:3885:7 */
type PTOKEN_STATISTICS = uintptr          /* winnt.h:3885:24 */

type _TOKEN_CONTROL = struct {
	TokenId          LUID
	AuthenticationId LUID
	ModifiedId       LUID
	TokenSource      TOKEN_SOURCE
} /* winnt.h:3887:13 */

type TOKEN_CONTROL = _TOKEN_CONTROL /* winnt.h:3892:7 */
type PTOKEN_CONTROL = uintptr       /* winnt.h:3892:21 */

type _TOKEN_ORIGIN = struct{ OriginatingLogonSession LUID } /* winnt.h:3894:13 */

type TOKEN_ORIGIN = _TOKEN_ORIGIN /* winnt.h:3896:7 */
type PTOKEN_ORIGIN = uintptr      /* winnt.h:3896:20 */

type MANDATORY_LEVEL = uint32   /* winnt.h:3906:7 */
type PMANDATORY_LEVEL = uintptr /* winnt.h:3906:23 */

type _TOKEN_APPCONTAINER_INFORMATION = struct{ TokenAppContainer PSID } /* winnt.h:3908:13 */

type TOKEN_APPCONTAINER_INFORMATION = _TOKEN_APPCONTAINER_INFORMATION /* winnt.h:3910:7 */
type PTOKEN_APPCONTAINER_INFORMATION = uintptr                        /* winnt.h:3910:38 */

type _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = struct {
	Version DWORD64
	Name    PWSTR
} /* winnt.h:3920:13 */

type CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE /* winnt.h:3923:7 */
type PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = uintptr                             /* winnt.h:3923:43 */

type _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = struct {
	pValue      PVOID
	ValueLength DWORD
	_           [4]byte
} /* winnt.h:3925:13 */

type CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE /* winnt.h:3928:7 */
type PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = uintptr                                     /* winnt.h:3928:52 */

type _CLAIM_SECURITY_ATTRIBUTE_V1 = struct {
	Name       PWSTR
	ValueType  WORD
	Reserved   WORD
	Flags      DWORD
	ValueCount DWORD
	_          [4]byte
	Values     struct{ pInt64 PLONG64 }
} /* winnt.h:3941:13 */

type CLAIM_SECURITY_ATTRIBUTE_V1 = _CLAIM_SECURITY_ATTRIBUTE_V1 /* winnt.h:3954:7 */
type PCLAIM_SECURITY_ATTRIBUTE_V1 = uintptr                     /* winnt.h:3954:35 */

type _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = struct {
	Name       DWORD
	ValueType  WORD
	Reserved   WORD
	Flags      DWORD
	ValueCount DWORD
	Values     struct{ pInt64 [1]DWORD }
} /* winnt.h:3956:13 */

type CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 /* winnt.h:3969:7 */
type PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = uintptr                              /* winnt.h:3969:44 */

type _CLAIM_SECURITY_ATTRIBUTES_INFORMATION = struct {
	Version        WORD
	Reserved       WORD
	AttributeCount DWORD
	Attribute      struct{ pAttributeV1 PCLAIM_SECURITY_ATTRIBUTE_V1 }
} /* winnt.h:3975:13 */

type CLAIM_SECURITY_ATTRIBUTES_INFORMATION = _CLAIM_SECURITY_ATTRIBUTES_INFORMATION /* winnt.h:3982:7 */
type PCLAIM_SECURITY_ATTRIBUTES_INFORMATION = uintptr                               /* winnt.h:3982:45 */

type SECURITY_CONTEXT_TRACKING_MODE = BOOLEAN  /* winnt.h:3987:21 */
type PSECURITY_CONTEXT_TRACKING_MODE = uintptr /* winnt.h:3987:52 */

type _SECURITY_QUALITY_OF_SERVICE = struct {
	Length              DWORD
	ImpersonationLevel  SECURITY_IMPERSONATION_LEVEL
	ContextTrackingMode SECURITY_CONTEXT_TRACKING_MODE
	EffectiveOnly       BOOLEAN
	_                   [2]byte
} /* winnt.h:3989:13 */

type SECURITY_QUALITY_OF_SERVICE = _SECURITY_QUALITY_OF_SERVICE /* winnt.h:3994:7 */
type PSECURITY_QUALITY_OF_SERVICE = uintptr                     /* winnt.h:3994:35 */

type _SE_IMPERSONATION_STATE = struct {
	Token         PACCESS_TOKEN
	CopyOnOpen    BOOLEAN
	EffectiveOnly BOOLEAN
	_             [2]byte
	Level         SECURITY_IMPERSONATION_LEVEL
} /* winnt.h:3996:13 */

type SE_IMPERSONATION_STATE = _SE_IMPERSONATION_STATE /* winnt.h:4001:7 */
type PSE_IMPERSONATION_STATE = uintptr                /* winnt.h:4001:30 */

type SECURITY_INFORMATION = DWORD    /* winnt.h:4008:19 */
type PSECURITY_INFORMATION = uintptr /* winnt.h:4008:40 */

type SE_LEARNING_MODE_DATA_TYPE = uint32 /* winnt.h:4028:7 */

type _SECURITY_CAPABILITIES = struct {
	AppContainerSid PSID
	Capabilities    PSID_AND_ATTRIBUTES
	CapabilityCount DWORD
	Reserved        DWORD
} /* winnt.h:4032:13 */

type SECURITY_CAPABILITIES = _SECURITY_CAPABILITIES /* winnt.h:4037:7 */
type PSECURITY_CAPABILITIES = uintptr               /* winnt.h:4037:29 */
type LPSECURITY_CAPABILITIES = uintptr              /* winnt.h:4037:53 */

type _JOB_SET_ARRAY = struct {
	JobHandle   HANDLE
	MemberLevel DWORD
	Flags       DWORD
} /* winnt.h:4092:13 */

type JOB_SET_ARRAY = _JOB_SET_ARRAY /* winnt.h:4096:7 */
type PJOB_SET_ARRAY = uintptr       /* winnt.h:4096:21 */

type _EXCEPTION_REGISTRATION_RECORD = struct {
	__0 struct{ Next uintptr }
	__8 struct{ Handler PEXCEPTION_ROUTINE }
} /* winnt.h:4102:13 */

type EXCEPTION_REGISTRATION_RECORD = _EXCEPTION_REGISTRATION_RECORD /* winnt.h:4111:7 */

type PEXCEPTION_REGISTRATION_RECORD = uintptr /* winnt.h:4113:43 */

type EXCEPTION_REGISTRATION = EXCEPTION_REGISTRATION_RECORD   /* winnt.h:4115:43 */
type PEXCEPTION_REGISTRATION = PEXCEPTION_REGISTRATION_RECORD /* winnt.h:4116:44 */

type _NT_TIB = struct {
	ExceptionList        uintptr
	StackBase            PVOID
	StackLimit           PVOID
	SubSystemTib         PVOID
	__32                 struct{ FiberData PVOID }
	ArbitraryUserPointer PVOID
	Self                 uintptr
} /* winnt.h:4121:28 */

type NT_TIB = _NT_TIB  /* winnt.h:4132:7 */
type PNT_TIB = uintptr /* winnt.h:4133:20 */

type _NT_TIB32 = struct {
	ExceptionList        DWORD
	StackBase            DWORD
	StackLimit           DWORD
	SubSystemTib         DWORD
	__16                 struct{ FiberData DWORD }
	ArbitraryUserPointer DWORD
	Self                 DWORD
} /* winnt.h:4136:28 */

type NT_TIB32 = _NT_TIB32 /* winnt.h:4147:7 */
type PNT_TIB32 = uintptr  /* winnt.h:4147:16 */

type _NT_TIB64 = struct {
	ExceptionList        DWORD64
	StackBase            DWORD64
	StackLimit           DWORD64
	SubSystemTib         DWORD64
	__32                 struct{ FiberData DWORD64 }
	ArbitraryUserPointer DWORD64
	Self                 DWORD64
} /* winnt.h:4149:28 */

type NT_TIB64 = _NT_TIB64 /* winnt.h:4160:7 */
type PNT_TIB64 = uintptr  /* winnt.h:4160:16 */

type _UMS_CREATE_THREAD_ATTRIBUTES = struct {
	UmsVersion        DWORD
	_                 [4]byte
	UmsContext        PVOID
	UmsCompletionList PVOID
} /* winnt.h:4171:13 */

type UMS_CREATE_THREAD_ATTRIBUTES = _UMS_CREATE_THREAD_ATTRIBUTES /* winnt.h:4175:7 */
type PUMS_CREATE_THREAD_ATTRIBUTES = uintptr                      /* winnt.h:4175:36 */

type _QUOTA_LIMITS = struct {
	PagedPoolLimit        SIZE_T
	NonPagedPoolLimit     SIZE_T
	MinimumWorkingSetSize SIZE_T
	MaximumWorkingSetSize SIZE_T
	PagefileLimit         SIZE_T
	TimeLimit             LARGE_INTEGER
} /* winnt.h:4177:13 */

type QUOTA_LIMITS = _QUOTA_LIMITS /* winnt.h:4184:7 */
type PQUOTA_LIMITS = uintptr      /* winnt.h:4184:20 */

type _RATE_QUOTA_LIMIT = struct{ RateData DWORD } /* winnt.h:4192:13 */

type RATE_QUOTA_LIMIT = _RATE_QUOTA_LIMIT /* winnt.h:4198:7 */
type PRATE_QUOTA_LIMIT = uintptr          /* winnt.h:4198:25 */

type _QUOTA_LIMITS_EX = struct {
	PagedPoolLimit        SIZE_T
	NonPagedPoolLimit     SIZE_T
	MinimumWorkingSetSize SIZE_T
	MaximumWorkingSetSize SIZE_T
	PagefileLimit         SIZE_T
	TimeLimit             LARGE_INTEGER
	WorkingSetLimit       SIZE_T
	Reserved2             SIZE_T
	Reserved3             SIZE_T
	Reserved4             SIZE_T
	Flags                 DWORD
	CpuRateLimit          RATE_QUOTA_LIMIT
} /* winnt.h:4200:13 */

type QUOTA_LIMITS_EX = _QUOTA_LIMITS_EX /* winnt.h:4213:7 */
type PQUOTA_LIMITS_EX = uintptr         /* winnt.h:4213:23 */

type _IO_COUNTERS = struct {
	ReadOperationCount  ULONGLONG
	WriteOperationCount ULONGLONG
	OtherOperationCount ULONGLONG
	ReadTransferCount   ULONGLONG
	WriteTransferCount  ULONGLONG
	OtherTransferCount  ULONGLONG
} /* winnt.h:4215:13 */

type IO_COUNTERS = _IO_COUNTERS /* winnt.h:4222:7 */
type PIO_COUNTERS = uintptr     /* winnt.h:4223:25 */

type HARDWARE_COUNTER_TYPE = uint32   /* winnt.h:4231:7 */
type PHARDWARE_COUNTER_TYPE = uintptr /* winnt.h:4231:30 */

type PROCESS_MITIGATION_POLICY = uint32   /* winnt.h:4246:7 */
type PPROCESS_MITIGATION_POLICY = uintptr /* winnt.h:4246:33 */

type _PROCESS_MITIGATION_ASLR_POLICY = struct{ __0 struct{ Flags DWORD } } /* winnt.h:4248:13 */

type PROCESS_MITIGATION_ASLR_POLICY = _PROCESS_MITIGATION_ASLR_POLICY /* winnt.h:4259:7 */
type PPROCESS_MITIGATION_ASLR_POLICY = uintptr                        /* winnt.h:4259:38 */

type _PROCESS_MITIGATION_DEP_POLICY = struct {
	__0       struct{ Flags DWORD }
	Permanent BOOLEAN
	_         [3]byte
} /* winnt.h:4261:13 */

type PROCESS_MITIGATION_DEP_POLICY = _PROCESS_MITIGATION_DEP_POLICY /* winnt.h:4271:7 */
type PPROCESS_MITIGATION_DEP_POLICY = uintptr                       /* winnt.h:4271:37 */

type _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = struct{ __0 struct{ Flags DWORD } } /* winnt.h:4273:13 */

type PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY /* winnt.h:4282:7 */
type PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = uintptr                                       /* winnt.h:4282:53 */

type _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = struct{ __0 struct{ Flags DWORD } } /* winnt.h:4284:13 */

type PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY /* winnt.h:4292:7 */
type PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = uintptr                                       /* winnt.h:4292:53 */

type _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = struct{ __0 struct{ Flags DWORD } } /* winnt.h:4294:13 */

type PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY /* winnt.h:4302:7 */
type PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = uintptr                                           /* winnt.h:4302:57 */

type _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = struct{ __0 struct{ Flags DWORD } } /* winnt.h:4304:13 */

type PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY /* winnt.h:4314:7 */
type PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = uintptr                                      /* winnt.h:4314:53 */

type _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = struct{ __0 struct{ Flags DWORD } } /* winnt.h:4316:13 */

type PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY /* winnt.h:4326:7 */
type PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = uintptr                                    /* winnt.h:4326:51 */

type _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY = struct {
	__0 struct {
		Flags DWORD
		_     [4]byte
	}
} /* winnt.h:4328:13 */

type PROCESS_MITIGATION_DYNAMIC_CODE_POLICY = _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY /* winnt.h:4338:7 */
type PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY = uintptr                                /* winnt.h:4338:47 */

type _PROCESS_MITIGATION_FONT_DISABLE_POLICY = struct{ __0 struct{ Flags DWORD } } /* winnt.h:4340:13 */

type PROCESS_MITIGATION_FONT_DISABLE_POLICY = _PROCESS_MITIGATION_FONT_DISABLE_POLICY /* winnt.h:4349:7 */
type PPROCESS_MITIGATION_FONT_DISABLE_POLICY = uintptr                                /* winnt.h:4349:47 */

type _PROCESS_MITIGATION_IMAGE_LOAD_POLICY = struct{ __0 struct{ Flags DWORD } } /* winnt.h:4351:13 */

type PROCESS_MITIGATION_IMAGE_LOAD_POLICY = _PROCESS_MITIGATION_IMAGE_LOAD_POLICY /* winnt.h:4361:7 */
type PPROCESS_MITIGATION_IMAGE_LOAD_POLICY = uintptr                              /* winnt.h:4361:45 */

type _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = struct {
	TotalUserTime             LARGE_INTEGER
	TotalKernelTime           LARGE_INTEGER
	ThisPeriodTotalUserTime   LARGE_INTEGER
	ThisPeriodTotalKernelTime LARGE_INTEGER
	TotalPageFaultCount       DWORD
	TotalProcesses            DWORD
	ActiveProcesses           DWORD
	TotalTerminatedProcesses  DWORD
} /* winnt.h:4363:13 */

type JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION /* winnt.h:4372:7 */
type PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION = uintptr                                /* winnt.h:4372:46 */

type _JOBOBJECT_BASIC_LIMIT_INFORMATION = struct {
	PerProcessUserTimeLimit LARGE_INTEGER
	PerJobUserTimeLimit     LARGE_INTEGER
	LimitFlags              DWORD
	_                       [4]byte
	MinimumWorkingSetSize   SIZE_T
	MaximumWorkingSetSize   SIZE_T
	ActiveProcessLimit      DWORD
	_                       [4]byte
	Affinity                ULONG_PTR
	PriorityClass           DWORD
	SchedulingClass         DWORD
} /* winnt.h:4374:13 */

type JOBOBJECT_BASIC_LIMIT_INFORMATION = _JOBOBJECT_BASIC_LIMIT_INFORMATION /* winnt.h:4384:7 */
type PJOBOBJECT_BASIC_LIMIT_INFORMATION = uintptr                           /* winnt.h:4384:41 */

type _JOBOBJECT_EXTENDED_LIMIT_INFORMATION = struct {
	BasicLimitInformation JOBOBJECT_BASIC_LIMIT_INFORMATION
	IoInfo                IO_COUNTERS
	ProcessMemoryLimit    SIZE_T
	JobMemoryLimit        SIZE_T
	PeakProcessMemoryUsed SIZE_T
	PeakJobMemoryUsed     SIZE_T
} /* winnt.h:4386:13 */

type JOBOBJECT_EXTENDED_LIMIT_INFORMATION = _JOBOBJECT_EXTENDED_LIMIT_INFORMATION /* winnt.h:4393:7 */
type PJOBOBJECT_EXTENDED_LIMIT_INFORMATION = uintptr                              /* winnt.h:4393:44 */

type _JOBOBJECT_BASIC_PROCESS_ID_LIST = struct {
	NumberOfAssignedProcesses DWORD
	NumberOfProcessIdsInList  DWORD
	ProcessIdList             [1]ULONG_PTR
} /* winnt.h:4395:13 */

type JOBOBJECT_BASIC_PROCESS_ID_LIST = _JOBOBJECT_BASIC_PROCESS_ID_LIST /* winnt.h:4399:7 */
type PJOBOBJECT_BASIC_PROCESS_ID_LIST = uintptr                         /* winnt.h:4399:39 */

type _JOBOBJECT_BASIC_UI_RESTRICTIONS = struct{ UIRestrictionsClass DWORD } /* winnt.h:4401:13 */

type JOBOBJECT_BASIC_UI_RESTRICTIONS = _JOBOBJECT_BASIC_UI_RESTRICTIONS /* winnt.h:4403:7 */
type PJOBOBJECT_BASIC_UI_RESTRICTIONS = uintptr                         /* winnt.h:4403:39 */

type _JOBOBJECT_SECURITY_LIMIT_INFORMATION = struct {
	SecurityLimitFlags DWORD
	_                  [4]byte
	JobToken           HANDLE
	SidsToDisable      PTOKEN_GROUPS
	PrivilegesToDelete PTOKEN_PRIVILEGES
	RestrictedSids     PTOKEN_GROUPS
} /* winnt.h:4405:13 */

type JOBOBJECT_SECURITY_LIMIT_INFORMATION = _JOBOBJECT_SECURITY_LIMIT_INFORMATION /* winnt.h:4411:7 */
type PJOBOBJECT_SECURITY_LIMIT_INFORMATION = uintptr                              /* winnt.h:4411:44 */

type _JOBOBJECT_END_OF_JOB_TIME_INFORMATION = struct{ EndOfJobTimeAction DWORD } /* winnt.h:4413:13 */

type JOBOBJECT_END_OF_JOB_TIME_INFORMATION = _JOBOBJECT_END_OF_JOB_TIME_INFORMATION /* winnt.h:4415:7 */
type PJOBOBJECT_END_OF_JOB_TIME_INFORMATION = uintptr                               /* winnt.h:4415:45 */

type _JOBOBJECT_ASSOCIATE_COMPLETION_PORT = struct {
	CompletionKey  PVOID
	CompletionPort HANDLE
} /* winnt.h:4417:13 */

type JOBOBJECT_ASSOCIATE_COMPLETION_PORT = _JOBOBJECT_ASSOCIATE_COMPLETION_PORT /* winnt.h:4420:7 */
type PJOBOBJECT_ASSOCIATE_COMPLETION_PORT = uintptr                             /* winnt.h:4420:43 */

type _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = struct {
	BasicInfo JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
	IoInfo    IO_COUNTERS
} /* winnt.h:4422:13 */

type JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION /* winnt.h:4425:7 */
type PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = uintptr                                       /* winnt.h:4425:53 */

type _JOBOBJECT_JOBSET_INFORMATION = struct{ MemberLevel DWORD } /* winnt.h:4427:13 */

type JOBOBJECT_JOBSET_INFORMATION = _JOBOBJECT_JOBSET_INFORMATION /* winnt.h:4429:7 */
type PJOBOBJECT_JOBSET_INFORMATION = uintptr                      /* winnt.h:4429:36 */

type JOBOBJECT_RATE_CONTROL_TOLERANCE = uint32 /* winnt.h:4435:7 */

type JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = uint32 /* winnt.h:4441:7 */

type _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = struct {
	IoReadBytesLimit             DWORD64
	IoWriteBytesLimit            DWORD64
	PerJobUserTimeLimit          LARGE_INTEGER
	JobMemoryLimit               DWORD64
	RateControlTolerance         JOBOBJECT_RATE_CONTROL_TOLERANCE
	RateControlToleranceInterval JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
	LimitFlags                   DWORD
	_                            [4]byte
} /* winnt.h:4443:13 */

type JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION /* winnt.h:4451:7 */
type PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = uintptr                                  /* winnt.h:4451:48 */

type _JOBOBJECT_LIMIT_VIOLATION_INFORMATION = struct {
	LimitFlags                DWORD
	ViolationLimitFlags       DWORD
	IoReadBytes               DWORD64
	IoReadBytesLimit          DWORD64
	IoWriteBytes              DWORD64
	IoWriteBytesLimit         DWORD64
	PerJobUserTime            LARGE_INTEGER
	PerJobUserTimeLimit       LARGE_INTEGER
	JobMemory                 DWORD64
	JobMemoryLimit            DWORD64
	RateControlTolerance      JOBOBJECT_RATE_CONTROL_TOLERANCE
	RateControlToleranceLimit JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
} /* winnt.h:4453:13 */

type JOBOBJECT_LIMIT_VIOLATION_INFORMATION = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION /* winnt.h:4466:7 */
type PJOBOBJECT_LIMIT_VIOLATION_INFORMATION = uintptr                               /* winnt.h:4466:45 */

type _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = struct {
	ControlFlags DWORD
	__4          struct{ CpuRate DWORD }
} /* winnt.h:4468:13 */

type JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION /* winnt.h:4474:7 */
type PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION = uintptr                                /* winnt.h:4474:46 */

type JOBOBJECTINFOCLASS = uint32 /* winnt.h:4578:7 */

type FIRMWARE_TYPE = uint32   /* winnt.h:4585:7 */
type PFIRMWARE_TYPE = uintptr /* winnt.h:4585:21 */

type LOGICAL_PROCESSOR_RELATIONSHIP = uint32 /* winnt.h:4608:7 */

type PROCESSOR_CACHE_TYPE = uint32 /* winnt.h:4614:7 */

type _CACHE_DESCRIPTOR = struct {
	Level         BYTE
	Associativity BYTE
	LineSize      WORD
	Size          DWORD
	Type          PROCESSOR_CACHE_TYPE
} /* winnt.h:4618:13 */

type CACHE_DESCRIPTOR = _CACHE_DESCRIPTOR /* winnt.h:4624:7 */
type PCACHE_DESCRIPTOR = uintptr          /* winnt.h:4624:24 */

type _SYSTEM_LOGICAL_PROCESSOR_INFORMATION = struct {
	ProcessorMask ULONG_PTR
	Relationship  LOGICAL_PROCESSOR_RELATIONSHIP
	_             [4]byte
	__16          struct {
		_             [0]uint64
		ProcessorCore struct{ Flags BYTE }
		_             [15]byte
	}
} /* winnt.h:4626:13 */

type SYSTEM_LOGICAL_PROCESSOR_INFORMATION = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION /* winnt.h:4639:7 */
type PSYSTEM_LOGICAL_PROCESSOR_INFORMATION = uintptr                              /* winnt.h:4639:44 */

type _PROCESSOR_RELATIONSHIP = struct {
	Flags      BYTE
	Reserved   [21]BYTE
	GroupCount WORD
	GroupMask  [1]GROUP_AFFINITY
} /* winnt.h:4641:13 */

type PROCESSOR_RELATIONSHIP = _PROCESSOR_RELATIONSHIP /* winnt.h:4646:7 */
type PPROCESSOR_RELATIONSHIP = uintptr                /* winnt.h:4646:30 */

type _NUMA_NODE_RELATIONSHIP = struct {
	NodeNumber DWORD
	Reserved   [20]BYTE
	GroupMask  GROUP_AFFINITY
} /* winnt.h:4648:13 */

type NUMA_NODE_RELATIONSHIP = _NUMA_NODE_RELATIONSHIP /* winnt.h:4652:7 */
type PNUMA_NODE_RELATIONSHIP = uintptr                /* winnt.h:4652:30 */

type _CACHE_RELATIONSHIP = struct {
	Level         BYTE
	Associativity BYTE
	LineSize      WORD
	CacheSize     DWORD
	Type          PROCESSOR_CACHE_TYPE
	Reserved      [20]BYTE
	GroupMask     GROUP_AFFINITY
} /* winnt.h:4654:13 */

type CACHE_RELATIONSHIP = _CACHE_RELATIONSHIP /* winnt.h:4662:7 */
type PCACHE_RELATIONSHIP = uintptr            /* winnt.h:4662:26 */

type _PROCESSOR_GROUP_INFO = struct {
	MaximumProcessorCount BYTE
	ActiveProcessorCount  BYTE
	Reserved              [38]BYTE
	ActiveProcessorMask   KAFFINITY
} /* winnt.h:4664:13 */

type PROCESSOR_GROUP_INFO = _PROCESSOR_GROUP_INFO /* winnt.h:4669:7 */
type PPROCESSOR_GROUP_INFO = uintptr              /* winnt.h:4669:28 */

type _GROUP_RELATIONSHIP = struct {
	MaximumGroupCount WORD
	ActiveGroupCount  WORD
	Reserved          [20]BYTE
	GroupInfo         [1]PROCESSOR_GROUP_INFO
} /* winnt.h:4671:13 */

type GROUP_RELATIONSHIP = _GROUP_RELATIONSHIP /* winnt.h:4676:7 */
type PGROUP_RELATIONSHIP = uintptr            /* winnt.h:4676:26 */

type _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = struct {
	Relationship LOGICAL_PROCESSOR_RELATIONSHIP
	Size         DWORD
	__8          struct {
		Processor PROCESSOR_RELATIONSHIP
		_         [32]byte
	}
} /* winnt.h:4678:5 */

type SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX /* winnt.h:4689:61 */
type PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = uintptr                                 /* winnt.h:4689:101 */

type _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = struct{ CycleTime DWORD64 } /* winnt.h:4691:13 */

type SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION /* winnt.h:4693:7 */
type PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = uintptr                                 /* winnt.h:4693:47 */

type _XSTATE_FEATURE = struct {
	Offset DWORD
	Size   DWORD
} /* winnt.h:4785:13 */

type XSTATE_FEATURE = _XSTATE_FEATURE /* winnt.h:4788:7 */
type PXSTATE_FEATURE = uintptr        /* winnt.h:4788:22 */

type _XSTATE_CONFIGURATION = struct {
	EnabledFeatures         DWORD64
	EnabledVolatileFeatures DWORD64
	Size                    DWORD
	OptimizedSave           uint8 /* DWORD OptimizedSave: 1 */
	_                       [3]byte
	Features                [64]XSTATE_FEATURE
} /* winnt.h:4790:13 */

type XSTATE_CONFIGURATION = _XSTATE_CONFIGURATION /* winnt.h:4796:7 */
type PXSTATE_CONFIGURATION = uintptr              /* winnt.h:4796:28 */

type _MEMORY_BASIC_INFORMATION = struct {
	BaseAddress       PVOID
	AllocationBase    PVOID
	AllocationProtect DWORD
	_                 [4]byte
	RegionSize        SIZE_T
	State             DWORD
	Protect           DWORD
	Type              DWORD
	_                 [4]byte
} /* winnt.h:4798:13 */

type MEMORY_BASIC_INFORMATION = _MEMORY_BASIC_INFORMATION /* winnt.h:4806:7 */
type PMEMORY_BASIC_INFORMATION = uintptr                  /* winnt.h:4806:32 */

type _MEMORY_BASIC_INFORMATION32 = struct {
	BaseAddress       DWORD
	AllocationBase    DWORD
	AllocationProtect DWORD
	RegionSize        DWORD
	State             DWORD
	Protect           DWORD
	Type              DWORD
} /* winnt.h:4808:13 */

type MEMORY_BASIC_INFORMATION32 = _MEMORY_BASIC_INFORMATION32 /* winnt.h:4816:7 */
type PMEMORY_BASIC_INFORMATION32 = uintptr                    /* winnt.h:4816:34 */

type _MEMORY_BASIC_INFORMATION64 = struct {
	BaseAddress       ULONGLONG
	AllocationBase    ULONGLONG
	AllocationProtect DWORD
	__alignment1      DWORD
	RegionSize        ULONGLONG
	State             DWORD
	Protect           DWORD
	Type              DWORD
	__alignment2      DWORD
} /* winnt.h:4818:13 */

type MEMORY_BASIC_INFORMATION64 = _MEMORY_BASIC_INFORMATION64 /* winnt.h:4828:7 */
type PMEMORY_BASIC_INFORMATION64 = uintptr                    /* winnt.h:4828:34 */

type _CFG_CALL_TARGET_INFO = struct {
	Offset ULONG_PTR
	Flags  ULONG_PTR
} /* winnt.h:4834:11 */

type CFG_CALL_TARGET_INFO = _CFG_CALL_TARGET_INFO /* winnt.h:4837:5 */
type PCFG_CALL_TARGET_INFO = uintptr              /* winnt.h:4837:27 */

type _MEM_ADDRESS_REQUIREMENTS = struct {
	LowestStartingAddress PVOID
	HighestEndingAddress  PVOID
	Alignment             SIZE_T
} /* winnt.h:4896:11 */

type MEM_ADDRESS_REQUIREMENTS = _MEM_ADDRESS_REQUIREMENTS /* winnt.h:4900:5 */
type PMEM_ADDRESS_REQUIREMENTS = uintptr                  /* winnt.h:4900:31 */

type MEM_EXTENDED_PARAMETER_TYPE = uint32   /* winnt.h:4916:5 */
type PMEM_EXTENDED_PARAMETER_TYPE = uintptr /* winnt.h:4916:34 */

type MEM_EXTENDED_PARAMETER1 = struct {
	__0 struct {
		_    [0]uint64
		Type uint64 /* DWORD64 Type: 8, DWORD64 Reserved: 56 */
	}
	__8 struct{ ULong64 DWORD64 }
} /* winnt.h:4920:11 */

type MEM_EXTENDED_PARAMETER = MEM_EXTENDED_PARAMETER1 /* winnt.h:4932:5 */
type PMEM_EXTENDED_PARAMETER = uintptr                /* winnt.h:4932:29 */

type MEM_SECTION_EXTENDED_PARAMETER_TYPE = uint32   /* winnt.h:4951:5 */
type PMEM_SECTION_EXTENDED_PARAMETER_TYPE = uintptr /* winnt.h:4951:42 */

type FILE_ID_1281 = struct{ Identifier [16]BYTE } /* winnt.h:5069:13 */

type FILE_ID_128 = FILE_ID_1281 /* winnt.h:5071:7 */
type PFILE_ID_128 = uintptr     /* winnt.h:5071:20 */

type _FILE_NOTIFY_INFORMATION = struct {
	NextEntryOffset DWORD
	Action          DWORD
	FileNameLength  DWORD
	FileName        [1]WCHAR
	_               [2]byte
} /* winnt.h:5073:13 */

type FILE_NOTIFY_INFORMATION = _FILE_NOTIFY_INFORMATION /* winnt.h:5078:7 */
type PFILE_NOTIFY_INFORMATION = uintptr                 /* winnt.h:5078:31 */

type _FILE_SEGMENT_ELEMENT = struct{ Buffer PVOID64 } /* winnt.h:5080:13 */

type FILE_SEGMENT_ELEMENT = _FILE_SEGMENT_ELEMENT /* winnt.h:5083:7 */
type PFILE_SEGMENT_ELEMENT = uintptr              /* winnt.h:5083:28 */

type _REPARSE_GUID_DATA_BUFFER = struct {
	ReparseTag           DWORD
	ReparseDataLength    WORD
	Reserved             WORD
	ReparseGuid          GUID
	GenericReparseBuffer struct{ DataBuffer [1]BYTE }
	_                    [3]byte
} /* winnt.h:5085:13 */

type REPARSE_GUID_DATA_BUFFER = _REPARSE_GUID_DATA_BUFFER /* winnt.h:5093:7 */
type PREPARSE_GUID_DATA_BUFFER = uintptr                  /* winnt.h:5093:32 */

type SYSTEM_POWER_STATE = uint32   /* winnt.h:5348:5 */
type PSYSTEM_POWER_STATE = uintptr /* winnt.h:5348:24 */

type POWER_ACTION = uint32   /* winnt.h:5356:5 */
type PPOWER_ACTION = uintptr /* winnt.h:5356:18 */

type DEVICE_POWER_STATE = uint32   /* winnt.h:5361:5 */
type PDEVICE_POWER_STATE = uintptr /* winnt.h:5361:24 */

type MONITOR_DISPLAY_STATE = uint32   /* winnt.h:5365:5 */
type PMONITOR_DISPLAY_STATE = uintptr /* winnt.h:5365:28 */

type USER_ACTIVITY_PRESENCE = uint32   /* winnt.h:5373:5 */
type PUSER_ACTIVITY_PRESENCE = uintptr /* winnt.h:5373:28 */

type EXECUTION_STATE = DWORD    /* winnt.h:5381:17 */
type PEXECUTION_STATE = uintptr /* winnt.h:5381:34 */

type LATENCY_TIME = uint32 /* winnt.h:5385:5 */

type POWER_REQUEST_TYPE = uint32   /* winnt.h:5403:5 */
type PPOWER_REQUEST_TYPE = uintptr /* winnt.h:5403:24 */

type CM_Power_Data_s = struct {
	PD_Size                 DWORD
	PD_MostRecentPowerState DEVICE_POWER_STATE
	PD_Capabilities         DWORD
	PD_D1Latency            DWORD
	PD_D2Latency            DWORD
	PD_D3Latency            DWORD
	PD_PowerStateMapping    [7]DEVICE_POWER_STATE
	PD_DeepestSystemWake    SYSTEM_POWER_STATE
} /* winnt.h:5415:13 */

type CM_POWER_DATA = CM_Power_Data_s /* winnt.h:5424:7 */
type PCM_POWER_DATA = uintptr        /* winnt.h:5424:21 */

type POWER_INFORMATION_LEVEL = uint32 /* winnt.h:5508:7 */

type POWER_USER_PRESENCE_TYPE = uint32   /* winnt.h:5514:7 */
type PPOWER_USER_PRESENCE_TYPE = uintptr /* winnt.h:5514:32 */

type _POWER_USER_PRESENCE = struct{ UserPresence POWER_USER_PRESENCE_TYPE } /* winnt.h:5516:13 */

type POWER_USER_PRESENCE = _POWER_USER_PRESENCE /* winnt.h:5518:7 */
type PPOWER_USER_PRESENCE = uintptr             /* winnt.h:5518:27 */

type _POWER_SESSION_CONNECT = struct {
	Connected BOOLEAN
	Console   BOOLEAN
} /* winnt.h:5520:13 */

type POWER_SESSION_CONNECT = _POWER_SESSION_CONNECT /* winnt.h:5523:7 */
type PPOWER_SESSION_CONNECT = uintptr               /* winnt.h:5523:29 */

type _POWER_SESSION_TIMEOUTS = struct {
	InputTimeout   DWORD
	DisplayTimeout DWORD
} /* winnt.h:5525:13 */

type POWER_SESSION_TIMEOUTS = _POWER_SESSION_TIMEOUTS /* winnt.h:5528:7 */
type PPOWER_SESSION_TIMEOUTS = uintptr                /* winnt.h:5528:30 */

type _POWER_SESSION_RIT_STATE = struct {
	Active        BOOLEAN
	_             [3]byte
	LastInputTime DWORD
} /* winnt.h:5530:13 */

type POWER_SESSION_RIT_STATE = _POWER_SESSION_RIT_STATE /* winnt.h:5533:7 */
type PPOWER_SESSION_RIT_STATE = uintptr                 /* winnt.h:5533:31 */

type _POWER_SESSION_WINLOGON = struct {
	SessionId DWORD
	Console   BOOLEAN
	Locked    BOOLEAN
	_         [2]byte
} /* winnt.h:5535:13 */

type POWER_SESSION_WINLOGON = _POWER_SESSION_WINLOGON /* winnt.h:5539:7 */
type PPOWER_SESSION_WINLOGON = uintptr                /* winnt.h:5539:30 */

type _POWER_IDLE_RESILIENCY = struct {
	CoalescingTimeout    DWORD
	IdleResiliencyPeriod DWORD
} /* winnt.h:5541:13 */

type POWER_IDLE_RESILIENCY = _POWER_IDLE_RESILIENCY /* winnt.h:5544:7 */
type PPOWER_IDLE_RESILIENCY = uintptr               /* winnt.h:5544:29 */

type POWER_MONITOR_REQUEST_REASON = uint32 /* winnt.h:5562:7 */

type _POWER_MONITOR_INVOCATION = struct {
	On            BOOLEAN
	Console       BOOLEAN
	_             [2]byte
	RequestReason POWER_MONITOR_REQUEST_REASON
} /* winnt.h:5564:13 */

type POWER_MONITOR_INVOCATION = _POWER_MONITOR_INVOCATION /* winnt.h:5568:7 */
type PPOWER_MONITOR_INVOCATION = uintptr                  /* winnt.h:5568:32 */

type _RESUME_PERFORMANCE = struct {
	PostTimeMs              DWORD
	_                       [4]byte
	TotalResumeTimeMs       ULONGLONG
	ResumeCompleteTimestamp ULONGLONG
} /* winnt.h:5570:13 */

type RESUME_PERFORMANCE = _RESUME_PERFORMANCE /* winnt.h:5574:7 */
type PRESUME_PERFORMANCE = uintptr            /* winnt.h:5574:26 */

type SYSTEM_POWER_CONDITION = uint32 /* winnt.h:5581:7 */

type SET_POWER_SETTING_VALUE = struct {
	Version        DWORD
	Guid           GUID
	PowerCondition SYSTEM_POWER_CONDITION
	DataLength     DWORD
	Data           [1]BYTE
	_              [3]byte
}                                       /* winnt.h:5589:7 */
type PSET_POWER_SETTING_VALUE = uintptr /* winnt.h:5589:31 */

type NOTIFY_USER_POWER_SETTING = struct{ Guid GUID } /* winnt.h:5595:7 */
type PNOTIFY_USER_POWER_SETTING = uintptr            /* winnt.h:5595:33 */

type _APPLICATIONLAUNCH_SETTING_VALUE = struct {
	ActivationTime   LARGE_INTEGER
	Flags            DWORD
	ButtonInstanceID DWORD
} /* winnt.h:5597:13 */

type APPLICATIONLAUNCH_SETTING_VALUE = _APPLICATIONLAUNCH_SETTING_VALUE /* winnt.h:5601:7 */
type PAPPLICATIONLAUNCH_SETTING_VALUE = uintptr                         /* winnt.h:5601:39 */

type POWER_PLATFORM_ROLE = uint32   /* winnt.h:5614:7 */
type PPOWER_PLATFORM_ROLE = uintptr /* winnt.h:5614:27 */

type _POWER_PLATFORM_INFORMATION = struct{ AoAc BOOLEAN } /* winnt.h:5616:13 */

type POWER_PLATFORM_INFORMATION = _POWER_PLATFORM_INFORMATION /* winnt.h:5618:7 */
type PPOWER_PLATFORM_INFORMATION = uintptr                    /* winnt.h:5618:34 */

type BATTERY_REPORTING_SCALE = struct {
	Granularity DWORD
	Capacity    DWORD
}                                       /* winnt.h:5637:7 */
type PBATTERY_REPORTING_SCALE = uintptr /* winnt.h:5637:31 */

type PPM_WMI_LEGACY_PERFSTATE = struct {
	Frequency        DWORD
	Flags            DWORD
	PercentFrequency DWORD
}                                        /* winnt.h:5643:7 */
type PPPM_WMI_LEGACY_PERFSTATE = uintptr /* winnt.h:5643:32 */

type PPM_WMI_IDLE_STATE = struct {
	Latency        DWORD
	Power          DWORD
	TimeCheck      DWORD
	PromotePercent BYTE
	DemotePercent  BYTE
	StateType      BYTE
	Reserved       BYTE
	StateFlags     DWORD
	Context        DWORD
	IdleHandler    DWORD
	Reserved1      DWORD
}                                  /* winnt.h:5657:7 */
type PPPM_WMI_IDLE_STATE = uintptr /* winnt.h:5657:26 */

type PPM_WMI_IDLE_STATES = struct {
	Type             DWORD
	Count            DWORD
	TargetState      DWORD
	OldState         DWORD
	TargetProcessors DWORD64
	State            [1]PPM_WMI_IDLE_STATE
}                                   /* winnt.h:5666:7 */
type PPPM_WMI_IDLE_STATES = uintptr /* winnt.h:5666:27 */

type PPM_WMI_IDLE_STATES_EX = struct {
	Type             DWORD
	Count            DWORD
	TargetState      DWORD
	OldState         DWORD
	TargetProcessors PVOID
	State            [1]PPM_WMI_IDLE_STATE
}                                      /* winnt.h:5675:7 */
type PPPM_WMI_IDLE_STATES_EX = uintptr /* winnt.h:5675:30 */

type PPM_WMI_PERF_STATE = struct {
	Frequency        DWORD
	Power            DWORD
	PercentFrequency BYTE
	IncreaseLevel    BYTE
	DecreaseLevel    BYTE
	Type             BYTE
	IncreaseTime     DWORD
	DecreaseTime     DWORD
	_                [4]byte
	Control          DWORD64
	Status           DWORD64
	HitCount         DWORD
	Reserved1        DWORD
	Reserved2        DWORD64
	Reserved3        DWORD64
}                                  /* winnt.h:5692:7 */
type PPPM_WMI_PERF_STATE = uintptr /* winnt.h:5692:26 */

type PPM_WMI_PERF_STATES = struct {
	Count             DWORD
	MaxFrequency      DWORD
	CurrentState      DWORD
	MaxPerfState      DWORD
	MinPerfState      DWORD
	LowestPerfState   DWORD
	ThermalConstraint DWORD
	BusyAdjThreshold  BYTE
	PolicyType        BYTE
	Type              BYTE
	Reserved          BYTE
	TimerInterval     DWORD
	_                 [4]byte
	TargetProcessors  DWORD64
	PStateHandler     DWORD
	PStateContext     DWORD
	TStateHandler     DWORD
	TStateContext     DWORD
	FeedbackHandler   DWORD
	Reserved1         DWORD
	Reserved2         DWORD64
	State             [1]PPM_WMI_PERF_STATE
}                                   /* winnt.h:5716:7 */
type PPPM_WMI_PERF_STATES = uintptr /* winnt.h:5716:27 */

type PPM_WMI_PERF_STATES_EX = struct {
	Count             DWORD
	MaxFrequency      DWORD
	CurrentState      DWORD
	MaxPerfState      DWORD
	MinPerfState      DWORD
	LowestPerfState   DWORD
	ThermalConstraint DWORD
	BusyAdjThreshold  BYTE
	PolicyType        BYTE
	Type              BYTE
	Reserved          BYTE
	TimerInterval     DWORD
	_                 [4]byte
	TargetProcessors  PVOID
	PStateHandler     DWORD
	PStateContext     DWORD
	TStateHandler     DWORD
	TStateContext     DWORD
	FeedbackHandler   DWORD
	Reserved1         DWORD
	Reserved2         DWORD64
	State             [1]PPM_WMI_PERF_STATE
}                                      /* winnt.h:5740:7 */
type PPPM_WMI_PERF_STATES_EX = uintptr /* winnt.h:5740:30 */

type PPM_IDLE_STATE_ACCOUNTING = struct {
	IdleTransitions    DWORD
	FailedTransitions  DWORD
	InvalidBucketIndex DWORD
	_                  [4]byte
	TotalTime          DWORD64
	IdleTimeBuckets    [6]DWORD
}                                         /* winnt.h:5751:7 */
type PPPM_IDLE_STATE_ACCOUNTING = uintptr /* winnt.h:5751:33 */

type PPM_IDLE_ACCOUNTING = struct {
	StateCount       DWORD
	TotalTransitions DWORD
	ResetCount       DWORD
	_                [4]byte
	StartTime        DWORD64
	State            [1]PPM_IDLE_STATE_ACCOUNTING
}                                   /* winnt.h:5759:7 */
type PPPM_IDLE_ACCOUNTING = uintptr /* winnt.h:5759:27 */

type PPM_IDLE_STATE_BUCKET_EX = struct {
	TotalTimeUs DWORD64
	MinTimeUs   DWORD
	MaxTimeUs   DWORD
	Count       DWORD
	_           [4]byte
}                                        /* winnt.h:5766:7 */
type PPPM_IDLE_STATE_BUCKET_EX = uintptr /* winnt.h:5766:32 */

type PPM_IDLE_STATE_ACCOUNTING_EX = struct {
	TotalTime            DWORD64
	IdleTransitions      DWORD
	FailedTransitions    DWORD
	InvalidBucketIndex   DWORD
	MinTimeUs            DWORD
	MaxTimeUs            DWORD
	CancelledTransitions DWORD
	IdleTimeBuckets      [16]PPM_IDLE_STATE_BUCKET_EX
}                                            /* winnt.h:5777:7 */
type PPPM_IDLE_STATE_ACCOUNTING_EX = uintptr /* winnt.h:5777:36 */

type PPM_IDLE_ACCOUNTING_EX = struct {
	StateCount       DWORD
	TotalTransitions DWORD
	ResetCount       DWORD
	AbortCount       DWORD
	StartTime        DWORD64
	State            [1]PPM_IDLE_STATE_ACCOUNTING_EX
}                                      /* winnt.h:5786:7 */
type PPPM_IDLE_ACCOUNTING_EX = uintptr /* winnt.h:5786:30 */

type PPM_PERFSTATE_EVENT = struct {
	State     DWORD
	Status    DWORD
	Latency   DWORD
	Speed     DWORD
	Processor DWORD
}                                   /* winnt.h:5830:7 */
type PPPM_PERFSTATE_EVENT = uintptr /* winnt.h:5830:27 */

type PPM_PERFSTATE_DOMAIN_EVENT = struct {
	State      DWORD
	Latency    DWORD
	Speed      DWORD
	_          [4]byte
	Processors DWORD64
}                                          /* winnt.h:5837:7 */
type PPPM_PERFSTATE_DOMAIN_EVENT = uintptr /* winnt.h:5837:34 */

type PPM_IDLESTATE_EVENT = struct {
	NewState   DWORD
	OldState   DWORD
	Processors DWORD64
}                                   /* winnt.h:5843:7 */
type PPPM_IDLESTATE_EVENT = uintptr /* winnt.h:5843:27 */

type PPM_THERMALCHANGE_EVENT = struct {
	ThermalConstraint DWORD
	_                 [4]byte
	Processors        DWORD64
}                                       /* winnt.h:5848:7 */
type PPPM_THERMALCHANGE_EVENT = uintptr /* winnt.h:5848:31 */
type PPM_THERMAL_POLICY_EVENT = struct {
	Mode       BYTE
	_          [7]byte
	Processors DWORD64
}                                        /* winnt.h:5852:7 */
type PPPM_THERMAL_POLICY_EVENT = uintptr /* winnt.h:5852:32 */

type POWER_ACTION_POLICY = struct {
	Action    POWER_ACTION
	Flags     DWORD
	EventCode DWORD
}                                   /* winnt.h:5869:7 */
type PPOWER_ACTION_POLICY = uintptr /* winnt.h:5869:27 */

type PROCESSOR_IDLESTATE_INFO = struct {
	TimeCheck      DWORD
	DemotePercent  BYTE
	PromotePercent BYTE
	Spare          [2]BYTE
}                                        /* winnt.h:5904:7 */
type PPROCESSOR_IDLESTATE_INFO = uintptr /* winnt.h:5904:32 */

type SYSTEM_POWER_LEVEL = struct {
	Enable         BOOLEAN
	Spare          [3]BYTE
	BatteryLevel   DWORD
	PowerPolicy    POWER_ACTION_POLICY
	MinSystemState SYSTEM_POWER_STATE
}                                  /* winnt.h:5912:7 */
type PSYSTEM_POWER_LEVEL = uintptr /* winnt.h:5912:26 */

type _SYSTEM_POWER_POLICY = struct {
	Revision                    DWORD
	PowerButton                 POWER_ACTION_POLICY
	SleepButton                 POWER_ACTION_POLICY
	LidClose                    POWER_ACTION_POLICY
	LidOpenWake                 SYSTEM_POWER_STATE
	Reserved                    DWORD
	Idle                        POWER_ACTION_POLICY
	IdleTimeout                 DWORD
	IdleSensitivity             BYTE
	DynamicThrottle             BYTE
	Spare2                      [2]BYTE
	MinSleep                    SYSTEM_POWER_STATE
	MaxSleep                    SYSTEM_POWER_STATE
	ReducedLatencySleep         SYSTEM_POWER_STATE
	WinLogonFlags               DWORD
	Spare3                      DWORD
	DozeS4Timeout               DWORD
	BroadcastCapacityResolution DWORD
	DischargePolicy             [4]SYSTEM_POWER_LEVEL
	VideoTimeout                DWORD
	VideoDimDisplay             BOOLEAN
	_                           [3]byte
	VideoReserved               [3]DWORD
	SpindownTimeout             DWORD
	OptimizeForPower            BOOLEAN
	FanThrottleTolerance        BYTE
	ForcedThrottle              BYTE
	MinThrottle                 BYTE
	OverThrottled               POWER_ACTION_POLICY
} /* winnt.h:5914:13 */

type SYSTEM_POWER_POLICY = _SYSTEM_POWER_POLICY /* winnt.h:5943:7 */
type PSYSTEM_POWER_POLICY = uintptr             /* winnt.h:5943:27 */

type PROCESSOR_IDLESTATE_POLICY = struct {
	Revision    WORD
	Flags       struct{ AsWORD WORD }
	PolicyCount DWORD
	Policy      [3]PROCESSOR_IDLESTATE_INFO
}                                          /* winnt.h:5963:7 */
type PPROCESSOR_IDLESTATE_POLICY = uintptr /* winnt.h:5963:34 */

type _PROCESSOR_POWER_POLICY_INFO = struct {
	TimeCheck      DWORD
	DemoteLimit    DWORD
	PromoteLimit   DWORD
	DemotePercent  BYTE
	PromotePercent BYTE
	Spare          [2]BYTE
	AllowDemotion  uint32 /* DWORD AllowDemotion: 1, DWORD AllowPromotion: 1, DWORD Reserved: 30 */
} /* winnt.h:5965:13 */

type PROCESSOR_POWER_POLICY_INFO = _PROCESSOR_POWER_POLICY_INFO /* winnt.h:5975:7 */
type PPROCESSOR_POWER_POLICY_INFO = uintptr                     /* winnt.h:5975:35 */

type _PROCESSOR_POWER_POLICY = struct {
	Revision        DWORD
	DynamicThrottle BYTE
	Spare           [3]BYTE
	DisableCStates  uint32 /* DWORD DisableCStates: 1, DWORD Reserved: 31 */
	_               [4]byte
	PolicyCount     DWORD
	Policy          [3]PROCESSOR_POWER_POLICY_INFO
} /* winnt.h:5977:13 */

type PROCESSOR_POWER_POLICY = _PROCESSOR_POWER_POLICY /* winnt.h:5985:7 */
type PPROCESSOR_POWER_POLICY = uintptr                /* winnt.h:5985:30 */

type PROCESSOR_PERFSTATE_POLICY = struct {
	Revision         DWORD
	MaxThrottle      BYTE
	MinThrottle      BYTE
	BusyAdjThreshold BYTE
	__7              struct{ Spare BYTE }
	TimeCheck        DWORD
	IncreaseTime     DWORD
	DecreaseTime     DWORD
	IncreasePercent  DWORD
	DecreasePercent  DWORD
}                                          /* winnt.h:6009:7 */
type PPROCESSOR_PERFSTATE_POLICY = uintptr /* winnt.h:6009:34 */

type _ADMINISTRATOR_POWER_POLICY = struct {
	MinSleep           SYSTEM_POWER_STATE
	MaxSleep           SYSTEM_POWER_STATE
	MinVideoTimeout    DWORD
	MaxVideoTimeout    DWORD
	MinSpindownTimeout DWORD
	MaxSpindownTimeout DWORD
} /* winnt.h:6011:13 */

type ADMINISTRATOR_POWER_POLICY = _ADMINISTRATOR_POWER_POLICY /* winnt.h:6018:7 */
type PADMINISTRATOR_POWER_POLICY = uintptr                    /* winnt.h:6018:34 */

type SYSTEM_POWER_CAPABILITIES = struct {
	PowerButtonPresent     BOOLEAN
	SleepButtonPresent     BOOLEAN
	LidPresent             BOOLEAN
	SystemS1               BOOLEAN
	SystemS2               BOOLEAN
	SystemS3               BOOLEAN
	SystemS4               BOOLEAN
	SystemS5               BOOLEAN
	HiberFilePresent       BOOLEAN
	FullWake               BOOLEAN
	VideoDimPresent        BOOLEAN
	ApmPresent             BOOLEAN
	UpsPresent             BOOLEAN
	ThermalControl         BOOLEAN
	ProcessorThrottle      BOOLEAN
	ProcessorMinThrottle   BYTE
	ProcessorMaxThrottle   BYTE
	FastSystemS4           BOOLEAN
	spare2                 [3]BYTE
	DiskSpinDown           BOOLEAN
	spare3                 [8]BYTE
	SystemBatteriesPresent BOOLEAN
	BatteriesAreShortTerm  BOOLEAN
	BatteryScale           [3]BATTERY_REPORTING_SCALE
	AcOnLineWake           SYSTEM_POWER_STATE
	SoftLidWake            SYSTEM_POWER_STATE
	RtcWake                SYSTEM_POWER_STATE
	MinDeviceWakeState     SYSTEM_POWER_STATE
	DefaultLowLatencyWake  SYSTEM_POWER_STATE
}                                         /* winnt.h:6050:7 */
type PSYSTEM_POWER_CAPABILITIES = uintptr /* winnt.h:6050:33 */

type SYSTEM_BATTERY_STATE = struct {
	AcOnLine          BOOLEAN
	BatteryPresent    BOOLEAN
	Charging          BOOLEAN
	Discharging       BOOLEAN
	Spare1            [4]BOOLEAN
	MaxCapacity       DWORD
	RemainingCapacity DWORD
	Rate              DWORD
	EstimatedTime     DWORD
	DefaultAlert1     DWORD
	DefaultAlert2     DWORD
}                                    /* winnt.h:6064:7 */
type PSYSTEM_BATTERY_STATE = uintptr /* winnt.h:6064:28 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _IMAGE_DOS_HEADER = struct {
	e_magic    WORD
	e_cblp     WORD
	e_cp       WORD
	e_crlc     WORD
	e_cparhdr  WORD
	e_minalloc WORD
	e_maxalloc WORD
	e_ss       WORD
	e_sp       WORD
	e_csum     WORD
	e_ip       WORD
	e_cs       WORD
	e_lfarlc   WORD
	e_ovno     WORD
	e_res      [4]WORD
	e_oemid    WORD
	e_oeminfo  WORD
	e_res2     [10]WORD
	e_lfanew   LONG
} /* winnt.h:6076:13 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type IMAGE_DOS_HEADER = _IMAGE_DOS_HEADER /* winnt.h:6096:7 */
type PIMAGE_DOS_HEADER = uintptr          /* winnt.h:6096:24 */

type _IMAGE_OS2_HEADER = struct {
	ne_magic        WORD
	ne_ver          CHAR
	ne_rev          CHAR
	ne_enttab       WORD
	ne_cbenttab     WORD
	ne_crc          LONG
	ne_flags        WORD
	ne_autodata     WORD
	ne_heap         WORD
	ne_stack        WORD
	ne_csip         LONG
	ne_sssp         LONG
	ne_cseg         WORD
	ne_cmod         WORD
	ne_cbnrestab    WORD
	ne_segtab       WORD
	ne_rsrctab      WORD
	ne_restab       WORD
	ne_modtab       WORD
	ne_imptab       WORD
	ne_nrestab      LONG
	ne_cmovent      WORD
	ne_align        WORD
	ne_cres         WORD
	ne_exetyp       BYTE
	ne_flagsothers  BYTE
	ne_pretthunks   WORD
	ne_psegrefbytes WORD
	ne_swaparea     WORD
	ne_expver       WORD
} /* winnt.h:6098:13 */

type IMAGE_OS2_HEADER = _IMAGE_OS2_HEADER /* winnt.h:6129:7 */
type PIMAGE_OS2_HEADER = uintptr          /* winnt.h:6129:24 */

type _IMAGE_VXD_HEADER = struct {
	e32_magic        WORD
	e32_border       BYTE
	e32_worder       BYTE
	e32_level        DWORD
	e32_cpu          WORD
	e32_os           WORD
	e32_ver          DWORD
	e32_mflags       DWORD
	e32_mpages       DWORD
	e32_startobj     DWORD
	e32_eip          DWORD
	e32_stackobj     DWORD
	e32_esp          DWORD
	e32_pagesize     DWORD
	e32_lastpagesize DWORD
	e32_fixupsize    DWORD
	e32_fixupsum     DWORD
	e32_ldrsize      DWORD
	e32_ldrsum       DWORD
	e32_objtab       DWORD
	e32_objcnt       DWORD
	e32_objmap       DWORD
	e32_itermap      DWORD
	e32_rsrctab      DWORD
	e32_rsrccnt      DWORD
	e32_restab       DWORD
	e32_enttab       DWORD
	e32_dirtab       DWORD
	e32_dircnt       DWORD
	e32_fpagetab     DWORD
	e32_frectab      DWORD
	e32_impmod       DWORD
	e32_impmodcnt    DWORD
	e32_impproc      DWORD
	e32_pagesum      DWORD
	e32_datapage     DWORD
	e32_preload      DWORD
	e32_nrestab      DWORD
	e32_cbnrestab    DWORD
	e32_nressum      DWORD
	e32_autodata     DWORD
	e32_debuginfo    DWORD
	e32_debuglen     DWORD
	e32_instpreload  DWORD
	e32_instdemand   DWORD
	e32_heapsize     DWORD
	e32_res3         [12]BYTE
	e32_winresoff    DWORD
	e32_winreslen    DWORD
	e32_devid        WORD
	e32_ddkver       WORD
} /* winnt.h:6131:13 */

type IMAGE_VXD_HEADER = _IMAGE_VXD_HEADER /* winnt.h:6183:7 */
type PIMAGE_VXD_HEADER = uintptr          /* winnt.h:6183:24 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _IMAGE_FILE_HEADER = struct {
	Machine              WORD
	NumberOfSections     WORD
	TimeDateStamp        DWORD
	PointerToSymbolTable DWORD
	NumberOfSymbols      DWORD
	SizeOfOptionalHeader WORD
	Characteristics      WORD
} /* winnt.h:6187:13 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type IMAGE_FILE_HEADER = _IMAGE_FILE_HEADER /* winnt.h:6195:7 */
type PIMAGE_FILE_HEADER = uintptr           /* winnt.h:6195:25 */

type _IMAGE_DATA_DIRECTORY = struct {
	VirtualAddress DWORD
	Size           DWORD
} /* winnt.h:6248:13 */

type IMAGE_DATA_DIRECTORY = _IMAGE_DATA_DIRECTORY /* winnt.h:6251:7 */
type PIMAGE_DATA_DIRECTORY = uintptr              /* winnt.h:6251:28 */

type _IMAGE_OPTIONAL_HEADER = struct {
	Magic                       WORD
	MajorLinkerVersion          BYTE
	MinorLinkerVersion          BYTE
	SizeOfCode                  DWORD
	SizeOfInitializedData       DWORD
	SizeOfUninitializedData     DWORD
	AddressOfEntryPoint         DWORD
	BaseOfCode                  DWORD
	BaseOfData                  DWORD
	ImageBase                   DWORD
	SectionAlignment            DWORD
	FileAlignment               DWORD
	MajorOperatingSystemVersion WORD
	MinorOperatingSystemVersion WORD
	MajorImageVersion           WORD
	MinorImageVersion           WORD
	MajorSubsystemVersion       WORD
	MinorSubsystemVersion       WORD
	Win32VersionValue           DWORD
	SizeOfImage                 DWORD
	SizeOfHeaders               DWORD
	CheckSum                    DWORD
	Subsystem                   WORD
	DllCharacteristics          WORD
	SizeOfStackReserve          DWORD
	SizeOfStackCommit           DWORD
	SizeOfHeapReserve           DWORD
	SizeOfHeapCommit            DWORD
	LoaderFlags                 DWORD
	NumberOfRvaAndSizes         DWORD
	DataDirectory               [16]IMAGE_DATA_DIRECTORY
} /* winnt.h:6255:13 */

type IMAGE_OPTIONAL_HEADER32 = _IMAGE_OPTIONAL_HEADER /* winnt.h:6288:7 */
type PIMAGE_OPTIONAL_HEADER32 = uintptr               /* winnt.h:6288:31 */

type _IMAGE_ROM_OPTIONAL_HEADER = struct {
	Magic                   WORD
	MajorLinkerVersion      BYTE
	MinorLinkerVersion      BYTE
	SizeOfCode              DWORD
	SizeOfInitializedData   DWORD
	SizeOfUninitializedData DWORD
	AddressOfEntryPoint     DWORD
	BaseOfCode              DWORD
	BaseOfData              DWORD
	BaseOfBss               DWORD
	GprMask                 DWORD
	CprMask                 [4]DWORD
	GpValue                 DWORD
} /* winnt.h:6290:13 */

type IMAGE_ROM_OPTIONAL_HEADER = _IMAGE_ROM_OPTIONAL_HEADER /* winnt.h:6304:7 */
type PIMAGE_ROM_OPTIONAL_HEADER = uintptr                   /* winnt.h:6304:33 */

type _IMAGE_OPTIONAL_HEADER64 = struct {
	Magic                       WORD
	MajorLinkerVersion          BYTE
	MinorLinkerVersion          BYTE
	SizeOfCode                  DWORD
	SizeOfInitializedData       DWORD
	SizeOfUninitializedData     DWORD
	AddressOfEntryPoint         DWORD
	BaseOfCode                  DWORD
	ImageBase                   ULONGLONG
	SectionAlignment            DWORD
	FileAlignment               DWORD
	MajorOperatingSystemVersion WORD
	MinorOperatingSystemVersion WORD
	MajorImageVersion           WORD
	MinorImageVersion           WORD
	MajorSubsystemVersion       WORD
	MinorSubsystemVersion       WORD
	Win32VersionValue           DWORD
	SizeOfImage                 DWORD
	SizeOfHeaders               DWORD
	CheckSum                    DWORD
	Subsystem                   WORD
	DllCharacteristics          WORD
	SizeOfStackReserve          ULONGLONG
	SizeOfStackCommit           ULONGLONG
	SizeOfHeapReserve           ULONGLONG
	SizeOfHeapCommit            ULONGLONG
	LoaderFlags                 DWORD
	NumberOfRvaAndSizes         DWORD
	DataDirectory               [16]IMAGE_DATA_DIRECTORY
} /* winnt.h:6306:13 */

type IMAGE_OPTIONAL_HEADER64 = _IMAGE_OPTIONAL_HEADER64 /* winnt.h:6337:7 */
type PIMAGE_OPTIONAL_HEADER64 = uintptr                 /* winnt.h:6337:31 */

type IMAGE_OPTIONAL_HEADER = IMAGE_OPTIONAL_HEADER64   /* winnt.h:6349:37 */
type PIMAGE_OPTIONAL_HEADER = PIMAGE_OPTIONAL_HEADER64 /* winnt.h:6350:38 */

type _IMAGE_NT_HEADERS64 = struct {
	Signature      DWORD
	FileHeader     IMAGE_FILE_HEADER
	OptionalHeader IMAGE_OPTIONAL_HEADER64
} /* winnt.h:6360:13 */

type IMAGE_NT_HEADERS64 = _IMAGE_NT_HEADERS64 /* winnt.h:6364:7 */
type PIMAGE_NT_HEADERS64 = uintptr            /* winnt.h:6364:26 */

type _IMAGE_NT_HEADERS = struct {
	Signature      DWORD
	FileHeader     IMAGE_FILE_HEADER
	OptionalHeader IMAGE_OPTIONAL_HEADER32
} /* winnt.h:6366:13 */

type IMAGE_NT_HEADERS32 = _IMAGE_NT_HEADERS /* winnt.h:6370:7 */
type PIMAGE_NT_HEADERS32 = uintptr          /* winnt.h:6370:26 */

type _IMAGE_ROM_HEADERS = struct {
	FileHeader     IMAGE_FILE_HEADER
	OptionalHeader IMAGE_ROM_OPTIONAL_HEADER
} /* winnt.h:6372:13 */

type IMAGE_ROM_HEADERS = _IMAGE_ROM_HEADERS /* winnt.h:6375:7 */
type PIMAGE_ROM_HEADERS = uintptr           /* winnt.h:6375:25 */

type IMAGE_NT_HEADERS = IMAGE_NT_HEADERS64   /* winnt.h:6378:32 */
type PIMAGE_NT_HEADERS = PIMAGE_NT_HEADERS64 /* winnt.h:6379:33 */

type ANON_OBJECT_HEADER1 = struct {
	Sig1          WORD
	Sig2          WORD
	Version       WORD
	Machine       WORD
	TimeDateStamp DWORD
	ClassID       CLSID
	SizeOfData    DWORD
} /* winnt.h:6430:13 */

type ANON_OBJECT_HEADER = ANON_OBJECT_HEADER1 /* winnt.h:6438:7 */

type ANON_OBJECT_HEADER_V21 = struct {
	Sig1           WORD
	Sig2           WORD
	Version        WORD
	Machine        WORD
	TimeDateStamp  DWORD
	ClassID        CLSID
	SizeOfData     DWORD
	Flags          DWORD
	MetaDataSize   DWORD
	MetaDataOffset DWORD
} /* winnt.h:6440:13 */

type ANON_OBJECT_HEADER_V2 = ANON_OBJECT_HEADER_V21 /* winnt.h:6451:7 */

type ANON_OBJECT_HEADER_BIGOBJ1 = struct {
	Sig1                 WORD
	Sig2                 WORD
	Version              WORD
	Machine              WORD
	TimeDateStamp        DWORD
	ClassID              CLSID
	SizeOfData           DWORD
	Flags                DWORD
	MetaDataSize         DWORD
	MetaDataOffset       DWORD
	NumberOfSections     DWORD
	PointerToSymbolTable DWORD
	NumberOfSymbols      DWORD
} /* winnt.h:6453:13 */

type ANON_OBJECT_HEADER_BIGOBJ = ANON_OBJECT_HEADER_BIGOBJ1 /* winnt.h:6467:7 */

type _IMAGE_SECTION_HEADER = struct {
	Name                 [8]BYTE
	Misc                 struct{ PhysicalAddress DWORD }
	VirtualAddress       DWORD
	SizeOfRawData        DWORD
	PointerToRawData     DWORD
	PointerToRelocations DWORD
	PointerToLinenumbers DWORD
	NumberOfRelocations  WORD
	NumberOfLinenumbers  WORD
	Characteristics      DWORD
} /* winnt.h:6471:13 */

type IMAGE_SECTION_HEADER = _IMAGE_SECTION_HEADER /* winnt.h:6485:7 */
type PIMAGE_SECTION_HEADER = uintptr              /* winnt.h:6485:28 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type _IMAGE_SYMBOL = struct {
	N struct {
		_         [0]uint32
		ShortName [8]BYTE
	}
	Value              DWORD
	SectionNumber      SHORT
	Type               WORD
	StorageClass       BYTE
	NumberOfAuxSymbols BYTE
	_                  [2]byte
} /* winnt.h:6535:13 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type IMAGE_SYMBOL = _IMAGE_SYMBOL /* winnt.h:6549:7 */
type PIMAGE_SYMBOL = uintptr      /* winnt.h:6550:36 */

type _IMAGE_SYMBOL_EX = struct {
	N struct {
		_         [0]uint32
		ShortName [8]BYTE
	}
	Value              DWORD
	SectionNumber      LONG
	Type               WORD
	StorageClass       BYTE
	NumberOfAuxSymbols BYTE
} /* winnt.h:6554:13 */

type IMAGE_SYMBOL_EX = _IMAGE_SYMBOL_EX /* winnt.h:6568:7 */
type PIMAGE_SYMBOL_EX = uintptr         /* winnt.h:6568:33 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type IMAGE_AUX_SYMBOL_TOKEN_DEF1 = struct {
	bAuxType         BYTE
	bReserved        BYTE
	_                [2]byte
	SymbolTableIndex DWORD
	rgbReserved      [12]BYTE
} /* winnt.h:6661:13 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type IMAGE_AUX_SYMBOL_TOKEN_DEF = IMAGE_AUX_SYMBOL_TOKEN_DEF1 /* winnt.h:6666:7 */
type PIMAGE_AUX_SYMBOL_TOKEN_DEF = uintptr                    /* winnt.h:6666:44 */
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _IMAGE_AUX_SYMBOL = struct {
	Sym struct {
		TagIndex DWORD
		Misc     struct {
			_    [0]uint32
			LnSz struct {
				Linenumber WORD
				Size       WORD
			}
		}
		FcnAry struct {
			Function struct {
				PointerToLinenumber   DWORD
				PointerToNextFunction DWORD
			}
		}
		TvIndex WORD
		_       [2]byte
	}
} /* winnt.h:6669:13 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type IMAGE_AUX_SYMBOL = _IMAGE_AUX_SYMBOL /* winnt.h:6706:7 */
type PIMAGE_AUX_SYMBOL = uintptr          /* winnt.h:6706:34 */

type _IMAGE_AUX_SYMBOL_EX = struct {
	Sym struct {
		WeakDefaultSymIndex DWORD
		WeakSearchType      DWORD
		rgbReserved         [12]BYTE
	}
	_ [4]byte
} /* winnt.h:6708:13 */

type IMAGE_AUX_SYMBOL_EX = _IMAGE_AUX_SYMBOL_EX /* winnt.h:6736:7 */
type PIMAGE_AUX_SYMBOL_EX = uintptr             /* winnt.h:6736:37 */

type IMAGE_AUX_SYMBOL_TYPE = uint32 /* winnt.h:6742:7 */

type _IMAGE_RELOCATION = struct {
	__0              struct{ VirtualAddress DWORD }
	SymbolTableIndex DWORD
	Type             WORD
	_                [2]byte
} /* winnt.h:6756:13 */

type IMAGE_RELOCATION = _IMAGE_RELOCATION /* winnt.h:6763:7 */
type PIMAGE_RELOCATION = uintptr          /* winnt.h:6764:40 */

type _IMAGE_LINENUMBER = struct {
	Type       struct{ SymbolTableIndex DWORD }
	Linenumber WORD
	_          [2]byte
} /* winnt.h:7094:13 */

type IMAGE_LINENUMBER = _IMAGE_LINENUMBER /* winnt.h:7100:7 */
type PIMAGE_LINENUMBER = uintptr          /* winnt.h:7101:40 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _IMAGE_BASE_RELOCATION = struct {
	VirtualAddress DWORD
	SizeOfBlock    DWORD
} /* winnt.h:7107:13 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type IMAGE_BASE_RELOCATION = _IMAGE_BASE_RELOCATION /* winnt.h:7110:7 */
type PIMAGE_BASE_RELOCATION = uintptr               /* winnt.h:7111:45 */

type _IMAGE_ARCHIVE_MEMBER_HEADER = struct {
	Name      [16]BYTE
	Date      [12]BYTE
	UserID    [6]BYTE
	GroupID   [6]BYTE
	Mode      [8]BYTE
	Size      [10]BYTE
	EndHeader [2]BYTE
} /* winnt.h:7134:13 */

type IMAGE_ARCHIVE_MEMBER_HEADER = _IMAGE_ARCHIVE_MEMBER_HEADER /* winnt.h:7142:7 */
type PIMAGE_ARCHIVE_MEMBER_HEADER = uintptr                     /* winnt.h:7142:35 */

type _IMAGE_EXPORT_DIRECTORY = struct {
	Characteristics       DWORD
	TimeDateStamp         DWORD
	MajorVersion          WORD
	MinorVersion          WORD
	Name                  DWORD
	Base                  DWORD
	NumberOfFunctions     DWORD
	NumberOfNames         DWORD
	AddressOfFunctions    DWORD
	AddressOfNames        DWORD
	AddressOfNameOrdinals DWORD
} /* winnt.h:7146:13 */

type IMAGE_EXPORT_DIRECTORY = _IMAGE_EXPORT_DIRECTORY /* winnt.h:7158:7 */
type PIMAGE_EXPORT_DIRECTORY = uintptr                /* winnt.h:7158:30 */

type _IMAGE_IMPORT_BY_NAME = struct {
	Hint WORD
	Name [1]CHAR
	_    [1]byte
} /* winnt.h:7160:13 */

type IMAGE_IMPORT_BY_NAME = _IMAGE_IMPORT_BY_NAME /* winnt.h:7163:7 */
type PIMAGE_IMPORT_BY_NAME = uintptr              /* winnt.h:7163:28 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _IMAGE_THUNK_DATA64 = struct {
	u1 struct{ ForwarderString ULONGLONG }
} /* winnt.h:7167:13 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type IMAGE_THUNK_DATA64 = _IMAGE_THUNK_DATA64 /* winnt.h:7174:7 */
type PIMAGE_THUNK_DATA64 = uintptr            /* winnt.h:7175:32 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _IMAGE_THUNK_DATA32 = struct {
	u1 struct{ ForwarderString DWORD }
} /* winnt.h:7179:13 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type IMAGE_THUNK_DATA32 = _IMAGE_THUNK_DATA32 /* winnt.h:7186:7 */
type PIMAGE_THUNK_DATA32 = uintptr            /* winnt.h:7187:32 */

type PIMAGE_TLS_CALLBACK = uintptr /* winnt.h:7196:18 */

type _IMAGE_TLS_DIRECTORY64 = struct {
	StartAddressOfRawData ULONGLONG
	EndAddressOfRawData   ULONGLONG
	AddressOfIndex        ULONGLONG
	AddressOfCallBacks    ULONGLONG
	SizeOfZeroFill        DWORD
	Characteristics       DWORD
} /* winnt.h:7198:13 */

type IMAGE_TLS_DIRECTORY64 = _IMAGE_TLS_DIRECTORY64 /* winnt.h:7205:7 */
type PIMAGE_TLS_DIRECTORY64 = uintptr               /* winnt.h:7206:35 */

type _IMAGE_TLS_DIRECTORY32 = struct {
	StartAddressOfRawData DWORD
	EndAddressOfRawData   DWORD
	AddressOfIndex        DWORD
	AddressOfCallBacks    DWORD
	SizeOfZeroFill        DWORD
	Characteristics       DWORD
} /* winnt.h:7208:13 */

type IMAGE_TLS_DIRECTORY32 = _IMAGE_TLS_DIRECTORY32 /* winnt.h:7215:7 */
type PIMAGE_TLS_DIRECTORY32 = uintptr               /* winnt.h:7216:35 */

type IMAGE_THUNK_DATA = IMAGE_THUNK_DATA64         /* winnt.h:7221:32 */
type PIMAGE_THUNK_DATA = PIMAGE_THUNK_DATA64       /* winnt.h:7222:33 */
type IMAGE_TLS_DIRECTORY = IMAGE_TLS_DIRECTORY64   /* winnt.h:7224:35 */
type PIMAGE_TLS_DIRECTORY = PIMAGE_TLS_DIRECTORY64 /* winnt.h:7225:36 */

type _IMAGE_IMPORT_DESCRIPTOR = struct {
	__0            struct{ Characteristics DWORD }
	TimeDateStamp  DWORD
	ForwarderChain DWORD
	Name           DWORD
	FirstThunk     DWORD
} /* winnt.h:7236:13 */

type IMAGE_IMPORT_DESCRIPTOR = _IMAGE_IMPORT_DESCRIPTOR /* winnt.h:7246:7 */
type PIMAGE_IMPORT_DESCRIPTOR = uintptr                 /* winnt.h:7247:47 */

type _IMAGE_BOUND_IMPORT_DESCRIPTOR = struct {
	TimeDateStamp               DWORD
	OffsetModuleName            WORD
	NumberOfModuleForwarderRefs WORD
} /* winnt.h:7249:13 */

type IMAGE_BOUND_IMPORT_DESCRIPTOR = _IMAGE_BOUND_IMPORT_DESCRIPTOR /* winnt.h:7253:7 */
type PIMAGE_BOUND_IMPORT_DESCRIPTOR = uintptr                       /* winnt.h:7253:37 */

type _IMAGE_BOUND_FORWARDER_REF = struct {
	TimeDateStamp    DWORD
	OffsetModuleName WORD
	Reserved         WORD
} /* winnt.h:7255:13 */

type IMAGE_BOUND_FORWARDER_REF = _IMAGE_BOUND_FORWARDER_REF /* winnt.h:7259:7 */
type PIMAGE_BOUND_FORWARDER_REF = uintptr                   /* winnt.h:7259:33 */

type _IMAGE_DELAYLOAD_DESCRIPTOR = struct {
	Attributes                 struct{ AllAttributes DWORD }
	DllNameRVA                 DWORD
	ModuleHandleRVA            DWORD
	ImportAddressTableRVA      DWORD
	ImportNameTableRVA         DWORD
	BoundImportAddressTableRVA DWORD
	UnloadInformationTableRVA  DWORD
	TimeDateStamp              DWORD
} /* winnt.h:7261:13 */

type IMAGE_DELAYLOAD_DESCRIPTOR = _IMAGE_DELAYLOAD_DESCRIPTOR /* winnt.h:7276:7 */
type PIMAGE_DELAYLOAD_DESCRIPTOR = uintptr                    /* winnt.h:7276:34 */
type PCIMAGE_DELAYLOAD_DESCRIPTOR = uintptr                   /* winnt.h:7277:46 */

type _IMAGE_RESOURCE_DIRECTORY = struct {
	Characteristics      DWORD
	TimeDateStamp        DWORD
	MajorVersion         WORD
	MinorVersion         WORD
	NumberOfNamedEntries WORD
	NumberOfIdEntries    WORD
} /* winnt.h:7279:13 */

type IMAGE_RESOURCE_DIRECTORY = _IMAGE_RESOURCE_DIRECTORY /* winnt.h:7286:7 */
type PIMAGE_RESOURCE_DIRECTORY = uintptr                  /* winnt.h:7286:32 */

type _IMAGE_RESOURCE_DIRECTORY_ENTRY = struct {
	__0 struct {
		__0 struct {
			_          [0]uint32
			NameOffset uint32 /* DWORD NameOffset: 31, DWORD NameIsString: 1 */
		}
	}
	__4 struct{ OffsetToData DWORD }
} /* winnt.h:7291:13 */

type IMAGE_RESOURCE_DIRECTORY_ENTRY = _IMAGE_RESOURCE_DIRECTORY_ENTRY /* winnt.h:7307:7 */
type PIMAGE_RESOURCE_DIRECTORY_ENTRY = uintptr                        /* winnt.h:7307:38 */

type _IMAGE_RESOURCE_DIRECTORY_STRING = struct {
	Length     WORD
	NameString [1]CHAR
	_          [1]byte
} /* winnt.h:7309:13 */

type IMAGE_RESOURCE_DIRECTORY_STRING = _IMAGE_RESOURCE_DIRECTORY_STRING /* winnt.h:7312:7 */
type PIMAGE_RESOURCE_DIRECTORY_STRING = uintptr                         /* winnt.h:7312:39 */

type _IMAGE_RESOURCE_DIR_STRING_U = struct {
	Length     WORD
	NameString [1]WCHAR
} /* winnt.h:7314:13 */

type IMAGE_RESOURCE_DIR_STRING_U = _IMAGE_RESOURCE_DIR_STRING_U /* winnt.h:7317:7 */
type PIMAGE_RESOURCE_DIR_STRING_U = uintptr                     /* winnt.h:7317:35 */

type _IMAGE_RESOURCE_DATA_ENTRY = struct {
	OffsetToData DWORD
	Size         DWORD
	CodePage     DWORD
	Reserved     DWORD
} /* winnt.h:7319:13 */

type IMAGE_RESOURCE_DATA_ENTRY = _IMAGE_RESOURCE_DATA_ENTRY /* winnt.h:7324:7 */
type PIMAGE_RESOURCE_DATA_ENTRY = uintptr                   /* winnt.h:7324:33 */

type IMAGE_LOAD_CONFIG_DIRECTORY32 = struct {
	Size                          DWORD
	TimeDateStamp                 DWORD
	MajorVersion                  WORD
	MinorVersion                  WORD
	GlobalFlagsClear              DWORD
	GlobalFlagsSet                DWORD
	CriticalSectionDefaultTimeout DWORD
	DeCommitFreeBlockThreshold    DWORD
	DeCommitTotalFreeThreshold    DWORD
	LockPrefixTable               DWORD
	MaximumAllocationSize         DWORD
	VirtualMemoryThreshold        DWORD
	ProcessHeapFlags              DWORD
	ProcessAffinityMask           DWORD
	CSDVersion                    WORD
	Reserved1                     WORD
	EditList                      DWORD
	SecurityCookie                DWORD
	SEHandlerTable                DWORD
	SEHandlerCount                DWORD
}                                             /* winnt.h:7347:7 */
type PIMAGE_LOAD_CONFIG_DIRECTORY32 = uintptr /* winnt.h:7347:37 */

type IMAGE_LOAD_CONFIG_DIRECTORY64 = struct {
	Size                          DWORD
	TimeDateStamp                 DWORD
	MajorVersion                  WORD
	MinorVersion                  WORD
	GlobalFlagsClear              DWORD
	GlobalFlagsSet                DWORD
	CriticalSectionDefaultTimeout DWORD
	DeCommitFreeBlockThreshold    ULONGLONG
	DeCommitTotalFreeThreshold    ULONGLONG
	LockPrefixTable               ULONGLONG
	MaximumAllocationSize         ULONGLONG
	VirtualMemoryThreshold        ULONGLONG
	ProcessAffinityMask           ULONGLONG
	ProcessHeapFlags              DWORD
	CSDVersion                    WORD
	Reserved1                     WORD
	EditList                      ULONGLONG
	SecurityCookie                ULONGLONG
	SEHandlerTable                ULONGLONG
	SEHandlerCount                ULONGLONG
}                                             /* winnt.h:7370:7 */
type PIMAGE_LOAD_CONFIG_DIRECTORY64 = uintptr /* winnt.h:7370:37 */

type IMAGE_LOAD_CONFIG_DIRECTORY = IMAGE_LOAD_CONFIG_DIRECTORY64   /* winnt.h:7373:43 */
type PIMAGE_LOAD_CONFIG_DIRECTORY = PIMAGE_LOAD_CONFIG_DIRECTORY64 /* winnt.h:7374:44 */

type _IMAGE_CE_RUNTIME_FUNCTION_ENTRY = struct {
	FuncStart DWORD
	PrologLen uint32 /* DWORD PrologLen: 8, DWORD FuncLen: 22, DWORD ThirtyTwoBit: 1, DWORD ExceptionFlag: 1 */
} /* winnt.h:7380:13 */

type IMAGE_CE_RUNTIME_FUNCTION_ENTRY = _IMAGE_CE_RUNTIME_FUNCTION_ENTRY /* winnt.h:7386:7 */
type PIMAGE_CE_RUNTIME_FUNCTION_ENTRY = uintptr                         /* winnt.h:7386:39 */

type _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = struct {
	BeginAddress     ULONGLONG
	EndAddress       ULONGLONG
	ExceptionHandler ULONGLONG
	HandlerData      ULONGLONG
	PrologEndAddress ULONGLONG
} /* winnt.h:7388:13 */

type IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY /* winnt.h:7394:7 */
type PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = uintptr                              /* winnt.h:7394:44 */

type _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = struct {
	BeginAddress     DWORD
	EndAddress       DWORD
	ExceptionHandler DWORD
	HandlerData      DWORD
	PrologEndAddress DWORD
} /* winnt.h:7396:13 */

type IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY /* winnt.h:7402:7 */
type PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = uintptr                            /* winnt.h:7402:42 */

type _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY = struct {
	BeginAddress DWORD
	__4          struct{ UnwindData DWORD }
} /* winnt.h:7404:13 */

type IMAGE_ARM_RUNTIME_FUNCTION_ENTRY = _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY /* winnt.h:7420:7 */
type PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY = uintptr                          /* winnt.h:7420:40 */

type _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = struct {
	BeginAddress DWORD
	__4          struct{ UnwindData DWORD }
} /* winnt.h:7422:13 */

type IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY /* winnt.h:7436:7 */
type PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = uintptr                            /* winnt.h:7436:42 */

type _IMAGE_RUNTIME_FUNCTION_ENTRY1 = struct {
	BeginAddress DWORD
	EndAddress   DWORD
	__8          struct{ UnwindInfoAddress DWORD }
} /* winnt.h:7438:13 */

type _IMAGE_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY1 /* winnt.h:7445:7 */
type _PIMAGE_RUNTIME_FUNCTION_ENTRY = uintptr                       /* winnt.h:7445:37 */

type IMAGE_IA64_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY   /* winnt.h:7447:43 */
type PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY = _PIMAGE_RUNTIME_FUNCTION_ENTRY /* winnt.h:7448:44 */

type IMAGE_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY   /* winnt.h:7462:43 */
type PIMAGE_RUNTIME_FUNCTION_ENTRY = _PIMAGE_RUNTIME_FUNCTION_ENTRY /* winnt.h:7463:44 */

type _IMAGE_DEBUG_DIRECTORY = struct {
	Characteristics  DWORD
	TimeDateStamp    DWORD
	MajorVersion     WORD
	MinorVersion     WORD
	Type             DWORD
	SizeOfData       DWORD
	AddressOfRawData DWORD
	PointerToRawData DWORD
} /* winnt.h:7466:13 */

type IMAGE_DEBUG_DIRECTORY = _IMAGE_DEBUG_DIRECTORY /* winnt.h:7475:7 */
type PIMAGE_DEBUG_DIRECTORY = uintptr               /* winnt.h:7475:29 */

type _IMAGE_COFF_SYMBOLS_HEADER = struct {
	NumberOfSymbols      DWORD
	LvaToFirstSymbol     DWORD
	NumberOfLinenumbers  DWORD
	LvaToFirstLinenumber DWORD
	RvaToFirstByteOfCode DWORD
	RvaToLastByteOfCode  DWORD
	RvaToFirstByteOfData DWORD
	RvaToLastByteOfData  DWORD
} /* winnt.h:7490:13 */

type IMAGE_COFF_SYMBOLS_HEADER = _IMAGE_COFF_SYMBOLS_HEADER /* winnt.h:7499:7 */
type PIMAGE_COFF_SYMBOLS_HEADER = uintptr                   /* winnt.h:7499:33 */

type _FPO_DATA = struct {
	ulOffStart DWORD
	cbProcSize DWORD
	cdwLocals  DWORD
	cdwParams  WORD
	cbProlog   uint16 /* WORD cbProlog: 8, WORD cbRegs: 3, WORD fHasSEH: 1, WORD fUseBP: 1, WORD reserved: 1, WORD cbFrame: 2 */
} /* winnt.h:7506:13 */

type FPO_DATA = _FPO_DATA /* winnt.h:7517:7 */
type PFPO_DATA = uintptr  /* winnt.h:7517:16 */

type _IMAGE_DEBUG_MISC = struct {
	DataType DWORD
	Length   DWORD
	Unicode  BOOLEAN
	Reserved [3]BYTE
	Data     [1]BYTE
	_        [3]byte
} /* winnt.h:7522:13 */

type IMAGE_DEBUG_MISC = _IMAGE_DEBUG_MISC /* winnt.h:7528:7 */
type PIMAGE_DEBUG_MISC = uintptr          /* winnt.h:7528:24 */

type _IMAGE_FUNCTION_ENTRY = struct {
	StartingAddress DWORD
	EndingAddress   DWORD
	EndOfPrologue   DWORD
} /* winnt.h:7530:13 */

type IMAGE_FUNCTION_ENTRY = _IMAGE_FUNCTION_ENTRY /* winnt.h:7534:7 */
type PIMAGE_FUNCTION_ENTRY = uintptr              /* winnt.h:7534:28 */

type _IMAGE_FUNCTION_ENTRY64 = struct {
	StartingAddress ULONGLONG
	EndingAddress   ULONGLONG
	__16            struct{ EndOfPrologue ULONGLONG }
} /* winnt.h:7536:13 */

type IMAGE_FUNCTION_ENTRY64 = _IMAGE_FUNCTION_ENTRY64 /* winnt.h:7543:7 */
type PIMAGE_FUNCTION_ENTRY64 = uintptr                /* winnt.h:7543:30 */

type _IMAGE_SEPARATE_DEBUG_HEADER = struct {
	Signature          WORD
	Flags              WORD
	Machine            WORD
	Characteristics    WORD
	TimeDateStamp      DWORD
	CheckSum           DWORD
	ImageBase          DWORD
	SizeOfImage        DWORD
	NumberOfSections   DWORD
	ExportedNamesSize  DWORD
	DebugDirectorySize DWORD
	SectionAlignment   DWORD
	Reserved           [2]DWORD
} /* winnt.h:7545:13 */

type IMAGE_SEPARATE_DEBUG_HEADER = _IMAGE_SEPARATE_DEBUG_HEADER /* winnt.h:7559:7 */
type PIMAGE_SEPARATE_DEBUG_HEADER = uintptr                     /* winnt.h:7559:35 */

type _NON_PAGED_DEBUG_INFO = struct {
	Signature       WORD
	Flags           WORD
	Size            DWORD
	Machine         WORD
	Characteristics WORD
	TimeDateStamp   DWORD
	CheckSum        DWORD
	SizeOfImage     DWORD
	ImageBase       ULONGLONG
} /* winnt.h:7561:13 */

type NON_PAGED_DEBUG_INFO = _NON_PAGED_DEBUG_INFO /* winnt.h:7571:7 */
type PNON_PAGED_DEBUG_INFO = uintptr              /* winnt.h:7571:28 */

type _ImageArchitectureHeader = struct {
	AmaskValue    uint32 /* unsigned AmaskValue: 1, int Adummy1: 7, unsigned AmaskShift: 8, int Adummy2: 16 */
	_             [4]byte
	FirstEntryRVA DWORD
} /* winnt.h:7579:13 */

type IMAGE_ARCHITECTURE_HEADER = _ImageArchitectureHeader /* winnt.h:7585:7 */
type PIMAGE_ARCHITECTURE_HEADER = uintptr                 /* winnt.h:7585:33 */

type _ImageArchitectureEntry = struct {
	FixupInstRVA DWORD
	NewInst      DWORD
} /* winnt.h:7587:13 */

type IMAGE_ARCHITECTURE_ENTRY = _ImageArchitectureEntry /* winnt.h:7590:7 */
type PIMAGE_ARCHITECTURE_ENTRY = uintptr                /* winnt.h:7590:32 */
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type IMPORT_OBJECT_HEADER1 = struct {
	Sig1          WORD
	Sig2          WORD
	Version       WORD
	Machine       WORD
	TimeDateStamp DWORD
	SizeOfData    DWORD
	__16          struct{ Ordinal WORD }
	Type          uint16 /* WORD Type: 2, WORD NameType: 3, WORD Reserved: 11 */
} /* winnt.h:7595:13 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type IMPORT_OBJECT_HEADER = IMPORT_OBJECT_HEADER1 /* winnt.h:7609:7 */

type IMPORT_OBJECT_TYPE = uint32 /* winnt.h:7613:7 */

type IMPORT_OBJECT_NAME_TYPE = uint32 /* winnt.h:7617:7 */

type ReplacesCorHdrNumericDefines = uint32 /* winnt.h:7628:7 */

type IMAGE_COR20_HEADER1 = struct {
	cb                      DWORD
	MajorRuntimeVersion     WORD
	MinorRuntimeVersion     WORD
	MetaData                IMAGE_DATA_DIRECTORY
	Flags                   DWORD
	__20                    struct{ EntryPointToken DWORD }
	Resources               IMAGE_DATA_DIRECTORY
	StrongNameSignature     IMAGE_DATA_DIRECTORY
	CodeManagerTable        IMAGE_DATA_DIRECTORY
	VTableFixups            IMAGE_DATA_DIRECTORY
	ExportAddressTableJumps IMAGE_DATA_DIRECTORY
	ManagedNativeHeader     IMAGE_DATA_DIRECTORY
} /* winnt.h:7630:13 */

type IMAGE_COR20_HEADER = IMAGE_COR20_HEADER1 /* winnt.h:7646:7 */
type PIMAGE_COR20_HEADER = uintptr            /* winnt.h:7646:26 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _SLIST_ENTRY = struct{ Next uintptr } /* winnt.h:7726:13 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type SLIST_ENTRY = _SLIST_ENTRY /* winnt.h:7728:7 */
type PSLIST_ENTRY = uintptr     /* winnt.h:7728:19 */

type _SLIST_HEADER = struct {
	__0 struct {
		Alignment ULONGLONG
		Region    ULONGLONG
	}
} /* winnt.h:7730:13 */

type SLIST_HEADER = _SLIST_HEADER /* winnt.h:7751:7 */
type PSLIST_HEADER = uintptr      /* winnt.h:7751:20 */

type _RTL_RUN_ONCE = struct{ Ptr PVOID } /* winnt.h:7780:9 */

type RTL_RUN_ONCE = _RTL_RUN_ONCE    /* winnt.h:7780:45 */
type PRTL_RUN_ONCE = uintptr         /* winnt.h:7780:59 */
type PRTL_RUN_ONCE_INIT_FN = uintptr /* winnt.h:7781:15 */

type _RTL_BARRIER = struct {
	Reserved1 DWORD
	Reserved2 DWORD
	Reserved3 [2]ULONG_PTR
	Reserved4 DWORD
	Reserved5 DWORD
} /* winnt.h:7790:11 */

type RTL_BARRIER = _RTL_BARRIER /* winnt.h:7796:5 */
type PRTL_BARRIER = uintptr     /* winnt.h:7796:17 */

type _MESSAGE_RESOURCE_ENTRY = struct {
	Length WORD
	Flags  WORD
	Text   [1]BYTE
	_      [1]byte
} /* winnt.h:7899:13 */

type MESSAGE_RESOURCE_ENTRY = _MESSAGE_RESOURCE_ENTRY /* winnt.h:7903:7 */
type PMESSAGE_RESOURCE_ENTRY = uintptr                /* winnt.h:7903:30 */

type _MESSAGE_RESOURCE_BLOCK = struct {
	LowId           DWORD
	HighId          DWORD
	OffsetToEntries DWORD
} /* winnt.h:7921:13 */

type MESSAGE_RESOURCE_BLOCK = _MESSAGE_RESOURCE_BLOCK /* winnt.h:7925:7 */
type PMESSAGE_RESOURCE_BLOCK = uintptr                /* winnt.h:7925:30 */

type _MESSAGE_RESOURCE_DATA = struct {
	NumberOfBlocks DWORD
	Blocks         [1]MESSAGE_RESOURCE_BLOCK
} /* winnt.h:7927:13 */

type MESSAGE_RESOURCE_DATA = _MESSAGE_RESOURCE_DATA /* winnt.h:7930:7 */
type PMESSAGE_RESOURCE_DATA = uintptr               /* winnt.h:7930:29 */

type _OSVERSIONINFOA = struct {
	dwOSVersionInfoSize DWORD
	dwMajorVersion      DWORD
	dwMinorVersion      DWORD
	dwBuildNumber       DWORD
	dwPlatformId        DWORD
	szCSDVersion        [128]CHAR
} /* winnt.h:7932:13 */

type OSVERSIONINFOA = _OSVERSIONINFOA /* winnt.h:7939:7 */
type POSVERSIONINFOA = uintptr        /* winnt.h:7939:22 */
type LPOSVERSIONINFOA = uintptr       /* winnt.h:7939:39 */

type _OSVERSIONINFOW = struct {
	dwOSVersionInfoSize DWORD
	dwMajorVersion      DWORD
	dwMinorVersion      DWORD
	dwBuildNumber       DWORD
	dwPlatformId        DWORD
	szCSDVersion        [128]WCHAR
} /* winnt.h:7941:13 */

type OSVERSIONINFOW = _OSVERSIONINFOW     /* winnt.h:7948:7 */
type POSVERSIONINFOW = uintptr            /* winnt.h:7948:22 */
type LPOSVERSIONINFOW = uintptr           /* winnt.h:7948:39 */
type RTL_OSVERSIONINFOW = _OSVERSIONINFOW /* winnt.h:7948:57 */
type PRTL_OSVERSIONINFOW = uintptr        /* winnt.h:7948:76 */

type OSVERSIONINFO = OSVERSIONINFOA     /* winnt.h:7950:5 */
type POSVERSIONINFO = POSVERSIONINFOA   /* winnt.h:7951:5 */
type LPOSVERSIONINFO = LPOSVERSIONINFOA /* winnt.h:7952:5 */

type _OSVERSIONINFOEXA = struct {
	dwOSVersionInfoSize DWORD
	dwMajorVersion      DWORD
	dwMinorVersion      DWORD
	dwBuildNumber       DWORD
	dwPlatformId        DWORD
	szCSDVersion        [128]CHAR
	wServicePackMajor   WORD
	wServicePackMinor   WORD
	wSuiteMask          WORD
	wProductType        BYTE
	wReserved           BYTE
} /* winnt.h:7954:13 */

type OSVERSIONINFOEXA = _OSVERSIONINFOEXA /* winnt.h:7966:7 */
type POSVERSIONINFOEXA = uintptr          /* winnt.h:7966:24 */
type LPOSVERSIONINFOEXA = uintptr         /* winnt.h:7966:43 */

type _OSVERSIONINFOEXW = struct {
	dwOSVersionInfoSize DWORD
	dwMajorVersion      DWORD
	dwMinorVersion      DWORD
	dwBuildNumber       DWORD
	dwPlatformId        DWORD
	szCSDVersion        [128]WCHAR
	wServicePackMajor   WORD
	wServicePackMinor   WORD
	wSuiteMask          WORD
	wProductType        BYTE
	wReserved           BYTE
} /* winnt.h:7968:13 */

type OSVERSIONINFOEXW = _OSVERSIONINFOEXW     /* winnt.h:7980:7 */
type POSVERSIONINFOEXW = uintptr              /* winnt.h:7980:24 */
type LPOSVERSIONINFOEXW = uintptr             /* winnt.h:7980:43 */
type RTL_OSVERSIONINFOEXW = _OSVERSIONINFOEXW /* winnt.h:7980:63 */
type PRTL_OSVERSIONINFOEXW = uintptr          /* winnt.h:7980:84 */

type OSVERSIONINFOEX = OSVERSIONINFOEXA     /* winnt.h:7982:5 */
type POSVERSIONINFOEX = POSVERSIONINFOEXA   /* winnt.h:7983:5 */
type LPOSVERSIONINFOEX = LPOSVERSIONINFOEXA /* winnt.h:7984:5 */

type RTL_UMS_THREAD_INFO_CLASS = uint32   /* winnt.h:8037:7 */
type PRTL_UMS_THREAD_INFO_CLASS = uintptr /* winnt.h:8037:33 */

type RTL_UMS_SCHEDULER_REASON = uint32        /* winnt.h:8043:7 */
type PRTL_UMS_SCHEDULER_REASON = uintptr      /* winnt.h:8043:32 */
type PRTL_UMS_SCHEDULER_ENTRY_POINT = uintptr /* winnt.h:8046:43 */

type _RTL_CRITICAL_SECTION_DEBUG = struct {
	Type                      WORD
	CreatorBackTraceIndex     WORD
	_                         [4]byte
	CriticalSection           uintptr
	ProcessLocksList          LIST_ENTRY
	EntryCount                DWORD
	ContentionCount           DWORD
	Flags                     DWORD
	CreatorBackTraceIndexHigh WORD
	SpareWORD                 WORD
} /* winnt.h:8066:13 */

type _RTL_CRITICAL_SECTION = struct {
	DebugInfo      PRTL_CRITICAL_SECTION_DEBUG
	LockCount      LONG
	RecursionCount LONG
	OwningThread   HANDLE
	LockSemaphore  HANDLE
	SpinCount      ULONG_PTR
} /* winnt.h:8066:13 */

type RTL_CRITICAL_SECTION_DEBUG = _RTL_CRITICAL_SECTION_DEBUG /* winnt.h:8076:7 */
type PRTL_CRITICAL_SECTION_DEBUG = uintptr                    /* winnt.h:8076:34 */
type RTL_RESOURCE_DEBUG = _RTL_CRITICAL_SECTION_DEBUG         /* winnt.h:8076:63 */
type PRTL_RESOURCE_DEBUG = uintptr                            /* winnt.h:8076:82 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type RTL_CRITICAL_SECTION = _RTL_CRITICAL_SECTION /* winnt.h:8100:7 */
type PRTL_CRITICAL_SECTION = uintptr              /* winnt.h:8100:28 */
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _RTL_SRWLOCK = struct{ Ptr PVOID } /* winnt.h:8103:13 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type RTL_SRWLOCK = _RTL_SRWLOCK                    /* winnt.h:8103:48 */
type PRTL_SRWLOCK = uintptr                        /* winnt.h:8103:60 */
type _RTL_CONDITION_VARIABLE = struct{ Ptr PVOID } /* winnt.h:8104:13 */

type RTL_CONDITION_VARIABLE = _RTL_CONDITION_VARIABLE /* winnt.h:8104:59 */
type PRTL_CONDITION_VARIABLE = uintptr                /* winnt.h:8104:82 */

type PAPCFUNC = uintptr                    /* winnt.h:8111:18 */
type PVECTORED_EXCEPTION_HANDLER = uintptr /* winnt.h:8112:18 */

type HEAP_INFORMATION_CLASS = uint32 /* winnt.h:8117:7 */

type WORKERCALLBACKFUNC = uintptr                  /* winnt.h:8119:18 */
type APC_CALLBACK_FUNCTION = uintptr               /* winnt.h:8120:18 */
type WAITORTIMERCALLBACKFUNC = uintptr             /* winnt.h:8121:18 */
type WAITORTIMERCALLBACK = WAITORTIMERCALLBACKFUNC /* winnt.h:8122:37 */
type PFLS_CALLBACK_FUNCTION = uintptr              /* winnt.h:8123:18 */
type PSECURE_MEMORY_CACHE_CALLBACK = uintptr       /* winnt.h:8124:21 */

type ACTIVATION_CONTEXT_INFO_CLASS = uint32 /* winnt.h:8153:7 */

type ACTCTX_REQUESTED_RUN_LEVEL = uint32 /* winnt.h:8161:7 */

type ACTCTX_COMPATIBILITY_ELEMENT_TYPE = uint32 /* winnt.h:8167:7 */

type _ACTIVATION_CONTEXT_QUERY_INDEX = struct {
	ulAssemblyIndex       DWORD
	ulFileIndexInAssembly DWORD
} /* winnt.h:8169:13 */

type ACTIVATION_CONTEXT_QUERY_INDEX = _ACTIVATION_CONTEXT_QUERY_INDEX /* winnt.h:8172:7 */
type PACTIVATION_CONTEXT_QUERY_INDEX = uintptr                        /* winnt.h:8172:38 */

type _ASSEMBLY_FILE_DETAILED_INFORMATION = struct {
	ulFlags          DWORD
	ulFilenameLength DWORD
	ulPathLength     DWORD
	_                [4]byte
	lpFileName       PCWSTR
	lpFilePath       PCWSTR
} /* winnt.h:8174:13 */

type ASSEMBLY_FILE_DETAILED_INFORMATION = _ASSEMBLY_FILE_DETAILED_INFORMATION /* winnt.h:8180:7 */
type PASSEMBLY_FILE_DETAILED_INFORMATION = uintptr                            /* winnt.h:8180:42 */

type _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = struct {
	ulFlags                           DWORD
	ulEncodedAssemblyIdentityLength   DWORD
	ulManifestPathType                DWORD
	ulManifestPathLength              DWORD
	liManifestLastWriteTime           LARGE_INTEGER
	ulPolicyPathType                  DWORD
	ulPolicyPathLength                DWORD
	liPolicyLastWriteTime             LARGE_INTEGER
	ulMetadataSatelliteRosterIndex    DWORD
	ulManifestVersionMajor            DWORD
	ulManifestVersionMinor            DWORD
	ulPolicyVersionMajor              DWORD
	ulPolicyVersionMinor              DWORD
	ulAssemblyDirectoryNameLength     DWORD
	lpAssemblyEncodedAssemblyIdentity PCWSTR
	lpAssemblyManifestPath            PCWSTR
	lpAssemblyPolicyPath              PCWSTR
	lpAssemblyDirectoryName           PCWSTR
	ulFileCount                       DWORD
	_                                 [4]byte
} /* winnt.h:8182:13 */

type ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION /* winnt.h:8202:7 */
type PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = uintptr                                          /* winnt.h:8202:56 */

type _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = struct {
	ulFlags  DWORD
	RunLevel ACTCTX_REQUESTED_RUN_LEVEL
	UiAccess DWORD
} /* winnt.h:8204:13 */

type ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION /* winnt.h:8208:7 */
type PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = uintptr                                  /* winnt.h:8208:48 */

type _COMPATIBILITY_CONTEXT_ELEMENT = struct {
	Id   GUID
	Type ACTCTX_COMPATIBILITY_ELEMENT_TYPE
} /* winnt.h:8210:13 */

type COMPATIBILITY_CONTEXT_ELEMENT = _COMPATIBILITY_CONTEXT_ELEMENT /* winnt.h:8213:7 */
type PCOMPATIBILITY_CONTEXT_ELEMENT = uintptr                       /* winnt.h:8213:37 */

//Vista: {e2011457-1546-43c5-a5fe-008deee3d3f0}
//Seven: {35138b9a-5d96-4fbd-8e2d-a2440225f93a}
type _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = struct {
	_            [0]uint32
	ElementCount DWORD
} /* winnt.h:8217:13 */

//Vista: {e2011457-1546-43c5-a5fe-008deee3d3f0}
//Seven: {35138b9a-5d96-4fbd-8e2d-a2440225f93a}
type ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION /* winnt.h:8220:7 */
type PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = uintptr                                      /* winnt.h:8220:52 */

type _SUPPORTED_OS_INFO = struct {
	OsCount         WORD
	MitigationExist WORD
	OsList          [4]WORD
} /* winnt.h:8224:13 */

type SUPPORTED_OS_INFO = _SUPPORTED_OS_INFO /* winnt.h:8228:7 */
type PSUPPORTED_OS_INFO = uintptr           /* winnt.h:8228:25 */

type _ACTIVATION_CONTEXT_DETAILED_INFORMATION = struct {
	dwFlags                      DWORD
	ulFormatVersion              DWORD
	ulAssemblyCount              DWORD
	ulRootManifestPathType       DWORD
	ulRootManifestPathChars      DWORD
	ulRootConfigurationPathType  DWORD
	ulRootConfigurationPathChars DWORD
	ulAppDirPathType             DWORD
	ulAppDirPathChars            DWORD
	_                            [4]byte
	lpRootManifestPath           PCWSTR
	lpRootConfigurationPath      PCWSTR
	lpAppDirPath                 PCWSTR
} /* winnt.h:8230:13 */

type ACTIVATION_CONTEXT_DETAILED_INFORMATION = _ACTIVATION_CONTEXT_DETAILED_INFORMATION /* winnt.h:8243:7 */
type PACTIVATION_CONTEXT_DETAILED_INFORMATION = uintptr                                 /* winnt.h:8243:47 */

type PCACTIVATION_CONTEXT_QUERY_INDEX = uintptr                   /* winnt.h:8245:58 */
type PCASSEMBLY_FILE_DETAILED_INFORMATION = uintptr               /* winnt.h:8246:54 */
type PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = uintptr /* winnt.h:8247:76 */
type PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = uintptr         /* winnt.h:8248:68 */
type PCCOMPATIBILITY_CONTEXT_ELEMENT = uintptr                    /* winnt.h:8249:57 */
type PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = uintptr     /* winnt.h:8250:72 */
type PCACTIVATION_CONTEXT_DETAILED_INFORMATION = uintptr          /* winnt.h:8251:67 */

type RTL_VERIFIER_DLL_LOAD_CALLBACK = uintptr      /* winnt.h:8268:18 */
type RTL_VERIFIER_DLL_UNLOAD_CALLBACK = uintptr    /* winnt.h:8269:18 */
type RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK = uintptr /* winnt.h:8270:18 */

type _RTL_VERIFIER_THUNK_DESCRIPTOR = struct {
	ThunkName       PCHAR
	ThunkOldAddress PVOID
	ThunkNewAddress PVOID
} /* winnt.h:8272:13 */

type RTL_VERIFIER_THUNK_DESCRIPTOR = _RTL_VERIFIER_THUNK_DESCRIPTOR /* winnt.h:8276:7 */
type PRTL_VERIFIER_THUNK_DESCRIPTOR = uintptr                       /* winnt.h:8276:37 */

type _RTL_VERIFIER_DLL_DESCRIPTOR = struct {
	DllName    PWCHAR
	DllFlags   DWORD
	_          [4]byte
	DllAddress PVOID
	DllThunks  PRTL_VERIFIER_THUNK_DESCRIPTOR
} /* winnt.h:8278:13 */

type RTL_VERIFIER_DLL_DESCRIPTOR = _RTL_VERIFIER_DLL_DESCRIPTOR /* winnt.h:8283:7 */
type PRTL_VERIFIER_DLL_DESCRIPTOR = uintptr                     /* winnt.h:8283:35 */

type _RTL_VERIFIER_PROVIDER_DESCRIPTOR = struct {
	Length                        DWORD
	_                             [4]byte
	ProviderDlls                  PRTL_VERIFIER_DLL_DESCRIPTOR
	ProviderDllLoadCallback       RTL_VERIFIER_DLL_LOAD_CALLBACK
	ProviderDllUnloadCallback     RTL_VERIFIER_DLL_UNLOAD_CALLBACK
	VerifierImage                 PWSTR
	VerifierFlags                 DWORD
	VerifierDebug                 DWORD
	RtlpGetStackTraceAddress      PVOID
	RtlpDebugPageHeapCreate       PVOID
	RtlpDebugPageHeapDestroy      PVOID
	ProviderNtdllHeapFreeCallback RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK
} /* winnt.h:8285:13 */

type RTL_VERIFIER_PROVIDER_DESCRIPTOR = _RTL_VERIFIER_PROVIDER_DESCRIPTOR /* winnt.h:8297:7 */
type PRTL_VERIFIER_PROVIDER_DESCRIPTOR = uintptr                          /* winnt.h:8297:40 */

type _HARDWARE_COUNTER_DATA = struct {
	Type     HARDWARE_COUNTER_TYPE
	Reserved DWORD
	Value    DWORD64
} /* winnt.h:8410:13 */

type HARDWARE_COUNTER_DATA = _HARDWARE_COUNTER_DATA /* winnt.h:8414:7 */
type PHARDWARE_COUNTER_DATA = uintptr               /* winnt.h:8414:29 */

type _PERFORMANCE_DATA = struct {
	Size               WORD
	Version            BYTE
	HwCountersCount    BYTE
	ContextSwitchCount DWORD
	WaitReasonBitMap   DWORD64
	CycleTime          DWORD64
	RetryCount         DWORD
	Reserved           DWORD
	HwCounters         [16]HARDWARE_COUNTER_DATA
} /* winnt.h:8416:13 */

type PERFORMANCE_DATA = _PERFORMANCE_DATA /* winnt.h:8426:7 */
type PPERFORMANCE_DATA = uintptr          /* winnt.h:8426:24 */

type _EVENTLOGRECORD = struct {
	Length              DWORD
	Reserved            DWORD
	RecordNumber        DWORD
	TimeGenerated       DWORD
	TimeWritten         DWORD
	EventID             DWORD
	EventType           WORD
	NumStrings          WORD
	EventCategory       WORD
	ReservedFlags       WORD
	ClosingRecordNumber DWORD
	StringOffset        DWORD
	UserSidLength       DWORD
	UserSidOffset       DWORD
	DataLength          DWORD
	DataOffset          DWORD
} /* winnt.h:8457:13 */

type EVENTLOGRECORD = _EVENTLOGRECORD /* winnt.h:8474:7 */
type PEVENTLOGRECORD = uintptr        /* winnt.h:8474:22 */

type _EVENTSFORLOGFILE = struct {
	_                [0]uint32
	ulSize           DWORD
	szLogicalLogFile [256]WCHAR
	ulNumRecords     DWORD
} /* winnt.h:8478:13 */

type EVENTSFORLOGFILE = _EVENTSFORLOGFILE /* winnt.h:8483:7 */
type PEVENTSFORLOGFILE = uintptr          /* winnt.h:8483:24 */

type _PACKEDEVENTINFO = struct {
	_                     [0]uint32
	ulSize                DWORD
	ulNumEventsForLogFile DWORD
} /* winnt.h:8485:13 */

type PACKEDEVENTINFO = _PACKEDEVENTINFO /* winnt.h:8489:7 */
type PPACKEDEVENTINFO = uintptr         /* winnt.h:8489:23 */

type SERVICE_NODE_TYPE = uint32 /* winnt.h:8587:7 */

type SERVICE_LOAD_TYPE = uint32 /* winnt.h:8592:7 */

type SERVICE_ERROR_TYPE = uint32 /* winnt.h:8596:7 */

type _TAPE_ERASE = struct {
	Type      DWORD
	Immediate BOOLEAN
	_         [3]byte
} /* winnt.h:8615:13 */

type TAPE_ERASE = _TAPE_ERASE /* winnt.h:8618:7 */
type PTAPE_ERASE = uintptr    /* winnt.h:8618:18 */

type _TAPE_PREPARE = struct {
	Operation DWORD
	Immediate BOOLEAN
	_         [3]byte
} /* winnt.h:8627:13 */

type TAPE_PREPARE = _TAPE_PREPARE /* winnt.h:8630:7 */
type PTAPE_PREPARE = uintptr      /* winnt.h:8630:20 */

type _TAPE_WRITE_MARKS = struct {
	Type      DWORD
	Count     DWORD
	Immediate BOOLEAN
	_         [3]byte
} /* winnt.h:8637:13 */

type TAPE_WRITE_MARKS = _TAPE_WRITE_MARKS /* winnt.h:8641:7 */
type PTAPE_WRITE_MARKS = uintptr          /* winnt.h:8641:24 */

type _TAPE_GET_POSITION = struct {
	Type      DWORD
	Partition DWORD
	Offset    LARGE_INTEGER
} /* winnt.h:8647:13 */

type TAPE_GET_POSITION = _TAPE_GET_POSITION /* winnt.h:8651:7 */
type PTAPE_GET_POSITION = uintptr           /* winnt.h:8651:25 */

type _TAPE_SET_POSITION = struct {
	Method    DWORD
	Partition DWORD
	Offset    LARGE_INTEGER
	Immediate BOOLEAN
	_         [7]byte
} /* winnt.h:8664:13 */

type TAPE_SET_POSITION = _TAPE_SET_POSITION /* winnt.h:8669:7 */
type PTAPE_SET_POSITION = uintptr           /* winnt.h:8669:25 */

type _TAPE_GET_DRIVE_PARAMETERS = struct {
	ECC                   BOOLEAN
	Compression           BOOLEAN
	DataPadding           BOOLEAN
	ReportSetmarks        BOOLEAN
	DefaultBlockSize      DWORD
	MaximumBlockSize      DWORD
	MinimumBlockSize      DWORD
	MaximumPartitionCount DWORD
	FeaturesLow           DWORD
	FeaturesHigh          DWORD
	EOTWarningZoneSize    DWORD
} /* winnt.h:8738:13 */

type TAPE_GET_DRIVE_PARAMETERS = _TAPE_GET_DRIVE_PARAMETERS /* winnt.h:8750:7 */
type PTAPE_GET_DRIVE_PARAMETERS = uintptr                   /* winnt.h:8750:33 */

type _TAPE_SET_DRIVE_PARAMETERS = struct {
	ECC                BOOLEAN
	Compression        BOOLEAN
	DataPadding        BOOLEAN
	ReportSetmarks     BOOLEAN
	EOTWarningZoneSize DWORD
} /* winnt.h:8752:13 */

type TAPE_SET_DRIVE_PARAMETERS = _TAPE_SET_DRIVE_PARAMETERS /* winnt.h:8758:7 */
type PTAPE_SET_DRIVE_PARAMETERS = uintptr                   /* winnt.h:8758:33 */

type _TAPE_GET_MEDIA_PARAMETERS = struct {
	Capacity       LARGE_INTEGER
	Remaining      LARGE_INTEGER
	BlockSize      DWORD
	PartitionCount DWORD
	WriteProtected BOOLEAN
	_              [7]byte
} /* winnt.h:8760:13 */

type TAPE_GET_MEDIA_PARAMETERS = _TAPE_GET_MEDIA_PARAMETERS /* winnt.h:8766:7 */
type PTAPE_GET_MEDIA_PARAMETERS = uintptr                   /* winnt.h:8766:33 */

type _TAPE_SET_MEDIA_PARAMETERS = struct{ BlockSize DWORD } /* winnt.h:8768:13 */

type TAPE_SET_MEDIA_PARAMETERS = _TAPE_SET_MEDIA_PARAMETERS /* winnt.h:8770:7 */
type PTAPE_SET_MEDIA_PARAMETERS = uintptr                   /* winnt.h:8770:33 */

type _TAPE_CREATE_PARTITION = struct {
	Method DWORD
	Count  DWORD
	Size   DWORD
} /* winnt.h:8776:13 */

type TAPE_CREATE_PARTITION = _TAPE_CREATE_PARTITION /* winnt.h:8780:7 */
type PTAPE_CREATE_PARTITION = uintptr               /* winnt.h:8780:29 */

type _TAPE_WMI_OPERATIONS = struct {
	Method         DWORD
	DataBufferSize DWORD
	DataBuffer     PVOID
} /* winnt.h:8788:13 */

type TAPE_WMI_OPERATIONS = _TAPE_WMI_OPERATIONS /* winnt.h:8792:7 */
type PTAPE_WMI_OPERATIONS = uintptr             /* winnt.h:8792:27 */

type TAPE_DRIVE_PROBLEM_TYPE = uint32 /* winnt.h:8796:7 */

type TP_VERSION = DWORD              /* winnt.h:8799:17 */
type PTP_VERSION = uintptr           /* winnt.h:8799:28 */
type PTP_CALLBACK_INSTANCE = uintptr /* winnt.h:8800:61 */
type PTP_SIMPLE_CALLBACK = uintptr   /* winnt.h:8801:16 */
type PTP_POOL = uintptr              /* winnt.h:8802:35 */

type TP_CALLBACK_PRIORITY = uint32 /* winnt.h:8810:5 */

type _TP_POOL_STACK_INFORMATION = struct {
	StackReserve SIZE_T
	StackCommit  SIZE_T
} /* winnt.h:8812:11 */

type TP_POOL_STACK_INFORMATION = _TP_POOL_STACK_INFORMATION /* winnt.h:8815:5 */
type PTP_POOL_STACK_INFORMATION = uintptr                   /* winnt.h:8815:32 */
type PTP_CLEANUP_GROUP = uintptr                            /* winnt.h:8817:53 */
type PTP_CLEANUP_GROUP_CANCEL_CALLBACK = uintptr            /* winnt.h:8818:16 */

type _TP_CALLBACK_ENVIRON_V1 = struct {
	Version                    TP_VERSION
	_                          [4]byte
	Pool                       PTP_POOL
	CleanupGroup               PTP_CLEANUP_GROUP
	CleanupGroupCancelCallback PTP_CLEANUP_GROUP_CANCEL_CALLBACK
	RaceDll                    PVOID
	ActivationContext          uintptr
	FinalizationCallback       PTP_SIMPLE_CALLBACK
	u                          struct{ Flags DWORD }
	_                          [4]byte
} /* winnt.h:8842:11 */

type TP_CALLBACK_ENVIRON_V1 = _TP_CALLBACK_ENVIRON_V1 /* winnt.h:8858:5 */
type TP_CALLBACK_ENVIRON = TP_CALLBACK_ENVIRON_V1     /* winnt.h:8859:34 */
type PTP_CALLBACK_ENVIRON = uintptr                   /* winnt.h:8859:54 */
type PTP_WORK = uintptr                               /* winnt.h:8862:35 */
type PTP_WORK_CALLBACK = uintptr                      /* winnt.h:8863:16 */
type PTP_TIMER = uintptr                              /* winnt.h:8864:37 */
type PTP_TIMER_CALLBACK = uintptr                     /* winnt.h:8865:16 */
type TP_WAIT_RESULT = DWORD                           /* winnt.h:8866:17 */
type PTP_WAIT = uintptr                               /* winnt.h:8867:35 */
type PTP_WAIT_CALLBACK = uintptr                      /* winnt.h:8868:16 */
type PTP_IO = uintptr                                 /* winnt.h:8869:31 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type CRM_PROTOCOL_ID = GUID     /* ktmtypes.h:13:16 */
type PCRM_PROTOCOL_ID = uintptr /* ktmtypes.h:13:32 */

type NOTIFICATION_MASK = ULONG /* ktmtypes.h:38:17 */

type _TRANSACTION_NOTIFICATION = struct {
	TransactionKey          PVOID
	TransactionNotification ULONG
	_                       [4]byte
	TmVirtualClock          LARGE_INTEGER
	ArgumentLength          ULONG
	_                       [4]byte
} /* ktmtypes.h:78:11 */

type TRANSACTION_NOTIFICATION = _TRANSACTION_NOTIFICATION /* ktmtypes.h:83:5 */
type PTRANSACTION_NOTIFICATION = uintptr                  /* ktmtypes.h:83:30 */

type _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = struct {
	EnlistmentId GUID
	UOW          GUID
} /* ktmtypes.h:85:11 */

type TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT /* ktmtypes.h:88:5 */
type PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = uintptr                                    /* ktmtypes.h:88:48 */

type _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = struct {
	TmIdentity GUID
	Flags      ULONG
} /* ktmtypes.h:92:11 */

type TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT /* ktmtypes.h:95:5 */
type PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = uintptr                                     /* ktmtypes.h:95:49 */

type SAVEPOINT_ID = ULONG    /* ktmtypes.h:97:17 */
type PSAVEPOINT_ID = uintptr /* ktmtypes.h:97:30 */

type _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = struct{ SavepointId SAVEPOINT_ID } /* ktmtypes.h:99:11 */

type TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT /* ktmtypes.h:101:5 */
type PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = uintptr                                     /* ktmtypes.h:101:49 */

type _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = struct {
	PropagationCookie ULONG
	UOW               GUID
	TmIdentity        GUID
	BufferLength      ULONG
} /* ktmtypes.h:103:11 */

type TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT /* ktmtypes.h:108:5 */
type PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = uintptr                                     /* ktmtypes.h:108:49 */

type _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = struct {
	MarshalCookie ULONG
	UOW           GUID
} /* ktmtypes.h:110:11 */

type TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT /* ktmtypes.h:113:5 */
type PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = uintptr                                   /* ktmtypes.h:113:47 */

type TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT /* ktmtypes.h:115:55 */
type PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = uintptr                                    /* ktmtypes.h:115:97 */

type _KCRM_MARSHAL_HEADER = struct {
	VersionMajor ULONG
	VersionMinor ULONG
	NumProtocols ULONG
	Unused       ULONG
} /* ktmtypes.h:123:11 */

type KCRM_MARSHAL_HEADER = _KCRM_MARSHAL_HEADER /* ktmtypes.h:128:5 */
type PKCRM_MARSHAL_HEADER = uintptr             /* ktmtypes.h:128:25 */
type PRKCRM_MARSHAL_HEADER = uintptr            /* ktmtypes.h:128:47 */

type _KCRM_TRANSACTION_BLOB = struct {
	UOW            GUID
	TmIdentity     GUID
	IsolationLevel ULONG
	IsolationFlags ULONG
	Timeout        ULONG
	Description    [64]WCHAR
} /* ktmtypes.h:130:11 */

type KCRM_TRANSACTION_BLOB = _KCRM_TRANSACTION_BLOB /* ktmtypes.h:137:5 */
type PKCRM_TRANSACTION_BLOB = uintptr               /* ktmtypes.h:137:27 */
type PRKCRM_TRANSACTION_BLOB = uintptr              /* ktmtypes.h:137:51 */

type _KCRM_PROTOCOL_BLOB = struct {
	ProtocolId              CRM_PROTOCOL_ID
	StaticInfoLength        ULONG
	TransactionIdInfoLength ULONG
	Unused1                 ULONG
	Unused2                 ULONG
} /* ktmtypes.h:139:11 */

type KCRM_PROTOCOL_BLOB = _KCRM_PROTOCOL_BLOB /* ktmtypes.h:145:5 */
type PKCRM_PROTOCOL_BLOB = uintptr            /* ktmtypes.h:145:24 */
type PRKCRM_PROTOCOL_BLOB = uintptr           /* ktmtypes.h:145:45 */

type TRANSACTION_OUTCOME = uint32 /* winnt.h:9001:9 */

type TRANSACTION_STATE = uint32 /* winnt.h:9007:9 */

type _TRANSACTION_BASIC_INFORMATION = struct {
	TransactionId GUID
	State         DWORD
	Outcome       DWORD
} /* winnt.h:9009:15 */

type TRANSACTION_BASIC_INFORMATION = _TRANSACTION_BASIC_INFORMATION /* winnt.h:9013:9 */
type PTRANSACTION_BASIC_INFORMATION = uintptr                       /* winnt.h:9013:39 */

type _TRANSACTIONMANAGER_BASIC_INFORMATION = struct {
	TmIdentity   GUID
	VirtualClock LARGE_INTEGER
} /* winnt.h:9015:15 */

type TRANSACTIONMANAGER_BASIC_INFORMATION = _TRANSACTIONMANAGER_BASIC_INFORMATION /* winnt.h:9018:9 */
type PTRANSACTIONMANAGER_BASIC_INFORMATION = uintptr                              /* winnt.h:9018:46 */

type _TRANSACTIONMANAGER_LOG_INFORMATION = struct{ LogIdentity GUID } /* winnt.h:9020:15 */

type TRANSACTIONMANAGER_LOG_INFORMATION = _TRANSACTIONMANAGER_LOG_INFORMATION /* winnt.h:9022:9 */
type PTRANSACTIONMANAGER_LOG_INFORMATION = uintptr                            /* winnt.h:9022:44 */

type _TRANSACTIONMANAGER_LOGPATH_INFORMATION = struct {
	LogPathLength DWORD
	LogPath       [1]WCHAR
	_             [2]byte
} /* winnt.h:9024:15 */

type TRANSACTIONMANAGER_LOGPATH_INFORMATION = _TRANSACTIONMANAGER_LOGPATH_INFORMATION /* winnt.h:9027:9 */
type PTRANSACTIONMANAGER_LOGPATH_INFORMATION = uintptr                                /* winnt.h:9027:48 */

type _TRANSACTIONMANAGER_RECOVERY_INFORMATION = struct{ LastRecoveredLsn ULONGLONG } /* winnt.h:9029:15 */

type TRANSACTIONMANAGER_RECOVERY_INFORMATION = _TRANSACTIONMANAGER_RECOVERY_INFORMATION /* winnt.h:9031:9 */
type PTRANSACTIONMANAGER_RECOVERY_INFORMATION = uintptr                                 /* winnt.h:9031:49 */

type _TRANSACTIONMANAGER_OLDEST_INFORMATION = struct{ OldestTransactionGuid GUID } /* winnt.h:9033:15 */

type TRANSACTIONMANAGER_OLDEST_INFORMATION = _TRANSACTIONMANAGER_OLDEST_INFORMATION /* winnt.h:9035:9 */
type PTRANSACTIONMANAGER_OLDEST_INFORMATION = uintptr                               /* winnt.h:9035:47 */

type _TRANSACTION_PROPERTIES_INFORMATION = struct {
	IsolationLevel    DWORD
	IsolationFlags    DWORD
	Timeout           LARGE_INTEGER
	Outcome           DWORD
	DescriptionLength DWORD
	Description       [1]WCHAR
	_                 [6]byte
} /* winnt.h:9037:15 */

type TRANSACTION_PROPERTIES_INFORMATION = _TRANSACTION_PROPERTIES_INFORMATION /* winnt.h:9044:9 */
type PTRANSACTION_PROPERTIES_INFORMATION = uintptr                            /* winnt.h:9044:44 */

type _TRANSACTION_BIND_INFORMATION = struct{ TmHandle HANDLE } /* winnt.h:9046:15 */

type TRANSACTION_BIND_INFORMATION = _TRANSACTION_BIND_INFORMATION /* winnt.h:9048:9 */
type PTRANSACTION_BIND_INFORMATION = uintptr                      /* winnt.h:9048:38 */

type _TRANSACTION_ENLISTMENT_PAIR = struct {
	EnlistmentId      GUID
	ResourceManagerId GUID
} /* winnt.h:9050:15 */

type TRANSACTION_ENLISTMENT_PAIR = _TRANSACTION_ENLISTMENT_PAIR /* winnt.h:9053:9 */
type PTRANSACTION_ENLISTMENT_PAIR = uintptr                     /* winnt.h:9053:37 */

type _TRANSACTION_ENLISTMENTS_INFORMATION = struct {
	NumberOfEnlistments DWORD
	EnlistmentPair      [1]TRANSACTION_ENLISTMENT_PAIR
} /* winnt.h:9055:15 */

type TRANSACTION_ENLISTMENTS_INFORMATION = _TRANSACTION_ENLISTMENTS_INFORMATION /* winnt.h:9058:9 */
type PTRANSACTION_ENLISTMENTS_INFORMATION = uintptr                             /* winnt.h:9058:45 */

type _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = struct{ SuperiorEnlistmentPair TRANSACTION_ENLISTMENT_PAIR } /* winnt.h:9060:15 */

type TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION /* winnt.h:9062:9 */
type PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = uintptr                                     /* winnt.h:9062:53 */

type _RESOURCEMANAGER_BASIC_INFORMATION = struct {
	ResourceManagerId GUID
	DescriptionLength DWORD
	Description       [1]WCHAR
	_                 [2]byte
} /* winnt.h:9064:15 */

type RESOURCEMANAGER_BASIC_INFORMATION = _RESOURCEMANAGER_BASIC_INFORMATION /* winnt.h:9068:9 */
type PRESOURCEMANAGER_BASIC_INFORMATION = uintptr                           /* winnt.h:9068:43 */

type _RESOURCEMANAGER_COMPLETION_INFORMATION = struct {
	IoCompletionPortHandle HANDLE
	CompletionKey          ULONG_PTR
} /* winnt.h:9070:15 */

type RESOURCEMANAGER_COMPLETION_INFORMATION = _RESOURCEMANAGER_COMPLETION_INFORMATION /* winnt.h:9073:9 */
type PRESOURCEMANAGER_COMPLETION_INFORMATION = uintptr                                /* winnt.h:9073:48 */

type TRANSACTION_INFORMATION_CLASS = uint32 /* winnt.h:9082:9 */

type TRANSACTIONMANAGER_INFORMATION_CLASS = uint32 /* winnt.h:9091:9 */

type RESOURCEMANAGER_INFORMATION_CLASS = uint32 /* winnt.h:9096:9 */

type _ENLISTMENT_BASIC_INFORMATION = struct {
	EnlistmentId      GUID
	TransactionId     GUID
	ResourceManagerId GUID
} /* winnt.h:9098:15 */

type ENLISTMENT_BASIC_INFORMATION = _ENLISTMENT_BASIC_INFORMATION /* winnt.h:9102:9 */
type PENLISTMENT_BASIC_INFORMATION = uintptr                      /* winnt.h:9102:38 */

type _ENLISTMENT_CRM_INFORMATION = struct {
	CrmTransactionManagerId GUID
	CrmResourceManagerId    GUID
	CrmEnlistmentId         GUID
} /* winnt.h:9104:15 */

type ENLISTMENT_CRM_INFORMATION = _ENLISTMENT_CRM_INFORMATION /* winnt.h:9108:9 */
type PENLISTMENT_CRM_INFORMATION = uintptr                    /* winnt.h:9108:36 */

type ENLISTMENT_INFORMATION_CLASS = uint32 /* winnt.h:9114:9 */

type _TRANSACTION_LIST_ENTRY = struct{ UOW GUID } /* winnt.h:9116:15 */

type TRANSACTION_LIST_ENTRY = _TRANSACTION_LIST_ENTRY /* winnt.h:9118:9 */
type PTRANSACTION_LIST_ENTRY = uintptr                /* winnt.h:9118:32 */

type _TRANSACTION_LIST_INFORMATION = struct {
	NumberOfTransactions   DWORD
	TransactionInformation [1]TRANSACTION_LIST_ENTRY
} /* winnt.h:9120:15 */

type TRANSACTION_LIST_INFORMATION = _TRANSACTION_LIST_INFORMATION /* winnt.h:9123:9 */
type PTRANSACTION_LIST_INFORMATION = uintptr                      /* winnt.h:9123:38 */

type KTMOBJECT_TYPE = uint32   /* winnt.h:9131:9 */
type PKTMOBJECT_TYPE = uintptr /* winnt.h:9131:24 */

type _KTMOBJECT_CURSOR = struct {
	LastQuery     GUID
	ObjectIdCount DWORD
	ObjectIds     [1]GUID
} /* winnt.h:9133:15 */

type KTMOBJECT_CURSOR = _KTMOBJECT_CURSOR /* winnt.h:9137:9 */
type PKTMOBJECT_CURSOR = uintptr          /* winnt.h:9137:26 */

// Field Names From (See _fields_ section)
// FIXME: Verify these against documentation
// -- These documentation describes Win32 Constants and Structures in Python --
// Constants - http://packages.python.org/winappdbg/winappdbg.win32.context_i386-pysrc.html
// WOW64_FLOATING_SAVE_AREA - http://packages.python.org/winappdbg/winappdbg.win32.context_amd64.WOW64_FLOATING_SAVE_AREA-class.html
// WOW64_CONTEXT - http://packages.python.org/winappdbg/winappdbg.win32.context_amd64.WOW64_CONTEXT-class.html

type _WOW64_FLOATING_SAVE_AREA = struct {
	ControlWord   DWORD
	StatusWord    DWORD
	TagWord       DWORD
	ErrorOffset   DWORD
	ErrorSelector DWORD
	DataOffset    DWORD
	DataSelector  DWORD
	RegisterArea  [80]BYTE
	Cr0NpxState   DWORD
} /* winnt.h:9174:9 */

// Field Names From (See _fields_ section)
// FIXME: Verify these against documentation
// -- These documentation describes Win32 Constants and Structures in Python --
// Constants - http://packages.python.org/winappdbg/winappdbg.win32.context_i386-pysrc.html
// WOW64_FLOATING_SAVE_AREA - http://packages.python.org/winappdbg/winappdbg.win32.context_amd64.WOW64_FLOATING_SAVE_AREA-class.html
// WOW64_CONTEXT - http://packages.python.org/winappdbg/winappdbg.win32.context_amd64.WOW64_CONTEXT-class.html

type WOW64_FLOATING_SAVE_AREA = _WOW64_FLOATING_SAVE_AREA /* winnt.h:9184:3 */
type PWOW64_FLOATING_SAVE_AREA = uintptr                  /* winnt.h:9184:29 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type _WOW64_CONTEXT = struct {
	ContextFlags      DWORD
	Dr0               DWORD
	Dr1               DWORD
	Dr2               DWORD
	Dr3               DWORD
	Dr6               DWORD
	Dr7               DWORD
	FloatSave         WOW64_FLOATING_SAVE_AREA
	SegGs             DWORD
	SegFs             DWORD
	SegEs             DWORD
	SegDs             DWORD
	Edi               DWORD
	Esi               DWORD
	Ebx               DWORD
	Edx               DWORD
	Ecx               DWORD
	Eax               DWORD
	Ebp               DWORD
	Eip               DWORD
	SegCs             DWORD
	EFlags            DWORD
	Esp               DWORD
	SegSs             DWORD
	ExtendedRegisters [512]BYTE
} /* winnt.h:9187:9 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type WOW64_CONTEXT = _WOW64_CONTEXT /* winnt.h:9213:3 */
type PWOW64_CONTEXT = uintptr       /* winnt.h:9213:18 */
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _WOW64_LDT_ENTRY = struct {
	LimitLow WORD
	BaseLow  WORD
	HighWord struct {
		_     [0]uint32
		Bytes struct {
			BaseMid BYTE
			Flags1  BYTE
			Flags2  BYTE
			BaseHi  BYTE
		}
	}
} /* winnt.h:9216:9 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type WOW64_LDT_ENTRY = _WOW64_LDT_ENTRY /* winnt.h:9239:3 */
type PWOW64_LDT_ENTRY = uintptr         /* winnt.h:9239:20 */

type _WOW64_DESCRIPTOR_TABLE_ENTRY = struct {
	Selector   DWORD
	Descriptor WOW64_LDT_ENTRY
} /* winnt.h:9241:13 */

type WOW64_DESCRIPTOR_TABLE_ENTRY = _WOW64_DESCRIPTOR_TABLE_ENTRY /* winnt.h:9244:7 */
type PWOW64_DESCRIPTOR_TABLE_ENTRY = uintptr                      /* winnt.h:9244:36 */

type WPARAM = UINT_PTR  /* minwindef.h:166:20 */
type LPARAM = LONG_PTR  /* minwindef.h:167:20 */
type LRESULT = LONG_PTR /* minwindef.h:168:20 */

type SPHANDLE = uintptr    /* minwindef.h:189:18 */
type LPHANDLE = uintptr    /* minwindef.h:190:18 */
type HGLOBAL = HANDLE      /* minwindef.h:191:18 */
type HLOCAL = HANDLE       /* minwindef.h:192:18 */
type GLOBALHANDLE = HANDLE /* minwindef.h:193:18 */
type LOCALHANDLE = HANDLE  /* minwindef.h:194:18 */
type FARPROC = uintptr     /* minwindef.h:196:19 */
type NEARPROC = uintptr    /* minwindef.h:197:19 */
type PROC = uintptr        /* minwindef.h:198:19 */

type ATOM = WORD /* minwindef.h:205:16 */

type HFILE = int32                        /* minwindef.h:207:15 */
type HINSTANCE__ = struct{ unused int32 } /* minwindef.h:208:3 */

type HINSTANCE = uintptr             /* minwindef.h:208:3 */
type HKEY__ = struct{ unused int32 } /* minwindef.h:209:3 */

type HKEY = uintptr                 /* minwindef.h:209:3 */
type PHKEY = uintptr                /* minwindef.h:210:16 */
type HKL__ = struct{ unused int32 } /* minwindef.h:211:3 */

type HKL = uintptr                     /* minwindef.h:211:3 */
type HLSURF__ = struct{ unused int32 } /* minwindef.h:212:3 */

type HLSURF = uintptr                     /* minwindef.h:212:3 */
type HMETAFILE__ = struct{ unused int32 } /* minwindef.h:213:3 */

type HMETAFILE = uintptr             /* minwindef.h:213:3 */
type HMODULE = HINSTANCE             /* minwindef.h:214:21 */
type HRGN__ = struct{ unused int32 } /* minwindef.h:215:3 */

type HRGN = uintptr                   /* minwindef.h:215:3 */
type HRSRC__ = struct{ unused int32 } /* minwindef.h:216:3 */

type HRSRC = uintptr                    /* minwindef.h:216:3 */
type HSPRITE__ = struct{ unused int32 } /* minwindef.h:217:3 */

type HSPRITE = uintptr               /* minwindef.h:217:3 */
type HSTR__ = struct{ unused int32 } /* minwindef.h:218:3 */

type HSTR = uintptr                   /* minwindef.h:218:3 */
type HTASK__ = struct{ unused int32 } /* minwindef.h:219:3 */

type HTASK = uintptr                    /* minwindef.h:219:3 */
type HWINSTA__ = struct{ unused int32 } /* minwindef.h:220:3 */

type HWINSTA = uintptr /* minwindef.h:220:3 */

type _FILETIME = struct {
	dwLowDateTime  DWORD
	dwHighDateTime DWORD
} /* minwindef.h:222:11 */

type FILETIME = _FILETIME /* minwindef.h:225:5 */
type PFILETIME = uintptr  /* minwindef.h:225:14 */
type LPFILETIME = uintptr /* minwindef.h:225:25 */

// Make sure winnt.h is included.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type HWND__ = struct{ unused int32 } /* windef.h:26:1 */

type HWND = uintptr                   /* windef.h:26:1 */
type HHOOK__ = struct{ unused int32 } /* windef.h:27:1 */

type HHOOK = uintptr /* windef.h:27:1 */

type HGDIOBJ = uintptr /* windef.h:38:16 */

type HACCEL__ = struct{ unused int32 } /* windef.h:43:1 */

type HACCEL = uintptr                   /* windef.h:43:1 */
type HBITMAP__ = struct{ unused int32 } /* windef.h:44:1 */

type HBITMAP = uintptr                 /* windef.h:44:1 */
type HBRUSH__ = struct{ unused int32 } /* windef.h:45:1 */

type HBRUSH = uintptr                       /* windef.h:45:1 */
type HCOLORSPACE__ = struct{ unused int32 } /* windef.h:46:1 */

type HCOLORSPACE = uintptr          /* windef.h:46:1 */
type HDC__ = struct{ unused int32 } /* windef.h:47:1 */

type HDC = uintptr                    /* windef.h:47:1 */
type HGLRC__ = struct{ unused int32 } /* windef.h:48:1 */

type HGLRC = uintptr                  /* windef.h:48:1 */
type HDESK__ = struct{ unused int32 } /* windef.h:49:1 */

type HDESK = uintptr                         /* windef.h:49:1 */
type HENHMETAFILE__ = struct{ unused int32 } /* windef.h:50:1 */

type HENHMETAFILE = uintptr           /* windef.h:50:1 */
type HFONT__ = struct{ unused int32 } /* windef.h:51:1 */

type HFONT = uintptr                  /* windef.h:51:1 */
type HICON__ = struct{ unused int32 } /* windef.h:52:1 */

type HICON = uintptr                  /* windef.h:52:1 */
type HMENU__ = struct{ unused int32 } /* windef.h:53:1 */

type HMENU = uintptr                     /* windef.h:53:1 */
type HPALETTE__ = struct{ unused int32 } /* windef.h:54:1 */

type HPALETTE = uintptr              /* windef.h:54:1 */
type HPEN__ = struct{ unused int32 } /* windef.h:55:1 */

type HPEN = uintptr                      /* windef.h:55:1 */
type HMONITOR__ = struct{ unused int32 } /* windef.h:56:1 */

type HMONITOR = uintptr                       /* windef.h:56:1 */
type HWINEVENTHOOK__ = struct{ unused int32 } /* windef.h:58:1 */

type HWINEVENTHOOK = uintptr /* windef.h:58:1 */

type HCURSOR = HICON  /* windef.h:60:15 */
type COLORREF = DWORD /* windef.h:61:15 */

type HUMPD__ = struct{ unused int32 } /* windef.h:65:1 */

type HUMPD = uintptr /* windef.h:65:1 */

type LPCOLORREF = uintptr /* windef.h:67:15 */

type tagRECT = struct {
	left   LONG
	top    LONG
	right  LONG
	bottom LONG
} /* windef.h:73:9 */

type RECT = tagRECT   /* windef.h:78:3 */
type PRECT = uintptr  /* windef.h:78:8 */
type NPRECT = uintptr /* windef.h:78:15 */
type LPRECT = uintptr /* windef.h:78:23 */

type LPCRECT = uintptr /* windef.h:80:20 */

type _RECTL = struct {
	left   LONG
	top    LONG
	right  LONG
	bottom LONG
} /* windef.h:82:9 */

type RECTL = _RECTL    /* windef.h:87:3 */
type PRECTL = uintptr  /* windef.h:87:9 */
type LPRECTL = uintptr /* windef.h:87:17 */

type LPCRECTL = uintptr /* windef.h:89:21 */

type tagPOINT = struct {
	x LONG
	y LONG
} /* windef.h:91:9 */

type POINT = tagPOINT  /* windef.h:94:3 */
type PPOINT = uintptr  /* windef.h:94:9 */
type NPPOINT = uintptr /* windef.h:94:17 */
type LPPOINT = uintptr /* windef.h:94:26 */

type _POINTL = struct {
	x LONG
	y LONG
} /* windef.h:96:9 */

type POINTL = _POINTL  /* windef.h:99:3 */
type PPOINTL = uintptr /* windef.h:99:10 */

type tagSIZE = struct {
	cx LONG
	cy LONG
} /* windef.h:101:9 */

type SIZE = tagSIZE   /* windef.h:104:3 */
type PSIZE = uintptr  /* windef.h:104:8 */
type LPSIZE = uintptr /* windef.h:104:15 */

type SIZEL = SIZE      /* windef.h:106:14 */
type PSIZEL = uintptr  /* windef.h:107:14 */
type LPSIZEL = uintptr /* windef.h:107:22 */

type tagPOINTS = struct {
	x SHORT
	y SHORT
} /* windef.h:109:9 */

type POINTS = tagPOINTS /* windef.h:112:3 */
type PPOINTS = uintptr  /* windef.h:112:10 */
type LPPOINTS = uintptr /* windef.h:112:19 */

type APP_LOCAL_DEVICE_ID1 = struct{ value [32]BYTE } /* windef.h:116:9 */

type APP_LOCAL_DEVICE_ID = APP_LOCAL_DEVICE_ID1 /* windef.h:118:3 */

type DPI_AWARENESS_CONTEXT__ = struct{ unused int32 } /* windef.h:155:1 */

type DPI_AWARENESS_CONTEXT = uintptr /* windef.h:155:1 */

type DPI_AWARENESS = int32 /* windef.h:162:3 */

type DPI_HOSTING_BEHAVIOR = int32 /* windef.h:174:3 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type _SECURITY_ATTRIBUTES = struct {
	nLength              DWORD
	_                    [4]byte
	lpSecurityDescriptor LPVOID
	bInheritHandle       WINBOOL
	_                    [4]byte
} /* minwinbase.h:13:11 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type SECURITY_ATTRIBUTES = _SECURITY_ATTRIBUTES /* minwinbase.h:17:5 */
type PSECURITY_ATTRIBUTES = uintptr             /* minwinbase.h:17:26 */
type LPSECURITY_ATTRIBUTES = uintptr            /* minwinbase.h:17:49 */

type _OVERLAPPED = struct {
	Internal     ULONG_PTR
	InternalHigh ULONG_PTR
	__16         struct {
		_   [0]uint64
		__0 struct {
			Offset     DWORD
			OffsetHigh DWORD
		}
	}
	hEvent HANDLE
} /* minwinbase.h:19:11 */

type OVERLAPPED = _OVERLAPPED /* minwinbase.h:30:5 */
type LPOVERLAPPED = uintptr   /* minwinbase.h:30:17 */

type _OVERLAPPED_ENTRY = struct {
	lpCompletionKey            ULONG_PTR
	lpOverlapped               LPOVERLAPPED
	Internal                   ULONG_PTR
	dwNumberOfBytesTransferred DWORD
	_                          [4]byte
} /* minwinbase.h:32:11 */

type OVERLAPPED_ENTRY = _OVERLAPPED_ENTRY /* minwinbase.h:37:5 */
type LPOVERLAPPED_ENTRY = uintptr         /* minwinbase.h:37:23 */

type _SYSTEMTIME = struct {
	wYear         WORD
	wMonth        WORD
	wDayOfWeek    WORD
	wDay          WORD
	wHour         WORD
	wMinute       WORD
	wSecond       WORD
	wMilliseconds WORD
} /* minwinbase.h:49:11 */

type SYSTEMTIME = _SYSTEMTIME /* minwinbase.h:58:5 */
type PSYSTEMTIME = uintptr    /* minwinbase.h:58:17 */
type LPSYSTEMTIME = uintptr   /* minwinbase.h:58:31 */

type _WIN32_FIND_DATAA = struct {
	dwFileAttributes   DWORD
	ftCreationTime     FILETIME
	ftLastAccessTime   FILETIME
	ftLastWriteTime    FILETIME
	nFileSizeHigh      DWORD
	nFileSizeLow       DWORD
	dwReserved0        DWORD
	dwReserved1        DWORD
	cFileName          [260]CHAR
	cAlternateFileName [14]CHAR
	_                  [2]byte
} /* minwinbase.h:61:11 */

type WIN32_FIND_DATAA = _WIN32_FIND_DATAA /* minwinbase.h:77:5 */
type PWIN32_FIND_DATAA = uintptr          /* minwinbase.h:77:23 */
type LPWIN32_FIND_DATAA = uintptr         /* minwinbase.h:77:43 */

type _WIN32_FIND_DATAW = struct {
	dwFileAttributes   DWORD
	ftCreationTime     FILETIME
	ftLastAccessTime   FILETIME
	ftLastWriteTime    FILETIME
	nFileSizeHigh      DWORD
	nFileSizeLow       DWORD
	dwReserved0        DWORD
	dwReserved1        DWORD
	cFileName          [260]WCHAR
	cAlternateFileName [14]WCHAR
} /* minwinbase.h:79:11 */

type WIN32_FIND_DATAW = _WIN32_FIND_DATAW /* minwinbase.h:95:5 */
type PWIN32_FIND_DATAW = uintptr          /* minwinbase.h:95:23 */
type LPWIN32_FIND_DATAW = uintptr         /* minwinbase.h:95:43 */

type WIN32_FIND_DATA = WIN32_FIND_DATAA     /* minwinbase.h:97:3 */
type PWIN32_FIND_DATA = PWIN32_FIND_DATAA   /* minwinbase.h:98:3 */
type LPWIN32_FIND_DATA = LPWIN32_FIND_DATAA /* minwinbase.h:99:3 */

type FINDEX_INFO_LEVELS = uint32 /* minwinbase.h:106:5 */

type FINDEX_SEARCH_OPS = uint32 /* minwinbase.h:119:5 */

type GET_FILEEX_INFO_LEVELS = uint32 /* minwinbase.h:134:5 */

type CRITICAL_SECTION = RTL_CRITICAL_SECTION                /* minwinbase.h:171:32 */
type PCRITICAL_SECTION = PRTL_CRITICAL_SECTION              /* minwinbase.h:172:33 */
type LPCRITICAL_SECTION = PRTL_CRITICAL_SECTION             /* minwinbase.h:173:33 */
type CRITICAL_SECTION_DEBUG = RTL_CRITICAL_SECTION_DEBUG    /* minwinbase.h:174:38 */
type PCRITICAL_SECTION_DEBUG = PRTL_CRITICAL_SECTION_DEBUG  /* minwinbase.h:175:39 */
type LPCRITICAL_SECTION_DEBUG = PRTL_CRITICAL_SECTION_DEBUG /* minwinbase.h:176:39 */

type LPOVERLAPPED_COMPLETION_ROUTINE = uintptr /* minwinbase.h:178:16 */

type _PROCESS_HEAP_ENTRY = struct {
	lpData       PVOID
	cbData       DWORD
	cbOverhead   BYTE
	iRegionIndex BYTE
	wFlags       WORD
	__16         struct {
		Block struct {
			hMem       HANDLE
			dwReserved [3]DWORD
			_          [4]byte
		}
	}
} /* minwinbase.h:183:11 */

type PROCESS_HEAP_ENTRY = _PROCESS_HEAP_ENTRY /* minwinbase.h:201:5 */
type LPPROCESS_HEAP_ENTRY = uintptr           /* minwinbase.h:201:24 */
type PPROCESS_HEAP_ENTRY = uintptr            /* minwinbase.h:201:46 */

type _REASON_CONTEXT = struct {
	Version ULONG
	Flags   DWORD
	Reason  struct {
		Detailed struct {
			LocalizedReasonModule HMODULE
			LocalizedReasonId     ULONG
			ReasonStringCount     ULONG
			ReasonStrings         uintptr
		}
	}
} /* minwinbase.h:210:11 */

type REASON_CONTEXT = _REASON_CONTEXT /* minwinbase.h:222:5 */
type PREASON_CONTEXT = uintptr        /* minwinbase.h:222:21 */

type PTHREAD_START_ROUTINE = uintptr                /* minwinbase.h:234:17 */
type LPTHREAD_START_ROUTINE = PTHREAD_START_ROUTINE /* minwinbase.h:235:33 */

type PENCLAVE_ROUTINE = uintptr           /* minwinbase.h:237:18 */
type LPENCLAVE_ROUTINE = PENCLAVE_ROUTINE /* minwinbase.h:238:28 */

type _EXCEPTION_DEBUG_INFO = struct {
	ExceptionRecord EXCEPTION_RECORD
	dwFirstChance   DWORD
	_               [4]byte
} /* minwinbase.h:240:11 */

type EXCEPTION_DEBUG_INFO = _EXCEPTION_DEBUG_INFO /* minwinbase.h:243:5 */
type LPEXCEPTION_DEBUG_INFO = uintptr             /* minwinbase.h:243:27 */

type _CREATE_THREAD_DEBUG_INFO = struct {
	hThread           HANDLE
	lpThreadLocalBase LPVOID
	lpStartAddress    LPTHREAD_START_ROUTINE
} /* minwinbase.h:245:11 */

type CREATE_THREAD_DEBUG_INFO = _CREATE_THREAD_DEBUG_INFO /* minwinbase.h:249:5 */
type LPCREATE_THREAD_DEBUG_INFO = uintptr                 /* minwinbase.h:249:31 */

type _CREATE_PROCESS_DEBUG_INFO = struct {
	hFile                 HANDLE
	hProcess              HANDLE
	hThread               HANDLE
	lpBaseOfImage         LPVOID
	dwDebugInfoFileOffset DWORD
	nDebugInfoSize        DWORD
	lpThreadLocalBase     LPVOID
	lpStartAddress        LPTHREAD_START_ROUTINE
	lpImageName           LPVOID
	fUnicode              WORD
	_                     [6]byte
} /* minwinbase.h:251:11 */

type CREATE_PROCESS_DEBUG_INFO = _CREATE_PROCESS_DEBUG_INFO /* minwinbase.h:262:5 */
type LPCREATE_PROCESS_DEBUG_INFO = uintptr                  /* minwinbase.h:262:32 */

type _EXIT_THREAD_DEBUG_INFO = struct{ dwExitCode DWORD } /* minwinbase.h:264:11 */

type EXIT_THREAD_DEBUG_INFO = _EXIT_THREAD_DEBUG_INFO /* minwinbase.h:266:5 */
type LPEXIT_THREAD_DEBUG_INFO = uintptr               /* minwinbase.h:266:29 */

type _EXIT_PROCESS_DEBUG_INFO = struct{ dwExitCode DWORD } /* minwinbase.h:268:11 */

type EXIT_PROCESS_DEBUG_INFO = _EXIT_PROCESS_DEBUG_INFO /* minwinbase.h:270:5 */
type LPEXIT_PROCESS_DEBUG_INFO = uintptr                /* minwinbase.h:270:30 */

type _LOAD_DLL_DEBUG_INFO = struct {
	hFile                 HANDLE
	lpBaseOfDll           LPVOID
	dwDebugInfoFileOffset DWORD
	nDebugInfoSize        DWORD
	lpImageName           LPVOID
	fUnicode              WORD
	_                     [6]byte
} /* minwinbase.h:272:11 */

type LOAD_DLL_DEBUG_INFO = _LOAD_DLL_DEBUG_INFO /* minwinbase.h:279:5 */
type LPLOAD_DLL_DEBUG_INFO = uintptr            /* minwinbase.h:279:26 */

type _UNLOAD_DLL_DEBUG_INFO = struct{ lpBaseOfDll LPVOID } /* minwinbase.h:281:11 */

type UNLOAD_DLL_DEBUG_INFO = _UNLOAD_DLL_DEBUG_INFO /* minwinbase.h:283:5 */
type LPUNLOAD_DLL_DEBUG_INFO = uintptr              /* minwinbase.h:283:28 */

type _OUTPUT_DEBUG_STRING_INFO = struct {
	lpDebugStringData  LPSTR
	fUnicode           WORD
	nDebugStringLength WORD
	_                  [4]byte
} /* minwinbase.h:285:11 */

type OUTPUT_DEBUG_STRING_INFO = _OUTPUT_DEBUG_STRING_INFO /* minwinbase.h:289:5 */
type LPOUTPUT_DEBUG_STRING_INFO = uintptr                 /* minwinbase.h:289:31 */

type _RIP_INFO = struct {
	dwError DWORD
	dwType  DWORD
} /* minwinbase.h:291:11 */

type RIP_INFO = _RIP_INFO /* minwinbase.h:294:5 */
type LPRIP_INFO = uintptr /* minwinbase.h:294:15 */

type _DEBUG_EVENT = struct {
	dwDebugEventCode DWORD
	dwProcessId      DWORD
	dwThreadId       DWORD
	_                [4]byte
	u                struct{ Exception EXCEPTION_DEBUG_INFO }
} /* minwinbase.h:296:11 */

type DEBUG_EVENT = _DEBUG_EVENT /* minwinbase.h:311:5 */
type LPDEBUG_EVENT = uintptr    /* minwinbase.h:311:18 */

type LPCONTEXT = PCONTEXT                  /* minwinbase.h:314:20 */
type BEM_FREE_INTERFACE_CALLBACK = uintptr /* bemapiset.h:21:16 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type PTOP_LEVEL_EXCEPTION_FILTER = uintptr                      /* errhandlingapi.h:17:14 */
type LPTOP_LEVEL_EXCEPTION_FILTER = PTOP_LEVEL_EXCEPTION_FILTER /* errhandlingapi.h:18:37 */
type _BY_HANDLE_FILE_INFORMATION = struct {
	dwFileAttributes     DWORD
	ftCreationTime       FILETIME
	ftLastAccessTime     FILETIME
	ftLastWriteTime      FILETIME
	dwVolumeSerialNumber DWORD
	nFileSizeHigh        DWORD
	nFileSizeLow         DWORD
	nNumberOfLinks       DWORD
	nFileIndexHigh       DWORD
	nFileIndexLow        DWORD
} /* fileapi.h:36:11 */

type BY_HANDLE_FILE_INFORMATION = _BY_HANDLE_FILE_INFORMATION /* fileapi.h:47:5 */
type PBY_HANDLE_FILE_INFORMATION = uintptr                    /* fileapi.h:47:33 */
type LPBY_HANDLE_FILE_INFORMATION = uintptr                   /* fileapi.h:48:5 */

type _WIN32_FILE_ATTRIBUTE_DATA = struct {
	dwFileAttributes DWORD
	ftCreationTime   FILETIME
	ftLastAccessTime FILETIME
	ftLastWriteTime  FILETIME
	nFileSizeHigh    DWORD
	nFileSizeLow     DWORD
} /* fileapi.h:142:11 */

type WIN32_FILE_ATTRIBUTE_DATA = _WIN32_FILE_ATTRIBUTE_DATA /* fileapi.h:149:5 */
type LPWIN32_FILE_ATTRIBUTE_DATA = uintptr                  /* fileapi.h:149:32 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type _HEAP_SUMMARY = struct {
	cb           DWORD
	_            [4]byte
	cbAllocated  SIZE_T
	cbCommitted  SIZE_T
	cbReserved   SIZE_T
	cbMaxReserve SIZE_T
} /* heapapi.h:18:11 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type HEAP_SUMMARY = _HEAP_SUMMARY /* heapapi.h:24:5 */
type PHEAP_SUMMARY = uintptr      /* heapapi.h:24:18 */

type LPHEAP_SUMMARY = PHEAP_SUMMARY /* heapapi.h:26:25 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type tagENUMUILANG = struct {
	NumOfEnumUILang    ULONG
	SizeOfEnumUIBuffer ULONG
	pEnumUIBuffer      uintptr
} /* libloaderapi.h:18:11 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type ENUMUILANG = tagENUMUILANG /* libloaderapi.h:22:5 */
type PENUMUILANG = uintptr      /* libloaderapi.h:22:17 */

type ENUMRESLANGPROCA = uintptr /* libloaderapi.h:25:19 */
type ENUMRESLANGPROCW = uintptr /* libloaderapi.h:26:19 */
type ENUMRESNAMEPROCA = uintptr /* libloaderapi.h:27:19 */
type ENUMRESNAMEPROCW = uintptr /* libloaderapi.h:28:19 */
type ENUMRESTYPEPROCA = uintptr /* libloaderapi.h:29:19 */
type ENUMRESTYPEPROCW = uintptr /* libloaderapi.h:30:19 */

type PGET_MODULE_HANDLE_EXA = uintptr /* libloaderapi.h:41:19 */
type PGET_MODULE_HANDLE_EXW = uintptr /* libloaderapi.h:42:19 */

type DLL_DIRECTORY_COOKIE = PVOID    /* libloaderapi.h:45:17 */
type PDLL_DIRECTORY_COOKIE = uintptr /* libloaderapi.h:45:39 */

type _REDIRECTION_FUNCTION_DESCRIPTOR = struct {
	DllName           PCSTR
	FunctionName      PCSTR
	RedirectionTarget PVOID
} /* libloaderapi.h:158:9 */

type REDIRECTION_FUNCTION_DESCRIPTOR = _REDIRECTION_FUNCTION_DESCRIPTOR /* libloaderapi.h:162:3 */
type PREDIRECTION_FUNCTION_DESCRIPTOR = uintptr                         /* libloaderapi.h:162:36 */

type PCREDIRECTION_FUNCTION_DESCRIPTOR = uintptr /* libloaderapi.h:164:47 */

type _REDIRECTION_DESCRIPTOR = struct {
	Version       ULONG
	FunctionCount ULONG
	Redirections  PCREDIRECTION_FUNCTION_DESCRIPTOR
} /* libloaderapi.h:166:9 */

type REDIRECTION_DESCRIPTOR = _REDIRECTION_DESCRIPTOR /* libloaderapi.h:170:3 */
type PREDIRECTION_DESCRIPTOR = uintptr                /* libloaderapi.h:170:27 */

type PCREDIRECTION_DESCRIPTOR = uintptr /* libloaderapi.h:172:38 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type MEMORY_RESOURCE_NOTIFICATION_TYPE = uint32 /* memoryapi.h:21:5 */

type _STARTUPINFOA = struct {
	cb              DWORD
	_               [4]byte
	lpReserved      LPSTR
	lpDesktop       LPSTR
	lpTitle         LPSTR
	dwX             DWORD
	dwY             DWORD
	dwXSize         DWORD
	dwYSize         DWORD
	dwXCountChars   DWORD
	dwYCountChars   DWORD
	dwFillAttribute DWORD
	dwFlags         DWORD
	wShowWindow     WORD
	cbReserved2     WORD
	_               [4]byte
	lpReserved2     LPBYTE
	hStdInput       HANDLE
	hStdOutput      HANDLE
	hStdError       HANDLE
} /* processthreadsapi.h:51:11 */

type STARTUPINFOA = _STARTUPINFOA /* processthreadsapi.h:70:5 */
type LPSTARTUPINFOA = uintptr     /* processthreadsapi.h:70:19 */

type _STARTUPINFOW = struct {
	cb              DWORD
	_               [4]byte
	lpReserved      LPWSTR
	lpDesktop       LPWSTR
	lpTitle         LPWSTR
	dwX             DWORD
	dwY             DWORD
	dwXSize         DWORD
	dwYSize         DWORD
	dwXCountChars   DWORD
	dwYCountChars   DWORD
	dwFillAttribute DWORD
	dwFlags         DWORD
	wShowWindow     WORD
	cbReserved2     WORD
	_               [4]byte
	lpReserved2     LPBYTE
	hStdInput       HANDLE
	hStdOutput      HANDLE
	hStdError       HANDLE
} /* processthreadsapi.h:72:11 */

type STARTUPINFOW = _STARTUPINFOW /* processthreadsapi.h:91:5 */
type LPSTARTUPINFOW = uintptr     /* processthreadsapi.h:91:19 */

type STARTUPINFO = STARTUPINFOA     /* processthreadsapi.h:93:3 */
type LPSTARTUPINFO = LPSTARTUPINFOA /* processthreadsapi.h:94:3 */

type _PROCESS_INFORMATION = struct {
	hProcess    HANDLE
	hThread     HANDLE
	dwProcessId DWORD
	dwThreadId  DWORD
} /* processthreadsapi.h:96:11 */

type PROCESS_INFORMATION = _PROCESS_INFORMATION /* processthreadsapi.h:101:5 */
type PPROCESS_INFORMATION = uintptr             /* processthreadsapi.h:101:26 */
type LPPROCESS_INFORMATION = uintptr            /* processthreadsapi.h:101:49 */

type PPROC_THREAD_ATTRIBUTE_LIST = uintptr  /* processthreadsapi.h:106:46 */
type LPPROC_THREAD_ATTRIBUTE_LIST = uintptr /* processthreadsapi.h:106:76 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type SRWLOCK = RTL_SRWLOCK /* synchapi.h:34:23 */
type PSRWLOCK = uintptr    /* synchapi.h:34:32 */

type INIT_ONCE = RTL_RUN_ONCE    /* synchapi.h:36:24 */
type PINIT_ONCE = PRTL_RUN_ONCE  /* synchapi.h:37:25 */
type LPINIT_ONCE = PRTL_RUN_ONCE /* synchapi.h:38:25 */

type PINIT_ONCE_FN = uintptr                     /* synchapi.h:40:19 */
type CONDITION_VARIABLE = RTL_CONDITION_VARIABLE /* synchapi.h:41:34 */
type PCONDITION_VARIABLE = uintptr               /* synchapi.h:41:54 */

type PTIMERAPCROUTINE = uintptr /* synchapi.h:102:16 */

type SYNCHRONIZATION_BARRIER = RTL_BARRIER    /* synchapi.h:104:23 */
type PSYNCHRONIZATION_BARRIER = PRTL_BARRIER  /* synchapi.h:105:24 */
type LPSYNCHRONIZATION_BARRIER = PRTL_BARRIER /* synchapi.h:106:24 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type _SYSTEM_INFO = struct {
	__0                         struct{ dwOemId DWORD }
	dwPageSize                  DWORD
	lpMinimumApplicationAddress LPVOID
	lpMaximumApplicationAddress LPVOID
	dwActiveProcessorMask       DWORD_PTR
	dwNumberOfProcessors        DWORD
	dwProcessorType             DWORD
	dwAllocationGranularity     DWORD
	wProcessorLevel             WORD
	wProcessorRevision          WORD
} /* sysinfoapi.h:18:11 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type SYSTEM_INFO = _SYSTEM_INFO /* sysinfoapi.h:35:5 */
type LPSYSTEM_INFO = uintptr    /* sysinfoapi.h:35:18 */

type _MEMORYSTATUSEX = struct {
	dwLength                DWORD
	dwMemoryLoad            DWORD
	ullTotalPhys            DWORDLONG
	ullAvailPhys            DWORDLONG
	ullTotalPageFile        DWORDLONG
	ullAvailPageFile        DWORDLONG
	ullTotalVirtual         DWORDLONG
	ullAvailVirtual         DWORDLONG
	ullAvailExtendedVirtual DWORDLONG
} /* sysinfoapi.h:48:11 */

type MEMORYSTATUSEX = _MEMORYSTATUSEX /* sysinfoapi.h:58:5 */
type LPMEMORYSTATUSEX = uintptr       /* sysinfoapi.h:58:20 */

type COMPUTER_NAME_FORMAT = uint32 /* sysinfoapi.h:80:5 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type PTP_WIN32_IO_CALLBACK = uintptr /* threadpoolapiset.h:18:16 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// There are 3 separate ways this file is intended to be used:
//
//    1) Included from intrin.h.  In this case, all intrinsics in this file get declarations and
//       implementations.  No special #defines are needed for this case.
//
//    2) Included from the library versions of these functions (ie mingw-w64-crt\intrincs\*.c).  All
//       intrinsics in this file must also be included in the library.  In this case, only the
//       specific functions requested will get defined, and they will not be defined as inline.  If
//       you have followed the instructions (below) for adding functions to this file, then all you
//       need to have in the .c file is the following:
//
//       #define __INTRINSIC_ONLYSPECIAL
//       #define __INTRINSIC_SPECIAL___stosb // Causes code generation in intrin-impl.h
//
//       #include <intrin.h>
//
//    3) Included from various platform sdk headers.  Some platform sdk headers (such as winnt.h)
//       define a subset of intrinsics.  To avoid potential conflicts, this file is designed to
//       allow for specific subsets of functions to be defined.  This is done by defining the
//       appropriate variable before including this file:
//
//       #define __INTRINSIC_GROUP_WINNT
//       #include <psdk_inc/intrin-impl.h>
//
//    In all cases, it is acceptable to include this file multiple times in any order (ie include
//    winnt.h to get its subset, then include intrin.h to get everything, or vice versa).
//
//    See also the comments at the top of intrin.h.

// To add an implementation for a new intrinsic to this file, you should comment out the current prototype in intrin.h.
//    If the function you are adding is not in intrin.h, you should not be adding it to this file.  This file is only
//    for MSVC intrinsics.
//
//    Make sure you put your definition in the right section (x86 vs x64), and use this outline when adding definitions
//    to this file:
//
// #if __INTRINSIC_PROLOG(__int2c)
//
// <prototype goes here>
//
// __INTRINSICS_USEINLINE
// <code goes here>
//
// #define __INTRINSIC_DEFINED___int2c
// #endif

// Note that there is no file-wide #if to prevent intrin-impl.h from being
//    included multiple times.  This is because this file might be included multiple
//    times to define various subsets of the functions it contains.

// However we do check for __MINGW_INTRIN_INLINE.  In theory this means we
//    can work with other compilers.

// Clang has support for MSVC builtins, GCC doesn't

// These macros are used by the routines below.  While this file may be included
//    multiple times, these macros only need to be defined once.

// The Barrier functions can never be in the library.  Since gcc only
// supports ReadWriteBarrier, map all 3 to do the same.

// The logic for this macro is:
//    if the function is not yet defined AND
//    (
//        (if we are not just defining special OR
//            (we are defining special AND this is one of the ones we are defining)
//        )
//    )

// Normally __INTRINSIC_ONLYSPECIAL is used to indicate that we are
//    being included in the library version of the intrinsic (case 2).  However,
//    that really only affects the definition of __INTRINSICS_USEINLINE.
//    So here we are letting it serve an additional purpose of only defining
//    the intrinsics for a certain file (case 3).  For example, to create the
//    intrinsics for the functions in winnt.h, define __INTRINSIC_GROUP_WINNT.
//
//    Note that this file can be included multiple times, and as a result
//    there can be overlap (definitions that appear in more than one
//    file).  This is handled by __INTRINSIC_DEFINED_*
//
//    If no groups are defined (such as what happens when including intrin.h),
//    all intrinsics are defined.

// If __INTRINSIC_ONLYSPECIAL is defined at this point, we are processing case 2.  In
//    that case, don't go looking for groups

// Note that this gets undefined at the end of this file

// To add an additional group, put the #ifdef and definitions here.

// Before 4.9.2, ia32intrin.h had broken versions of these.

// *****************************************************

// *****************************************************

// GCC 8 has already defined _xgetbv, Clang 9 has _xgetbv defined as a macro
// redirecting to the __builtin_ia32_xgetbv builtin.

// *****************************************************

type PFIBER_START_ROUTINE = uintptr               /* winbase.h:160:16 */
type LPFIBER_START_ROUTINE = PFIBER_START_ROUTINE /* winbase.h:161:32 */

type LPLDT_ENTRY = LPVOID /* winbase.h:166:18 */

type _COMMPROP = struct {
	wPacketLength       WORD
	wPacketVersion      WORD
	dwServiceMask       DWORD
	dwReserved1         DWORD
	dwMaxTxQueue        DWORD
	dwMaxRxQueue        DWORD
	dwMaxBaud           DWORD
	dwProvSubType       DWORD
	dwProvCapabilities  DWORD
	dwSettableParams    DWORD
	dwSettableBaud      DWORD
	wSettableData       WORD
	wSettableStopParity WORD
	dwCurrentTxQueue    DWORD
	dwCurrentRxQueue    DWORD
	dwProvSpec1         DWORD
	dwProvSpec2         DWORD
	wcProvChar          [1]WCHAR
	_                   [2]byte
} /* winbase.h:240:11 */

type COMMPROP = _COMMPROP /* winbase.h:259:5 */
type LPCOMMPROP = uintptr /* winbase.h:259:14 */

type _COMSTAT = struct {
	fCtsHold uint32 /* DWORD fCtsHold: 1, DWORD fDsrHold: 1, DWORD fRlsdHold: 1, DWORD fXoffHold: 1, DWORD fXoffSent: 1, DWORD fEof: 1, DWORD fTxim: 1, DWORD fReserved: 25 */
	_        [4]byte
	cbInQue  DWORD
	cbOutQue DWORD
} /* winbase.h:263:11 */

type COMSTAT = _COMSTAT  /* winbase.h:274:5 */
type LPCOMSTAT = uintptr /* winbase.h:274:13 */

type _DCB = struct {
	DCBlength  DWORD
	BaudRate   DWORD
	fBinary    uint32 /* DWORD fBinary: 1, DWORD fParity: 1, DWORD fOutxCtsFlow: 1, DWORD fOutxDsrFlow: 1, DWORD fDtrControl: 2, DWORD fDsrSensitivity: 1, DWORD fTXContinueOnXoff: 1, DWORD fOutX: 1, DWORD fInX: 1, DWORD fErrorChar: 1, DWORD fNull: 1, DWORD fRtsControl: 2, DWORD fAbortOnError: 1, DWORD fDummy2: 17 */
	_          [2]byte
	wReserved  WORD
	XonLim     WORD
	XoffLim    WORD
	ByteSize   BYTE
	Parity     BYTE
	StopBits   BYTE
	XonChar    int8
	XoffChar   int8
	ErrorChar  int8
	EofChar    int8
	EvtChar    int8
	wReserved1 WORD
	_          [2]byte
} /* winbase.h:285:11 */

type DCB = _DCB      /* winbase.h:314:5 */
type LPDCB = uintptr /* winbase.h:314:9 */

type _COMMTIMEOUTS = struct {
	ReadIntervalTimeout         DWORD
	ReadTotalTimeoutMultiplier  DWORD
	ReadTotalTimeoutConstant    DWORD
	WriteTotalTimeoutMultiplier DWORD
	WriteTotalTimeoutConstant   DWORD
} /* winbase.h:316:11 */

type COMMTIMEOUTS = _COMMTIMEOUTS /* winbase.h:322:5 */
type LPCOMMTIMEOUTS = uintptr     /* winbase.h:322:18 */

type _COMMCONFIG = struct {
	dwSize            DWORD
	wVersion          WORD
	wReserved         WORD
	dcb               DCB
	dwProviderSubType DWORD
	dwProviderOffset  DWORD
	dwProviderSize    DWORD
	wcProviderData    [1]WCHAR
	_                 [2]byte
} /* winbase.h:324:11 */

type COMMCONFIG = _COMMCONFIG /* winbase.h:333:5 */
type LPCOMMCONFIG = uintptr   /* winbase.h:333:16 */

type _MEMORYSTATUS = struct {
	dwLength        DWORD
	dwMemoryLoad    DWORD
	dwTotalPhys     SIZE_T
	dwAvailPhys     SIZE_T
	dwTotalPageFile SIZE_T
	dwAvailPageFile SIZE_T
	dwTotalVirtual  SIZE_T
	dwAvailVirtual  SIZE_T
} /* winbase.h:364:11 */

type MEMORYSTATUS = _MEMORYSTATUS /* winbase.h:373:5 */
type LPMEMORYSTATUS = uintptr     /* winbase.h:373:18 */

type _JIT_DEBUG_INFO = struct {
	dwSize                  DWORD
	dwProcessorArchitecture DWORD
	dwThreadID              DWORD
	dwReserved0             DWORD
	lpExceptionAddress      ULONG64
	lpExceptionRecord       ULONG64
	lpContextRecord         ULONG64
} /* winbase.h:431:11 */

type JIT_DEBUG_INFO = _JIT_DEBUG_INFO /* winbase.h:439:5 */
type LPJIT_DEBUG_INFO = uintptr       /* winbase.h:439:20 */

type JIT_DEBUG_INFO32 = JIT_DEBUG_INFO /* winbase.h:441:26 */
type LPJIT_DEBUG_INFO32 = uintptr      /* winbase.h:441:44 */
type JIT_DEBUG_INFO64 = JIT_DEBUG_INFO /* winbase.h:442:26 */
type LPJIT_DEBUG_INFO64 = uintptr      /* winbase.h:442:44 */

type LPEXCEPTION_RECORD = PEXCEPTION_RECORD     /* winbase.h:445:29 */
type LPEXCEPTION_POINTERS = PEXCEPTION_POINTERS /* winbase.h:446:31 */

type _OFSTRUCT = struct {
	cBytes     BYTE
	fFixedDisk BYTE
	nErrCode   WORD
	Reserved1  WORD
	Reserved2  WORD
	szPathName [128]CHAR
} /* winbase.h:620:11 */

type OFSTRUCT = _OFSTRUCT /* winbase.h:627:5 */
type LPOFSTRUCT = uintptr /* winbase.h:627:15 */
type POFSTRUCT = uintptr  /* winbase.h:627:27 */

type THREAD_INFORMATION_CLASS = uint32 /* winbase.h:1188:5 */

type DEP_SYSTEM_POLICY_TYPE = uint32 /* winbase.h:1285:5 */

type PFE_EXPORT_FUNC = uintptr /* winbase.h:1378:17 */
type PFE_IMPORT_FUNC = uintptr /* winbase.h:1379:17 */

type _WIN32_STREAM_ID = struct {
	dwStreamId         DWORD
	dwStreamAttributes DWORD
	Size               LARGE_INTEGER
	dwStreamNameSize   DWORD
	cStreamName        [1]WCHAR
	_                  [2]byte
} /* winbase.h:1456:11 */

type WIN32_STREAM_ID = _WIN32_STREAM_ID /* winbase.h:1462:5 */
type LPWIN32_STREAM_ID = uintptr        /* winbase.h:1462:21 */

type PROCESS_INFORMATION_CLASS = uint32 /* winbase.h:1573:5 */

type PGET_SYSTEM_WOW64_DIRECTORY_A = uintptr /* winbase.h:1887:16 */
type PGET_SYSTEM_WOW64_DIRECTORY_W = uintptr /* winbase.h:1888:16 */

type LPPROGRESS_ROUTINE = uintptr /* winbase.h:2005:17 */

type STREAM_INFO_LEVELS = uint32 /* winbase.h:2219:5 */

type _WIN32_FIND_STREAM_DATA = struct {
	StreamSize  LARGE_INTEGER
	cStreamName [296]WCHAR
} /* winbase.h:2221:11 */

type WIN32_FIND_STREAM_DATA = _WIN32_FIND_STREAM_DATA /* winbase.h:2224:5 */
type PWIN32_FIND_STREAM_DATA = uintptr                /* winbase.h:2224:28 */

type _EVENTLOG_FULL_INFORMATION = struct{ dwFull DWORD } /* winbase.h:2282:11 */

type EVENTLOG_FULL_INFORMATION = _EVENTLOG_FULL_INFORMATION /* winbase.h:2284:5 */
type LPEVENTLOG_FULL_INFORMATION = uintptr                  /* winbase.h:2284:31 */

type tagHW_PROFILE_INFOA = struct {
	dwDockInfo      DWORD
	szHwProfileGuid [39]CHAR
	szHwProfileName [80]CHAR
	_               [1]byte
} /* winbase.h:2478:11 */

type HW_PROFILE_INFOA = tagHW_PROFILE_INFOA /* winbase.h:2482:5 */
type LPHW_PROFILE_INFOA = uintptr           /* winbase.h:2482:22 */

type tagHW_PROFILE_INFOW = struct {
	dwDockInfo      DWORD
	szHwProfileGuid [39]WCHAR
	szHwProfileName [80]WCHAR
	_               [2]byte
} /* winbase.h:2484:11 */

type HW_PROFILE_INFOW = tagHW_PROFILE_INFOW /* winbase.h:2488:5 */
type LPHW_PROFILE_INFOW = uintptr           /* winbase.h:2488:22 */

type HW_PROFILE_INFO = HW_PROFILE_INFOA     /* winbase.h:2490:3 */
type LPHW_PROFILE_INFO = LPHW_PROFILE_INFOA /* winbase.h:2491:3 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// ********************   WARNING   ********************
// This is inconsistent with MSDN!
// In MSDN:
//     ERROR_IPSEC_IKE_QM_LIMIT => 13884 (here not defined)
//     ERROR_IPSEC_IKE_NEG_STATUS_END => 13897 (here 13884)
// Source:
//     WinINet Reference -> WinINet Constants -> Error Messages
//     https://msdn.microsoft.com/en-us/library/windows/desktop/aa385465%28v=vs.85%29.aspx
// ******************** END WARNING ********************
//#define ERROR_IPSEC_IKE_NEG_STATUS_END __MSABI_LONG(13884)

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type _TIME_ZONE_INFORMATION = struct {
	Bias         LONG
	StandardName [32]WCHAR
	StandardDate SYSTEMTIME
	StandardBias LONG
	DaylightName [32]WCHAR
	DaylightDate SYSTEMTIME
	DaylightBias LONG
} /* timezoneapi.h:21:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// ********************   WARNING   ********************
// This is inconsistent with MSDN!
// In MSDN:
//     ERROR_IPSEC_IKE_QM_LIMIT => 13884 (here not defined)
//     ERROR_IPSEC_IKE_NEG_STATUS_END => 13897 (here 13884)
// Source:
//     WinINet Reference -> WinINet Constants -> Error Messages
//     https://msdn.microsoft.com/en-us/library/windows/desktop/aa385465%28v=vs.85%29.aspx
// ******************** END WARNING ********************
//#define ERROR_IPSEC_IKE_NEG_STATUS_END __MSABI_LONG(13884)

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type TIME_ZONE_INFORMATION = _TIME_ZONE_INFORMATION /* timezoneapi.h:29:5 */
type PTIME_ZONE_INFORMATION = uintptr               /* timezoneapi.h:29:27 */
type LPTIME_ZONE_INFORMATION = uintptr              /* timezoneapi.h:29:51 */

type _TIME_DYNAMIC_ZONE_INFORMATION = struct {
	Bias                        LONG
	StandardName                [32]WCHAR
	StandardDate                SYSTEMTIME
	StandardBias                LONG
	DaylightName                [32]WCHAR
	DaylightDate                SYSTEMTIME
	DaylightBias                LONG
	TimeZoneKeyName             [128]WCHAR
	DynamicDaylightTimeDisabled BOOLEAN
	_                           [3]byte
} /* timezoneapi.h:31:11 */

type DYNAMIC_TIME_ZONE_INFORMATION = _TIME_DYNAMIC_ZONE_INFORMATION /* timezoneapi.h:41:5 */
type PDYNAMIC_TIME_ZONE_INFORMATION = uintptr                       /* timezoneapi.h:41:35 */

type _SYSTEM_POWER_STATUS = struct {
	ACLineStatus        BYTE
	BatteryFlag         BYTE
	BatteryLifePercent  BYTE
	Reserved1           BYTE
	BatteryLifeTime     DWORD
	BatteryFullLifeTime DWORD
} /* winbase.h:2571:11 */

type SYSTEM_POWER_STATUS = _SYSTEM_POWER_STATUS /* winbase.h:2578:5 */
type LPSYSTEM_POWER_STATUS = uintptr            /* winbase.h:2578:25 */

type tagACTCTXA = struct {
	cbSize                 ULONG
	dwFlags                DWORD
	lpSource               LPCSTR
	wProcessorArchitecture USHORT
	wLangId                LANGID
	_                      [4]byte
	lpAssemblyDirectory    LPCSTR
	lpResourceName         LPCSTR
	lpApplicationName      LPCSTR
	hModule                HMODULE
} /* winbase.h:2649:11 */

type ACTCTXA = tagACTCTXA /* winbase.h:2659:5 */
type PACTCTXA = uintptr   /* winbase.h:2659:13 */

type tagACTCTXW = struct {
	cbSize                 ULONG
	dwFlags                DWORD
	lpSource               LPCWSTR
	wProcessorArchitecture USHORT
	wLangId                LANGID
	_                      [4]byte
	lpAssemblyDirectory    LPCWSTR
	lpResourceName         LPCWSTR
	lpApplicationName      LPCWSTR
	hModule                HMODULE
} /* winbase.h:2661:11 */

type ACTCTXW = tagACTCTXW /* winbase.h:2671:5 */
type PACTCTXW = uintptr   /* winbase.h:2671:13 */

type ACTCTX = ACTCTXA   /* winbase.h:2673:3 */
type PACTCTX = PACTCTXA /* winbase.h:2674:3 */

type PCACTCTXA = uintptr /* winbase.h:2676:25 */
type PCACTCTXW = uintptr /* winbase.h:2677:25 */

type PCACTCTX = PCACTCTXA /* winbase.h:2679:3 */

type tagACTCTX_SECTION_KEYED_DATA_2600 = struct {
	cbSize                    ULONG
	ulDataFormatVersion       ULONG
	lpData                    PVOID
	ulLength                  ULONG
	_                         [4]byte
	lpSectionGlobalData       PVOID
	ulSectionGlobalDataLength ULONG
	_                         [4]byte
	lpSectionBase             PVOID
	ulSectionTotalLength      ULONG
	_                         [4]byte
	hActCtx                   HANDLE
	ulAssemblyRosterIndex     ULONG
	_                         [4]byte
} /* winbase.h:2693:11 */

type ACTCTX_SECTION_KEYED_DATA_2600 = tagACTCTX_SECTION_KEYED_DATA_2600 /* winbase.h:2704:5 */
type PACTCTX_SECTION_KEYED_DATA_2600 = uintptr                          /* winbase.h:2704:36 */

type PCACTCTX_SECTION_KEYED_DATA_2600 = uintptr /* winbase.h:2706:48 */

type tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = struct {
	lpInformation             PVOID
	lpSectionBase             PVOID
	ulSectionLength           ULONG
	_                         [4]byte
	lpSectionGlobalDataBase   PVOID
	ulSectionGlobalDataLength ULONG
	_                         [4]byte
} /* winbase.h:2708:11 */

type ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA /* winbase.h:2714:5 */
type PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = uintptr                                       /* winbase.h:2714:49 */

type PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = uintptr /* winbase.h:2716:61 */

type tagACTCTX_SECTION_KEYED_DATA = struct {
	cbSize                    ULONG
	ulDataFormatVersion       ULONG
	lpData                    PVOID
	ulLength                  ULONG
	_                         [4]byte
	lpSectionGlobalData       PVOID
	ulSectionGlobalDataLength ULONG
	_                         [4]byte
	lpSectionBase             PVOID
	ulSectionTotalLength      ULONG
	_                         [4]byte
	hActCtx                   HANDLE
	ulAssemblyRosterIndex     ULONG
	ulFlags                   ULONG
	AssemblyMetadata          ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
} /* winbase.h:2718:11 */

type ACTCTX_SECTION_KEYED_DATA = tagACTCTX_SECTION_KEYED_DATA /* winbase.h:2731:5 */
type PACTCTX_SECTION_KEYED_DATA = uintptr                     /* winbase.h:2731:31 */

type PCACTCTX_SECTION_KEYED_DATA = uintptr /* winbase.h:2733:43 */

type _ACTIVATION_CONTEXT_BASIC_INFORMATION = struct {
	hActCtx HANDLE
	dwFlags DWORD
	_       [4]byte
} /* winbase.h:2746:11 */

type ACTIVATION_CONTEXT_BASIC_INFORMATION = _ACTIVATION_CONTEXT_BASIC_INFORMATION /* winbase.h:2749:5 */
type PACTIVATION_CONTEXT_BASIC_INFORMATION = uintptr                              /* winbase.h:2749:42 */

type PCACTIVATION_CONTEXT_BASIC_INFORMATION = uintptr /* winbase.h:2751:62 */

type PQUERYACTCTXW_FUNC = uintptr /* winbase.h:2763:19 */

type APPLICATION_RECOVERY_CALLBACK = uintptr /* winbase.h:2783:17 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _DRAWPATRECT = struct {
	ptPosition POINT
	ptSize     POINT
	wStyle     WORD
	wPattern   WORD
} /* wingdi.h:224:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type DRAWPATRECT = _DRAWPATRECT /* wingdi.h:229:5 */
type PDRAWPATRECT = uintptr     /* wingdi.h:229:17 */

type _PSINJECTDATA = struct {
	DataBytes      DWORD
	InjectionPoint WORD
	PageNumber     WORD
} /* wingdi.h:335:11 */

type PSINJECTDATA = _PSINJECTDATA /* wingdi.h:339:5 */
type PPSINJECTDATA = uintptr      /* wingdi.h:339:18 */

type _PSFEATURE_OUTPUT = struct {
	bPageIndependent WINBOOL
	bSetPageDevice   WINBOOL
} /* wingdi.h:393:11 */

type PSFEATURE_OUTPUT = _PSFEATURE_OUTPUT /* wingdi.h:396:5 */
type PPSFEATURE_OUTPUT = uintptr          /* wingdi.h:396:22 */

type _PSFEATURE_CUSTPAPER = struct {
	lOrientation  LONG
	lWidth        LONG
	lHeight       LONG
	lWidthOffset  LONG
	lHeightOffset LONG
} /* wingdi.h:398:11 */

type PSFEATURE_CUSTPAPER = _PSFEATURE_CUSTPAPER /* wingdi.h:404:5 */
type PPSFEATURE_CUSTPAPER = uintptr             /* wingdi.h:404:25 */

type tagXFORM = struct {
	eM11 FLOAT
	eM12 FLOAT
	eM21 FLOAT
	eM22 FLOAT
	eDx  FLOAT
	eDy  FLOAT
} /* wingdi.h:452:11 */

type XFORM = tagXFORM  /* wingdi.h:459:5 */
type PXFORM = uintptr  /* wingdi.h:459:11 */
type LPXFORM = uintptr /* wingdi.h:459:19 */

type tagBITMAP = struct {
	bmType       LONG
	bmWidth      LONG
	bmHeight     LONG
	bmWidthBytes LONG
	bmPlanes     WORD
	bmBitsPixel  WORD
	_            [4]byte
	bmBits       LPVOID
} /* wingdi.h:461:11 */

type BITMAP = tagBITMAP /* wingdi.h:469:5 */
type PBITMAP = uintptr  /* wingdi.h:469:12 */
type NPBITMAP = uintptr /* wingdi.h:469:21 */
type LPBITMAP = uintptr /* wingdi.h:469:31 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type tagRGBTRIPLE = struct {
	rgbtBlue  BYTE
	rgbtGreen BYTE
	rgbtRed   BYTE
} /* wingdi.h:472:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type RGBTRIPLE = tagRGBTRIPLE /* wingdi.h:476:5 */
type PRGBTRIPLE = uintptr     /* wingdi.h:476:15 */
type NPRGBTRIPLE = uintptr    /* wingdi.h:476:27 */
type LPRGBTRIPLE = uintptr    /* wingdi.h:476:40 */
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type tagRGBQUAD = struct {
	rgbBlue     BYTE
	rgbGreen    BYTE
	rgbRed      BYTE
	rgbReserved BYTE
} /* wingdi.h:479:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type RGBQUAD = tagRGBQUAD /* wingdi.h:484:5 */

type LPRGBQUAD = uintptr /* wingdi.h:488:19 */

type LCSCSTYPE = LONG /* wingdi.h:501:16 */

type LCSGAMUTMATCH = LONG /* wingdi.h:504:16 */

type FXPT16DOT16 = int32     /* wingdi.h:528:20 */
type LPFXPT16DOT16 = uintptr /* wingdi.h:528:32 */
type FXPT2DOT30 = int32      /* wingdi.h:529:20 */
type LPFXPT2DOT30 = uintptr  /* wingdi.h:529:31 */

type tagCIEXYZ = struct {
	ciexyzX FXPT2DOT30
	ciexyzY FXPT2DOT30
	ciexyzZ FXPT2DOT30
} /* wingdi.h:531:11 */

type CIEXYZ = tagCIEXYZ /* wingdi.h:535:5 */
type LPCIEXYZ = uintptr /* wingdi.h:538:18 */
type tagICEXYZTRIPLE = struct {
	ciexyzRed   CIEXYZ
	ciexyzGreen CIEXYZ
	ciexyzBlue  CIEXYZ
} /* wingdi.h:541:11 */

type CIEXYZTRIPLE = tagICEXYZTRIPLE /* wingdi.h:545:5 */
type LPCIEXYZTRIPLE = uintptr       /* wingdi.h:548:24 */

type tagLOGCOLORSPACEA = struct {
	lcsSignature  DWORD
	lcsVersion    DWORD
	lcsSize       DWORD
	lcsCSType     LCSCSTYPE
	lcsIntent     LCSGAMUTMATCH
	lcsEndpoints  CIEXYZTRIPLE
	lcsGammaRed   DWORD
	lcsGammaGreen DWORD
	lcsGammaBlue  DWORD
	lcsFilename   [260]CHAR
} /* wingdi.h:552:11 */

type LOGCOLORSPACEA = tagLOGCOLORSPACEA /* wingdi.h:563:5 */
type LPLOGCOLORSPACEA = uintptr         /* wingdi.h:563:20 */

type tagLOGCOLORSPACEW = struct {
	lcsSignature  DWORD
	lcsVersion    DWORD
	lcsSize       DWORD
	lcsCSType     LCSCSTYPE
	lcsIntent     LCSGAMUTMATCH
	lcsEndpoints  CIEXYZTRIPLE
	lcsGammaRed   DWORD
	lcsGammaGreen DWORD
	lcsGammaBlue  DWORD
	lcsFilename   [260]WCHAR
} /* wingdi.h:565:11 */

type LOGCOLORSPACEW = tagLOGCOLORSPACEW /* wingdi.h:576:5 */
type LPLOGCOLORSPACEW = uintptr         /* wingdi.h:576:20 */

type LOGCOLORSPACE = LOGCOLORSPACEA     /* wingdi.h:578:3 */
type LPLOGCOLORSPACE = LPLOGCOLORSPACEA /* wingdi.h:579:3 */

type tagBITMAPCOREHEADER = struct {
	bcSize     DWORD
	bcWidth    WORD
	bcHeight   WORD
	bcPlanes   WORD
	bcBitCount WORD
} /* wingdi.h:583:11 */

type BITMAPCOREHEADER = tagBITMAPCOREHEADER /* wingdi.h:589:5 */
type LPBITMAPCOREHEADER = uintptr           /* wingdi.h:589:22 */
type PBITMAPCOREHEADER = uintptr            /* wingdi.h:589:42 */

type tagBITMAPINFOHEADER = struct {
	biSize          DWORD
	biWidth         LONG
	biHeight        LONG
	biPlanes        WORD
	biBitCount      WORD
	biCompression   DWORD
	biSizeImage     DWORD
	biXPelsPerMeter LONG
	biYPelsPerMeter LONG
	biClrUsed       DWORD
	biClrImportant  DWORD
} /* wingdi.h:593:11 */

type BITMAPINFOHEADER = tagBITMAPINFOHEADER /* wingdi.h:605:5 */
type LPBITMAPINFOHEADER = uintptr           /* wingdi.h:605:22 */
type PBITMAPINFOHEADER = uintptr            /* wingdi.h:605:42 */

type BITMAPV4HEADER = struct {
	bV4Size          DWORD
	bV4Width         LONG
	bV4Height        LONG
	bV4Planes        WORD
	bV4BitCount      WORD
	bV4V4Compression DWORD
	bV4SizeImage     DWORD
	bV4XPelsPerMeter LONG
	bV4YPelsPerMeter LONG
	bV4ClrUsed       DWORD
	bV4ClrImportant  DWORD
	bV4RedMask       DWORD
	bV4GreenMask     DWORD
	bV4BlueMask      DWORD
	bV4AlphaMask     DWORD
	bV4CSType        DWORD
	bV4Endpoints     CIEXYZTRIPLE
	bV4GammaRed      DWORD
	bV4GammaGreen    DWORD
	bV4GammaBlue     DWORD
}                               /* wingdi.h:630:5 */
type LPBITMAPV4HEADER = uintptr /* wingdi.h:630:20 */
type PBITMAPV4HEADER = uintptr  /* wingdi.h:630:38 */

type BITMAPV5HEADER = struct {
	bV5Size          DWORD
	bV5Width         LONG
	bV5Height        LONG
	bV5Planes        WORD
	bV5BitCount      WORD
	bV5Compression   DWORD
	bV5SizeImage     DWORD
	bV5XPelsPerMeter LONG
	bV5YPelsPerMeter LONG
	bV5ClrUsed       DWORD
	bV5ClrImportant  DWORD
	bV5RedMask       DWORD
	bV5GreenMask     DWORD
	bV5BlueMask      DWORD
	bV5AlphaMask     DWORD
	bV5CSType        DWORD
	bV5Endpoints     CIEXYZTRIPLE
	bV5GammaRed      DWORD
	bV5GammaGreen    DWORD
	bV5GammaBlue     DWORD
	bV5Intent        DWORD
	bV5ProfileData   DWORD
	bV5ProfileSize   DWORD
	bV5Reserved      DWORD
}                               /* wingdi.h:657:5 */
type LPBITMAPV5HEADER = uintptr /* wingdi.h:657:20 */
type PBITMAPV5HEADER = uintptr  /* wingdi.h:657:38 */

type tagBITMAPINFO = struct {
	bmiHeader BITMAPINFOHEADER
	bmiColors [1]RGBQUAD
} /* wingdi.h:671:11 */

type BITMAPINFO = tagBITMAPINFO /* wingdi.h:674:5 */
type LPBITMAPINFO = uintptr     /* wingdi.h:674:16 */
type PBITMAPINFO = uintptr      /* wingdi.h:674:30 */

type tagBITMAPCOREINFO = struct {
	bmciHeader BITMAPCOREHEADER
	bmciColors [1]RGBTRIPLE
	_          [1]byte
} /* wingdi.h:678:11 */

type BITMAPCOREINFO = tagBITMAPCOREINFO /* wingdi.h:681:5 */
type LPBITMAPCOREINFO = uintptr         /* wingdi.h:681:20 */
type PBITMAPCOREINFO = uintptr          /* wingdi.h:681:38 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type tagBITMAPFILEHEADER = struct {
	bfType      WORD
	_           [2]byte
	bfSize      DWORD
	bfReserved1 WORD
	bfReserved2 WORD
	bfOffBits   DWORD
} /* wingdi.h:684:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type BITMAPFILEHEADER = tagBITMAPFILEHEADER /* wingdi.h:690:5 */
type LPBITMAPFILEHEADER = uintptr           /* wingdi.h:690:22 */
type PBITMAPFILEHEADER = uintptr            /* wingdi.h:690:42 */
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type tagFONTSIGNATURE = struct {
	fsUsb [4]DWORD
	fsCsb [2]DWORD
} /* wingdi.h:699:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type FONTSIGNATURE = tagFONTSIGNATURE /* wingdi.h:702:5 */
type PFONTSIGNATURE = uintptr         /* wingdi.h:702:19 */
type LPFONTSIGNATURE = uintptr        /* wingdi.h:702:35 */

type tagCHARSETINFO = struct {
	ciCharset UINT
	ciACP     UINT
	fs        FONTSIGNATURE
} /* wingdi.h:704:11 */

type CHARSETINFO = tagCHARSETINFO /* wingdi.h:708:5 */
type PCHARSETINFO = uintptr       /* wingdi.h:708:17 */
type NPCHARSETINFO = uintptr      /* wingdi.h:708:31 */
type LPCHARSETINFO = uintptr      /* wingdi.h:708:46 */

type tagLOCALESIGNATURE = struct {
	lsUsb          [4]DWORD
	lsCsbDefault   [2]DWORD
	lsCsbSupported [2]DWORD
} /* wingdi.h:717:11 */

type LOCALESIGNATURE = tagLOCALESIGNATURE /* wingdi.h:721:5 */
type PLOCALESIGNATURE = uintptr           /* wingdi.h:721:21 */
type LPLOCALESIGNATURE = uintptr          /* wingdi.h:721:39 */

type tagHANDLETABLE = struct{ objectHandle [1]HGDIOBJ } /* wingdi.h:727:11 */

type HANDLETABLE = tagHANDLETABLE /* wingdi.h:729:5 */
type PHANDLETABLE = uintptr       /* wingdi.h:729:17 */
type LPHANDLETABLE = uintptr      /* wingdi.h:729:31 */

type tagMETARECORD = struct {
	rdSize     DWORD
	rdFunction WORD
	rdParm     [1]WORD
} /* wingdi.h:731:11 */

type METARECORD = tagMETARECORD /* wingdi.h:735:5 */
type PMETARECORD = uintptr      /* wingdi.h:738:42 */
type LPMETARECORD = uintptr     /* wingdi.h:741:42 */

type tagMETAFILEPICT = struct {
	mm   LONG
	xExt LONG
	yExt LONG
	_    [4]byte
	hMF  HMETAFILE
} /* wingdi.h:743:11 */

type METAFILEPICT = tagMETAFILEPICT /* wingdi.h:748:5 */
type LPMETAFILEPICT = uintptr       /* wingdi.h:748:18 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type tagMETAHEADER = struct {
	mtType         WORD
	mtHeaderSize   WORD
	mtVersion      WORD
	_              [2]byte
	mtSize         DWORD
	mtNoObjects    WORD
	_              [2]byte
	mtMaxRecord    DWORD
	mtNoParameters WORD
	_              [2]byte
} /* wingdi.h:753:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type METAHEADER = tagMETAHEADER /* wingdi.h:761:5 */
type PMETAHEADER = uintptr      /* wingdi.h:762:42 */
type LPMETAHEADER = uintptr     /* wingdi.h:763:42 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type tagENHMETARECORD = struct {
	iType DWORD
	nSize DWORD
	dParm [1]DWORD
} /* wingdi.h:769:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type ENHMETARECORD = tagENHMETARECORD /* wingdi.h:773:5 */
type PENHMETARECORD = uintptr         /* wingdi.h:773:19 */
type LPENHMETARECORD = uintptr        /* wingdi.h:773:35 */

type tagENHMETAHEADER = struct {
	iType          DWORD
	nSize          DWORD
	rclBounds      RECTL
	rclFrame       RECTL
	dSignature     DWORD
	nVersion       DWORD
	nBytes         DWORD
	nRecords       DWORD
	nHandles       WORD
	sReserved      WORD
	nDescription   DWORD
	offDescription DWORD
	nPalEntries    DWORD
	szlDevice      SIZEL
	szlMillimeters SIZEL
	cbPixelFormat  DWORD
	offPixelFormat DWORD
	bOpenGL        DWORD
	szlMicrometers SIZEL
} /* wingdi.h:775:11 */

type ENHMETAHEADER = tagENHMETAHEADER /* wingdi.h:795:5 */
type PENHMETAHEADER = uintptr         /* wingdi.h:795:19 */
type LPENHMETAHEADER = uintptr        /* wingdi.h:795:35 */

type BCHAR = BYTE /* wingdi.h:809:16 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type tagTEXTMETRICA = struct {
	tmHeight           LONG
	tmAscent           LONG
	tmDescent          LONG
	tmInternalLeading  LONG
	tmExternalLeading  LONG
	tmAveCharWidth     LONG
	tmMaxCharWidth     LONG
	tmWeight           LONG
	tmOverhang         LONG
	tmDigitizedAspectX LONG
	tmDigitizedAspectY LONG
	tmFirstChar        BYTE
	tmLastChar         BYTE
	tmDefaultChar      BYTE
	tmBreakChar        BYTE
	tmItalic           BYTE
	tmUnderlined       BYTE
	tmStruckOut        BYTE
	tmPitchAndFamily   BYTE
	tmCharSet          BYTE
	_                  [3]byte
} /* wingdi.h:818:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type TEXTMETRICA = tagTEXTMETRICA /* wingdi.h:839:5 */
type PTEXTMETRICA = uintptr       /* wingdi.h:839:17 */
type NPTEXTMETRICA = uintptr      /* wingdi.h:839:31 */
type LPTEXTMETRICA = uintptr      /* wingdi.h:839:46 */

type tagTEXTMETRICW = struct {
	tmHeight           LONG
	tmAscent           LONG
	tmDescent          LONG
	tmInternalLeading  LONG
	tmExternalLeading  LONG
	tmAveCharWidth     LONG
	tmMaxCharWidth     LONG
	tmWeight           LONG
	tmOverhang         LONG
	tmDigitizedAspectX LONG
	tmDigitizedAspectY LONG
	tmFirstChar        WCHAR
	tmLastChar         WCHAR
	tmDefaultChar      WCHAR
	tmBreakChar        WCHAR
	tmItalic           BYTE
	tmUnderlined       BYTE
	tmStruckOut        BYTE
	tmPitchAndFamily   BYTE
	tmCharSet          BYTE
	_                  [3]byte
} /* wingdi.h:841:11 */

type TEXTMETRICW = tagTEXTMETRICW /* wingdi.h:862:5 */
type PTEXTMETRICW = uintptr       /* wingdi.h:862:17 */
type NPTEXTMETRICW = uintptr      /* wingdi.h:862:31 */
type LPTEXTMETRICW = uintptr      /* wingdi.h:862:46 */

type TEXTMETRIC = TEXTMETRICA     /* wingdi.h:864:3 */
type PTEXTMETRIC = PTEXTMETRICA   /* wingdi.h:865:3 */
type NPTEXTMETRIC = NPTEXTMETRICA /* wingdi.h:866:3 */
type LPTEXTMETRIC = LPTEXTMETRICA /* wingdi.h:867:3 */
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type tagNEWTEXTMETRICA = struct {
	tmHeight           LONG
	tmAscent           LONG
	tmDescent          LONG
	tmInternalLeading  LONG
	tmExternalLeading  LONG
	tmAveCharWidth     LONG
	tmMaxCharWidth     LONG
	tmWeight           LONG
	tmOverhang         LONG
	tmDigitizedAspectX LONG
	tmDigitizedAspectY LONG
	tmFirstChar        BYTE
	tmLastChar         BYTE
	tmDefaultChar      BYTE
	tmBreakChar        BYTE
	tmItalic           BYTE
	tmUnderlined       BYTE
	tmStruckOut        BYTE
	tmPitchAndFamily   BYTE
	tmCharSet          BYTE
	_                  [3]byte
	ntmFlags           DWORD
	ntmSizeEM          UINT
	ntmCellHeight      UINT
	ntmAvgWidth        UINT
} /* wingdi.h:885:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
type NEWTEXTMETRICA = tagNEWTEXTMETRICA /* wingdi.h:910:5 */
type PNEWTEXTMETRICA = uintptr          /* wingdi.h:910:20 */
type NPNEWTEXTMETRICA = uintptr         /* wingdi.h:910:37 */
type LPNEWTEXTMETRICA = uintptr         /* wingdi.h:910:55 */

type tagNEWTEXTMETRICW = struct {
	tmHeight           LONG
	tmAscent           LONG
	tmDescent          LONG
	tmInternalLeading  LONG
	tmExternalLeading  LONG
	tmAveCharWidth     LONG
	tmMaxCharWidth     LONG
	tmWeight           LONG
	tmOverhang         LONG
	tmDigitizedAspectX LONG
	tmDigitizedAspectY LONG
	tmFirstChar        WCHAR
	tmLastChar         WCHAR
	tmDefaultChar      WCHAR
	tmBreakChar        WCHAR
	tmItalic           BYTE
	tmUnderlined       BYTE
	tmStruckOut        BYTE
	tmPitchAndFamily   BYTE
	tmCharSet          BYTE
	_                  [3]byte
	ntmFlags           DWORD
	ntmSizeEM          UINT
	ntmCellHeight      UINT
	ntmAvgWidth        UINT
} /* wingdi.h:912:11 */

type NEWTEXTMETRICW = tagNEWTEXTMETRICW /* wingdi.h:937:5 */
type PNEWTEXTMETRICW = uintptr          /* wingdi.h:937:20 */
type NPNEWTEXTMETRICW = uintptr         /* wingdi.h:937:37 */
type LPNEWTEXTMETRICW = uintptr         /* wingdi.h:937:55 */

type NEWTEXTMETRIC = NEWTEXTMETRICA     /* wingdi.h:939:3 */
type PNEWTEXTMETRIC = PNEWTEXTMETRICA   /* wingdi.h:940:3 */
type NPNEWTEXTMETRIC = NPNEWTEXTMETRICA /* wingdi.h:941:3 */
type LPNEWTEXTMETRIC = LPNEWTEXTMETRICA /* wingdi.h:942:3 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type tagNEWTEXTMETRICEXA = struct {
	ntmTm      NEWTEXTMETRICA
	ntmFontSig FONTSIGNATURE
} /* wingdi.h:946:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type NEWTEXTMETRICEXA = tagNEWTEXTMETRICEXA /* wingdi.h:949:5 */

type tagNEWTEXTMETRICEXW = struct {
	ntmTm      NEWTEXTMETRICW
	ntmFontSig FONTSIGNATURE
} /* wingdi.h:951:11 */

type NEWTEXTMETRICEXW = tagNEWTEXTMETRICEXW /* wingdi.h:954:5 */

type NEWTEXTMETRICEX = NEWTEXTMETRICEXA /* wingdi.h:956:3 */

type tagPELARRAY = struct {
	paXCount LONG
	paYCount LONG
	paXExt   LONG
	paYExt   LONG
	paRGBs   BYTE
	_        [3]byte
} /* wingdi.h:961:11 */

type PELARRAY = tagPELARRAY /* wingdi.h:967:5 */
type PPELARRAY = uintptr    /* wingdi.h:967:14 */
type NPPELARRAY = uintptr   /* wingdi.h:967:25 */
type LPPELARRAY = uintptr   /* wingdi.h:967:37 */
type tagLOGBRUSH = struct {
	lbStyle UINT
	lbColor COLORREF
	lbHatch ULONG_PTR
} /* wingdi.h:970:11 */

type LOGBRUSH = tagLOGBRUSH /* wingdi.h:974:5 */
type PLOGBRUSH = uintptr    /* wingdi.h:974:14 */
type NPLOGBRUSH = uintptr   /* wingdi.h:974:25 */
type LPLOGBRUSH = uintptr   /* wingdi.h:974:37 */

type tagLOGBRUSH32 = struct {
	lbStyle UINT
	lbColor COLORREF
	lbHatch ULONG
} /* wingdi.h:976:11 */

type LOGBRUSH32 = tagLOGBRUSH32 /* wingdi.h:980:5 */
type PLOGBRUSH32 = uintptr      /* wingdi.h:980:16 */
type NPLOGBRUSH32 = uintptr     /* wingdi.h:980:29 */
type LPLOGBRUSH32 = uintptr     /* wingdi.h:980:43 */
type PATTERN = LOGBRUSH         /* wingdi.h:983:20 */
type PPATTERN = uintptr         /* wingdi.h:984:19 */
type NPPATTERN = uintptr        /* wingdi.h:985:19 */
type LPPATTERN = uintptr        /* wingdi.h:986:19 */

type tagLOGPEN = struct {
	lopnStyle UINT
	lopnWidth POINT
	lopnColor COLORREF
} /* wingdi.h:990:11 */

type LOGPEN = tagLOGPEN /* wingdi.h:994:5 */
type PLOGPEN = uintptr  /* wingdi.h:994:12 */
type NPLOGPEN = uintptr /* wingdi.h:994:21 */
type LPLOGPEN = uintptr /* wingdi.h:994:31 */

type tagEXTLOGPEN = struct {
	elpPenStyle   DWORD
	elpWidth      DWORD
	elpBrushStyle UINT
	elpColor      COLORREF
	elpHatch      ULONG_PTR
	elpNumEntries DWORD
	elpStyleEntry [1]DWORD
} /* wingdi.h:998:11 */

type EXTLOGPEN = tagEXTLOGPEN /* wingdi.h:1006:5 */
type PEXTLOGPEN = uintptr     /* wingdi.h:1006:15 */
type NPEXTLOGPEN = uintptr    /* wingdi.h:1006:27 */
type LPEXTLOGPEN = uintptr    /* wingdi.h:1006:40 */

type tagEXTLOGPEN32 = struct {
	elpPenStyle   DWORD
	elpWidth      DWORD
	elpBrushStyle UINT
	elpColor      COLORREF
	elpHatch      ULONG
	elpNumEntries DWORD
	elpStyleEntry [1]DWORD
} /* wingdi.h:1010:11 */

type EXTLOGPEN32 = tagEXTLOGPEN32 /* wingdi.h:1018:5 */
type PEXTLOGPEN32 = uintptr       /* wingdi.h:1018:18 */
type NPEXTLOGPEN32 = uintptr      /* wingdi.h:1018:33 */
type LPEXTLOGPEN32 = uintptr      /* wingdi.h:1018:49 */

type tagPALETTEENTRY = struct {
	peRed   BYTE
	peGreen BYTE
	peBlue  BYTE
	peFlags BYTE
} /* wingdi.h:1022:11 */

type PALETTEENTRY = tagPALETTEENTRY /* wingdi.h:1027:5 */
type PPALETTEENTRY = uintptr        /* wingdi.h:1027:18 */
type LPPALETTEENTRY = uintptr       /* wingdi.h:1027:33 */

type tagLOGPALETTE = struct {
	palVersion    WORD
	palNumEntries WORD
	palPalEntry   [1]PALETTEENTRY
} /* wingdi.h:1032:11 */

type LOGPALETTE = tagLOGPALETTE /* wingdi.h:1036:5 */
type PLOGPALETTE = uintptr      /* wingdi.h:1036:16 */
type NPLOGPALETTE = uintptr     /* wingdi.h:1036:29 */
type LPLOGPALETTE = uintptr     /* wingdi.h:1036:43 */

type tagLOGFONTA = struct {
	lfHeight         LONG
	lfWidth          LONG
	lfEscapement     LONG
	lfOrientation    LONG
	lfWeight         LONG
	lfItalic         BYTE
	lfUnderline      BYTE
	lfStrikeOut      BYTE
	lfCharSet        BYTE
	lfOutPrecision   BYTE
	lfClipPrecision  BYTE
	lfQuality        BYTE
	lfPitchAndFamily BYTE
	lfFaceName       [32]CHAR
} /* wingdi.h:1043:11 */

type LOGFONTA = tagLOGFONTA /* wingdi.h:1058:5 */
type PLOGFONTA = uintptr    /* wingdi.h:1058:14 */
type NPLOGFONTA = uintptr   /* wingdi.h:1058:25 */
type LPLOGFONTA = uintptr   /* wingdi.h:1058:37 */

type tagLOGFONTW = struct {
	lfHeight         LONG
	lfWidth          LONG
	lfEscapement     LONG
	lfOrientation    LONG
	lfWeight         LONG
	lfItalic         BYTE
	lfUnderline      BYTE
	lfStrikeOut      BYTE
	lfCharSet        BYTE
	lfOutPrecision   BYTE
	lfClipPrecision  BYTE
	lfQuality        BYTE
	lfPitchAndFamily BYTE
	lfFaceName       [32]WCHAR
} /* wingdi.h:1060:11 */

type LOGFONTW = tagLOGFONTW /* wingdi.h:1075:5 */
type PLOGFONTW = uintptr    /* wingdi.h:1075:14 */
type NPLOGFONTW = uintptr   /* wingdi.h:1075:25 */
type LPLOGFONTW = uintptr   /* wingdi.h:1075:37 */

type LOGFONT = LOGFONTA     /* wingdi.h:1077:3 */
type PLOGFONT = PLOGFONTA   /* wingdi.h:1078:3 */
type NPLOGFONT = NPLOGFONTA /* wingdi.h:1079:3 */
type LPLOGFONT = LPLOGFONTA /* wingdi.h:1080:3 */

type tagENUMLOGFONTA = struct {
	elfLogFont  LOGFONTA
	elfFullName [64]BYTE
	elfStyle    [32]BYTE
} /* wingdi.h:1086:11 */

type ENUMLOGFONTA = tagENUMLOGFONTA /* wingdi.h:1090:5 */
type LPENUMLOGFONTA = uintptr       /* wingdi.h:1090:18 */

type tagENUMLOGFONTW = struct {
	elfLogFont  LOGFONTW
	elfFullName [64]WCHAR
	elfStyle    [32]WCHAR
} /* wingdi.h:1092:11 */

type ENUMLOGFONTW = tagENUMLOGFONTW /* wingdi.h:1096:5 */
type LPENUMLOGFONTW = uintptr       /* wingdi.h:1096:18 */

type ENUMLOGFONT = ENUMLOGFONTA     /* wingdi.h:1098:3 */
type LPENUMLOGFONT = LPENUMLOGFONTA /* wingdi.h:1099:3 */

type tagENUMLOGFONTEXA = struct {
	elfLogFont  LOGFONTA
	elfFullName [64]BYTE
	elfStyle    [32]BYTE
	elfScript   [32]BYTE
} /* wingdi.h:1101:11 */

type ENUMLOGFONTEXA = tagENUMLOGFONTEXA /* wingdi.h:1106:5 */
type LPENUMLOGFONTEXA = uintptr         /* wingdi.h:1106:20 */

type tagENUMLOGFONTEXW = struct {
	elfLogFont  LOGFONTW
	elfFullName [64]WCHAR
	elfStyle    [32]WCHAR
	elfScript   [32]WCHAR
} /* wingdi.h:1108:11 */

type ENUMLOGFONTEXW = tagENUMLOGFONTEXW /* wingdi.h:1113:5 */
type LPENUMLOGFONTEXW = uintptr         /* wingdi.h:1113:20 */

type ENUMLOGFONTEX = ENUMLOGFONTEXA     /* wingdi.h:1115:3 */
type LPENUMLOGFONTEX = LPENUMLOGFONTEXA /* wingdi.h:1116:3 */

type tagPANOSE = struct {
	bFamilyType      BYTE
	bSerifStyle      BYTE
	bWeight          BYTE
	bProportion      BYTE
	bContrast        BYTE
	bStrokeVariation BYTE
	bArmStyle        BYTE
	bLetterform      BYTE
	bMidline         BYTE
	bXHeight         BYTE
} /* wingdi.h:1237:11 */

type PANOSE = tagPANOSE /* wingdi.h:1248:5 */
type LPPANOSE = uintptr /* wingdi.h:1248:12 */

type tagEXTLOGFONTA = struct {
	elfLogFont   LOGFONTA
	elfFullName  [64]BYTE
	elfStyle     [32]BYTE
	elfVersion   DWORD
	elfStyleSize DWORD
	elfMatch     DWORD
	elfReserved  DWORD
	elfVendorId  [4]BYTE
	elfCulture   DWORD
	elfPanose    PANOSE
	_            [2]byte
} /* wingdi.h:1358:11 */

type EXTLOGFONTA = tagEXTLOGFONTA /* wingdi.h:1369:5 */
type PEXTLOGFONTA = uintptr       /* wingdi.h:1369:17 */
type NPEXTLOGFONTA = uintptr      /* wingdi.h:1369:31 */
type LPEXTLOGFONTA = uintptr      /* wingdi.h:1369:46 */

type tagEXTLOGFONTW = struct {
	elfLogFont   LOGFONTW
	elfFullName  [64]WCHAR
	elfStyle     [32]WCHAR
	elfVersion   DWORD
	elfStyleSize DWORD
	elfMatch     DWORD
	elfReserved  DWORD
	elfVendorId  [4]BYTE
	elfCulture   DWORD
	elfPanose    PANOSE
	_            [2]byte
} /* wingdi.h:1371:11 */

type EXTLOGFONTW = tagEXTLOGFONTW /* wingdi.h:1382:5 */
type PEXTLOGFONTW = uintptr       /* wingdi.h:1382:17 */
type NPEXTLOGFONTW = uintptr      /* wingdi.h:1382:31 */
type LPEXTLOGFONTW = uintptr      /* wingdi.h:1382:46 */

type EXTLOGFONT = EXTLOGFONTA     /* wingdi.h:1384:3 */
type PEXTLOGFONT = PEXTLOGFONTA   /* wingdi.h:1385:3 */
type NPEXTLOGFONT = NPEXTLOGFONTA /* wingdi.h:1386:3 */
type LPEXTLOGFONT = LPEXTLOGFONTA /* wingdi.h:1387:3 */

type _devicemodeA = struct {
	dmDeviceName    [32]BYTE
	dmSpecVersion   WORD
	dmDriverVersion WORD
	dmSize          WORD
	dmDriverExtra   WORD
	dmFields        DWORD
	__44            struct {
		_   [0]uint32
		__0 struct {
			dmOrientation   int16
			dmPaperSize     int16
			dmPaperLength   int16
			dmPaperWidth    int16
			dmScale         int16
			dmCopies        int16
			dmDefaultSource int16
			dmPrintQuality  int16
		}
	}
	dmColor            int16
	dmDuplex           int16
	dmYResolution      int16
	dmTTOption         int16
	dmCollate          int16
	dmFormName         [32]BYTE
	dmLogPixels        WORD
	dmBitsPerPel       DWORD
	dmPelsWidth        DWORD
	dmPelsHeight       DWORD
	__116              struct{ dmDisplayFlags DWORD }
	dmDisplayFrequency DWORD
	dmICMMethod        DWORD
	dmICMIntent        DWORD
	dmMediaType        DWORD
	dmDitherType       DWORD
	dmReserved1        DWORD
	dmReserved2        DWORD
	dmPanningWidth     DWORD
	dmPanningHeight    DWORD
} /* wingdi.h:1671:11 */

type DEVMODEA = _devicemodeA /* wingdi.h:1718:5 */
type PDEVMODEA = uintptr     /* wingdi.h:1718:14 */
type NPDEVMODEA = uintptr    /* wingdi.h:1718:25 */
type LPDEVMODEA = uintptr    /* wingdi.h:1718:37 */

type _devicemodeW = struct {
	dmDeviceName    [32]WCHAR
	dmSpecVersion   WORD
	dmDriverVersion WORD
	dmSize          WORD
	dmDriverExtra   WORD
	dmFields        DWORD
	__76            struct {
		_   [0]uint32
		__0 struct {
			dmOrientation   int16
			dmPaperSize     int16
			dmPaperLength   int16
			dmPaperWidth    int16
			dmScale         int16
			dmCopies        int16
			dmDefaultSource int16
			dmPrintQuality  int16
		}
	}
	dmColor            int16
	dmDuplex           int16
	dmYResolution      int16
	dmTTOption         int16
	dmCollate          int16
	dmFormName         [32]WCHAR
	dmLogPixels        WORD
	dmBitsPerPel       DWORD
	dmPelsWidth        DWORD
	dmPelsHeight       DWORD
	__180              struct{ dmDisplayFlags DWORD }
	dmDisplayFrequency DWORD
	dmICMMethod        DWORD
	dmICMIntent        DWORD
	dmMediaType        DWORD
	dmDitherType       DWORD
	dmReserved1        DWORD
	dmReserved2        DWORD
	dmPanningWidth     DWORD
	dmPanningHeight    DWORD
} /* wingdi.h:1720:11 */

type DEVMODEW = _devicemodeW /* wingdi.h:1767:5 */
type PDEVMODEW = uintptr     /* wingdi.h:1767:14 */
type NPDEVMODEW = uintptr    /* wingdi.h:1767:25 */
type LPDEVMODEW = uintptr    /* wingdi.h:1767:37 */

type DEVMODE = DEVMODEA     /* wingdi.h:1769:3 */
type PDEVMODE = PDEVMODEA   /* wingdi.h:1770:3 */
type NPDEVMODE = NPDEVMODEA /* wingdi.h:1771:3 */
type LPDEVMODE = LPDEVMODEA /* wingdi.h:1772:3 */

type _DISPLAY_DEVICEA = struct {
	cb           DWORD
	DeviceName   [32]CHAR
	DeviceString [128]CHAR
	StateFlags   DWORD
	DeviceID     [128]CHAR
	DeviceKey    [128]CHAR
} /* wingdi.h:2023:11 */

type DISPLAY_DEVICEA = _DISPLAY_DEVICEA /* wingdi.h:2030:5 */
type PDISPLAY_DEVICEA = uintptr         /* wingdi.h:2030:21 */
type LPDISPLAY_DEVICEA = uintptr        /* wingdi.h:2030:39 */

type _DISPLAY_DEVICEW = struct {
	cb           DWORD
	DeviceName   [32]WCHAR
	DeviceString [128]WCHAR
	StateFlags   DWORD
	DeviceID     [128]WCHAR
	DeviceKey    [128]WCHAR
} /* wingdi.h:2032:11 */

type DISPLAY_DEVICEW = _DISPLAY_DEVICEW /* wingdi.h:2039:5 */
type PDISPLAY_DEVICEW = uintptr         /* wingdi.h:2039:21 */
type LPDISPLAY_DEVICEW = uintptr        /* wingdi.h:2039:39 */

type DISPLAY_DEVICE = DISPLAY_DEVICEA     /* wingdi.h:2041:3 */
type PDISPLAY_DEVICE = PDISPLAY_DEVICEA   /* wingdi.h:2042:3 */
type LPDISPLAY_DEVICE = LPDISPLAY_DEVICEA /* wingdi.h:2043:3 */

type _RGNDATAHEADER = struct {
	dwSize   DWORD
	iType    DWORD
	nCount   DWORD
	nRgnSize DWORD
	rcBound  RECT
} /* wingdi.h:2422:11 */

type RGNDATAHEADER = _RGNDATAHEADER /* wingdi.h:2428:5 */
type PRGNDATAHEADER = uintptr       /* wingdi.h:2428:19 */

type _RGNDATA = struct {
	rdh    RGNDATAHEADER
	Buffer [1]int8
	_      [3]byte
} /* wingdi.h:2430:11 */

type RGNDATA = _RGNDATA  /* wingdi.h:2433:5 */
type PRGNDATA = uintptr  /* wingdi.h:2433:13 */
type NPRGNDATA = uintptr /* wingdi.h:2433:23 */
type LPRGNDATA = uintptr /* wingdi.h:2433:34 */

type _ABC = struct {
	abcA int32
	abcB UINT
	abcC int32
} /* wingdi.h:2439:11 */

type ABC = _ABC      /* wingdi.h:2443:5 */
type PABC = uintptr  /* wingdi.h:2443:9 */
type NPABC = uintptr /* wingdi.h:2443:15 */
type LPABC = uintptr /* wingdi.h:2443:22 */

type _ABCFLOAT = struct {
	abcfA FLOAT
	abcfB FLOAT
	abcfC FLOAT
} /* wingdi.h:2445:11 */

type ABCFLOAT = _ABCFLOAT /* wingdi.h:2449:5 */
type PABCFLOAT = uintptr  /* wingdi.h:2449:14 */
type NPABCFLOAT = uintptr /* wingdi.h:2449:25 */
type LPABCFLOAT = uintptr /* wingdi.h:2449:37 */

type _OUTLINETEXTMETRICA = struct {
	otmSize                UINT
	otmTextMetrics         TEXTMETRICA
	otmFiller              BYTE
	otmPanoseNumber        PANOSE
	_                      [1]byte
	otmfsSelection         UINT
	otmfsType              UINT
	otmsCharSlopeRise      int32
	otmsCharSlopeRun       int32
	otmItalicAngle         int32
	otmEMSquare            UINT
	otmAscent              int32
	otmDescent             int32
	otmLineGap             UINT
	otmsCapEmHeight        UINT
	otmsXHeight            UINT
	otmrcFontBox           RECT
	otmMacAscent           int32
	otmMacDescent          int32
	otmMacLineGap          UINT
	otmusMinimumPPEM       UINT
	otmptSubscriptSize     POINT
	otmptSubscriptOffset   POINT
	otmptSuperscriptSize   POINT
	otmptSuperscriptOffset POINT
	otmsStrikeoutSize      UINT
	otmsStrikeoutPosition  int32
	otmsUnderscoreSize     int32
	otmsUnderscorePosition int32
	_                      [4]byte
	otmpFamilyName         PSTR
	otmpFaceName           PSTR
	otmpStyleName          PSTR
	otmpFullName           PSTR
} /* wingdi.h:2455:11 */

type OUTLINETEXTMETRICA = _OUTLINETEXTMETRICA /* wingdi.h:2488:5 */
type POUTLINETEXTMETRICA = uintptr            /* wingdi.h:2488:24 */
type NPOUTLINETEXTMETRICA = uintptr           /* wingdi.h:2488:45 */
type LPOUTLINETEXTMETRICA = uintptr           /* wingdi.h:2488:67 */

type _OUTLINETEXTMETRICW = struct {
	otmSize                UINT
	otmTextMetrics         TEXTMETRICW
	otmFiller              BYTE
	otmPanoseNumber        PANOSE
	_                      [1]byte
	otmfsSelection         UINT
	otmfsType              UINT
	otmsCharSlopeRise      int32
	otmsCharSlopeRun       int32
	otmItalicAngle         int32
	otmEMSquare            UINT
	otmAscent              int32
	otmDescent             int32
	otmLineGap             UINT
	otmsCapEmHeight        UINT
	otmsXHeight            UINT
	otmrcFontBox           RECT
	otmMacAscent           int32
	otmMacDescent          int32
	otmMacLineGap          UINT
	otmusMinimumPPEM       UINT
	otmptSubscriptSize     POINT
	otmptSubscriptOffset   POINT
	otmptSuperscriptSize   POINT
	otmptSuperscriptOffset POINT
	otmsStrikeoutSize      UINT
	otmsStrikeoutPosition  int32
	otmsUnderscoreSize     int32
	otmsUnderscorePosition int32
	otmpFamilyName         PSTR
	otmpFaceName           PSTR
	otmpStyleName          PSTR
	otmpFullName           PSTR
} /* wingdi.h:2490:11 */

type OUTLINETEXTMETRICW = _OUTLINETEXTMETRICW /* wingdi.h:2523:5 */
type POUTLINETEXTMETRICW = uintptr            /* wingdi.h:2523:24 */
type NPOUTLINETEXTMETRICW = uintptr           /* wingdi.h:2523:45 */
type LPOUTLINETEXTMETRICW = uintptr           /* wingdi.h:2523:67 */

type OUTLINETEXTMETRIC = OUTLINETEXTMETRICA     /* wingdi.h:2525:3 */
type POUTLINETEXTMETRIC = POUTLINETEXTMETRICA   /* wingdi.h:2526:3 */
type NPOUTLINETEXTMETRIC = NPOUTLINETEXTMETRICA /* wingdi.h:2527:3 */
type LPOUTLINETEXTMETRIC = LPOUTLINETEXTMETRICA /* wingdi.h:2528:3 */

type tagPOLYTEXTA = struct {
	x       int32
	y       int32
	n       UINT
	_       [4]byte
	lpstr   LPCSTR
	uiFlags UINT
	rcl     RECT
	_       [4]byte
	pdx     uintptr
} /* wingdi.h:2533:11 */

type POLYTEXTA = tagPOLYTEXTA /* wingdi.h:2541:5 */
type PPOLYTEXTA = uintptr     /* wingdi.h:2541:15 */
type NPPOLYTEXTA = uintptr    /* wingdi.h:2541:27 */
type LPPOLYTEXTA = uintptr    /* wingdi.h:2541:40 */

type tagPOLYTEXTW = struct {
	x       int32
	y       int32
	n       UINT
	_       [4]byte
	lpstr   LPCWSTR
	uiFlags UINT
	rcl     RECT
	_       [4]byte
	pdx     uintptr
} /* wingdi.h:2543:11 */

type POLYTEXTW = tagPOLYTEXTW /* wingdi.h:2551:5 */
type PPOLYTEXTW = uintptr     /* wingdi.h:2551:15 */
type NPPOLYTEXTW = uintptr    /* wingdi.h:2551:27 */
type LPPOLYTEXTW = uintptr    /* wingdi.h:2551:40 */

type POLYTEXT = POLYTEXTA     /* wingdi.h:2553:3 */
type PPOLYTEXT = PPOLYTEXTA   /* wingdi.h:2554:3 */
type NPPOLYTEXT = NPPOLYTEXTA /* wingdi.h:2555:3 */
type LPPOLYTEXT = LPPOLYTEXTA /* wingdi.h:2556:3 */

type _FIXED = struct {
	fract WORD
	value int16
} /* wingdi.h:2560:11 */

type FIXED = _FIXED /* wingdi.h:2563:5 */

type _MAT2 = struct {
	eM11 FIXED
	eM12 FIXED
	eM21 FIXED
	eM22 FIXED
} /* wingdi.h:2565:11 */

type MAT2 = _MAT2     /* wingdi.h:2570:5 */
type LPMAT2 = uintptr /* wingdi.h:2570:10 */

type _GLYPHMETRICS = struct {
	gmBlackBoxX     UINT
	gmBlackBoxY     UINT
	gmptGlyphOrigin POINT
	gmCellIncX      int16
	gmCellIncY      int16
} /* wingdi.h:2572:11 */

type GLYPHMETRICS = _GLYPHMETRICS /* wingdi.h:2578:5 */
type LPGLYPHMETRICS = uintptr     /* wingdi.h:2578:18 */

type tagPOINTFX = struct {
	x FIXED
	y FIXED
} /* wingdi.h:2598:11 */

type POINTFX = tagPOINTFX /* wingdi.h:2601:5 */
type LPPOINTFX = uintptr  /* wingdi.h:2601:13 */

type tagTTPOLYCURVE = struct {
	wType WORD
	cpfx  WORD
	apfx  [1]POINTFX
} /* wingdi.h:2603:11 */

type TTPOLYCURVE = tagTTPOLYCURVE /* wingdi.h:2607:5 */
type LPTTPOLYCURVE = uintptr      /* wingdi.h:2607:17 */

type tagTTPOLYGONHEADER = struct {
	cb       DWORD
	dwType   DWORD
	pfxStart POINTFX
} /* wingdi.h:2609:11 */

type TTPOLYGONHEADER = tagTTPOLYGONHEADER /* wingdi.h:2613:5 */
type LPTTPOLYGONHEADER = uintptr          /* wingdi.h:2613:21 */

type tagGCP_RESULTSA = struct {
	lStructSize DWORD
	_           [4]byte
	lpOutString LPSTR
	lpOrder     uintptr
	lpDx        uintptr
	lpCaretPos  uintptr
	lpClass     LPSTR
	lpGlyphs    LPWSTR
	nGlyphs     UINT
	nMaxFit     int32
} /* wingdi.h:2656:11 */

type GCP_RESULTSA = tagGCP_RESULTSA /* wingdi.h:2666:5 */
type LPGCP_RESULTSA = uintptr       /* wingdi.h:2666:18 */
type tagGCP_RESULTSW = struct {
	lStructSize DWORD
	_           [4]byte
	lpOutString LPWSTR
	lpOrder     uintptr
	lpDx        uintptr
	lpCaretPos  uintptr
	lpClass     LPSTR
	lpGlyphs    LPWSTR
	nGlyphs     UINT
	nMaxFit     int32
} /* wingdi.h:2667:11 */

type GCP_RESULTSW = tagGCP_RESULTSW /* wingdi.h:2677:5 */
type LPGCP_RESULTSW = uintptr       /* wingdi.h:2677:18 */

type GCP_RESULTS = GCP_RESULTSA     /* wingdi.h:2679:3 */
type LPGCP_RESULTS = LPGCP_RESULTSA /* wingdi.h:2680:3 */

type _RASTERIZER_STATUS = struct {
	nSize       int16
	wFlags      int16
	nLanguageID int16
} /* wingdi.h:2682:11 */

type RASTERIZER_STATUS = _RASTERIZER_STATUS /* wingdi.h:2686:5 */
type LPRASTERIZER_STATUS = uintptr          /* wingdi.h:2686:23 */

type tagPIXELFORMATDESCRIPTOR = struct {
	nSize           WORD
	nVersion        WORD
	dwFlags         DWORD
	iPixelType      BYTE
	cColorBits      BYTE
	cRedBits        BYTE
	cRedShift       BYTE
	cGreenBits      BYTE
	cGreenShift     BYTE
	cBlueBits       BYTE
	cBlueShift      BYTE
	cAlphaBits      BYTE
	cAlphaShift     BYTE
	cAccumBits      BYTE
	cAccumRedBits   BYTE
	cAccumGreenBits BYTE
	cAccumBlueBits  BYTE
	cAccumAlphaBits BYTE
	cDepthBits      BYTE
	cStencilBits    BYTE
	cAuxBuffers     BYTE
	iLayerType      BYTE
	bReserved       BYTE
	dwLayerMask     DWORD
	dwVisibleMask   DWORD
	dwDamageMask    DWORD
} /* wingdi.h:2693:11 */

type PIXELFORMATDESCRIPTOR = tagPIXELFORMATDESCRIPTOR /* wingdi.h:2720:5 */
type PPIXELFORMATDESCRIPTOR = uintptr                 /* wingdi.h:2720:27 */
type LPPIXELFORMATDESCRIPTOR = uintptr                /* wingdi.h:2720:51 */

type OLDFONTENUMPROCA = uintptr /* wingdi.h:2753:15 */
type OLDFONTENUMPROCW = uintptr /* wingdi.h:2754:15 */

type FONTENUMPROCA = OLDFONTENUMPROCA /* wingdi.h:2764:28 */
type FONTENUMPROCW = OLDFONTENUMPROCW /* wingdi.h:2765:28 */

type FONTENUMPROC = FONTENUMPROCA /* wingdi.h:2767:3 */

type GOBJENUMPROC = uintptr /* wingdi.h:2769:15 */
type LINEDDAPROC = uintptr  /* wingdi.h:2770:16 */

type LPFNDEVMODE = uintptr /* wingdi.h:2832:16 */
type LPFNDEVCAPS = uintptr /* wingdi.h:2833:17 */

type tagWCRANGE = struct {
	wcLow   WCHAR
	cGlyphs USHORT
} /* wingdi.h:3013:11 */

type WCRANGE = tagWCRANGE /* wingdi.h:3016:5 */
type PWCRANGE = uintptr   /* wingdi.h:3016:13 */
type LPWCRANGE = uintptr  /* wingdi.h:3016:23 */

type tagGLYPHSET = struct {
	cbThis           DWORD
	flAccel          DWORD
	cGlyphsSupported DWORD
	cRanges          DWORD
	ranges           [1]WCRANGE
} /* wingdi.h:3018:11 */

type GLYPHSET = tagGLYPHSET /* wingdi.h:3024:5 */
type PGLYPHSET = uintptr    /* wingdi.h:3024:14 */
type LPGLYPHSET = uintptr   /* wingdi.h:3024:25 */

type tagDESIGNVECTOR = struct {
	dvReserved DWORD
	dvNumAxes  DWORD
	dvValues   [16]LONG
} /* wingdi.h:3046:11 */

type DESIGNVECTOR = tagDESIGNVECTOR /* wingdi.h:3050:5 */
type PDESIGNVECTOR = uintptr        /* wingdi.h:3050:18 */
type LPDESIGNVECTOR = uintptr       /* wingdi.h:3050:33 */

type tagAXISINFOA = struct {
	axMinValue LONG
	axMaxValue LONG
	axAxisName [16]BYTE
} /* wingdi.h:3067:11 */

type AXISINFOA = tagAXISINFOA /* wingdi.h:3071:5 */
type PAXISINFOA = uintptr     /* wingdi.h:3071:15 */
type LPAXISINFOA = uintptr    /* wingdi.h:3071:27 */

type tagAXISINFOW = struct {
	axMinValue LONG
	axMaxValue LONG
	axAxisName [16]WCHAR
} /* wingdi.h:3073:11 */

type AXISINFOW = tagAXISINFOW /* wingdi.h:3077:5 */
type PAXISINFOW = uintptr     /* wingdi.h:3077:15 */
type LPAXISINFOW = uintptr    /* wingdi.h:3077:27 */

type AXISINFO = AXISINFOA     /* wingdi.h:3079:3 */
type PAXISINFO = PAXISINFOA   /* wingdi.h:3080:3 */
type LPAXISINFO = LPAXISINFOA /* wingdi.h:3081:3 */

type tagAXESLISTA = struct {
	axlReserved DWORD
	axlNumAxes  DWORD
	axlAxisInfo [16]AXISINFOA
} /* wingdi.h:3083:11 */

type AXESLISTA = tagAXESLISTA /* wingdi.h:3087:5 */
type PAXESLISTA = uintptr     /* wingdi.h:3087:15 */
type LPAXESLISTA = uintptr    /* wingdi.h:3087:27 */

type tagAXESLISTW = struct {
	axlReserved DWORD
	axlNumAxes  DWORD
	axlAxisInfo [16]AXISINFOW
} /* wingdi.h:3089:11 */

type AXESLISTW = tagAXESLISTW /* wingdi.h:3093:5 */
type PAXESLISTW = uintptr     /* wingdi.h:3093:15 */
type LPAXESLISTW = uintptr    /* wingdi.h:3093:27 */

type AXESLIST = AXESLISTA     /* wingdi.h:3095:3 */
type PAXESLIST = PAXESLISTA   /* wingdi.h:3096:3 */
type LPAXESLIST = LPAXESLISTA /* wingdi.h:3097:3 */

type tagENUMLOGFONTEXDVA = struct {
	elfEnumLogfontEx ENUMLOGFONTEXA
	elfDesignVector  DESIGNVECTOR
} /* wingdi.h:3099:11 */

type ENUMLOGFONTEXDVA = tagENUMLOGFONTEXDVA /* wingdi.h:3102:5 */
type PENUMLOGFONTEXDVA = uintptr            /* wingdi.h:3102:22 */
type LPENUMLOGFONTEXDVA = uintptr           /* wingdi.h:3102:41 */

type tagENUMLOGFONTEXDVW = struct {
	elfEnumLogfontEx ENUMLOGFONTEXW
	elfDesignVector  DESIGNVECTOR
} /* wingdi.h:3104:11 */

type ENUMLOGFONTEXDVW = tagENUMLOGFONTEXDVW /* wingdi.h:3107:5 */
type PENUMLOGFONTEXDVW = uintptr            /* wingdi.h:3107:22 */
type LPENUMLOGFONTEXDVW = uintptr           /* wingdi.h:3107:41 */

type ENUMLOGFONTEXDV = ENUMLOGFONTEXDVA     /* wingdi.h:3109:3 */
type PENUMLOGFONTEXDV = PENUMLOGFONTEXDVA   /* wingdi.h:3110:3 */
type LPENUMLOGFONTEXDV = LPENUMLOGFONTEXDVA /* wingdi.h:3111:3 */

type tagENUMTEXTMETRICA = struct {
	etmNewTextMetricEx NEWTEXTMETRICEXA
	etmAxesList        AXESLISTA
} /* wingdi.h:3119:11 */

type ENUMTEXTMETRICA = tagENUMTEXTMETRICA /* wingdi.h:3122:5 */
type PENUMTEXTMETRICA = uintptr           /* wingdi.h:3122:21 */
type LPENUMTEXTMETRICA = uintptr          /* wingdi.h:3122:39 */
type tagENUMTEXTMETRICW = struct {
	etmNewTextMetricEx NEWTEXTMETRICEXW
	etmAxesList        AXESLISTW
} /* wingdi.h:3123:11 */

type ENUMTEXTMETRICW = tagENUMTEXTMETRICW /* wingdi.h:3127:5 */
type PENUMTEXTMETRICW = uintptr           /* wingdi.h:3127:21 */
type LPENUMTEXTMETRICW = uintptr          /* wingdi.h:3127:39 */

type ENUMTEXTMETRIC = ENUMTEXTMETRICA     /* wingdi.h:3129:3 */
type PENUMTEXTMETRIC = PENUMTEXTMETRICA   /* wingdi.h:3130:3 */
type LPENUMTEXTMETRIC = LPENUMTEXTMETRICA /* wingdi.h:3131:3 */

type COLOR16 = USHORT /* wingdi.h:3233:18 */

type _TRIVERTEX = struct {
	x     LONG
	y     LONG
	Red   COLOR16
	Green COLOR16
	Blue  COLOR16
	Alpha COLOR16
} /* wingdi.h:3235:11 */

type TRIVERTEX = _TRIVERTEX /* wingdi.h:3242:5 */
type PTRIVERTEX = uintptr   /* wingdi.h:3242:15 */
type LPTRIVERTEX = uintptr  /* wingdi.h:3242:27 */
type _GRADIENT_TRIANGLE = struct {
	Vertex1 ULONG
	Vertex2 ULONG
	Vertex3 ULONG
} /* wingdi.h:3245:11 */

type GRADIENT_TRIANGLE = _GRADIENT_TRIANGLE /* wingdi.h:3249:5 */
type PGRADIENT_TRIANGLE = uintptr           /* wingdi.h:3249:23 */
type LPGRADIENT_TRIANGLE = uintptr          /* wingdi.h:3249:43 */

type _GRADIENT_RECT = struct {
	UpperLeft  ULONG
	LowerRight ULONG
} /* wingdi.h:3251:11 */

type GRADIENT_RECT = _GRADIENT_RECT /* wingdi.h:3254:5 */
type PGRADIENT_RECT = uintptr       /* wingdi.h:3254:19 */
type LPGRADIENT_RECT = uintptr      /* wingdi.h:3254:35 */
type _BLENDFUNCTION = struct {
	BlendOp             BYTE
	BlendFlags          BYTE
	SourceConstantAlpha BYTE
	AlphaFormat         BYTE
} /* wingdi.h:3257:11 */

type BLENDFUNCTION = _BLENDFUNCTION /* wingdi.h:3262:5 */
type PBLENDFUNCTION = uintptr       /* wingdi.h:3262:19 */

type MFENUMPROC = uintptr /* wingdi.h:3290:15 */

type ENHMFENUMPROC = uintptr /* wingdi.h:3294:15 */

type tagDIBSECTION = struct {
	dsBm        BITMAP
	dsBmih      BITMAPINFOHEADER
	dsBitfields [3]DWORD
	_           [4]byte
	dshSection  HANDLE
	dsOffset    DWORD
	_           [4]byte
} /* wingdi.h:3326:11 */

type DIBSECTION = tagDIBSECTION /* wingdi.h:3332:5 */
type LPDIBSECTION = uintptr     /* wingdi.h:3332:16 */
type PDIBSECTION = uintptr      /* wingdi.h:3332:30 */

type tagCOLORADJUSTMENT = struct {
	caSize            WORD
	caFlags           WORD
	caIlluminantIndex WORD
	caRedGamma        WORD
	caGreenGamma      WORD
	caBlueGamma       WORD
	caReferenceBlack  WORD
	caReferenceWhite  WORD
	caContrast        SHORT
	caBrightness      SHORT
	caColorfulness    SHORT
	caRedGreenTint    SHORT
} /* wingdi.h:3379:11 */

type COLORADJUSTMENT = tagCOLORADJUSTMENT /* wingdi.h:3392:5 */
type PCOLORADJUSTMENT = uintptr           /* wingdi.h:3392:21 */
type LPCOLORADJUSTMENT = uintptr          /* wingdi.h:3392:39 */

type ABORTPROC = uintptr /* wingdi.h:3398:19 */

type _DOCINFOA = struct {
	cbSize       int32
	_            [4]byte
	lpszDocName  LPCSTR
	lpszOutput   LPCSTR
	lpszDatatype LPCSTR
	fwType       DWORD
	_            [4]byte
} /* wingdi.h:3400:11 */

type DOCINFOA = _DOCINFOA /* wingdi.h:3406:5 */
type LPDOCINFOA = uintptr /* wingdi.h:3406:14 */

type _DOCINFOW = struct {
	cbSize       int32
	_            [4]byte
	lpszDocName  LPCWSTR
	lpszOutput   LPCWSTR
	lpszDatatype LPCWSTR
	fwType       DWORD
	_            [4]byte
} /* wingdi.h:3408:11 */

type DOCINFOW = _DOCINFOW /* wingdi.h:3414:5 */
type LPDOCINFOW = uintptr /* wingdi.h:3414:14 */

type DOCINFO = DOCINFOA     /* wingdi.h:3416:3 */
type LPDOCINFO = LPDOCINFOA /* wingdi.h:3417:3 */

type tagKERNINGPAIR = struct {
	wFirst      WORD
	wSecond     WORD
	iKernAmount int32
} /* wingdi.h:3487:11 */

type KERNINGPAIR = tagKERNINGPAIR /* wingdi.h:3491:5 */
type LPKERNINGPAIR = uintptr      /* wingdi.h:3491:17 */

type ICMENUMPROCA = uintptr /* wingdi.h:3509:15 */
type ICMENUMPROCW = uintptr /* wingdi.h:3510:15 */

type tagEMR = struct {
	iType DWORD
	nSize DWORD
} /* wingdi.h:3675:11 */

type EMR = tagEMR   /* wingdi.h:3678:5 */
type PEMR = uintptr /* wingdi.h:3678:9 */

type tagEMRTEXT = struct {
	ptlReference POINTL
	nChars       DWORD
	offString    DWORD
	fOptions     DWORD
	rcl          RECTL
	offDx        DWORD
} /* wingdi.h:3680:11 */

type EMRTEXT = tagEMRTEXT /* wingdi.h:3687:5 */
type PEMRTEXT = uintptr   /* wingdi.h:3687:13 */

type tagABORTPATH = struct{ emr EMR } /* wingdi.h:3689:11 */

type EMRABORTPATH = tagABORTPATH      /* wingdi.h:3691:5 */
type PEMRABORTPATH = uintptr          /* wingdi.h:3691:18 */
type EMRBEGINPATH = tagABORTPATH      /* wingdi.h:3691:33 */
type PEMRBEGINPATH = uintptr          /* wingdi.h:3691:46 */
type EMRENDPATH = tagABORTPATH        /* wingdi.h:3691:61 */
type PEMRENDPATH = uintptr            /* wingdi.h:3691:72 */
type EMRCLOSEFIGURE = tagABORTPATH    /* wingdi.h:3691:85 */
type PEMRCLOSEFIGURE = uintptr        /* wingdi.h:3691:100 */
type EMRFLATTENPATH = tagABORTPATH    /* wingdi.h:3691:117 */
type PEMRFLATTENPATH = uintptr        /* wingdi.h:3691:132 */
type EMRWIDENPATH = tagABORTPATH      /* wingdi.h:3691:149 */
type PEMRWIDENPATH = uintptr          /* wingdi.h:3691:162 */
type EMRSETMETARGN = tagABORTPATH     /* wingdi.h:3691:177 */
type PEMRSETMETARGN = uintptr         /* wingdi.h:3691:191 */
type EMRSAVEDC = tagABORTPATH         /* wingdi.h:3691:207 */
type PEMRSAVEDC = uintptr             /* wingdi.h:3691:217 */
type EMRREALIZEPALETTE = tagABORTPATH /* wingdi.h:3691:229 */
type PEMRREALIZEPALETTE = uintptr     /* wingdi.h:3691:247 */

type tagEMRSELECTCLIPPATH = struct {
	emr   EMR
	iMode DWORD
} /* wingdi.h:3693:11 */

type EMRSELECTCLIPPATH = tagEMRSELECTCLIPPATH    /* wingdi.h:3696:5 */
type PEMRSELECTCLIPPATH = uintptr                /* wingdi.h:3696:23 */
type EMRSETBKMODE = tagEMRSELECTCLIPPATH         /* wingdi.h:3696:43 */
type PEMRSETBKMODE = uintptr                     /* wingdi.h:3696:56 */
type EMRSETMAPMODE = tagEMRSELECTCLIPPATH        /* wingdi.h:3696:71 */
type PEMRSETMAPMODE = uintptr                    /* wingdi.h:3696:85 */
type EMRSETLAYOUT = tagEMRSELECTCLIPPATH         /* wingdi.h:3696:101 */
type PEMRSETLAYOUT = uintptr                     /* wingdi.h:3696:114 */
type EMRSETPOLYFILLMODE = tagEMRSELECTCLIPPATH   /* wingdi.h:3697:5 */
type PEMRSETPOLYFILLMODE = uintptr               /* wingdi.h:3697:24 */
type EMRSETROP2 = tagEMRSELECTCLIPPATH           /* wingdi.h:3697:45 */
type PEMRSETROP2 = uintptr                       /* wingdi.h:3697:56 */
type EMRSETSTRETCHBLTMODE = tagEMRSELECTCLIPPATH /* wingdi.h:3697:69 */
type PEMRSETSTRETCHBLTMODE = uintptr             /* wingdi.h:3697:90 */
type EMRSETICMMODE = tagEMRSELECTCLIPPATH        /* wingdi.h:3697:113 */
type PEMRSETICMMODE = uintptr                    /* wingdi.h:3698:5 */
type EMRSETTEXTALIGN = tagEMRSELECTCLIPPATH      /* wingdi.h:3698:21 */
type PEMRSETTEXTALIGN = uintptr                  /* wingdi.h:3698:37 */

type tagEMRSETMITERLIMIT = struct {
	emr         EMR
	eMiterLimit FLOAT
} /* wingdi.h:3700:11 */

type EMRSETMITERLIMIT = tagEMRSETMITERLIMIT /* wingdi.h:3703:5 */
type PEMRSETMITERLIMIT = uintptr            /* wingdi.h:3703:22 */

type tagEMRRESTOREDC = struct {
	emr       EMR
	iRelative LONG
} /* wingdi.h:3705:11 */

type EMRRESTOREDC = tagEMRRESTOREDC /* wingdi.h:3708:5 */
type PEMRRESTOREDC = uintptr        /* wingdi.h:3708:18 */

type tagEMRSETARCDIRECTION = struct {
	emr           EMR
	iArcDirection DWORD
} /* wingdi.h:3710:11 */

type EMRSETARCDIRECTION = tagEMRSETARCDIRECTION /* wingdi.h:3714:5 */
type PEMRSETARCDIRECTION = uintptr              /* wingdi.h:3714:24 */

type tagEMRSETMAPPERFLAGS = struct {
	emr     EMR
	dwFlags DWORD
} /* wingdi.h:3716:11 */

type EMRSETMAPPERFLAGS = tagEMRSETMAPPERFLAGS /* wingdi.h:3719:5 */
type PEMRSETMAPPERFLAGS = uintptr             /* wingdi.h:3719:23 */

type tagEMRSETTEXTCOLOR = struct {
	emr     EMR
	crColor COLORREF
} /* wingdi.h:3721:11 */

type EMRSETBKCOLOR = tagEMRSETTEXTCOLOR   /* wingdi.h:3724:5 */
type PEMRSETBKCOLOR = uintptr             /* wingdi.h:3724:19 */
type EMRSETTEXTCOLOR = tagEMRSETTEXTCOLOR /* wingdi.h:3724:35 */
type PEMRSETTEXTCOLOR = uintptr           /* wingdi.h:3724:51 */

type tagEMRSELECTOBJECT = struct {
	emr      EMR
	ihObject DWORD
} /* wingdi.h:3726:11 */

type EMRSELECTOBJECT = tagEMRSELECTOBJECT /* wingdi.h:3729:5 */
type PEMRSELECTOBJECT = uintptr           /* wingdi.h:3729:21 */
type EMRDELETEOBJECT = tagEMRSELECTOBJECT /* wingdi.h:3729:39 */
type PEMRDELETEOBJECT = uintptr           /* wingdi.h:3729:55 */

type tagEMRSELECTPALETTE = struct {
	emr   EMR
	ihPal DWORD
} /* wingdi.h:3731:11 */

type EMRSELECTPALETTE = tagEMRSELECTPALETTE /* wingdi.h:3734:5 */
type PEMRSELECTPALETTE = uintptr            /* wingdi.h:3734:22 */

type tagEMRRESIZEPALETTE = struct {
	emr      EMR
	ihPal    DWORD
	cEntries DWORD
} /* wingdi.h:3736:11 */

type EMRRESIZEPALETTE = tagEMRRESIZEPALETTE /* wingdi.h:3740:5 */
type PEMRRESIZEPALETTE = uintptr            /* wingdi.h:3740:22 */

type tagEMRSETPALETTEENTRIES = struct {
	emr         EMR
	ihPal       DWORD
	iStart      DWORD
	cEntries    DWORD
	aPalEntries [1]PALETTEENTRY
} /* wingdi.h:3742:11 */

type EMRSETPALETTEENTRIES = tagEMRSETPALETTEENTRIES /* wingdi.h:3748:5 */
type PEMRSETPALETTEENTRIES = uintptr                /* wingdi.h:3748:26 */

type tagEMRSETCOLORADJUSTMENT = struct {
	emr             EMR
	ColorAdjustment COLORADJUSTMENT
} /* wingdi.h:3750:11 */

type EMRSETCOLORADJUSTMENT = tagEMRSETCOLORADJUSTMENT /* wingdi.h:3753:5 */
type PEMRSETCOLORADJUSTMENT = uintptr                 /* wingdi.h:3753:27 */

type tagEMRGDICOMMENT = struct {
	emr    EMR
	cbData DWORD
	Data   [1]BYTE
	_      [3]byte
} /* wingdi.h:3755:11 */

type EMRGDICOMMENT = tagEMRGDICOMMENT /* wingdi.h:3759:5 */
type PEMRGDICOMMENT = uintptr         /* wingdi.h:3759:19 */

type tagEMREOF = struct {
	emr           EMR
	nPalEntries   DWORD
	offPalEntries DWORD
	nSizeLast     DWORD
} /* wingdi.h:3761:11 */

type EMREOF = tagEMREOF /* wingdi.h:3766:5 */
type PEMREOF = uintptr  /* wingdi.h:3766:12 */

type tagEMRLINETO = struct {
	emr EMR
	ptl POINTL
} /* wingdi.h:3768:11 */

type EMRLINETO = tagEMRLINETO   /* wingdi.h:3771:5 */
type PEMRLINETO = uintptr       /* wingdi.h:3771:15 */
type EMRMOVETOEX = tagEMRLINETO /* wingdi.h:3771:27 */
type PEMRMOVETOEX = uintptr     /* wingdi.h:3771:39 */

type tagEMROFFSETCLIPRGN = struct {
	emr       EMR
	ptlOffset POINTL
} /* wingdi.h:3773:11 */

type EMROFFSETCLIPRGN = tagEMROFFSETCLIPRGN /* wingdi.h:3776:5 */
type PEMROFFSETCLIPRGN = uintptr            /* wingdi.h:3776:22 */

type tagEMRFILLPATH = struct {
	emr       EMR
	rclBounds RECTL
} /* wingdi.h:3778:11 */

type EMRFILLPATH = tagEMRFILLPATH          /* wingdi.h:3781:5 */
type PEMRFILLPATH = uintptr                /* wingdi.h:3781:17 */
type EMRSTROKEANDFILLPATH = tagEMRFILLPATH /* wingdi.h:3781:31 */
type PEMRSTROKEANDFILLPATH = uintptr       /* wingdi.h:3781:52 */
type EMRSTROKEPATH = tagEMRFILLPATH        /* wingdi.h:3781:75 */
type PEMRSTROKEPATH = uintptr              /* wingdi.h:3781:89 */

type tagEMREXCLUDECLIPRECT = struct {
	emr     EMR
	rclClip RECTL
} /* wingdi.h:3783:11 */

type EMREXCLUDECLIPRECT = tagEMREXCLUDECLIPRECT   /* wingdi.h:3786:5 */
type PEMREXCLUDECLIPRECT = uintptr                /* wingdi.h:3786:24 */
type EMRINTERSECTCLIPRECT = tagEMREXCLUDECLIPRECT /* wingdi.h:3786:45 */
type PEMRINTERSECTCLIPRECT = uintptr              /* wingdi.h:3786:66 */

type tagEMRSETVIEWPORTORGEX = struct {
	emr       EMR
	ptlOrigin POINTL
} /* wingdi.h:3788:11 */

type EMRSETVIEWPORTORGEX = tagEMRSETVIEWPORTORGEX /* wingdi.h:3791:5 */
type PEMRSETVIEWPORTORGEX = uintptr               /* wingdi.h:3791:25 */
type EMRSETWINDOWORGEX = tagEMRSETVIEWPORTORGEX   /* wingdi.h:3791:47 */
type PEMRSETWINDOWORGEX = uintptr                 /* wingdi.h:3791:65 */
type EMRSETBRUSHORGEX = tagEMRSETVIEWPORTORGEX    /* wingdi.h:3791:85 */
type PEMRSETBRUSHORGEX = uintptr                  /* wingdi.h:3791:102 */

type tagEMRSETVIEWPORTEXTEX = struct {
	emr       EMR
	szlExtent SIZEL
} /* wingdi.h:3793:11 */

type EMRSETVIEWPORTEXTEX = tagEMRSETVIEWPORTEXTEX /* wingdi.h:3796:5 */
type PEMRSETVIEWPORTEXTEX = uintptr               /* wingdi.h:3796:25 */
type EMRSETWINDOWEXTEX = tagEMRSETVIEWPORTEXTEX   /* wingdi.h:3796:47 */
type PEMRSETWINDOWEXTEX = uintptr                 /* wingdi.h:3796:65 */

type tagEMRSCALEVIEWPORTEXTEX = struct {
	emr    EMR
	xNum   LONG
	xDenom LONG
	yNum   LONG
	yDenom LONG
} /* wingdi.h:3798:11 */

type EMRSCALEVIEWPORTEXTEX = tagEMRSCALEVIEWPORTEXTEX /* wingdi.h:3804:5 */
type PEMRSCALEVIEWPORTEXTEX = uintptr                 /* wingdi.h:3804:27 */
type EMRSCALEWINDOWEXTEX = tagEMRSCALEVIEWPORTEXTEX   /* wingdi.h:3804:51 */
type PEMRSCALEWINDOWEXTEX = uintptr                   /* wingdi.h:3804:71 */

type tagEMRSETWORLDTRANSFORM = struct {
	emr   EMR
	xform XFORM
} /* wingdi.h:3806:11 */

type EMRSETWORLDTRANSFORM = tagEMRSETWORLDTRANSFORM /* wingdi.h:3809:5 */
type PEMRSETWORLDTRANSFORM = uintptr                /* wingdi.h:3809:26 */

type tagEMRMODIFYWORLDTRANSFORM = struct {
	emr   EMR
	xform XFORM
	iMode DWORD
} /* wingdi.h:3811:11 */

type EMRMODIFYWORLDTRANSFORM = tagEMRMODIFYWORLDTRANSFORM /* wingdi.h:3815:5 */
type PEMRMODIFYWORLDTRANSFORM = uintptr                   /* wingdi.h:3815:29 */

type tagEMRSETPIXELV = struct {
	emr      EMR
	ptlPixel POINTL
	crColor  COLORREF
} /* wingdi.h:3817:11 */

type EMRSETPIXELV = tagEMRSETPIXELV /* wingdi.h:3821:5 */
type PEMRSETPIXELV = uintptr        /* wingdi.h:3821:18 */

type tagEMREXTFLOODFILL = struct {
	emr      EMR
	ptlStart POINTL
	crColor  COLORREF
	iMode    DWORD
} /* wingdi.h:3823:11 */

type EMREXTFLOODFILL = tagEMREXTFLOODFILL /* wingdi.h:3828:5 */
type PEMREXTFLOODFILL = uintptr           /* wingdi.h:3828:21 */

type tagEMRELLIPSE = struct {
	emr    EMR
	rclBox RECTL
} /* wingdi.h:3830:11 */

type EMRELLIPSE = tagEMRELLIPSE   /* wingdi.h:3833:5 */
type PEMRELLIPSE = uintptr        /* wingdi.h:3833:16 */
type EMRRECTANGLE = tagEMRELLIPSE /* wingdi.h:3833:29 */
type PEMRRECTANGLE = uintptr      /* wingdi.h:3833:42 */

type tagEMRROUNDRECT = struct {
	emr       EMR
	rclBox    RECTL
	szlCorner SIZEL
} /* wingdi.h:3835:11 */

type EMRROUNDRECT = tagEMRROUNDRECT /* wingdi.h:3839:5 */
type PEMRROUNDRECT = uintptr        /* wingdi.h:3839:18 */

type tagEMRARC = struct {
	emr      EMR
	rclBox   RECTL
	ptlStart POINTL
	ptlEnd   POINTL
} /* wingdi.h:3841:11 */

type EMRARC = tagEMRARC   /* wingdi.h:3846:5 */
type PEMRARC = uintptr    /* wingdi.h:3846:12 */
type EMRARCTO = tagEMRARC /* wingdi.h:3846:21 */
type PEMRARCTO = uintptr  /* wingdi.h:3846:30 */
type EMRCHORD = tagEMRARC /* wingdi.h:3846:41 */
type PEMRCHORD = uintptr  /* wingdi.h:3846:50 */
type EMRPIE = tagEMRARC   /* wingdi.h:3846:61 */
type PEMRPIE = uintptr    /* wingdi.h:3846:68 */

type tagEMRANGLEARC = struct {
	emr         EMR
	ptlCenter   POINTL
	nRadius     DWORD
	eStartAngle FLOAT
	eSweepAngle FLOAT
} /* wingdi.h:3848:11 */

type EMRANGLEARC = tagEMRANGLEARC /* wingdi.h:3854:5 */
type PEMRANGLEARC = uintptr       /* wingdi.h:3854:17 */

type tagEMRPOLYLINE = struct {
	emr       EMR
	rclBounds RECTL
	cptl      DWORD
	aptl      [1]POINTL
} /* wingdi.h:3856:11 */

type EMRPOLYLINE = tagEMRPOLYLINE     /* wingdi.h:3861:5 */
type PEMRPOLYLINE = uintptr           /* wingdi.h:3861:17 */
type EMRPOLYBEZIER = tagEMRPOLYLINE   /* wingdi.h:3861:31 */
type PEMRPOLYBEZIER = uintptr         /* wingdi.h:3861:45 */
type EMRPOLYGON = tagEMRPOLYLINE      /* wingdi.h:3861:61 */
type PEMRPOLYGON = uintptr            /* wingdi.h:3861:72 */
type EMRPOLYBEZIERTO = tagEMRPOLYLINE /* wingdi.h:3861:85 */
type PEMRPOLYBEZIERTO = uintptr       /* wingdi.h:3861:101 */
type EMRPOLYLINETO = tagEMRPOLYLINE   /* wingdi.h:3861:119 */
type PEMRPOLYLINETO = uintptr         /* wingdi.h:3861:133 */

type tagEMRPOLYLINE16 = struct {
	emr       EMR
	rclBounds RECTL
	cpts      DWORD
	apts      [1]POINTS
} /* wingdi.h:3863:11 */

type EMRPOLYLINE16 = tagEMRPOLYLINE16     /* wingdi.h:3868:5 */
type PEMRPOLYLINE16 = uintptr             /* wingdi.h:3868:19 */
type EMRPOLYBEZIER16 = tagEMRPOLYLINE16   /* wingdi.h:3868:35 */
type PEMRPOLYBEZIER16 = uintptr           /* wingdi.h:3868:51 */
type EMRPOLYGON16 = tagEMRPOLYLINE16      /* wingdi.h:3868:69 */
type PEMRPOLYGON16 = uintptr              /* wingdi.h:3868:82 */
type EMRPOLYBEZIERTO16 = tagEMRPOLYLINE16 /* wingdi.h:3868:97 */
type PEMRPOLYBEZIERTO16 = uintptr         /* wingdi.h:3868:115 */
type EMRPOLYLINETO16 = tagEMRPOLYLINE16   /* wingdi.h:3868:135 */
type PEMRPOLYLINETO16 = uintptr           /* wingdi.h:3868:151 */

type tagEMRPOLYDRAW = struct {
	emr       EMR
	rclBounds RECTL
	cptl      DWORD
	aptl      [1]POINTL
	abTypes   [1]BYTE
	_         [3]byte
} /* wingdi.h:3870:11 */

type EMRPOLYDRAW = tagEMRPOLYDRAW /* wingdi.h:3876:5 */
type PEMRPOLYDRAW = uintptr       /* wingdi.h:3876:17 */

type tagEMRPOLYDRAW16 = struct {
	emr       EMR
	rclBounds RECTL
	cpts      DWORD
	apts      [1]POINTS
	abTypes   [1]BYTE
	_         [3]byte
} /* wingdi.h:3878:11 */

type EMRPOLYDRAW16 = tagEMRPOLYDRAW16 /* wingdi.h:3884:5 */
type PEMRPOLYDRAW16 = uintptr         /* wingdi.h:3884:19 */

type tagEMRPOLYPOLYLINE = struct {
	emr         EMR
	rclBounds   RECTL
	nPolys      DWORD
	cptl        DWORD
	aPolyCounts [1]DWORD
	aptl        [1]POINTL
} /* wingdi.h:3886:11 */

type EMRPOLYPOLYLINE = tagEMRPOLYPOLYLINE /* wingdi.h:3893:5 */
type PEMRPOLYPOLYLINE = uintptr           /* wingdi.h:3893:21 */
type EMRPOLYPOLYGON = tagEMRPOLYPOLYLINE  /* wingdi.h:3893:39 */
type PEMRPOLYPOLYGON = uintptr            /* wingdi.h:3893:54 */

type tagEMRPOLYPOLYLINE16 = struct {
	emr         EMR
	rclBounds   RECTL
	nPolys      DWORD
	cpts        DWORD
	aPolyCounts [1]DWORD
	apts        [1]POINTS
} /* wingdi.h:3895:11 */

type EMRPOLYPOLYLINE16 = tagEMRPOLYPOLYLINE16 /* wingdi.h:3902:5 */
type PEMRPOLYPOLYLINE16 = uintptr             /* wingdi.h:3902:23 */
type EMRPOLYPOLYGON16 = tagEMRPOLYPOLYLINE16  /* wingdi.h:3902:43 */
type PEMRPOLYPOLYGON16 = uintptr              /* wingdi.h:3902:60 */

type tagEMRINVERTRGN = struct {
	emr       EMR
	rclBounds RECTL
	cbRgnData DWORD
	RgnData   [1]BYTE
	_         [3]byte
} /* wingdi.h:3904:11 */

type EMRINVERTRGN = tagEMRINVERTRGN /* wingdi.h:3909:5 */
type PEMRINVERTRGN = uintptr        /* wingdi.h:3909:18 */
type EMRPAINTRGN = tagEMRINVERTRGN  /* wingdi.h:3909:33 */
type PEMRPAINTRGN = uintptr         /* wingdi.h:3909:45 */

type tagEMRFILLRGN = struct {
	emr       EMR
	rclBounds RECTL
	cbRgnData DWORD
	ihBrush   DWORD
	RgnData   [1]BYTE
	_         [3]byte
} /* wingdi.h:3911:11 */

type EMRFILLRGN = tagEMRFILLRGN /* wingdi.h:3917:5 */
type PEMRFILLRGN = uintptr      /* wingdi.h:3917:16 */

type tagEMRFRAMERGN = struct {
	emr       EMR
	rclBounds RECTL
	cbRgnData DWORD
	ihBrush   DWORD
	szlStroke SIZEL
	RgnData   [1]BYTE
	_         [3]byte
} /* wingdi.h:3919:11 */

type EMRFRAMERGN = tagEMRFRAMERGN /* wingdi.h:3926:5 */
type PEMRFRAMERGN = uintptr       /* wingdi.h:3926:17 */

type tagEMREXTSELECTCLIPRGN = struct {
	emr       EMR
	cbRgnData DWORD
	iMode     DWORD
	RgnData   [1]BYTE
	_         [3]byte
} /* wingdi.h:3928:11 */

type EMREXTSELECTCLIPRGN = tagEMREXTSELECTCLIPRGN /* wingdi.h:3933:5 */
type PEMREXTSELECTCLIPRGN = uintptr               /* wingdi.h:3933:25 */

type tagEMREXTTEXTOUTA = struct {
	emr           EMR
	rclBounds     RECTL
	iGraphicsMode DWORD
	exScale       FLOAT
	eyScale       FLOAT
	emrtext       EMRTEXT
} /* wingdi.h:3935:11 */

type EMREXTTEXTOUTA = tagEMREXTTEXTOUTA /* wingdi.h:3942:5 */
type PEMREXTTEXTOUTA = uintptr          /* wingdi.h:3942:20 */
type EMREXTTEXTOUTW = tagEMREXTTEXTOUTA /* wingdi.h:3942:37 */
type PEMREXTTEXTOUTW = uintptr          /* wingdi.h:3942:52 */

type tagEMRPOLYTEXTOUTA = struct {
	emr           EMR
	rclBounds     RECTL
	iGraphicsMode DWORD
	exScale       FLOAT
	eyScale       FLOAT
	cStrings      LONG
	aemrtext      [1]EMRTEXT
} /* wingdi.h:3944:11 */

type EMRPOLYTEXTOUTA = tagEMRPOLYTEXTOUTA /* wingdi.h:3952:5 */
type PEMRPOLYTEXTOUTA = uintptr           /* wingdi.h:3952:21 */
type EMRPOLYTEXTOUTW = tagEMRPOLYTEXTOUTA /* wingdi.h:3952:39 */
type PEMRPOLYTEXTOUTW = uintptr           /* wingdi.h:3952:55 */

type tagEMRBITBLT = struct {
	emr          EMR
	rclBounds    RECTL
	xDest        LONG
	yDest        LONG
	cxDest       LONG
	cyDest       LONG
	dwRop        DWORD
	xSrc         LONG
	ySrc         LONG
	xformSrc     XFORM
	crBkColorSrc COLORREF
	iUsageSrc    DWORD
	offBmiSrc    DWORD
	cbBmiSrc     DWORD
	offBitsSrc   DWORD
	cbBitsSrc    DWORD
} /* wingdi.h:3954:11 */

type EMRBITBLT = tagEMRBITBLT /* wingdi.h:3971:5 */
type PEMRBITBLT = uintptr     /* wingdi.h:3971:15 */

type tagEMRSTRETCHBLT = struct {
	emr          EMR
	rclBounds    RECTL
	xDest        LONG
	yDest        LONG
	cxDest       LONG
	cyDest       LONG
	dwRop        DWORD
	xSrc         LONG
	ySrc         LONG
	xformSrc     XFORM
	crBkColorSrc COLORREF
	iUsageSrc    DWORD
	offBmiSrc    DWORD
	cbBmiSrc     DWORD
	offBitsSrc   DWORD
	cbBitsSrc    DWORD
	cxSrc        LONG
	cySrc        LONG
} /* wingdi.h:3973:11 */

type EMRSTRETCHBLT = tagEMRSTRETCHBLT /* wingdi.h:3992:5 */
type PEMRSTRETCHBLT = uintptr         /* wingdi.h:3992:19 */

type tagEMRMASKBLT = struct {
	emr          EMR
	rclBounds    RECTL
	xDest        LONG
	yDest        LONG
	cxDest       LONG
	cyDest       LONG
	dwRop        DWORD
	xSrc         LONG
	ySrc         LONG
	xformSrc     XFORM
	crBkColorSrc COLORREF
	iUsageSrc    DWORD
	offBmiSrc    DWORD
	cbBmiSrc     DWORD
	offBitsSrc   DWORD
	cbBitsSrc    DWORD
	xMask        LONG
	yMask        LONG
	iUsageMask   DWORD
	offBmiMask   DWORD
	cbBmiMask    DWORD
	offBitsMask  DWORD
	cbBitsMask   DWORD
} /* wingdi.h:3994:11 */

type EMRMASKBLT = tagEMRMASKBLT /* wingdi.h:4018:5 */
type PEMRMASKBLT = uintptr      /* wingdi.h:4018:16 */

type tagEMRPLGBLT = struct {
	emr          EMR
	rclBounds    RECTL
	aptlDest     [3]POINTL
	xSrc         LONG
	ySrc         LONG
	cxSrc        LONG
	cySrc        LONG
	xformSrc     XFORM
	crBkColorSrc COLORREF
	iUsageSrc    DWORD
	offBmiSrc    DWORD
	cbBmiSrc     DWORD
	offBitsSrc   DWORD
	cbBitsSrc    DWORD
	xMask        LONG
	yMask        LONG
	iUsageMask   DWORD
	offBmiMask   DWORD
	cbBmiMask    DWORD
	offBitsMask  DWORD
	cbBitsMask   DWORD
} /* wingdi.h:4020:11 */

type EMRPLGBLT = tagEMRPLGBLT /* wingdi.h:4042:5 */
type PEMRPLGBLT = uintptr     /* wingdi.h:4042:15 */

type tagEMRSETDIBITSTODEVICE = struct {
	emr        EMR
	rclBounds  RECTL
	xDest      LONG
	yDest      LONG
	xSrc       LONG
	ySrc       LONG
	cxSrc      LONG
	cySrc      LONG
	offBmiSrc  DWORD
	cbBmiSrc   DWORD
	offBitsSrc DWORD
	cbBitsSrc  DWORD
	iUsageSrc  DWORD
	iStartScan DWORD
	cScans     DWORD
} /* wingdi.h:4044:11 */

type EMRSETDIBITSTODEVICE = tagEMRSETDIBITSTODEVICE /* wingdi.h:4060:5 */
type PEMRSETDIBITSTODEVICE = uintptr                /* wingdi.h:4060:26 */

type tagEMRSTRETCHDIBITS = struct {
	emr        EMR
	rclBounds  RECTL
	xDest      LONG
	yDest      LONG
	xSrc       LONG
	ySrc       LONG
	cxSrc      LONG
	cySrc      LONG
	offBmiSrc  DWORD
	cbBmiSrc   DWORD
	offBitsSrc DWORD
	cbBitsSrc  DWORD
	iUsageSrc  DWORD
	dwRop      DWORD
	cxDest     LONG
	cyDest     LONG
} /* wingdi.h:4062:11 */

type EMRSTRETCHDIBITS = tagEMRSTRETCHDIBITS /* wingdi.h:4079:5 */
type PEMRSTRETCHDIBITS = uintptr            /* wingdi.h:4079:22 */

type tagEMREXTCREATEFONTINDIRECTW = struct {
	emr    EMR
	ihFont DWORD
	elfw   EXTLOGFONTW
} /* wingdi.h:4081:11 */

type EMREXTCREATEFONTINDIRECTW = tagEMREXTCREATEFONTINDIRECTW /* wingdi.h:4085:5 */
type PEMREXTCREATEFONTINDIRECTW = uintptr                     /* wingdi.h:4085:31 */

type tagEMRCREATEPALETTE = struct {
	emr   EMR
	ihPal DWORD
	lgpl  LOGPALETTE
} /* wingdi.h:4087:11 */

type EMRCREATEPALETTE = tagEMRCREATEPALETTE /* wingdi.h:4091:5 */
type PEMRCREATEPALETTE = uintptr            /* wingdi.h:4091:22 */

type tagEMRCREATEPEN = struct {
	emr   EMR
	ihPen DWORD
	lopn  LOGPEN
} /* wingdi.h:4093:11 */

type EMRCREATEPEN = tagEMRCREATEPEN /* wingdi.h:4097:5 */
type PEMRCREATEPEN = uintptr        /* wingdi.h:4097:18 */

type tagEMREXTCREATEPEN = struct {
	emr     EMR
	ihPen   DWORD
	offBmi  DWORD
	cbBmi   DWORD
	offBits DWORD
	cbBits  DWORD
	_       [4]byte
	elp     EXTLOGPEN
} /* wingdi.h:4099:11 */

type EMREXTCREATEPEN = tagEMREXTCREATEPEN /* wingdi.h:4107:5 */
type PEMREXTCREATEPEN = uintptr           /* wingdi.h:4107:21 */

type tagEMRCREATEBRUSHINDIRECT = struct {
	emr     EMR
	ihBrush DWORD
	lb      LOGBRUSH32
} /* wingdi.h:4109:11 */

type EMRCREATEBRUSHINDIRECT = tagEMRCREATEBRUSHINDIRECT /* wingdi.h:4113:5 */
type PEMRCREATEBRUSHINDIRECT = uintptr                  /* wingdi.h:4113:28 */

type tagEMRCREATEMONOBRUSH = struct {
	emr     EMR
	ihBrush DWORD
	iUsage  DWORD
	offBmi  DWORD
	cbBmi   DWORD
	offBits DWORD
	cbBits  DWORD
} /* wingdi.h:4115:11 */

type EMRCREATEMONOBRUSH = tagEMRCREATEMONOBRUSH /* wingdi.h:4123:5 */
type PEMRCREATEMONOBRUSH = uintptr              /* wingdi.h:4123:24 */

type tagEMRCREATEDIBPATTERNBRUSHPT = struct {
	emr     EMR
	ihBrush DWORD
	iUsage  DWORD
	offBmi  DWORD
	cbBmi   DWORD
	offBits DWORD
	cbBits  DWORD
} /* wingdi.h:4125:11 */

type EMRCREATEDIBPATTERNBRUSHPT = tagEMRCREATEDIBPATTERNBRUSHPT /* wingdi.h:4133:5 */
type PEMRCREATEDIBPATTERNBRUSHPT = uintptr                      /* wingdi.h:4133:32 */

type tagEMRFORMAT = struct {
	dSignature DWORD
	nVersion   DWORD
	cbData     DWORD
	offData    DWORD
} /* wingdi.h:4135:11 */

type EMRFORMAT = tagEMRFORMAT /* wingdi.h:4140:5 */
type PEMRFORMAT = uintptr     /* wingdi.h:4140:15 */

type tagEMRGLSRECORD = struct {
	emr    EMR
	cbData DWORD
	Data   [1]BYTE
	_      [3]byte
} /* wingdi.h:4142:11 */

type EMRGLSRECORD = tagEMRGLSRECORD /* wingdi.h:4146:5 */
type PEMRGLSRECORD = uintptr        /* wingdi.h:4146:18 */

type tagEMRGLSBOUNDEDRECORD = struct {
	emr       EMR
	rclBounds RECTL
	cbData    DWORD
	Data      [1]BYTE
	_         [3]byte
} /* wingdi.h:4148:11 */

type EMRGLSBOUNDEDRECORD = tagEMRGLSBOUNDEDRECORD /* wingdi.h:4153:5 */
type PEMRGLSBOUNDEDRECORD = uintptr               /* wingdi.h:4153:25 */

type tagEMRPIXELFORMAT = struct {
	emr EMR
	pfd PIXELFORMATDESCRIPTOR
} /* wingdi.h:4155:11 */

type EMRPIXELFORMAT = tagEMRPIXELFORMAT /* wingdi.h:4158:5 */
type PEMRPIXELFORMAT = uintptr          /* wingdi.h:4158:20 */

type tagEMRCREATECOLORSPACE = struct {
	emr  EMR
	ihCS DWORD
	lcs  LOGCOLORSPACEA
} /* wingdi.h:4160:11 */

type EMRCREATECOLORSPACE = tagEMRCREATECOLORSPACE /* wingdi.h:4164:5 */
type PEMRCREATECOLORSPACE = uintptr               /* wingdi.h:4164:25 */

type tagEMRSETCOLORSPACE = struct {
	emr  EMR
	ihCS DWORD
} /* wingdi.h:4166:11 */

type EMRSETCOLORSPACE = tagEMRSETCOLORSPACE    /* wingdi.h:4169:5 */
type PEMRSETCOLORSPACE = uintptr               /* wingdi.h:4169:22 */
type EMRSELECTCOLORSPACE = tagEMRSETCOLORSPACE /* wingdi.h:4169:41 */
type PEMRSELECTCOLORSPACE = uintptr            /* wingdi.h:4169:61 */
type EMRDELETECOLORSPACE = tagEMRSETCOLORSPACE /* wingdi.h:4169:83 */
type PEMRDELETECOLORSPACE = uintptr            /* wingdi.h:4169:103 */

type tagEMREXTESCAPE = struct {
	emr       EMR
	iEscape   INT
	cbEscData INT
	EscData   [1]BYTE
	_         [3]byte
} /* wingdi.h:4171:11 */

type EMREXTESCAPE = tagEMREXTESCAPE  /* wingdi.h:4176:5 */
type PEMREXTESCAPE = uintptr         /* wingdi.h:4176:18 */
type EMRDRAWESCAPE = tagEMREXTESCAPE /* wingdi.h:4176:33 */
type PEMRDRAWESCAPE = uintptr        /* wingdi.h:4176:47 */

type tagEMRNAMEDESCAPE = struct {
	emr       EMR
	iEscape   INT
	cbDriver  INT
	cbEscData INT
	EscData   [1]BYTE
	_         [3]byte
} /* wingdi.h:4178:11 */

type EMRNAMEDESCAPE = tagEMRNAMEDESCAPE /* wingdi.h:4184:5 */
type PEMRNAMEDESCAPE = uintptr          /* wingdi.h:4184:20 */

type tagEMRSETICMPROFILE = struct {
	emr     EMR
	dwFlags DWORD
	cbName  DWORD
	cbData  DWORD
	Data    [1]BYTE
	_       [3]byte
} /* wingdi.h:4188:11 */

type EMRSETICMPROFILE = tagEMRSETICMPROFILE  /* wingdi.h:4194:5 */
type PEMRSETICMPROFILE = uintptr             /* wingdi.h:4194:22 */
type EMRSETICMPROFILEA = tagEMRSETICMPROFILE /* wingdi.h:4194:41 */
type PEMRSETICMPROFILEA = uintptr            /* wingdi.h:4194:59 */
type EMRSETICMPROFILEW = tagEMRSETICMPROFILE /* wingdi.h:4194:79 */
type PEMRSETICMPROFILEW = uintptr            /* wingdi.h:4194:97 */

type tagEMRCREATECOLORSPACEW = struct {
	emr     EMR
	ihCS    DWORD
	lcs     LOGCOLORSPACEW
	dwFlags DWORD
	cbData  DWORD
	Data    [1]BYTE
	_       [3]byte
} /* wingdi.h:4198:11 */

type EMRCREATECOLORSPACEW = tagEMRCREATECOLORSPACEW /* wingdi.h:4205:5 */
type PEMRCREATECOLORSPACEW = uintptr                /* wingdi.h:4205:26 */

type tagCOLORMATCHTOTARGET = struct {
	emr      EMR
	dwAction DWORD
	dwFlags  DWORD
	cbName   DWORD
	cbData   DWORD
	Data     [1]BYTE
	_        [3]byte
} /* wingdi.h:4209:11 */

type EMRCOLORMATCHTOTARGET = tagCOLORMATCHTOTARGET /* wingdi.h:4216:5 */
type PEMRCOLORMATCHTOTARGET = uintptr              /* wingdi.h:4216:27 */

type tagCOLORCORRECTPALETTE = struct {
	emr         EMR
	ihPalette   DWORD
	nFirstEntry DWORD
	nPalEntries DWORD
	nReserved   DWORD
} /* wingdi.h:4218:11 */

type EMRCOLORCORRECTPALETTE = tagCOLORCORRECTPALETTE /* wingdi.h:4224:5 */
type PEMRCOLORCORRECTPALETTE = uintptr               /* wingdi.h:4224:28 */

type tagEMRALPHABLEND = struct {
	emr          EMR
	rclBounds    RECTL
	xDest        LONG
	yDest        LONG
	cxDest       LONG
	cyDest       LONG
	dwRop        DWORD
	xSrc         LONG
	ySrc         LONG
	xformSrc     XFORM
	crBkColorSrc COLORREF
	iUsageSrc    DWORD
	offBmiSrc    DWORD
	cbBmiSrc     DWORD
	offBitsSrc   DWORD
	cbBitsSrc    DWORD
	cxSrc        LONG
	cySrc        LONG
} /* wingdi.h:4226:11 */

type EMRALPHABLEND = tagEMRALPHABLEND /* wingdi.h:4245:5 */
type PEMRALPHABLEND = uintptr         /* wingdi.h:4245:19 */

type tagEMRGRADIENTFILL = struct {
	emr       EMR
	rclBounds RECTL
	nVer      DWORD
	nTri      DWORD
	ulMode    ULONG
	Ver       [1]TRIVERTEX
} /* wingdi.h:4247:11 */

type EMRGRADIENTFILL = tagEMRGRADIENTFILL /* wingdi.h:4254:5 */
type PEMRGRADIENTFILL = uintptr           /* wingdi.h:4254:21 */

type tagEMRTRANSPARENTBLT = struct {
	emr          EMR
	rclBounds    RECTL
	xDest        LONG
	yDest        LONG
	cxDest       LONG
	cyDest       LONG
	dwRop        DWORD
	xSrc         LONG
	ySrc         LONG
	xformSrc     XFORM
	crBkColorSrc COLORREF
	iUsageSrc    DWORD
	offBmiSrc    DWORD
	cbBmiSrc     DWORD
	offBitsSrc   DWORD
	cbBitsSrc    DWORD
	cxSrc        LONG
	cySrc        LONG
} /* wingdi.h:4256:11 */

type EMRTRANSPARENTBLT = tagEMRTRANSPARENTBLT /* wingdi.h:4275:5 */
type PEMRTRANSPARENTBLT = uintptr             /* wingdi.h:4275:23 */

type _POINTFLOAT = struct {
	x FLOAT
	y FLOAT
} /* wingdi.h:4302:11 */

type POINTFLOAT = _POINTFLOAT /* wingdi.h:4305:5 */
type PPOINTFLOAT = uintptr    /* wingdi.h:4305:16 */

type _GLYPHMETRICSFLOAT = struct {
	gmfBlackBoxX     FLOAT
	gmfBlackBoxY     FLOAT
	gmfptGlyphOrigin POINTFLOAT
	gmfCellIncX      FLOAT
	gmfCellIncY      FLOAT
} /* wingdi.h:4307:11 */

type GLYPHMETRICSFLOAT = _GLYPHMETRICSFLOAT /* wingdi.h:4313:5 */
type PGLYPHMETRICSFLOAT = uintptr           /* wingdi.h:4313:23 */
type LPGLYPHMETRICSFLOAT = uintptr          /* wingdi.h:4313:43 */

type tagLAYERPLANEDESCRIPTOR = struct {
	nSize           WORD
	nVersion        WORD
	dwFlags         DWORD
	iPixelType      BYTE
	cColorBits      BYTE
	cRedBits        BYTE
	cRedShift       BYTE
	cGreenBits      BYTE
	cGreenShift     BYTE
	cBlueBits       BYTE
	cBlueShift      BYTE
	cAlphaBits      BYTE
	cAlphaShift     BYTE
	cAccumBits      BYTE
	cAccumRedBits   BYTE
	cAccumGreenBits BYTE
	cAccumBlueBits  BYTE
	cAccumAlphaBits BYTE
	cDepthBits      BYTE
	cStencilBits    BYTE
	cAuxBuffers     BYTE
	iLayerPlane     BYTE
	bReserved       BYTE
	crTransparent   COLORREF
} /* wingdi.h:4323:11 */

type LAYERPLANEDESCRIPTOR = tagLAYERPLANEDESCRIPTOR /* wingdi.h:4348:5 */
type PLAYERPLANEDESCRIPTOR = uintptr                /* wingdi.h:4348:26 */
type LPLAYERPLANEDESCRIPTOR = uintptr               /* wingdi.h:4348:49 */

type _WGLSWAP = struct {
	hdc     HDC
	uiFlags UINT
	_       [4]byte
} /* wingdi.h:4402:11 */

type WGLSWAP = _WGLSWAP  /* wingdi.h:4405:5 */
type PWGLSWAP = uintptr  /* wingdi.h:4405:13 */
type LPWGLSWAP = uintptr /* wingdi.h:4405:23 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Copyright (C) 1989, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with GCC; see the file COPYING.  If not, write to
// the Free Software Foundation, 51 Franklin Street, Fifth Floor,
// Boston, MA 02110-1301, USA.

// As a special exception, if you include this header file into source
//    files compiled by GCC, this header file does not by itself cause
//    the resulting executable to be covered by the GNU General Public
//    License.  This exception does not however invalidate any other
//    reasons why the executable file might be covered by the GNU General
//    Public License.

// ISO C Standard:  7.15  Variable arguments  <stdarg.h>

// include mingw stuff
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Copyright (C) 1989-2020 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

// ISO C Standard:  7.15  Variable arguments  <stdarg.h>

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// __declspec(selectany) must be applied to initialized objects on GCC 5 hence must not be used here.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type HDWP = HANDLE                    /* winuser.h:32:18 */
type LPMENUTEMPLATEA = PVOID          /* winuser.h:35:17 */
type LPMENUTEMPLATEW = PVOID          /* winuser.h:36:17 */
type LPMENUTEMPLATE = LPMENUTEMPLATEA /* winuser.h:39:3 */

type WNDPROC = uintptr /* winuser.h:41:19 */

type DLGPROC = uintptr /* winuser.h:46:19 */

type TIMERPROC = uintptr      /* winuser.h:50:16 */
type GRAYSTRINGPROC = uintptr /* winuser.h:51:19 */
type WNDENUMPROC = uintptr    /* winuser.h:52:19 */
type HOOKPROC = uintptr       /* winuser.h:53:19 */
type SENDASYNCPROC = uintptr  /* winuser.h:54:16 */

type PROPENUMPROCA = uintptr /* winuser.h:56:19 */
type PROPENUMPROCW = uintptr /* winuser.h:57:19 */

type PROPENUMPROCEXA = uintptr /* winuser.h:59:19 */
type PROPENUMPROCEXW = uintptr /* winuser.h:60:19 */

type EDITWORDBREAKPROCA = uintptr /* winuser.h:62:15 */
type EDITWORDBREAKPROCW = uintptr /* winuser.h:63:15 */

type DRAWSTATEPROC = uintptr /* winuser.h:65:19 */

type PROPENUMPROC = PROPENUMPROCA           /* winuser.h:93:3 */
type PROPENUMPROCEX = PROPENUMPROCEXA       /* winuser.h:94:3 */
type EDITWORDBREAKPROC = EDITWORDBREAKPROCA /* winuser.h:95:3 */

type NAMEENUMPROCA = uintptr          /* winuser.h:98:19 */
type NAMEENUMPROCW = uintptr          /* winuser.h:99:19 */
type WINSTAENUMPROCA = NAMEENUMPROCA  /* winuser.h:100:25 */
type WINSTAENUMPROCW = NAMEENUMPROCW  /* winuser.h:101:25 */
type DESKTOPENUMPROCA = NAMEENUMPROCA /* winuser.h:102:25 */
type DESKTOPENUMPROCW = NAMEENUMPROCW /* winuser.h:103:25 */

type WINSTAENUMPROC = WINSTAENUMPROCA   /* winuser.h:113:3 */
type DESKTOPENUMPROC = DESKTOPENUMPROCA /* winuser.h:114:3 */

type tagCBT_CREATEWNDA = struct {
	lpcs            uintptr
	hwndInsertAfter HWND
} /* winuser.h:494:11 */

type tagCREATESTRUCTA = struct {
	lpCreateParams LPVOID
	hInstance      HINSTANCE
	hMenu          HMENU
	hwndParent     HWND
	cy             int32
	cx             int32
	y              int32
	x              int32
	style          LONG
	_              [4]byte
	lpszName       LPCSTR
	lpszClass      LPCSTR
	dwExStyle      DWORD
	_              [4]byte
} /* winuser.h:494:11 */

type CBT_CREATEWNDA = tagCBT_CREATEWNDA /* winuser.h:497:5 */
type LPCBT_CREATEWNDA = uintptr         /* winuser.h:497:20 */

type tagCBT_CREATEWNDW = struct {
	lpcs            uintptr
	hwndInsertAfter HWND
} /* winuser.h:499:11 */

type tagCREATESTRUCTW = struct {
	lpCreateParams LPVOID
	hInstance      HINSTANCE
	hMenu          HMENU
	hwndParent     HWND
	cy             int32
	cx             int32
	y              int32
	x              int32
	style          LONG
	_              [4]byte
	lpszName       LPCWSTR
	lpszClass      LPCWSTR
	dwExStyle      DWORD
	_              [4]byte
} /* winuser.h:499:11 */

type CBT_CREATEWNDW = tagCBT_CREATEWNDW /* winuser.h:502:5 */
type LPCBT_CREATEWNDW = uintptr         /* winuser.h:502:20 */

type CBT_CREATEWND = CBT_CREATEWNDA     /* winuser.h:504:3 */
type LPCBT_CREATEWND = LPCBT_CREATEWNDA /* winuser.h:505:3 */

type tagCBTACTIVATESTRUCT = struct {
	fMouse     WINBOOL
	_          [4]byte
	hWndActive HWND
} /* winuser.h:507:11 */

type CBTACTIVATESTRUCT = tagCBTACTIVATESTRUCT /* winuser.h:510:5 */
type LPCBTACTIVATESTRUCT = uintptr            /* winuser.h:510:23 */

type tagWTSSESSION_NOTIFICATION = struct {
	cbSize      DWORD
	dwSessionId DWORD
} /* winuser.h:514:11 */

type WTSSESSION_NOTIFICATION = tagWTSSESSION_NOTIFICATION /* winuser.h:517:5 */
type PWTSSESSION_NOTIFICATION = uintptr                   /* winuser.h:517:29 */

type SHELLHOOKINFO = struct {
	hwnd HWND
	rc   RECT
}                              /* winuser.h:638:5 */
type LPSHELLHOOKINFO = uintptr /* winuser.h:638:19 */

type tagEVENTMSG = struct {
	message UINT
	paramL  UINT
	paramH  UINT
	time    DWORD
	hwnd    HWND
} /* winuser.h:640:11 */

type EVENTMSG = tagEVENTMSG  /* winuser.h:646:5 */
type PEVENTMSGMSG = uintptr  /* winuser.h:646:14 */
type NPEVENTMSGMSG = uintptr /* winuser.h:646:28 */
type LPEVENTMSGMSG = uintptr /* winuser.h:646:43 */

type PEVENTMSG = uintptr  /* winuser.h:648:30 */
type NPEVENTMSG = uintptr /* winuser.h:648:41 */
type LPEVENTMSG = uintptr /* winuser.h:648:53 */

type tagCWPSTRUCT = struct {
	lParam  LPARAM
	wParam  WPARAM
	message UINT
	_       [4]byte
	hwnd    HWND
} /* winuser.h:650:11 */

type CWPSTRUCT = tagCWPSTRUCT /* winuser.h:655:5 */
type PCWPSTRUCT = uintptr     /* winuser.h:655:15 */
type NPCWPSTRUCT = uintptr    /* winuser.h:655:27 */
type LPCWPSTRUCT = uintptr    /* winuser.h:655:40 */

type tagCWPRETSTRUCT = struct {
	lResult LRESULT
	lParam  LPARAM
	wParam  WPARAM
	message UINT
	_       [4]byte
	hwnd    HWND
} /* winuser.h:657:11 */

type CWPRETSTRUCT = tagCWPRETSTRUCT /* winuser.h:663:5 */
type PCWPRETSTRUCT = uintptr        /* winuser.h:663:18 */
type NPCWPRETSTRUCT = uintptr       /* winuser.h:663:33 */
type LPCWPRETSTRUCT = uintptr       /* winuser.h:663:49 */

type tagKBDLLHOOKSTRUCT = struct {
	vkCode      DWORD
	scanCode    DWORD
	flags       DWORD
	time        DWORD
	dwExtraInfo ULONG_PTR
} /* winuser.h:676:11 */

type KBDLLHOOKSTRUCT = tagKBDLLHOOKSTRUCT /* winuser.h:682:5 */
type LPKBDLLHOOKSTRUCT = uintptr          /* winuser.h:682:21 */
type PKBDLLHOOKSTRUCT = uintptr           /* winuser.h:682:40 */

type tagMSLLHOOKSTRUCT = struct {
	pt          POINT
	mouseData   DWORD
	flags       DWORD
	time        DWORD
	_           [4]byte
	dwExtraInfo ULONG_PTR
} /* winuser.h:684:11 */

type MSLLHOOKSTRUCT = tagMSLLHOOKSTRUCT /* winuser.h:690:5 */
type LPMSLLHOOKSTRUCT = uintptr         /* winuser.h:690:20 */
type PMSLLHOOKSTRUCT = uintptr          /* winuser.h:690:38 */

type tagDEBUGHOOKINFO = struct {
	idThread          DWORD
	idThreadInstaller DWORD
	lParam            LPARAM
	wParam            WPARAM
	code              int32
	_                 [4]byte
} /* winuser.h:692:11 */

type DEBUGHOOKINFO = tagDEBUGHOOKINFO /* winuser.h:698:5 */
type PDEBUGHOOKINFO = uintptr         /* winuser.h:698:19 */
type NPDEBUGHOOKINFO = uintptr        /* winuser.h:698:35 */
type LPDEBUGHOOKINFO = uintptr        /* winuser.h:698:52 */

type tagMOUSEHOOKSTRUCT = struct {
	pt           POINT
	hwnd         HWND
	wHitTestCode UINT
	_            [4]byte
	dwExtraInfo  ULONG_PTR
} /* winuser.h:700:11 */

type MOUSEHOOKSTRUCT = tagMOUSEHOOKSTRUCT /* winuser.h:705:5 */
type LPMOUSEHOOKSTRUCT = uintptr          /* winuser.h:705:21 */
type PMOUSEHOOKSTRUCT = uintptr           /* winuser.h:705:40 */

type tagMOUSEHOOKSTRUCTEX = struct {
	__unnamed MOUSEHOOKSTRUCT
	mouseData DWORD
	_         [4]byte
} /* winuser.h:712:11 */

type MOUSEHOOKSTRUCTEX = tagMOUSEHOOKSTRUCTEX /* winuser.h:715:5 */
type LPMOUSEHOOKSTRUCTEX = uintptr            /* winuser.h:715:23 */
type PMOUSEHOOKSTRUCTEX = uintptr             /* winuser.h:715:44 */

type tagHARDWAREHOOKSTRUCT = struct {
	hwnd    HWND
	message UINT
	_       [4]byte
	wParam  WPARAM
	lParam  LPARAM
} /* winuser.h:718:11 */

type HARDWAREHOOKSTRUCT = tagHARDWAREHOOKSTRUCT /* winuser.h:723:5 */
type LPHARDWAREHOOKSTRUCT = uintptr             /* winuser.h:723:24 */
type PHARDWAREHOOKSTRUCT = uintptr              /* winuser.h:723:46 */

type tagMOUSEMOVEPOINT = struct {
	x           int32
	y           int32
	time        DWORD
	_           [4]byte
	dwExtraInfo ULONG_PTR
} /* winuser.h:759:11 */

type MOUSEMOVEPOINT = tagMOUSEMOVEPOINT /* winuser.h:764:5 */
type PMOUSEMOVEPOINT = uintptr          /* winuser.h:764:20 */
type LPMOUSEMOVEPOINT = uintptr         /* winuser.h:764:37 */

type tagUSEROBJECTFLAGS = struct {
	fInherit  WINBOOL
	fReserved WINBOOL
	dwFlags   DWORD
} /* winuser.h:866:11 */

type USEROBJECTFLAGS = tagUSEROBJECTFLAGS /* winuser.h:870:5 */
type PUSEROBJECTFLAGS = uintptr           /* winuser.h:870:21 */

type tagWNDCLASSEXA = struct {
	cbSize        UINT
	style         UINT
	lpfnWndProc   WNDPROC
	cbClsExtra    int32
	cbWndExtra    int32
	hInstance     HINSTANCE
	hIcon         HICON
	hCursor       HCURSOR
	hbrBackground HBRUSH
	lpszMenuName  LPCSTR
	lpszClassName LPCSTR
	hIconSm       HICON
} /* winuser.h:883:11 */

type WNDCLASSEXA = tagWNDCLASSEXA /* winuser.h:896:5 */
type PWNDCLASSEXA = uintptr       /* winuser.h:896:17 */
type NPWNDCLASSEXA = uintptr      /* winuser.h:896:31 */
type LPWNDCLASSEXA = uintptr      /* winuser.h:896:46 */

type tagWNDCLASSEXW = struct {
	cbSize        UINT
	style         UINT
	lpfnWndProc   WNDPROC
	cbClsExtra    int32
	cbWndExtra    int32
	hInstance     HINSTANCE
	hIcon         HICON
	hCursor       HCURSOR
	hbrBackground HBRUSH
	lpszMenuName  LPCWSTR
	lpszClassName LPCWSTR
	hIconSm       HICON
} /* winuser.h:898:11 */

type WNDCLASSEXW = tagWNDCLASSEXW /* winuser.h:911:5 */
type PWNDCLASSEXW = uintptr       /* winuser.h:911:17 */
type NPWNDCLASSEXW = uintptr      /* winuser.h:911:31 */
type LPWNDCLASSEXW = uintptr      /* winuser.h:911:46 */

type WNDCLASSEX = WNDCLASSEXA     /* winuser.h:913:3 */
type PWNDCLASSEX = PWNDCLASSEXA   /* winuser.h:914:3 */
type NPWNDCLASSEX = NPWNDCLASSEXA /* winuser.h:915:3 */
type LPWNDCLASSEX = LPWNDCLASSEXA /* winuser.h:916:3 */

type tagWNDCLASSA = struct {
	style         UINT
	_             [4]byte
	lpfnWndProc   WNDPROC
	cbClsExtra    int32
	cbWndExtra    int32
	hInstance     HINSTANCE
	hIcon         HICON
	hCursor       HCURSOR
	hbrBackground HBRUSH
	lpszMenuName  LPCSTR
	lpszClassName LPCSTR
} /* winuser.h:918:11 */

type WNDCLASSA = tagWNDCLASSA /* winuser.h:929:5 */
type PWNDCLASSA = uintptr     /* winuser.h:929:15 */
type NPWNDCLASSA = uintptr    /* winuser.h:929:27 */
type LPWNDCLASSA = uintptr    /* winuser.h:929:40 */

type tagWNDCLASSW = struct {
	style         UINT
	_             [4]byte
	lpfnWndProc   WNDPROC
	cbClsExtra    int32
	cbWndExtra    int32
	hInstance     HINSTANCE
	hIcon         HICON
	hCursor       HCURSOR
	hbrBackground HBRUSH
	lpszMenuName  LPCWSTR
	lpszClassName LPCWSTR
} /* winuser.h:931:11 */

type WNDCLASSW = tagWNDCLASSW /* winuser.h:942:5 */
type PWNDCLASSW = uintptr     /* winuser.h:942:15 */
type NPWNDCLASSW = uintptr    /* winuser.h:942:27 */
type LPWNDCLASSW = uintptr    /* winuser.h:942:40 */

type WNDCLASS = WNDCLASSA     /* winuser.h:944:3 */
type PWNDCLASS = PWNDCLASSA   /* winuser.h:945:3 */
type NPWNDCLASS = NPWNDCLASSA /* winuser.h:946:3 */
type LPWNDCLASS = LPWNDCLASSA /* winuser.h:947:3 */

type tagMSG = struct {
	hwnd    HWND
	message UINT
	_       [4]byte
	wParam  WPARAM
	lParam  LPARAM
	time    DWORD
	pt      POINT
	_       [4]byte
} /* winuser.h:955:11 */

type MSG = tagMSG    /* winuser.h:962:5 */
type PMSG = uintptr  /* winuser.h:962:9 */
type NPMSG = uintptr /* winuser.h:962:15 */
type LPMSG = uintptr /* winuser.h:962:22 */

type tagMINMAXINFO = struct {
	ptReserved     POINT
	ptMaxSize      POINT
	ptMaxPosition  POINT
	ptMinTrackSize POINT
	ptMaxTrackSize POINT
} /* winuser.h:1072:11 */

type MINMAXINFO = tagMINMAXINFO /* winuser.h:1078:5 */
type PMINMAXINFO = uintptr      /* winuser.h:1078:16 */
type LPMINMAXINFO = uintptr     /* winuser.h:1078:29 */

type tagCOPYDATASTRUCT = struct {
	dwData ULONG_PTR
	cbData DWORD
	_      [4]byte
	lpData PVOID
} /* winuser.h:1115:11 */

type COPYDATASTRUCT = tagCOPYDATASTRUCT /* winuser.h:1119:5 */
type PCOPYDATASTRUCT = uintptr          /* winuser.h:1119:20 */

type tagMDINEXTMENU = struct {
	hmenuIn   HMENU
	hmenuNext HMENU
	hwndNext  HWND
} /* winuser.h:1121:11 */

type MDINEXTMENU = tagMDINEXTMENU /* winuser.h:1125:5 */
type PMDINEXTMENU = uintptr       /* winuser.h:1125:17 */
type LPMDINEXTMENU = uintptr      /* winuser.h:1125:31 */

type tagWINDOWPOS = struct {
	hwnd            HWND
	hwndInsertAfter HWND
	x               int32
	y               int32
	cx              int32
	cy              int32
	flags           UINT
	_               [4]byte
} /* winuser.h:1520:11 */

type WINDOWPOS = tagWINDOWPOS /* winuser.h:1528:5 */
type LPWINDOWPOS = uintptr    /* winuser.h:1528:15 */
type PWINDOWPOS = uintptr     /* winuser.h:1528:28 */

type tagNCCALCSIZE_PARAMS = struct {
	rgrc  [3]RECT
	lppos PWINDOWPOS
} /* winuser.h:1530:11 */

type NCCALCSIZE_PARAMS = tagNCCALCSIZE_PARAMS /* winuser.h:1533:5 */
type LPNCCALCSIZE_PARAMS = uintptr            /* winuser.h:1533:23 */

type tagTRACKMOUSEEVENT = struct {
	cbSize      DWORD
	dwFlags     DWORD
	hwndTrack   HWND
	dwHoverTime DWORD
	_           [4]byte
} /* winuser.h:1567:11 */

type TRACKMOUSEEVENT = tagTRACKMOUSEEVENT /* winuser.h:1572:5 */
type LPTRACKMOUSEEVENT = uintptr          /* winuser.h:1572:21 */

type tagACCEL = struct {
	fVirt BYTE
	_     [1]byte
	key   WORD
	cmd   WORD
} /* winuser.h:1817:11 */

type ACCEL = tagACCEL  /* winuser.h:1821:5 */
type LPACCEL = uintptr /* winuser.h:1821:11 */

type tagPAINTSTRUCT = struct {
	hdc         HDC
	fErase      WINBOOL
	rcPaint     RECT
	fRestore    WINBOOL
	fIncUpdate  WINBOOL
	rgbReserved [32]BYTE
	_           [4]byte
} /* winuser.h:1823:11 */

type PAINTSTRUCT = tagPAINTSTRUCT /* winuser.h:1830:5 */
type PPAINTSTRUCT = uintptr       /* winuser.h:1830:17 */
type NPPAINTSTRUCT = uintptr      /* winuser.h:1830:31 */
type LPPAINTSTRUCT = uintptr      /* winuser.h:1830:46 */

type CREATESTRUCTA = tagCREATESTRUCTA /* winuser.h:1845:5 */
type LPCREATESTRUCTA = uintptr        /* winuser.h:1845:19 */

type CREATESTRUCTW = tagCREATESTRUCTW /* winuser.h:1860:5 */
type LPCREATESTRUCTW = uintptr        /* winuser.h:1860:19 */

type CREATESTRUCT = CREATESTRUCTA     /* winuser.h:1862:3 */
type LPCREATESTRUCT = LPCREATESTRUCTA /* winuser.h:1863:3 */

type tagWINDOWPLACEMENT = struct {
	length           UINT
	flags            UINT
	showCmd          UINT
	ptMinPosition    POINT
	ptMaxPosition    POINT
	rcNormalPosition RECT
} /* winuser.h:1865:11 */

type WINDOWPLACEMENT = tagWINDOWPLACEMENT /* winuser.h:1872:5 */
type PWINDOWPLACEMENT = uintptr           /* winuser.h:1873:27 */
type LPWINDOWPLACEMENT = uintptr          /* winuser.h:1873:45 */

type tagNMHDR = struct {
	hwndFrom HWND
	idFrom   UINT_PTR
	code     UINT
	_        [4]byte
} /* winuser.h:1881:11 */

type NMHDR = tagNMHDR /* winuser.h:1885:5 */

type LPNMHDR = uintptr /* winuser.h:1889:17 */

type tagSTYLESTRUCT = struct {
	styleOld DWORD
	styleNew DWORD
} /* winuser.h:1891:11 */

type STYLESTRUCT = tagSTYLESTRUCT /* winuser.h:1894:5 */
type LPSTYLESTRUCT = uintptr      /* winuser.h:1894:17 */

type tagMEASUREITEMSTRUCT = struct {
	CtlType    UINT
	CtlID      UINT
	itemID     UINT
	itemWidth  UINT
	itemHeight UINT
	_          [4]byte
	itemData   ULONG_PTR
} /* winuser.h:1920:11 */

type MEASUREITEMSTRUCT = tagMEASUREITEMSTRUCT /* winuser.h:1927:5 */
type PMEASUREITEMSTRUCT = uintptr             /* winuser.h:1927:23 */
type LPMEASUREITEMSTRUCT = uintptr            /* winuser.h:1927:43 */

type tagDRAWITEMSTRUCT = struct {
	CtlType    UINT
	CtlID      UINT
	itemID     UINT
	itemAction UINT
	itemState  UINT
	_          [4]byte
	hwndItem   HWND
	hDC        HDC
	rcItem     RECT
	itemData   ULONG_PTR
} /* winuser.h:1929:11 */

type DRAWITEMSTRUCT = tagDRAWITEMSTRUCT /* winuser.h:1939:5 */
type PDRAWITEMSTRUCT = uintptr          /* winuser.h:1939:20 */
type LPDRAWITEMSTRUCT = uintptr         /* winuser.h:1939:37 */

type tagDELETEITEMSTRUCT = struct {
	CtlType  UINT
	CtlID    UINT
	itemID   UINT
	_        [4]byte
	hwndItem HWND
	itemData ULONG_PTR
} /* winuser.h:1941:11 */

type DELETEITEMSTRUCT = tagDELETEITEMSTRUCT /* winuser.h:1947:5 */
type PDELETEITEMSTRUCT = uintptr            /* winuser.h:1947:22 */
type LPDELETEITEMSTRUCT = uintptr           /* winuser.h:1947:41 */

type tagCOMPAREITEMSTRUCT = struct {
	CtlType    UINT
	CtlID      UINT
	hwndItem   HWND
	itemID1    UINT
	_          [4]byte
	itemData1  ULONG_PTR
	itemID2    UINT
	_          [4]byte
	itemData2  ULONG_PTR
	dwLocaleId DWORD
	_          [4]byte
} /* winuser.h:1949:11 */

type COMPAREITEMSTRUCT = tagCOMPAREITEMSTRUCT /* winuser.h:1958:5 */
type PCOMPAREITEMSTRUCT = uintptr             /* winuser.h:1958:23 */
type LPCOMPAREITEMSTRUCT = uintptr            /* winuser.h:1958:43 */

type BSMINFO = struct {
	cbSize UINT
	_      [4]byte
	hdesk  HDESK
	hwnd   HWND
	luid   LUID
}                       /* winuser.h:2063:5 */
type PBSMINFO = uintptr /* winuser.h:2063:13 */

type HDEVNOTIFY = PVOID    /* winuser.h:2096:17 */
type PHDEVNOTIFY = uintptr /* winuser.h:2097:22 */

type PREGISTERCLASSNAMEW = uintptr /* winuser.h:2198:19 */

type tagUPDATELAYEREDWINDOWINFO = struct {
	cbSize   DWORD
	_        [4]byte
	hdcDst   HDC
	pptDst   uintptr
	psize    uintptr
	hdcSrc   HDC
	pptSrc   uintptr
	crKey    COLORREF
	_        [4]byte
	pblend   uintptr
	dwFlags  DWORD
	_        [4]byte
	prcDirty uintptr
} /* winuser.h:2221:11 */

type UPDATELAYEREDWINDOWINFO = tagUPDATELAYEREDWINDOWINFO /* winuser.h:2232:5 */
type PUPDATELAYEREDWINDOWINFO = uintptr                   /* winuser.h:2232:29 */

type FLASHWINFO = struct {
	cbSize    UINT
	_         [4]byte
	hwnd      HWND
	dwFlags   DWORD
	uCount    UINT
	dwTimeout DWORD
	_         [4]byte
}                          /* winuser.h:2272:5 */
type PFLASHWINFO = uintptr /* winuser.h:2272:16 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type DLGTEMPLATE = struct {
	style           DWORD
	dwExtendedStyle DWORD
	cdit            WORD
	x               int16
	y               int16
	cx              int16
	cy              int16
	_               [2]byte
} /* winuser.h:2346:5 */

type LPDLGTEMPLATEA = uintptr /* winuser.h:2350:23 */
type LPDLGTEMPLATEW = uintptr /* winuser.h:2351:23 */

type LPDLGTEMPLATE = LPDLGTEMPLATEA /* winuser.h:2353:3 */

type LPCDLGTEMPLATEA = uintptr /* winuser.h:2357:29 */
type LPCDLGTEMPLATEW = uintptr /* winuser.h:2358:29 */

type LPCDLGTEMPLATE = LPCDLGTEMPLATEA /* winuser.h:2360:3 */

type DLGITEMTEMPLATE = struct {
	style           DWORD
	dwExtendedStyle DWORD
	x               int16
	y               int16
	cx              int16
	cy              int16
	id              WORD
	_               [2]byte
} /* winuser.h:2372:5 */

type PDLGITEMTEMPLATEA = uintptr /* winuser.h:2374:27 */
type PDLGITEMTEMPLATEW = uintptr /* winuser.h:2375:27 */

type PDLGITEMTEMPLATE = PDLGITEMTEMPLATEA /* winuser.h:2377:3 */

type LPDLGITEMTEMPLATEA = uintptr /* winuser.h:2379:27 */
type LPDLGITEMTEMPLATEW = uintptr /* winuser.h:2380:27 */

type LPDLGITEMTEMPLATE = LPDLGITEMTEMPLATEA /* winuser.h:2382:3 */

type DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS = uint32 /* winuser.h:2444:5 */

type DIALOG_DPI_CHANGE_BEHAVIORS = uint32 /* winuser.h:2454:5 */

type tagMOUSEINPUT = struct {
	dx          LONG
	dy          LONG
	mouseData   DWORD
	dwFlags     DWORD
	time        DWORD
	_           [4]byte
	dwExtraInfo ULONG_PTR
} /* winuser.h:2733:11 */

type MOUSEINPUT = tagMOUSEINPUT /* winuser.h:2740:5 */
type PMOUSEINPUT = uintptr      /* winuser.h:2740:16 */
type LPMOUSEINPUT = uintptr     /* winuser.h:2740:29 */

type tagKEYBDINPUT = struct {
	wVk         WORD
	wScan       WORD
	dwFlags     DWORD
	time        DWORD
	_           [4]byte
	dwExtraInfo ULONG_PTR
} /* winuser.h:2742:11 */

type KEYBDINPUT = tagKEYBDINPUT /* winuser.h:2748:5 */
type PKEYBDINPUT = uintptr      /* winuser.h:2748:16 */
type LPKEYBDINPUT = uintptr     /* winuser.h:2748:29 */

type tagHARDWAREINPUT = struct {
	uMsg    DWORD
	wParamL WORD
	wParamH WORD
} /* winuser.h:2750:11 */

type HARDWAREINPUT = tagHARDWAREINPUT /* winuser.h:2754:5 */
type PHARDWAREINPUT = uintptr         /* winuser.h:2754:19 */
type LPHARDWAREINPUT = uintptr        /* winuser.h:2754:35 */

type tagINPUT = struct {
	__type DWORD
	_      [4]byte
	__8    struct{ mi MOUSEINPUT }
} /* winuser.h:2756:11 */

type INPUT = tagINPUT  /* winuser.h:2763:5 */
type PINPUT = uintptr  /* winuser.h:2763:11 */
type LPINPUT = uintptr /* winuser.h:2763:19 */

type tagLASTINPUTINFO = struct {
	cbSize UINT
	dwTime DWORD
} /* winuser.h:2967:11 */

type LASTINPUTINFO = tagLASTINPUTINFO /* winuser.h:2970:5 */
type PLASTINPUTINFO = uintptr         /* winuser.h:2970:19 */

type tagTPMPARAMS = struct {
	cbSize    UINT
	rcExclude RECT
} /* winuser.h:3293:11 */

type TPMPARAMS = tagTPMPARAMS /* winuser.h:3296:5 */

type tagMENUINFO = struct {
	cbSize          DWORD
	fMask           DWORD
	dwStyle         DWORD
	cyMax           UINT
	hbrBack         HBRUSH
	dwContextHelpID DWORD
	_               [4]byte
	dwMenuData      ULONG_PTR
} /* winuser.h:3298:11 */

type MENUINFO = tagMENUINFO /* winuser.h:3306:5 */
type LPMENUINFO = uintptr   /* winuser.h:3306:14 */

type LPTPMPARAMS = uintptr /* winuser.h:3308:21 */
type LPCMENUINFO = uintptr /* winuser.h:3309:26 */

type tagMENUGETOBJECTINFO = struct {
	dwFlags DWORD
	uPos    UINT
	hmenu   HMENU
	riid    PVOID
	pvObj   PVOID
} /* winuser.h:3319:11 */

type MENUGETOBJECTINFO = tagMENUGETOBJECTINFO /* winuser.h:3325:5 */
type PMENUGETOBJECTINFO = uintptr             /* winuser.h:3325:23 */

type tagMENUITEMINFOA = struct {
	cbSize        UINT
	fMask         UINT
	fType         UINT
	fState        UINT
	wID           UINT
	_             [4]byte
	hSubMenu      HMENU
	hbmpChecked   HBITMAP
	hbmpUnchecked HBITMAP
	dwItemData    ULONG_PTR
	dwTypeData    LPSTR
	cch           UINT
	_             [4]byte
	hbmpItem      HBITMAP
} /* winuser.h:3327:11 */

type MENUITEMINFOA = tagMENUITEMINFOA /* winuser.h:3340:5 */
type LPMENUITEMINFOA = uintptr        /* winuser.h:3340:19 */

type tagMENUITEMINFOW = struct {
	cbSize        UINT
	fMask         UINT
	fType         UINT
	fState        UINT
	wID           UINT
	_             [4]byte
	hSubMenu      HMENU
	hbmpChecked   HBITMAP
	hbmpUnchecked HBITMAP
	dwItemData    ULONG_PTR
	dwTypeData    LPWSTR
	cch           UINT
	_             [4]byte
	hbmpItem      HBITMAP
} /* winuser.h:3342:11 */

type MENUITEMINFOW = tagMENUITEMINFOW /* winuser.h:3355:5 */
type LPMENUITEMINFOW = uintptr        /* winuser.h:3355:19 */

type MENUITEMINFO = MENUITEMINFOA     /* winuser.h:3357:3 */
type LPMENUITEMINFO = LPMENUITEMINFOA /* winuser.h:3358:3 */

type LPCMENUITEMINFOA = uintptr /* winuser.h:3360:31 */
type LPCMENUITEMINFOW = uintptr /* winuser.h:3361:31 */

type LPCMENUITEMINFO = LPCMENUITEMINFOA /* winuser.h:3363:3 */

type tagDROPSTRUCT = struct {
	hwndSource    HWND
	hwndSink      HWND
	wFmt          DWORD
	_             [4]byte
	dwData        ULONG_PTR
	ptDrop        POINT
	dwControlData DWORD
	_             [4]byte
} /* winuser.h:3411:11 */

type DROPSTRUCT = tagDROPSTRUCT /* winuser.h:3418:5 */
type PDROPSTRUCT = uintptr      /* winuser.h:3418:16 */
type LPDROPSTRUCT = uintptr     /* winuser.h:3418:29 */

type tagDRAWTEXTPARAMS = struct {
	cbSize        UINT
	iTabLength    int32
	iLeftMargin   int32
	iRightMargin  int32
	uiLengthDrawn UINT
} /* winuser.h:3465:11 */

type DRAWTEXTPARAMS = tagDRAWTEXTPARAMS /* winuser.h:3471:5 */
type LPDRAWTEXTPARAMS = uintptr         /* winuser.h:3471:20 */

type tagHELPINFO = struct {
	cbSize       UINT
	iContextType int32
	iCtrlId      int32
	_            [4]byte
	hItemHandle  HANDLE
	dwContextId  DWORD_PTR
	MousePos     POINT
} /* winuser.h:3652:11 */

type HELPINFO = tagHELPINFO /* winuser.h:3659:5 */
type LPHELPINFO = uintptr   /* winuser.h:3659:14 */

type MSGBOXCALLBACK = uintptr /* winuser.h:3716:16 */

type tagMSGBOXPARAMSA = struct {
	cbSize             UINT
	_                  [4]byte
	hwndOwner          HWND
	hInstance          HINSTANCE
	lpszText           LPCSTR
	lpszCaption        LPCSTR
	dwStyle            DWORD
	_                  [4]byte
	lpszIcon           LPCSTR
	dwContextHelpId    DWORD_PTR
	lpfnMsgBoxCallback MSGBOXCALLBACK
	dwLanguageId       DWORD
	_                  [4]byte
} /* winuser.h:3718:11 */

type MSGBOXPARAMSA = tagMSGBOXPARAMSA /* winuser.h:3729:5 */
type PMSGBOXPARAMSA = uintptr         /* winuser.h:3729:19 */
type LPMSGBOXPARAMSA = uintptr        /* winuser.h:3729:35 */

type tagMSGBOXPARAMSW = struct {
	cbSize             UINT
	_                  [4]byte
	hwndOwner          HWND
	hInstance          HINSTANCE
	lpszText           LPCWSTR
	lpszCaption        LPCWSTR
	dwStyle            DWORD
	_                  [4]byte
	lpszIcon           LPCWSTR
	dwContextHelpId    DWORD_PTR
	lpfnMsgBoxCallback MSGBOXCALLBACK
	dwLanguageId       DWORD
	_                  [4]byte
} /* winuser.h:3731:11 */

type MSGBOXPARAMSW = tagMSGBOXPARAMSW /* winuser.h:3742:5 */
type PMSGBOXPARAMSW = uintptr         /* winuser.h:3742:19 */
type LPMSGBOXPARAMSW = uintptr        /* winuser.h:3742:35 */

type MSGBOXPARAMS = MSGBOXPARAMSA     /* winuser.h:3744:3 */
type PMSGBOXPARAMS = PMSGBOXPARAMSA   /* winuser.h:3745:3 */
type LPMSGBOXPARAMS = LPMSGBOXPARAMSA /* winuser.h:3746:3 */

type MENUITEMTEMPLATEHEADER = struct {
	versionNumber WORD
	offset        WORD
}                                      /* winuser.h:4059:5 */
type PMENUITEMTEMPLATEHEADER = uintptr /* winuser.h:4059:28 */

type MENUITEMTEMPLATE = struct {
	mtOption WORD
	mtID     WORD
	mtString [1]WCHAR
}                                /* winuser.h:4065:5 */
type PMENUITEMTEMPLATE = uintptr /* winuser.h:4065:22 */

type _ICONINFO = struct {
	fIcon    WINBOOL
	xHotspot DWORD
	yHotspot DWORD
	_        [4]byte
	hbmMask  HBITMAP
	hbmColor HBITMAP
} /* winuser.h:4142:11 */

type ICONINFO = _ICONINFO /* winuser.h:4148:5 */
type PICONINFO = uintptr  /* winuser.h:4149:20 */

type tagCURSORSHAPE = struct {
	xHotSpot  int32
	yHotSpot  int32
	cx        int32
	cy        int32
	cbWidth   int32
	Planes    BYTE
	BitsPixel BYTE
	_         [2]byte
} /* winuser.h:4166:11 */

type CURSORSHAPE = tagCURSORSHAPE /* winuser.h:4174:5 */
type LPCURSORSHAPE = uintptr      /* winuser.h:4174:17 */

type tagSCROLLINFO = struct {
	cbSize    UINT
	fMask     UINT
	nMin      int32
	nMax      int32
	nPage     UINT
	nPos      int32
	nTrackPos int32
} /* winuser.h:4882:11 */

type SCROLLINFO = tagSCROLLINFO /* winuser.h:4890:5 */
type LPSCROLLINFO = uintptr     /* winuser.h:4890:16 */
type LPCSCROLLINFO = uintptr    /* winuser.h:4891:28 */

type tagMDICREATESTRUCTA = struct {
	szClass LPCSTR
	szTitle LPCSTR
	hOwner  HANDLE
	x       int32
	y       int32
	cx      int32
	cy      int32
	style   DWORD
	_       [4]byte
	lParam  LPARAM
} /* winuser.h:4909:11 */

type MDICREATESTRUCTA = tagMDICREATESTRUCTA /* winuser.h:4919:5 */
type LPMDICREATESTRUCTA = uintptr           /* winuser.h:4919:22 */

type tagMDICREATESTRUCTW = struct {
	szClass LPCWSTR
	szTitle LPCWSTR
	hOwner  HANDLE
	x       int32
	y       int32
	cx      int32
	cy      int32
	style   DWORD
	_       [4]byte
	lParam  LPARAM
} /* winuser.h:4921:11 */

type MDICREATESTRUCTW = tagMDICREATESTRUCTW /* winuser.h:4931:5 */
type LPMDICREATESTRUCTW = uintptr           /* winuser.h:4931:22 */

type MDICREATESTRUCT = MDICREATESTRUCTA     /* winuser.h:4933:3 */
type LPMDICREATESTRUCT = LPMDICREATESTRUCTA /* winuser.h:4934:3 */

type tagCLIENTCREATESTRUCT = struct {
	hWindowMenu  HANDLE
	idFirstChild UINT
	_            [4]byte
} /* winuser.h:4936:11 */

type CLIENTCREATESTRUCT = tagCLIENTCREATESTRUCT /* winuser.h:4939:5 */
type LPCLIENTCREATESTRUCT = uintptr             /* winuser.h:4939:24 */

type HELPPOLY = DWORD /* winuser.h:4965:17 */

type tagMULTIKEYHELPA = struct {
	mkSize      DWORD
	mkKeylist   CHAR
	szKeyphrase [1]CHAR
	_           [2]byte
} /* winuser.h:4967:11 */

type MULTIKEYHELPA = tagMULTIKEYHELPA /* winuser.h:4971:5 */
type PMULTIKEYHELPA = uintptr         /* winuser.h:4971:19 */
type LPMULTIKEYHELPA = uintptr        /* winuser.h:4971:35 */

type tagMULTIKEYHELPW = struct {
	mkSize      DWORD
	mkKeylist   WCHAR
	szKeyphrase [1]WCHAR
} /* winuser.h:4973:11 */

type MULTIKEYHELPW = tagMULTIKEYHELPW /* winuser.h:4977:5 */
type PMULTIKEYHELPW = uintptr         /* winuser.h:4977:19 */
type LPMULTIKEYHELPW = uintptr        /* winuser.h:4977:35 */

type MULTIKEYHELP = MULTIKEYHELPA     /* winuser.h:4979:3 */
type PMULTIKEYHELP = PMULTIKEYHELPA   /* winuser.h:4980:3 */
type LPMULTIKEYHELP = LPMULTIKEYHELPA /* winuser.h:4981:3 */

type tagHELPWININFOA = struct {
	wStructSize int32
	x           int32
	y           int32
	dx          int32
	dy          int32
	wMax        int32
	rgchMember  [2]CHAR
	_           [2]byte
} /* winuser.h:4983:11 */

type HELPWININFOA = tagHELPWININFOA /* winuser.h:4991:5 */
type PHELPWININFOA = uintptr        /* winuser.h:4991:18 */
type LPHELPWININFOA = uintptr       /* winuser.h:4991:33 */

type tagHELPWININFOW = struct {
	wStructSize int32
	x           int32
	y           int32
	dx          int32
	dy          int32
	wMax        int32
	rgchMember  [2]WCHAR
} /* winuser.h:4993:11 */

type HELPWININFOW = tagHELPWININFOW /* winuser.h:5001:5 */
type PHELPWININFOW = uintptr        /* winuser.h:5001:18 */
type LPHELPWININFOW = uintptr       /* winuser.h:5001:33 */

type HELPWININFO = HELPWININFOA     /* winuser.h:5003:3 */
type PHELPWININFO = PHELPWININFOA   /* winuser.h:5004:3 */
type LPHELPWININFO = LPHELPWININFOA /* winuser.h:5005:3 */

type tagNONCLIENTMETRICSA = struct {
	cbSize           UINT
	iBorderWidth     int32
	iScrollWidth     int32
	iScrollHeight    int32
	iCaptionWidth    int32
	iCaptionHeight   int32
	lfCaptionFont    LOGFONTA
	iSmCaptionWidth  int32
	iSmCaptionHeight int32
	lfSmCaptionFont  LOGFONTA
	iMenuWidth       int32
	iMenuHeight      int32
	lfMenuFont       LOGFONTA
	lfStatusFont     LOGFONTA
	lfMessageFont    LOGFONTA
} /* winuser.h:5408:11 */

type NONCLIENTMETRICSA = tagNONCLIENTMETRICSA /* winuser.h:5427:5 */
type PNONCLIENTMETRICSA = uintptr             /* winuser.h:5427:23 */
type LPNONCLIENTMETRICSA = uintptr            /* winuser.h:5427:43 */

type tagNONCLIENTMETRICSW = struct {
	cbSize           UINT
	iBorderWidth     int32
	iScrollWidth     int32
	iScrollHeight    int32
	iCaptionWidth    int32
	iCaptionHeight   int32
	lfCaptionFont    LOGFONTW
	iSmCaptionWidth  int32
	iSmCaptionHeight int32
	lfSmCaptionFont  LOGFONTW
	iMenuWidth       int32
	iMenuHeight      int32
	lfMenuFont       LOGFONTW
	lfStatusFont     LOGFONTW
	lfMessageFont    LOGFONTW
} /* winuser.h:5429:11 */

type NONCLIENTMETRICSW = tagNONCLIENTMETRICSW /* winuser.h:5448:5 */
type PNONCLIENTMETRICSW = uintptr             /* winuser.h:5448:23 */
type LPNONCLIENTMETRICSW = uintptr            /* winuser.h:5448:43 */

type NONCLIENTMETRICS = NONCLIENTMETRICSA     /* winuser.h:5450:3 */
type PNONCLIENTMETRICS = PNONCLIENTMETRICSA   /* winuser.h:5451:3 */
type LPNONCLIENTMETRICS = LPNONCLIENTMETRICSA /* winuser.h:5452:3 */

type tagMINIMIZEDMETRICS = struct {
	cbSize   UINT
	iWidth   int32
	iHorzGap int32
	iVertGap int32
	iArrange int32
} /* winuser.h:5472:11 */

type MINIMIZEDMETRICS = tagMINIMIZEDMETRICS /* winuser.h:5478:5 */
type PMINIMIZEDMETRICS = uintptr            /* winuser.h:5478:22 */
type LPMINIMIZEDMETRICS = uintptr           /* winuser.h:5478:41 */

type tagICONMETRICSA = struct {
	cbSize       UINT
	iHorzSpacing int32
	iVertSpacing int32
	iTitleWrap   int32
	lfFont       LOGFONTA
} /* winuser.h:5482:11 */

type ICONMETRICSA = tagICONMETRICSA /* winuser.h:5488:5 */
type PICONMETRICSA = uintptr        /* winuser.h:5488:18 */
type LPICONMETRICSA = uintptr       /* winuser.h:5488:33 */

type tagICONMETRICSW = struct {
	cbSize       UINT
	iHorzSpacing int32
	iVertSpacing int32
	iTitleWrap   int32
	lfFont       LOGFONTW
} /* winuser.h:5490:11 */

type ICONMETRICSW = tagICONMETRICSW /* winuser.h:5496:5 */
type PICONMETRICSW = uintptr        /* winuser.h:5496:18 */
type LPICONMETRICSW = uintptr       /* winuser.h:5496:33 */

type ICONMETRICS = ICONMETRICSA     /* winuser.h:5498:3 */
type PICONMETRICS = PICONMETRICSA   /* winuser.h:5499:3 */
type LPICONMETRICS = LPICONMETRICSA /* winuser.h:5500:3 */

type tagANIMATIONINFO = struct {
	cbSize      UINT
	iMinAnimate int32
} /* winuser.h:5504:11 */

type ANIMATIONINFO = tagANIMATIONINFO /* winuser.h:5507:5 */
type LPANIMATIONINFO = uintptr        /* winuser.h:5507:19 */

type tagSERIALKEYSA = struct {
	cbSize         UINT
	dwFlags        DWORD
	lpszActivePort LPSTR
	lpszPort       LPSTR
	iBaudRate      UINT
	iPortState     UINT
	iActive        UINT
	_              [4]byte
} /* winuser.h:5509:11 */

type SERIALKEYSA = tagSERIALKEYSA /* winuser.h:5517:5 */
type LPSERIALKEYSA = uintptr      /* winuser.h:5517:17 */

type tagSERIALKEYSW = struct {
	cbSize         UINT
	dwFlags        DWORD
	lpszActivePort LPWSTR
	lpszPort       LPWSTR
	iBaudRate      UINT
	iPortState     UINT
	iActive        UINT
	_              [4]byte
} /* winuser.h:5519:11 */

type SERIALKEYSW = tagSERIALKEYSW /* winuser.h:5527:5 */
type LPSERIALKEYSW = uintptr      /* winuser.h:5527:17 */

type SERIALKEYS = SERIALKEYSA     /* winuser.h:5529:3 */
type LPSERIALKEYS = LPSERIALKEYSA /* winuser.h:5530:3 */

type tagHIGHCONTRASTA = struct {
	cbSize            UINT
	dwFlags           DWORD
	lpszDefaultScheme LPSTR
} /* winuser.h:5532:11 */

type HIGHCONTRASTA = tagHIGHCONTRASTA /* winuser.h:5536:5 */
type LPHIGHCONTRASTA = uintptr        /* winuser.h:5536:19 */

type tagHIGHCONTRASTW = struct {
	cbSize            UINT
	dwFlags           DWORD
	lpszDefaultScheme LPWSTR
} /* winuser.h:5538:11 */

type HIGHCONTRASTW = tagHIGHCONTRASTW /* winuser.h:5542:5 */
type LPHIGHCONTRASTW = uintptr        /* winuser.h:5542:19 */

type HIGHCONTRAST = HIGHCONTRASTA     /* winuser.h:5544:3 */
type LPHIGHCONTRAST = LPHIGHCONTRASTA /* winuser.h:5545:3 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// __declspec(selectany) must be applied to initialized objects on GCC 5 hence must not be used here.

type _VIDEOPARAMETERS = struct {
	Guid                  GUID
	dwOffset              ULONG
	dwCommand             ULONG
	dwFlags               ULONG
	dwMode                ULONG
	dwTVStandard          ULONG
	dwAvailableModes      ULONG
	dwAvailableTVStandard ULONG
	dwFlickerFilter       ULONG
	dwOverScanX           ULONG
	dwOverScanY           ULONG
	dwMaxUnscaledX        ULONG
	dwMaxUnscaledY        ULONG
	dwPositionX           ULONG
	dwPositionY           ULONG
	dwBrightness          ULONG
	dwContrast            ULONG
	dwCPType              ULONG
	dwCPCommand           ULONG
	dwCPStandard          ULONG
	dwCPKey               ULONG
	bCP_APSTriggerBits    ULONG
	bOEMCopyProtection    [256]UCHAR
} /* tvout.h:11:9 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// __declspec(selectany) must be applied to initialized objects on GCC 5 hence must not be used here.

type VIDEOPARAMETERS = _VIDEOPARAMETERS /* tvout.h:35:3 */
type PVIDEOPARAMETERS = uintptr         /* tvout.h:35:19 */
type LPVIDEOPARAMETERS = uintptr        /* tvout.h:35:37 */

type tagFILTERKEYS = struct {
	cbSize      UINT
	dwFlags     DWORD
	iWaitMSec   DWORD
	iDelayMSec  DWORD
	iRepeatMSec DWORD
	iBounceMSec DWORD
} /* winuser.h:5641:11 */

type FILTERKEYS = tagFILTERKEYS /* winuser.h:5648:5 */
type LPFILTERKEYS = uintptr     /* winuser.h:5648:16 */

type tagSTICKYKEYS = struct {
	cbSize  UINT
	dwFlags DWORD
} /* winuser.h:5660:11 */

type STICKYKEYS = tagSTICKYKEYS /* winuser.h:5663:5 */
type LPSTICKYKEYS = uintptr     /* winuser.h:5663:16 */

type tagMOUSEKEYS = struct {
	cbSize          UINT
	dwFlags         DWORD
	iMaxSpeed       DWORD
	iTimeToMaxSpeed DWORD
	iCtrlSpeed      DWORD
	dwReserved1     DWORD
	dwReserved2     DWORD
} /* winuser.h:5693:11 */

type MOUSEKEYS = tagMOUSEKEYS /* winuser.h:5701:5 */
type LPMOUSEKEYS = uintptr    /* winuser.h:5701:15 */

type tagACCESSTIMEOUT = struct {
	cbSize       UINT
	dwFlags      DWORD
	iTimeOutMSec DWORD
} /* winuser.h:5719:11 */

type ACCESSTIMEOUT = tagACCESSTIMEOUT /* winuser.h:5723:5 */
type LPACCESSTIMEOUT = uintptr        /* winuser.h:5723:19 */

type tagSOUNDSENTRYA = struct {
	cbSize                 UINT
	dwFlags                DWORD
	iFSTextEffect          DWORD
	iFSTextEffectMSec      DWORD
	iFSTextEffectColorBits DWORD
	iFSGrafEffect          DWORD
	iFSGrafEffectMSec      DWORD
	iFSGrafEffectColor     DWORD
	iWindowsEffect         DWORD
	iWindowsEffectMSec     DWORD
	lpszWindowsEffectDLL   LPSTR
	iWindowsEffectOrdinal  DWORD
	_                      [4]byte
} /* winuser.h:5744:11 */

type SOUNDSENTRYA = tagSOUNDSENTRYA /* winuser.h:5757:5 */
type LPSOUNDSENTRYA = uintptr       /* winuser.h:5757:18 */

type tagSOUNDSENTRYW = struct {
	cbSize                 UINT
	dwFlags                DWORD
	iFSTextEffect          DWORD
	iFSTextEffectMSec      DWORD
	iFSTextEffectColorBits DWORD
	iFSGrafEffect          DWORD
	iFSGrafEffectMSec      DWORD
	iFSGrafEffectColor     DWORD
	iWindowsEffect         DWORD
	iWindowsEffectMSec     DWORD
	lpszWindowsEffectDLL   LPWSTR
	iWindowsEffectOrdinal  DWORD
	_                      [4]byte
} /* winuser.h:5759:11 */

type SOUNDSENTRYW = tagSOUNDSENTRYW /* winuser.h:5772:5 */
type LPSOUNDSENTRYW = uintptr       /* winuser.h:5772:18 */

type SOUNDSENTRY = SOUNDSENTRYA     /* winuser.h:5774:3 */
type LPSOUNDSENTRY = LPSOUNDSENTRYA /* winuser.h:5775:3 */

type tagTOGGLEKEYS = struct {
	cbSize  UINT
	dwFlags DWORD
} /* winuser.h:5787:11 */

type TOGGLEKEYS = tagTOGGLEKEYS /* winuser.h:5790:5 */
type LPTOGGLEKEYS = uintptr     /* winuser.h:5790:16 */

type tagMONITORINFO = struct {
	cbSize    DWORD
	rcMonitor RECT
	rcWork    RECT
	dwFlags   DWORD
} /* winuser.h:5792:11 */

type MONITORINFO = tagMONITORINFO /* winuser.h:5797:5 */
type LPMONITORINFO = uintptr      /* winuser.h:5797:17 */

type tagMONITORINFOEXA = struct {
	__0 struct {
		cbSize    DWORD
		rcMonitor RECT
		rcWork    RECT
		dwFlags   DWORD
	}
	szDevice [32]CHAR
} /* winuser.h:5819:11 */

type MONITORINFOEXA = tagMONITORINFOEXA /* winuser.h:5827:5 */
type LPMONITORINFOEXA = uintptr         /* winuser.h:5827:20 */

type tagMONITORINFOEXW = struct {
	__0 struct {
		cbSize    DWORD
		rcMonitor RECT
		rcWork    RECT
		dwFlags   DWORD
	}
	szDevice [32]WCHAR
} /* winuser.h:5829:11 */

type MONITORINFOEXW = tagMONITORINFOEXW /* winuser.h:5837:5 */
type LPMONITORINFOEXW = uintptr         /* winuser.h:5837:20 */

type MONITORINFOEX = MONITORINFOEXA     /* winuser.h:5839:3 */
type LPMONITORINFOEX = LPMONITORINFOEXA /* winuser.h:5840:3 */

type MONITORENUMPROC = uintptr /* winuser.h:5843:19 */

type WINEVENTPROC = uintptr /* winuser.h:5885:16 */

type tagGUITHREADINFO = struct {
	cbSize        DWORD
	flags         DWORD
	hwndActive    HWND
	hwndFocus     HWND
	hwndCapture   HWND
	hwndMenuOwner HWND
	hwndMoveSize  HWND
	hwndCaret     HWND
	rcCaret       RECT
} /* winuser.h:6062:11 */

type GUITHREADINFO = tagGUITHREADINFO /* winuser.h:6072:5 */
type PGUITHREADINFO = uintptr         /* winuser.h:6072:19 */
type LPGUITHREADINFO = uintptr        /* winuser.h:6072:35 */

type tagCURSORINFO = struct {
	cbSize      DWORD
	flags       DWORD
	hCursor     HCURSOR
	ptScreenPos POINT
} /* winuser.h:6167:11 */

type CURSORINFO = tagCURSORINFO /* winuser.h:6172:5 */
type PCURSORINFO = uintptr      /* winuser.h:6172:16 */
type LPCURSORINFO = uintptr     /* winuser.h:6172:29 */

type tagWINDOWINFO = struct {
	cbSize          DWORD
	rcWindow        RECT
	rcClient        RECT
	dwStyle         DWORD
	dwExStyle       DWORD
	dwWindowStatus  DWORD
	cxWindowBorders UINT
	cyWindowBorders UINT
	atomWindowType  ATOM
	wCreatorVersion WORD
} /* winuser.h:6181:11 */

type WINDOWINFO = tagWINDOWINFO /* winuser.h:6192:5 */
type PWINDOWINFO = uintptr      /* winuser.h:6192:16 */
type LPWINDOWINFO = uintptr     /* winuser.h:6192:29 */

type tagTITLEBARINFO = struct {
	cbSize     DWORD
	rcTitleBar RECT
	rgstate    [6]DWORD
} /* winuser.h:6198:11 */

type TITLEBARINFO = tagTITLEBARINFO /* winuser.h:6202:5 */
type PTITLEBARINFO = uintptr        /* winuser.h:6202:18 */
type LPTITLEBARINFO = uintptr       /* winuser.h:6202:33 */

type tagMENUBARINFO = struct {
	cbSize      DWORD
	rcBar       RECT
	_           [4]byte
	hMenu       HMENU
	hwndMenu    HWND
	fBarFocused uint8 /* WINBOOL fBarFocused: 1, WINBOOL fFocused: 1 */
	_           [7]byte
} /* winuser.h:6215:11 */

type MENUBARINFO = tagMENUBARINFO /* winuser.h:6222:5 */
type PMENUBARINFO = uintptr       /* winuser.h:6222:17 */
type LPMENUBARINFO = uintptr      /* winuser.h:6222:31 */

type tagSCROLLBARINFO = struct {
	cbSize        DWORD
	rcScrollBar   RECT
	dxyLineButton int32
	xyThumbTop    int32
	xyThumbBottom int32
	reserved      int32
	rgstate       [6]DWORD
} /* winuser.h:6226:11 */

type SCROLLBARINFO = tagSCROLLBARINFO /* winuser.h:6234:5 */
type PSCROLLBARINFO = uintptr         /* winuser.h:6234:19 */
type LPSCROLLBARINFO = uintptr        /* winuser.h:6234:35 */

type tagCOMBOBOXINFO = struct {
	cbSize      DWORD
	rcItem      RECT
	rcButton    RECT
	stateButton DWORD
	hwndCombo   HWND
	hwndItem    HWND
	hwndList    HWND
} /* winuser.h:6238:11 */

type COMBOBOXINFO = tagCOMBOBOXINFO /* winuser.h:6246:5 */
type PCOMBOBOXINFO = uintptr        /* winuser.h:6246:18 */
type LPCOMBOBOXINFO = uintptr       /* winuser.h:6246:33 */

type tagALTTABINFO = struct {
	cbSize    DWORD
	cItems    int32
	cColumns  int32
	cRows     int32
	iColFocus int32
	iRowFocus int32
	cxItem    int32
	cyItem    int32
	ptStart   POINT
} /* winuser.h:6263:11 */

type ALTTABINFO = tagALTTABINFO /* winuser.h:6273:5 */
type PALTTABINFO = uintptr      /* winuser.h:6273:16 */
type LPALTTABINFO = uintptr     /* winuser.h:6273:29 */

type HRAWINPUT__ = struct{ unused int32 } /* winuser.h:6287:3 */

type HRAWINPUT = uintptr /* winuser.h:6287:3 */

type tagRAWINPUTHEADER = struct {
	dwType  DWORD
	dwSize  DWORD
	hDevice HANDLE
	wParam  WPARAM
} /* winuser.h:6296:11 */

type RAWINPUTHEADER = tagRAWINPUTHEADER /* winuser.h:6301:5 */
type PRAWINPUTHEADER = uintptr          /* winuser.h:6301:20 */
type LPRAWINPUTHEADER = uintptr         /* winuser.h:6301:37 */

type tagRAWMOUSE = struct {
	usFlags            USHORT
	_                  [2]byte
	__4                struct{ ulButtons ULONG }
	ulRawButtons       ULONG
	lLastX             LONG
	lLastY             LONG
	ulExtraInformation ULONG
} /* winuser.h:6310:11 */

type RAWMOUSE = tagRAWMOUSE /* winuser.h:6323:5 */
type PRAWMOUSE = uintptr    /* winuser.h:6323:14 */
type LPRAWMOUSE = uintptr   /* winuser.h:6323:25 */

type tagRAWKEYBOARD = struct {
	MakeCode         USHORT
	Flags            USHORT
	Reserved         USHORT
	VKey             USHORT
	Message          UINT
	ExtraInformation ULONG
} /* winuser.h:6357:11 */

type RAWKEYBOARD = tagRAWKEYBOARD /* winuser.h:6364:5 */
type PRAWKEYBOARD = uintptr       /* winuser.h:6364:17 */
type LPRAWKEYBOARD = uintptr      /* winuser.h:6364:31 */

type tagRAWHID = struct {
	dwSizeHid DWORD
	dwCount   DWORD
	bRawData  [1]BYTE
	_         [3]byte
} /* winuser.h:6377:11 */

type RAWHID = tagRAWHID /* winuser.h:6381:5 */
type PRAWHID = uintptr  /* winuser.h:6381:12 */
type LPRAWHID = uintptr /* winuser.h:6381:21 */

type tagRAWINPUT = struct {
	header RAWINPUTHEADER
	data   struct{ mouse RAWMOUSE }
} /* winuser.h:6383:11 */

type RAWINPUT = tagRAWINPUT /* winuser.h:6390:5 */
type PRAWINPUT = uintptr    /* winuser.h:6390:14 */
type LPRAWINPUT = uintptr   /* winuser.h:6390:25 */

type tagRID_DEVICE_INFO_MOUSE = struct {
	dwId                DWORD
	dwNumberOfButtons   DWORD
	dwSampleRate        DWORD
	fHasHorizontalWheel WINBOOL
} /* winuser.h:6413:11 */

type RID_DEVICE_INFO_MOUSE = tagRID_DEVICE_INFO_MOUSE /* winuser.h:6418:5 */
type PRID_DEVICE_INFO_MOUSE = uintptr                 /* winuser.h:6418:27 */

type tagRID_DEVICE_INFO_KEYBOARD = struct {
	dwType                 DWORD
	dwSubType              DWORD
	dwKeyboardMode         DWORD
	dwNumberOfFunctionKeys DWORD
	dwNumberOfIndicators   DWORD
	dwNumberOfKeysTotal    DWORD
} /* winuser.h:6420:11 */

type RID_DEVICE_INFO_KEYBOARD = tagRID_DEVICE_INFO_KEYBOARD /* winuser.h:6427:5 */
type PRID_DEVICE_INFO_KEYBOARD = uintptr                    /* winuser.h:6427:30 */

type tagRID_DEVICE_INFO_HID = struct {
	dwVendorId      DWORD
	dwProductId     DWORD
	dwVersionNumber DWORD
	usUsagePage     USHORT
	usUsage         USHORT
} /* winuser.h:6429:11 */

type RID_DEVICE_INFO_HID = tagRID_DEVICE_INFO_HID /* winuser.h:6435:5 */
type PRID_DEVICE_INFO_HID = uintptr               /* winuser.h:6435:25 */

type tagRID_DEVICE_INFO = struct {
	cbSize DWORD
	dwType DWORD
	__8    struct {
		mouse RID_DEVICE_INFO_MOUSE
		_     [8]byte
	}
} /* winuser.h:6437:11 */

type RID_DEVICE_INFO = tagRID_DEVICE_INFO /* winuser.h:6445:5 */
type PRID_DEVICE_INFO = uintptr           /* winuser.h:6445:21 */
type LPRID_DEVICE_INFO = uintptr          /* winuser.h:6445:39 */

type tagRAWINPUTDEVICE = struct {
	usUsagePage USHORT
	usUsage     USHORT
	dwFlags     DWORD
	hwndTarget  HWND
} /* winuser.h:6453:11 */

type RAWINPUTDEVICE = tagRAWINPUTDEVICE /* winuser.h:6458:5 */
type PRAWINPUTDEVICE = uintptr          /* winuser.h:6458:20 */
type LPRAWINPUTDEVICE = uintptr         /* winuser.h:6458:37 */

type PCRAWINPUTDEVICE = uintptr /* winuser.h:6460:32 */

type tagRAWINPUTDEVICELIST = struct {
	hDevice HANDLE
	dwType  DWORD
	_       [4]byte
} /* winuser.h:6487:11 */

type RAWINPUTDEVICELIST = tagRAWINPUTDEVICELIST /* winuser.h:6490:5 */
type PRAWINPUTDEVICELIST = uintptr              /* winuser.h:6490:24 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type LGRPID = DWORD  /* winnls.h:644:17 */
type LCTYPE = DWORD  /* winnls.h:645:17 */
type CALTYPE = DWORD /* winnls.h:646:17 */
type CALID = DWORD   /* winnls.h:647:17 */

type _cpinfo = struct {
	MaxCharSize UINT
	DefaultChar [2]BYTE
	LeadByte    [12]BYTE
	_           [2]byte
} /* winnls.h:649:11 */

type CPINFO = _cpinfo   /* winnls.h:653:5 */
type LPCPINFO = uintptr /* winnls.h:653:12 */
type _cpinfoexA = struct {
	MaxCharSize        UINT
	DefaultChar        [2]BYTE
	LeadByte           [12]BYTE
	UnicodeDefaultChar WCHAR
	CodePage           UINT
	CodePageName       [260]CHAR
} /* winnls.h:654:11 */

type CPINFOEXA = _cpinfoexA /* winnls.h:661:5 */
type LPCPINFOEXA = uintptr  /* winnls.h:661:15 */

type _cpinfoexW = struct {
	MaxCharSize        UINT
	DefaultChar        [2]BYTE
	LeadByte           [12]BYTE
	UnicodeDefaultChar WCHAR
	CodePage           UINT
	CodePageName       [260]WCHAR
} /* winnls.h:663:11 */

type CPINFOEXW = _cpinfoexW /* winnls.h:670:5 */
type LPCPINFOEXW = uintptr  /* winnls.h:670:15 */

type CPINFOEX = CPINFOEXA     /* winnls.h:672:3 */
type LPCPINFOEX = LPCPINFOEXA /* winnls.h:673:3 */

type _numberfmtA = struct {
	NumDigits     UINT
	LeadingZero   UINT
	Grouping      UINT
	_             [4]byte
	lpDecimalSep  LPSTR
	lpThousandSep LPSTR
	NegativeOrder UINT
	_             [4]byte
} /* winnls.h:675:11 */

type NUMBERFMTA = _numberfmtA /* winnls.h:682:5 */
type LPNUMBERFMTA = uintptr   /* winnls.h:682:16 */
type _numberfmtW = struct {
	NumDigits     UINT
	LeadingZero   UINT
	Grouping      UINT
	_             [4]byte
	lpDecimalSep  LPWSTR
	lpThousandSep LPWSTR
	NegativeOrder UINT
	_             [4]byte
} /* winnls.h:683:11 */

type NUMBERFMTW = _numberfmtW /* winnls.h:690:5 */
type LPNUMBERFMTW = uintptr   /* winnls.h:690:16 */

type NUMBERFMT = NUMBERFMTA     /* winnls.h:692:3 */
type LPNUMBERFMT = LPNUMBERFMTA /* winnls.h:693:3 */

type _currencyfmtA = struct {
	NumDigits        UINT
	LeadingZero      UINT
	Grouping         UINT
	_                [4]byte
	lpDecimalSep     LPSTR
	lpThousandSep    LPSTR
	NegativeOrder    UINT
	PositiveOrder    UINT
	lpCurrencySymbol LPSTR
} /* winnls.h:695:11 */

type CURRENCYFMTA = _currencyfmtA /* winnls.h:704:5 */
type LPCURRENCYFMTA = uintptr     /* winnls.h:704:18 */

type _currencyfmtW = struct {
	NumDigits        UINT
	LeadingZero      UINT
	Grouping         UINT
	_                [4]byte
	lpDecimalSep     LPWSTR
	lpThousandSep    LPWSTR
	NegativeOrder    UINT
	PositiveOrder    UINT
	lpCurrencySymbol LPWSTR
} /* winnls.h:706:11 */

type CURRENCYFMTW = _currencyfmtW /* winnls.h:715:5 */
type LPCURRENCYFMTW = uintptr     /* winnls.h:715:18 */

type CURRENCYFMT = CURRENCYFMTA     /* winnls.h:717:3 */
type LPCURRENCYFMT = LPCURRENCYFMTA /* winnls.h:718:3 */

type NLS_FUNCTION = DWORD /* winnls.h:724:17 */

type _nlsversioninfo = struct {
	dwNLSVersionInfoSize DWORD
	dwNLSVersion         DWORD
	dwDefinedVersion     DWORD
} /* winnls.h:735:11 */

type NLSVERSIONINFO = _nlsversioninfo /* winnls.h:739:5 */
type LPNLSVERSIONINFO = uintptr       /* winnls.h:739:20 */

type _nlsversioninfoex = struct {
	dwNLSVersionInfoSize DWORD
	dwNLSVersion         DWORD
	dwDefinedVersion     DWORD
	dwEffectiveId        DWORD
	guidCustomVersion    GUID
} /* winnls.h:742:11 */

type NLSVERSIONINFOEX = _nlsversioninfoex /* winnls.h:748:5 */
type LPNLSVERSIONINFOEX = uintptr         /* winnls.h:748:22 */

type GEOID = LONG     /* winnls.h:750:16 */
type GEOTYPE = DWORD  /* winnls.h:751:17 */
type GEOCLASS = DWORD /* winnls.h:752:17 */

type LANGUAGEGROUP_ENUMPROCA = uintptr   /* winnls.h:798:19 */
type LANGGROUPLOCALE_ENUMPROCA = uintptr /* winnls.h:799:19 */
type UILANGUAGE_ENUMPROCA = uintptr      /* winnls.h:800:19 */
type CODEPAGE_ENUMPROCA = uintptr        /* winnls.h:801:19 */
type DATEFMT_ENUMPROCA = uintptr         /* winnls.h:802:19 */
type DATEFMT_ENUMPROCEXA = uintptr       /* winnls.h:803:19 */
type TIMEFMT_ENUMPROCA = uintptr         /* winnls.h:804:19 */
type CALINFO_ENUMPROCA = uintptr         /* winnls.h:805:19 */
type CALINFO_ENUMPROCEXA = uintptr       /* winnls.h:806:19 */
type LOCALE_ENUMPROCA = uintptr          /* winnls.h:807:19 */
type LOCALE_ENUMPROCW = uintptr          /* winnls.h:808:19 */
type LANGUAGEGROUP_ENUMPROCW = uintptr   /* winnls.h:809:19 */
type LANGGROUPLOCALE_ENUMPROCW = uintptr /* winnls.h:810:19 */
type UILANGUAGE_ENUMPROCW = uintptr      /* winnls.h:811:19 */
type CODEPAGE_ENUMPROCW = uintptr        /* winnls.h:812:19 */
type DATEFMT_ENUMPROCW = uintptr         /* winnls.h:813:19 */
type DATEFMT_ENUMPROCEXW = uintptr       /* winnls.h:814:19 */
type TIMEFMT_ENUMPROCW = uintptr         /* winnls.h:815:19 */
type CALINFO_ENUMPROCW = uintptr         /* winnls.h:816:19 */
type CALINFO_ENUMPROCEXW = uintptr       /* winnls.h:817:19 */
type GEO_ENUMPROC = uintptr              /* winnls.h:818:19 */

type _FILEMUIINFO = struct {
	dwSize               DWORD
	dwVersion            DWORD
	dwFileType           DWORD
	pChecksum            [16]BYTE
	pServiceChecksum     [16]BYTE
	dwLanguageNameOffset DWORD
	dwTypeIDMainSize     DWORD
	dwTypeIDMainOffset   DWORD
	dwTypeNameMainOffset DWORD
	dwTypeIDMUISize      DWORD
	dwTypeIDMUIOffset    DWORD
	dwTypeNameMUIOffset  DWORD
	abBuffer             [8]BYTE
} /* winnls.h:869:11 */

type FILEMUIINFO = _FILEMUIINFO /* winnls.h:883:5 */
type PFILEMUIINFO = uintptr     /* winnls.h:883:17 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type _COORD = struct {
	X SHORT
	Y SHORT
} /* wincon.h:20:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type COORD = _COORD   /* wincon.h:23:5 */
type PCOORD = uintptr /* wincon.h:23:11 */

type _SMALL_RECT = struct {
	Left   SHORT
	Top    SHORT
	Right  SHORT
	Bottom SHORT
} /* wincon.h:25:11 */

type SMALL_RECT = _SMALL_RECT /* wincon.h:30:5 */
type PSMALL_RECT = uintptr    /* wincon.h:30:16 */

type _KEY_EVENT_RECORD = struct {
	bKeyDown          WINBOOL
	wRepeatCount      WORD
	wVirtualKeyCode   WORD
	wVirtualScanCode  WORD
	uChar             struct{ UnicodeChar WCHAR }
	dwControlKeyState DWORD
} /* wincon.h:32:11 */

type KEY_EVENT_RECORD = _KEY_EVENT_RECORD /* wincon.h:42:5 */
type PKEY_EVENT_RECORD = uintptr          /* wincon.h:42:22 */

type _MOUSE_EVENT_RECORD = struct {
	dwMousePosition   COORD
	dwButtonState     DWORD
	dwControlKeyState DWORD
	dwEventFlags      DWORD
} /* wincon.h:62:11 */

type MOUSE_EVENT_RECORD = _MOUSE_EVENT_RECORD /* wincon.h:67:5 */
type PMOUSE_EVENT_RECORD = uintptr            /* wincon.h:67:24 */

type _WINDOW_BUFFER_SIZE_RECORD = struct{ dwSize COORD } /* wincon.h:82:11 */

type WINDOW_BUFFER_SIZE_RECORD = _WINDOW_BUFFER_SIZE_RECORD /* wincon.h:84:5 */
type PWINDOW_BUFFER_SIZE_RECORD = uintptr                   /* wincon.h:84:31 */

type _MENU_EVENT_RECORD = struct{ dwCommandId UINT } /* wincon.h:86:11 */

type MENU_EVENT_RECORD = _MENU_EVENT_RECORD /* wincon.h:88:5 */
type PMENU_EVENT_RECORD = uintptr           /* wincon.h:88:23 */

type _FOCUS_EVENT_RECORD = struct{ bSetFocus WINBOOL } /* wincon.h:90:11 */

type FOCUS_EVENT_RECORD = _FOCUS_EVENT_RECORD /* wincon.h:92:5 */
type PFOCUS_EVENT_RECORD = uintptr            /* wincon.h:92:24 */

type _INPUT_RECORD = struct {
	EventType WORD
	_         [2]byte
	Event     struct{ KeyEvent KEY_EVENT_RECORD }
} /* wincon.h:94:11 */

type INPUT_RECORD = _INPUT_RECORD /* wincon.h:103:5 */
type PINPUT_RECORD = uintptr      /* wincon.h:103:18 */

type _CHAR_INFO = struct {
	Char       struct{ UnicodeChar WCHAR }
	Attributes WORD
} /* wincon.h:111:11 */

type CHAR_INFO = _CHAR_INFO /* wincon.h:117:5 */
type PCHAR_INFO = uintptr   /* wincon.h:117:15 */

type _CONSOLE_SCREEN_BUFFER_INFO = struct {
	dwSize              COORD
	dwCursorPosition    COORD
	wAttributes         WORD
	srWindow            SMALL_RECT
	dwMaximumWindowSize COORD
} /* wincon.h:137:11 */

type CONSOLE_SCREEN_BUFFER_INFO = _CONSOLE_SCREEN_BUFFER_INFO /* wincon.h:143:5 */
type PCONSOLE_SCREEN_BUFFER_INFO = uintptr                    /* wincon.h:143:32 */

type _CONSOLE_CURSOR_INFO = struct {
	dwSize   DWORD
	bVisible WINBOOL
} /* wincon.h:145:11 */

type CONSOLE_CURSOR_INFO = _CONSOLE_CURSOR_INFO /* wincon.h:148:5 */
type PCONSOLE_CURSOR_INFO = uintptr             /* wincon.h:148:25 */

type _CONSOLE_FONT_INFO = struct {
	nFont      DWORD
	dwFontSize COORD
} /* wincon.h:150:11 */

type CONSOLE_FONT_INFO = _CONSOLE_FONT_INFO /* wincon.h:153:5 */
type PCONSOLE_FONT_INFO = uintptr           /* wincon.h:153:23 */

type _CONSOLE_SELECTION_INFO = struct {
	dwFlags           DWORD
	dwSelectionAnchor COORD
	srSelection       SMALL_RECT
} /* wincon.h:155:11 */

type CONSOLE_SELECTION_INFO = _CONSOLE_SELECTION_INFO /* wincon.h:159:5 */
type PCONSOLE_SELECTION_INFO = uintptr                /* wincon.h:159:28 */

type PHANDLER_ROUTINE = uintptr /* wincon.h:167:19 */

type _CONSOLE_FONT_INFOEX = struct {
	cbSize     ULONG
	nFont      DWORD
	dwFontSize COORD
	FontFamily UINT
	FontWeight UINT
	FaceName   [32]WCHAR
} /* wincon.h:321:9 */

type CONSOLE_FONT_INFOEX = _CONSOLE_FONT_INFOEX /* wincon.h:328:3 */
type PCONSOLE_FONT_INFOEX = uintptr             /* wincon.h:328:24 */

type _CONSOLE_HISTORY_INFO = struct {
	cbSize                 UINT
	HistoryBufferSize      UINT
	NumberOfHistoryBuffers UINT
	dwFlags                DWORD
} /* wincon.h:332:9 */

type CONSOLE_HISTORY_INFO = _CONSOLE_HISTORY_INFO /* wincon.h:337:3 */
type PCONSOLE_HISTORY_INFO = uintptr              /* wincon.h:337:25 */

type _CONSOLE_READCONSOLE_CONTROL = struct {
	nLength           ULONG
	nInitialChars     ULONG
	dwCtrlWakeupMask  ULONG
	dwControlKeyState ULONG
} /* wincon.h:339:9 */

type CONSOLE_READCONSOLE_CONTROL = _CONSOLE_READCONSOLE_CONTROL /* wincon.h:344:3 */
type PCONSOLE_READCONSOLE_CONTROL = uintptr                     /* wincon.h:344:32 */

type _CONSOLE_SCREEN_BUFFER_INFOEX = struct {
	cbSize               ULONG
	dwSize               COORD
	dwCursorPosition     COORD
	wAttributes          WORD
	srWindow             SMALL_RECT
	dwMaximumWindowSize  COORD
	wPopupAttributes     WORD
	bFullscreenSupported WINBOOL
	ColorTable           [16]COLORREF
} /* wincon.h:346:9 */

type CONSOLE_SCREEN_BUFFER_INFOEX = _CONSOLE_SCREEN_BUFFER_INFOEX /* wincon.h:356:3 */
type PCONSOLE_SCREEN_BUFFER_INFOEX = uintptr                      /* wincon.h:356:33 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// defines from verrsrc.h file

type tagVS_FIXEDFILEINFO = struct {
	dwSignature        DWORD
	dwStrucVersion     DWORD
	dwFileVersionMS    DWORD
	dwFileVersionLS    DWORD
	dwProductVersionMS DWORD
	dwProductVersionLS DWORD
	dwFileFlagsMask    DWORD
	dwFileFlags        DWORD
	dwFileOS           DWORD
	dwFileType         DWORD
	dwFileSubtype      DWORD
	dwFileDateMS       DWORD
	dwFileDateLS       DWORD
} /* winver.h:118:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// defines from verrsrc.h file

type VS_FIXEDFILEINFO = tagVS_FIXEDFILEINFO /* winver.h:133:5 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type REGSAM = ACCESS_MASK /* winreg.h:43:23 */
type LSTATUS = LONG       /* winreg.h:44:16 */

type val_context = struct {
	valuelen      int32
	_             [4]byte
	value_context LPVOID
	val_buff_ptr  LPVOID
} /* winreg.h:62:3 */

type PVALCONTEXT = uintptr /* winreg.h:68:30 */

type pvalueA = struct {
	pv_valuename     LPSTR
	pv_valuelen      int32
	_                [4]byte
	pv_value_context LPVOID
	pv_type          DWORD
	_                [4]byte
} /* winreg.h:70:11 */

type PVALUEA = pvalueA  /* winreg.h:75:4 */
type PPVALUEA = uintptr /* winreg.h:75:12 */

type pvalueW = struct {
	pv_valuename     LPWSTR
	pv_valuelen      int32
	_                [4]byte
	pv_value_context LPVOID
	pv_type          DWORD
	_                [4]byte
} /* winreg.h:77:11 */

type PVALUEW = pvalueW  /* winreg.h:82:4 */
type PPVALUEW = uintptr /* winreg.h:82:12 */

type PVALUE = PVALUEA   /* winreg.h:84:3 */
type PPVALUE = PPVALUEA /* winreg.h:85:3 */

type PQUERYHANDLER = uintptr /* winreg.h:89:24 */

type provider_info = struct {
	pi_R0_1val     PQUERYHANDLER
	pi_R0_allvals  PQUERYHANDLER
	pi_R3_1val     PQUERYHANDLER
	pi_R3_allvals  PQUERYHANDLER
	pi_flags       DWORD
	_              [4]byte
	pi_key_context LPVOID
} /* winreg.h:91:11 */

type REG_PROVIDER = provider_info /* winreg.h:98:5 */

type PPROVIDER = uintptr /* winreg.h:100:32 */

type value_entA = struct {
	ve_valuename LPSTR
	ve_valuelen  DWORD
	_            [4]byte
	ve_valueptr  DWORD_PTR
	ve_type      DWORD
	_            [4]byte
} /* winreg.h:102:11 */

type VALENTA = value_entA /* winreg.h:107:5 */
type PVALENTA = uintptr   /* winreg.h:107:13 */

type value_entW = struct {
	ve_valuename LPWSTR
	ve_valuelen  DWORD
	_            [4]byte
	ve_valueptr  DWORD_PTR
	ve_type      DWORD
	_            [4]byte
} /* winreg.h:109:11 */

type VALENTW = value_entW /* winreg.h:114:5 */
type PVALENTW = uintptr   /* winreg.h:114:13 */

type VALENT = VALENTA   /* winreg.h:116:3 */
type PVALENT = PVALENTA /* winreg.h:117:3 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type _NETRESOURCEA = struct {
	dwScope       DWORD
	dwType        DWORD
	dwDisplayType DWORD
	dwUsage       DWORD
	lpLocalName   LPSTR
	lpRemoteName  LPSTR
	lpComment     LPSTR
	lpProvider    LPSTR
} /* winnetwk.h:53:11 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type NETRESOURCEA = _NETRESOURCEA /* winnetwk.h:62:5 */
type LPNETRESOURCEA = uintptr     /* winnetwk.h:62:18 */
type _NETRESOURCEW = struct {
	dwScope       DWORD
	dwType        DWORD
	dwDisplayType DWORD
	dwUsage       DWORD
	lpLocalName   LPWSTR
	lpRemoteName  LPWSTR
	lpComment     LPWSTR
	lpProvider    LPWSTR
} /* winnetwk.h:63:11 */

type NETRESOURCEW = _NETRESOURCEW /* winnetwk.h:72:5 */
type LPNETRESOURCEW = uintptr     /* winnetwk.h:72:18 */

type NETRESOURCE = NETRESOURCEA     /* winnetwk.h:74:3 */
type LPNETRESOURCE = LPNETRESOURCEA /* winnetwk.h:75:3 */

type _CONNECTDLGSTRUCTA = struct {
	cbStructure DWORD
	_           [4]byte
	hwndOwner   HWND
	lpConnRes   LPNETRESOURCEA
	dwFlags     DWORD
	dwDevNum    DWORD
} /* winnetwk.h:129:11 */

type CONNECTDLGSTRUCTA = _CONNECTDLGSTRUCTA /* winnetwk.h:135:5 */
type LPCONNECTDLGSTRUCTA = uintptr          /* winnetwk.h:135:23 */

type _CONNECTDLGSTRUCTW = struct {
	cbStructure DWORD
	_           [4]byte
	hwndOwner   HWND
	lpConnRes   LPNETRESOURCEW
	dwFlags     DWORD
	dwDevNum    DWORD
} /* winnetwk.h:137:11 */

type CONNECTDLGSTRUCTW = _CONNECTDLGSTRUCTW /* winnetwk.h:143:5 */
type LPCONNECTDLGSTRUCTW = uintptr          /* winnetwk.h:143:23 */

type CONNECTDLGSTRUCT = CONNECTDLGSTRUCTA     /* winnetwk.h:145:3 */
type LPCONNECTDLGSTRUCT = LPCONNECTDLGSTRUCTA /* winnetwk.h:146:3 */

type _DISCDLGSTRUCTA = struct {
	cbStructure  DWORD
	_            [4]byte
	hwndOwner    HWND
	lpLocalName  LPSTR
	lpRemoteName LPSTR
	dwFlags      DWORD
	_            [4]byte
} /* winnetwk.h:161:11 */

type DISCDLGSTRUCTA = _DISCDLGSTRUCTA /* winnetwk.h:167:5 */
type LPDISCDLGSTRUCTA = uintptr       /* winnetwk.h:167:20 */

type _DISCDLGSTRUCTW = struct {
	cbStructure  DWORD
	_            [4]byte
	hwndOwner    HWND
	lpLocalName  LPWSTR
	lpRemoteName LPWSTR
	dwFlags      DWORD
	_            [4]byte
} /* winnetwk.h:169:11 */

type DISCDLGSTRUCTW = _DISCDLGSTRUCTW /* winnetwk.h:175:5 */
type LPDISCDLGSTRUCTW = uintptr       /* winnetwk.h:175:20 */

type DISCDLGSTRUCT = DISCDLGSTRUCTA     /* winnetwk.h:177:3 */
type LPDISCDLGSTRUCT = LPDISCDLGSTRUCTA /* winnetwk.h:178:3 */

type _UNIVERSAL_NAME_INFOA = struct{ lpUniversalName LPSTR } /* winnetwk.h:204:11 */

type UNIVERSAL_NAME_INFOA = _UNIVERSAL_NAME_INFOA /* winnetwk.h:206:5 */
type LPUNIVERSAL_NAME_INFOA = uintptr             /* winnetwk.h:206:26 */

type _UNIVERSAL_NAME_INFOW = struct{ lpUniversalName LPWSTR } /* winnetwk.h:208:11 */

type UNIVERSAL_NAME_INFOW = _UNIVERSAL_NAME_INFOW /* winnetwk.h:210:5 */
type LPUNIVERSAL_NAME_INFOW = uintptr             /* winnetwk.h:210:26 */

type UNIVERSAL_NAME_INFO = UNIVERSAL_NAME_INFOA     /* winnetwk.h:212:3 */
type LPUNIVERSAL_NAME_INFO = LPUNIVERSAL_NAME_INFOA /* winnetwk.h:213:3 */

type _REMOTE_NAME_INFOA = struct {
	lpUniversalName  LPSTR
	lpConnectionName LPSTR
	lpRemainingPath  LPSTR
} /* winnetwk.h:215:11 */

type REMOTE_NAME_INFOA = _REMOTE_NAME_INFOA /* winnetwk.h:219:5 */
type LPREMOTE_NAME_INFOA = uintptr          /* winnetwk.h:219:23 */

type _REMOTE_NAME_INFOW = struct {
	lpUniversalName  LPWSTR
	lpConnectionName LPWSTR
	lpRemainingPath  LPWSTR
} /* winnetwk.h:221:11 */

type REMOTE_NAME_INFOW = _REMOTE_NAME_INFOW /* winnetwk.h:225:5 */
type LPREMOTE_NAME_INFOW = uintptr          /* winnetwk.h:225:23 */

type REMOTE_NAME_INFO = REMOTE_NAME_INFOA     /* winnetwk.h:227:3 */
type LPREMOTE_NAME_INFO = LPREMOTE_NAME_INFOA /* winnetwk.h:228:3 */

type _NETINFOSTRUCT = struct {
	cbStructure       DWORD
	dwProviderVersion DWORD
	dwStatus          DWORD
	dwCharacteristics DWORD
	dwHandle          ULONG_PTR
	wNetType          WORD
	_                 [2]byte
	dwPrinters        DWORD
	dwDrives          DWORD
	_                 [4]byte
} /* winnetwk.h:247:11 */

type NETINFOSTRUCT = _NETINFOSTRUCT /* winnetwk.h:256:5 */
type LPNETINFOSTRUCT = uintptr      /* winnetwk.h:256:19 */

type PFNGETPROFILEPATHA = uintptr /* winnetwk.h:267:16 */
type PFNGETPROFILEPATHW = uintptr /* winnetwk.h:268:16 */

type PFNRECONCILEPROFILEA = uintptr /* winnetwk.h:272:16 */
type PFNRECONCILEPROFILEW = uintptr /* winnetwk.h:273:16 */

type PFNPROCESSPOLICIESA = uintptr /* winnetwk.h:280:19 */
type PFNPROCESSPOLICIESW = uintptr /* winnetwk.h:281:19 */

type _NETCONNECTINFOSTRUCT = struct {
	cbStructure   DWORD
	dwFlags       DWORD
	dwSpeed       DWORD
	dwDelay       DWORD
	dwOptDataSize DWORD
} /* winnetwk.h:335:11 */

type NETCONNECTINFOSTRUCT = _NETCONNECTINFOSTRUCT /* winnetwk.h:341:5 */
type LPNETCONNECTINFOSTRUCT = uintptr             /* winnetwk.h:341:26 */

type PUWSTR_C = uintptr /* stralign.h:105:42 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type _SERVICE_DESCRIPTIONA = struct{ lpDescription LPSTR } /* winsvc.h:95:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type SERVICE_DESCRIPTIONA = _SERVICE_DESCRIPTIONA /* winsvc.h:97:5 */
type LPSERVICE_DESCRIPTIONA = uintptr             /* winsvc.h:97:26 */

type _SERVICE_DESCRIPTIONW = struct{ lpDescription LPWSTR } /* winsvc.h:99:11 */

type SERVICE_DESCRIPTIONW = _SERVICE_DESCRIPTIONW /* winsvc.h:101:5 */
type LPSERVICE_DESCRIPTIONW = uintptr             /* winsvc.h:101:26 */

type SERVICE_DESCRIPTION = SERVICE_DESCRIPTIONA     /* winsvc.h:103:3 */
type LPSERVICE_DESCRIPTION = LPSERVICE_DESCRIPTIONA /* winsvc.h:104:3 */

type SC_ACTION_TYPE = uint32 /* winsvc.h:108:5 */

type _SC_ACTION = struct {
	Type  SC_ACTION_TYPE
	Delay DWORD
} /* winsvc.h:110:11 */

type SC_ACTION = _SC_ACTION /* winsvc.h:113:5 */
type LPSC_ACTION = uintptr  /* winsvc.h:113:15 */

type _SERVICE_FAILURE_ACTIONSA = struct {
	dwResetPeriod DWORD
	_             [4]byte
	lpRebootMsg   LPSTR
	lpCommand     LPSTR
	cActions      DWORD
	_             [4]byte
	lpsaActions   uintptr
} /* winsvc.h:115:11 */

type SERVICE_FAILURE_ACTIONSA = _SERVICE_FAILURE_ACTIONSA /* winsvc.h:121:5 */
type LPSERVICE_FAILURE_ACTIONSA = uintptr                 /* winsvc.h:121:30 */

type _SERVICE_FAILURE_ACTIONSW = struct {
	dwResetPeriod DWORD
	_             [4]byte
	lpRebootMsg   LPWSTR
	lpCommand     LPWSTR
	cActions      DWORD
	_             [4]byte
	lpsaActions   uintptr
} /* winsvc.h:123:11 */

type SERVICE_FAILURE_ACTIONSW = _SERVICE_FAILURE_ACTIONSW /* winsvc.h:129:5 */
type LPSERVICE_FAILURE_ACTIONSW = uintptr                 /* winsvc.h:129:30 */

type SERVICE_FAILURE_ACTIONS = SERVICE_FAILURE_ACTIONSA     /* winsvc.h:131:3 */
type LPSERVICE_FAILURE_ACTIONS = LPSERVICE_FAILURE_ACTIONSA /* winsvc.h:132:3 */

type SC_HANDLE__ = struct{ unused int32 } /* winsvc.h:134:3 */

type SC_HANDLE = uintptr   /* winsvc.h:134:3 */
type LPSC_HANDLE = uintptr /* winsvc.h:135:21 */

type SERVICE_STATUS_HANDLE__ = struct{ unused int32 } /* winsvc.h:137:3 */

type SERVICE_STATUS_HANDLE = uintptr /* winsvc.h:137:3 */

type SC_STATUS_TYPE = uint32 /* winsvc.h:141:5 */

type SC_ENUM_TYPE = uint32 /* winsvc.h:145:5 */

type _SERVICE_STATUS = struct {
	dwServiceType             DWORD
	dwCurrentState            DWORD
	dwControlsAccepted        DWORD
	dwWin32ExitCode           DWORD
	dwServiceSpecificExitCode DWORD
	dwCheckPoint              DWORD
	dwWaitHint                DWORD
} /* winsvc.h:147:11 */

type SERVICE_STATUS = _SERVICE_STATUS /* winsvc.h:155:5 */
type LPSERVICE_STATUS = uintptr       /* winsvc.h:155:20 */

type _SERVICE_STATUS_PROCESS = struct {
	dwServiceType             DWORD
	dwCurrentState            DWORD
	dwControlsAccepted        DWORD
	dwWin32ExitCode           DWORD
	dwServiceSpecificExitCode DWORD
	dwCheckPoint              DWORD
	dwWaitHint                DWORD
	dwProcessId               DWORD
	dwServiceFlags            DWORD
} /* winsvc.h:157:11 */

type SERVICE_STATUS_PROCESS = _SERVICE_STATUS_PROCESS /* winsvc.h:167:5 */
type LPSERVICE_STATUS_PROCESS = uintptr               /* winsvc.h:167:28 */

type _ENUM_SERVICE_STATUSA = struct {
	lpServiceName LPSTR
	lpDisplayName LPSTR
	ServiceStatus SERVICE_STATUS
	_             [4]byte
} /* winsvc.h:169:11 */

type ENUM_SERVICE_STATUSA = _ENUM_SERVICE_STATUSA /* winsvc.h:173:5 */
type LPENUM_SERVICE_STATUSA = uintptr             /* winsvc.h:173:26 */

type _ENUM_SERVICE_STATUSW = struct {
	lpServiceName LPWSTR
	lpDisplayName LPWSTR
	ServiceStatus SERVICE_STATUS
	_             [4]byte
} /* winsvc.h:175:11 */

type ENUM_SERVICE_STATUSW = _ENUM_SERVICE_STATUSW /* winsvc.h:179:5 */
type LPENUM_SERVICE_STATUSW = uintptr             /* winsvc.h:179:26 */

type ENUM_SERVICE_STATUS = ENUM_SERVICE_STATUSA     /* winsvc.h:181:3 */
type LPENUM_SERVICE_STATUS = LPENUM_SERVICE_STATUSA /* winsvc.h:182:3 */

type _ENUM_SERVICE_STATUS_PROCESSA = struct {
	lpServiceName        LPSTR
	lpDisplayName        LPSTR
	ServiceStatusProcess SERVICE_STATUS_PROCESS
	_                    [4]byte
} /* winsvc.h:184:11 */

type ENUM_SERVICE_STATUS_PROCESSA = _ENUM_SERVICE_STATUS_PROCESSA /* winsvc.h:188:5 */
type LPENUM_SERVICE_STATUS_PROCESSA = uintptr                     /* winsvc.h:188:34 */

type _ENUM_SERVICE_STATUS_PROCESSW = struct {
	lpServiceName        LPWSTR
	lpDisplayName        LPWSTR
	ServiceStatusProcess SERVICE_STATUS_PROCESS
	_                    [4]byte
} /* winsvc.h:190:11 */

type ENUM_SERVICE_STATUS_PROCESSW = _ENUM_SERVICE_STATUS_PROCESSW /* winsvc.h:194:5 */
type LPENUM_SERVICE_STATUS_PROCESSW = uintptr                     /* winsvc.h:194:34 */

type ENUM_SERVICE_STATUS_PROCESS = ENUM_SERVICE_STATUS_PROCESSA     /* winsvc.h:196:3 */
type LPENUM_SERVICE_STATUS_PROCESS = LPENUM_SERVICE_STATUS_PROCESSA /* winsvc.h:197:3 */

type SC_LOCK = LPVOID /* winsvc.h:199:18 */

type _QUERY_SERVICE_LOCK_STATUSA = struct {
	fIsLocked      DWORD
	_              [4]byte
	lpLockOwner    LPSTR
	dwLockDuration DWORD
	_              [4]byte
} /* winsvc.h:201:11 */

type QUERY_SERVICE_LOCK_STATUSA = _QUERY_SERVICE_LOCK_STATUSA /* winsvc.h:205:5 */
type LPQUERY_SERVICE_LOCK_STATUSA = uintptr                   /* winsvc.h:205:32 */

type _QUERY_SERVICE_LOCK_STATUSW = struct {
	fIsLocked      DWORD
	_              [4]byte
	lpLockOwner    LPWSTR
	dwLockDuration DWORD
	_              [4]byte
} /* winsvc.h:207:11 */

type QUERY_SERVICE_LOCK_STATUSW = _QUERY_SERVICE_LOCK_STATUSW /* winsvc.h:211:5 */
type LPQUERY_SERVICE_LOCK_STATUSW = uintptr                   /* winsvc.h:211:32 */

type QUERY_SERVICE_LOCK_STATUS = QUERY_SERVICE_LOCK_STATUSA     /* winsvc.h:213:3 */
type LPQUERY_SERVICE_LOCK_STATUS = LPQUERY_SERVICE_LOCK_STATUSA /* winsvc.h:214:3 */

type _QUERY_SERVICE_CONFIGA = struct {
	dwServiceType      DWORD
	dwStartType        DWORD
	dwErrorControl     DWORD
	_                  [4]byte
	lpBinaryPathName   LPSTR
	lpLoadOrderGroup   LPSTR
	dwTagId            DWORD
	_                  [4]byte
	lpDependencies     LPSTR
	lpServiceStartName LPSTR
	lpDisplayName      LPSTR
} /* winsvc.h:216:11 */

type QUERY_SERVICE_CONFIGA = _QUERY_SERVICE_CONFIGA /* winsvc.h:226:5 */
type LPQUERY_SERVICE_CONFIGA = uintptr              /* winsvc.h:226:27 */

type _QUERY_SERVICE_CONFIGW = struct {
	dwServiceType      DWORD
	dwStartType        DWORD
	dwErrorControl     DWORD
	_                  [4]byte
	lpBinaryPathName   LPWSTR
	lpLoadOrderGroup   LPWSTR
	dwTagId            DWORD
	_                  [4]byte
	lpDependencies     LPWSTR
	lpServiceStartName LPWSTR
	lpDisplayName      LPWSTR
} /* winsvc.h:228:11 */

type QUERY_SERVICE_CONFIGW = _QUERY_SERVICE_CONFIGW /* winsvc.h:238:5 */
type LPQUERY_SERVICE_CONFIGW = uintptr              /* winsvc.h:238:27 */

type QUERY_SERVICE_CONFIG = QUERY_SERVICE_CONFIGA     /* winsvc.h:240:3 */
type LPQUERY_SERVICE_CONFIG = LPQUERY_SERVICE_CONFIGA /* winsvc.h:241:3 */

type LPSERVICE_MAIN_FUNCTIONW = uintptr /* winsvc.h:243:16 */
type LPSERVICE_MAIN_FUNCTIONA = uintptr /* winsvc.h:244:16 */

type _SERVICE_TABLE_ENTRYA = struct {
	lpServiceName LPSTR
	lpServiceProc LPSERVICE_MAIN_FUNCTIONA
} /* winsvc.h:248:11 */

type SERVICE_TABLE_ENTRYA = _SERVICE_TABLE_ENTRYA /* winsvc.h:251:5 */
type LPSERVICE_TABLE_ENTRYA = uintptr             /* winsvc.h:251:26 */

type _SERVICE_TABLE_ENTRYW = struct {
	lpServiceName LPWSTR
	lpServiceProc LPSERVICE_MAIN_FUNCTIONW
} /* winsvc.h:253:11 */

type SERVICE_TABLE_ENTRYW = _SERVICE_TABLE_ENTRYW /* winsvc.h:256:5 */
type LPSERVICE_TABLE_ENTRYW = uintptr             /* winsvc.h:256:26 */

type SERVICE_TABLE_ENTRY = SERVICE_TABLE_ENTRYA     /* winsvc.h:258:3 */
type LPSERVICE_TABLE_ENTRY = LPSERVICE_TABLE_ENTRYA /* winsvc.h:259:3 */

type LPHANDLER_FUNCTION = uintptr    /* winsvc.h:261:16 */
type LPHANDLER_FUNCTION_EX = uintptr /* winsvc.h:262:17 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _MODEMDEVCAPS = struct {
	dwActualSize              DWORD
	dwRequiredSize            DWORD
	dwDevSpecificOffset       DWORD
	dwDevSpecificSize         DWORD
	dwModemProviderVersion    DWORD
	dwModemManufacturerOffset DWORD
	dwModemManufacturerSize   DWORD
	dwModemModelOffset        DWORD
	dwModemModelSize          DWORD
	dwModemVersionOffset      DWORD
	dwModemVersionSize        DWORD
	dwDialOptions             DWORD
	dwCallSetupFailTimer      DWORD
	dwInactivityTimeout       DWORD
	dwSpeakerVolume           DWORD
	dwSpeakerMode             DWORD
	dwModemOptions            DWORD
	dwMaxDTERate              DWORD
	dwMaxDCERate              DWORD
	abVariablePortion         [1]BYTE
	_                         [3]byte
} /* mcx.h:9:9 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type MODEMDEVCAPS = _MODEMDEVCAPS /* mcx.h:30:3 */
type PMODEMDEVCAPS = uintptr      /* mcx.h:30:16 */
type LPMODEMDEVCAPS = uintptr     /* mcx.h:30:31 */

type _MODEMSETTINGS = struct {
	dwActualSize             DWORD
	dwRequiredSize           DWORD
	dwDevSpecificOffset      DWORD
	dwDevSpecificSize        DWORD
	dwCallSetupFailTimer     DWORD
	dwInactivityTimeout      DWORD
	dwSpeakerVolume          DWORD
	dwSpeakerMode            DWORD
	dwPreferredModemOptions  DWORD
	dwNegotiatedModemOptions DWORD
	dwNegotiatedDCERate      DWORD
	abVariablePortion        [1]BYTE
	_                        [3]byte
} /* mcx.h:32:9 */

type MODEMSETTINGS = _MODEMSETTINGS /* mcx.h:45:3 */
type PMODEMSETTINGS = uintptr       /* mcx.h:45:17 */
type LPMODEMSETTINGS = uintptr      /* mcx.h:45:33 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type HIMC__ = struct{ unused int32 } /* imm.h:18:3 */

type HIMC = uintptr                   /* imm.h:18:3 */
type HIMCC__ = struct{ unused int32 } /* imm.h:19:3 */

type HIMCC = uintptr /* imm.h:19:3 */

type LPHKL = uintptr  /* imm.h:21:15 */
type LPUINT = uintptr /* imm.h:24:16 */

type tagCOMPOSITIONFORM = struct {
	dwStyle      DWORD
	ptCurrentPos POINT
	rcArea       RECT
} /* imm.h:27:11 */

type COMPOSITIONFORM = tagCOMPOSITIONFORM /* imm.h:31:5 */
type PCOMPOSITIONFORM = uintptr           /* imm.h:31:21 */
type NPCOMPOSITIONFORM = uintptr          /* imm.h:31:39 */
type LPCOMPOSITIONFORM = uintptr          /* imm.h:31:58 */

type tagCANDIDATEFORM = struct {
	dwIndex      DWORD
	dwStyle      DWORD
	ptCurrentPos POINT
	rcArea       RECT
} /* imm.h:33:11 */

type CANDIDATEFORM = tagCANDIDATEFORM /* imm.h:38:5 */
type PCANDIDATEFORM = uintptr         /* imm.h:38:19 */
type NPCANDIDATEFORM = uintptr        /* imm.h:38:35 */
type LPCANDIDATEFORM = uintptr        /* imm.h:38:52 */

type tagCANDIDATELIST = struct {
	dwSize      DWORD
	dwStyle     DWORD
	dwCount     DWORD
	dwSelection DWORD
	dwPageStart DWORD
	dwPageSize  DWORD
	dwOffset    [1]DWORD
} /* imm.h:40:11 */

type CANDIDATELIST = tagCANDIDATELIST /* imm.h:48:5 */
type PCANDIDATELIST = uintptr         /* imm.h:48:19 */
type NPCANDIDATELIST = uintptr        /* imm.h:48:35 */
type LPCANDIDATELIST = uintptr        /* imm.h:48:52 */

type tagREGISTERWORDA = struct {
	lpReading LPSTR
	lpWord    LPSTR
} /* imm.h:50:11 */

type REGISTERWORDA = tagREGISTERWORDA /* imm.h:53:5 */
type PREGISTERWORDA = uintptr         /* imm.h:53:19 */
type NPREGISTERWORDA = uintptr        /* imm.h:53:35 */
type LPREGISTERWORDA = uintptr        /* imm.h:53:52 */

type tagREGISTERWORDW = struct {
	lpReading LPWSTR
	lpWord    LPWSTR
} /* imm.h:55:11 */

type REGISTERWORDW = tagREGISTERWORDW /* imm.h:58:5 */
type PREGISTERWORDW = uintptr         /* imm.h:58:19 */
type NPREGISTERWORDW = uintptr        /* imm.h:58:35 */
type LPREGISTERWORDW = uintptr        /* imm.h:58:52 */

type REGISTERWORD = REGISTERWORDA     /* imm.h:60:3 */
type PREGISTERWORD = PREGISTERWORDA   /* imm.h:61:3 */
type NPREGISTERWORD = NPREGISTERWORDA /* imm.h:62:3 */
type LPREGISTERWORD = LPREGISTERWORDA /* imm.h:63:3 */

type tagRECONVERTSTRING = struct {
	dwSize            DWORD
	dwVersion         DWORD
	dwStrLen          DWORD
	dwStrOffset       DWORD
	dwCompStrLen      DWORD
	dwCompStrOffset   DWORD
	dwTargetStrLen    DWORD
	dwTargetStrOffset DWORD
} /* imm.h:65:11 */

type RECONVERTSTRING = tagRECONVERTSTRING /* imm.h:74:5 */
type PRECONVERTSTRING = uintptr           /* imm.h:74:21 */
type NPRECONVERTSTRING = uintptr          /* imm.h:74:39 */
type LPRECONVERTSTRING = uintptr          /* imm.h:74:58 */

type tagSTYLEBUFA = struct {
	dwStyle       DWORD
	szDescription [32]CHAR
} /* imm.h:78:11 */

type STYLEBUFA = tagSTYLEBUFA /* imm.h:81:5 */
type PSTYLEBUFA = uintptr     /* imm.h:81:15 */
type NPSTYLEBUFA = uintptr    /* imm.h:81:27 */
type LPSTYLEBUFA = uintptr    /* imm.h:81:40 */

type tagSTYLEBUFW = struct {
	dwStyle       DWORD
	szDescription [32]WCHAR
} /* imm.h:83:11 */

type STYLEBUFW = tagSTYLEBUFW /* imm.h:86:5 */
type PSTYLEBUFW = uintptr     /* imm.h:86:15 */
type NPSTYLEBUFW = uintptr    /* imm.h:86:27 */
type LPSTYLEBUFW = uintptr    /* imm.h:86:40 */

type STYLEBUF = STYLEBUFA     /* imm.h:88:3 */
type PSTYLEBUF = PSTYLEBUFA   /* imm.h:89:3 */
type NPSTYLEBUF = NPSTYLEBUFA /* imm.h:90:3 */
type LPSTYLEBUF = LPSTYLEBUFA /* imm.h:91:3 */

type tagIMEMENUITEMINFOA = struct {
	cbSize        UINT
	fType         UINT
	fState        UINT
	wID           UINT
	hbmpChecked   HBITMAP
	hbmpUnchecked HBITMAP
	dwItemData    DWORD
	szString      [80]CHAR
	_             [4]byte
	hbmpItem      HBITMAP
} /* imm.h:95:11 */

type IMEMENUITEMINFOA = tagIMEMENUITEMINFOA /* imm.h:105:5 */
type PIMEMENUITEMINFOA = uintptr            /* imm.h:105:22 */
type NPIMEMENUITEMINFOA = uintptr           /* imm.h:105:41 */
type LPIMEMENUITEMINFOA = uintptr           /* imm.h:105:61 */

type tagIMEMENUITEMINFOW = struct {
	cbSize        UINT
	fType         UINT
	fState        UINT
	wID           UINT
	hbmpChecked   HBITMAP
	hbmpUnchecked HBITMAP
	dwItemData    DWORD
	szString      [80]WCHAR
	_             [4]byte
	hbmpItem      HBITMAP
} /* imm.h:107:11 */

type IMEMENUITEMINFOW = tagIMEMENUITEMINFOW /* imm.h:117:5 */
type PIMEMENUITEMINFOW = uintptr            /* imm.h:117:22 */
type NPIMEMENUITEMINFOW = uintptr           /* imm.h:117:41 */
type LPIMEMENUITEMINFOW = uintptr           /* imm.h:117:61 */

type IMEMENUITEMINFO = IMEMENUITEMINFOA     /* imm.h:119:3 */
type PIMEMENUITEMINFO = PIMEMENUITEMINFOA   /* imm.h:120:3 */
type NPIMEMENUITEMINFO = NPIMEMENUITEMINFOA /* imm.h:121:3 */
type LPIMEMENUITEMINFO = LPIMEMENUITEMINFOA /* imm.h:122:3 */

type tagIMECHARPOSITION = struct {
	dwSize      DWORD
	dwCharPos   DWORD
	pt          POINT
	cLineHeight UINT
	rcDocument  RECT
} /* imm.h:124:11 */

type IMECHARPOSITION = tagIMECHARPOSITION /* imm.h:130:5 */
type PIMECHARPOSITION = uintptr           /* imm.h:130:21 */
type NPIMECHARPOSITION = uintptr          /* imm.h:130:39 */
type LPIMECHARPOSITION = uintptr          /* imm.h:130:58 */

type IMCENUMPROC = uintptr /* imm.h:132:19 */

type REGISTERWORDENUMPROCA = uintptr /* imm.h:185:15 */
type REGISTERWORDENUMPROCW = uintptr /* imm.h:186:15 */

// Restore old value of interface for Obj-C.  See above.

// Compatibility to older visual studio / windows platform SDK

// Ask for the winsock function typedefs, also.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// undefine macros from winsock.h
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type timeval = struct {
	tv_sec  int32
	tv_usec int32
} /* _timeval.h:10:1 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure __LONG32 is defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type u_char = uint8   /* _bsd_types.h:13:23 */
type u_short = uint16 /* _bsd_types.h:14:24 */
type u_int = uint32   /* _bsd_types.h:15:22 */
type u_long = uint32  /* _bsd_types.h:18:23 */

type u_int64 = uint64 /* _bsd_types.h:25:28 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type in_addr = struct {
	S_un struct {
		_      [0]uint32
		S_un_b struct {
			s_b1 u_char
			s_b2 u_char
			s_b3 u_char
			s_b4 u_char
		}
	}
} /* inaddr.h:17:9 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type IN_ADDR = in_addr   /* inaddr.h:23:3 */
type PIN_ADDR = uintptr  /* inaddr.h:23:12 */
type LPIN_ADDR = uintptr /* inaddr.h:23:23 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type SOCKET = UINT_PTR /* _socket_types.h:11:18 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// fd_set may have been defined by the newlib <sys/types.h>
// if  __USE_W32_SOCKETS not defined.

type fd_set1 = struct {
	fd_count u_int
	_        [4]byte
	fd_array [64]SOCKET
} /* _fd_types.h:21:9 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// fd_set may have been defined by the newlib <sys/types.h>
// if  __USE_W32_SOCKETS not defined.

type fd_set = fd_set1 /* _fd_types.h:25:3 */

// FD_SET is differently implement in winsock.h and winsock2.h.  If we
//    encounter that we are going to redefine it, and if the original definition
//    is from winsock.h, make sure to undef FD_SET so it can be redefined to
//    the winsock2.h version.

type FD_SET = fd_set1   /* _fd_types.h:104:23 */
type PFD_SET = uintptr  /* _fd_types.h:105:23 */
type LPFD_SET = uintptr /* _fd_types.h:106:23 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type hostent = struct {
	h_name      uintptr
	h_aliases   uintptr
	h_addrtype  int16
	h_length    int16
	_           [4]byte
	h_addr_list uintptr
} /* _ip_types.h:25:1 */

type netent = struct {
	n_name     uintptr
	n_aliases  uintptr
	n_addrtype int16
	_          [2]byte
	n_net      u_long
} /* _ip_types.h:33:1 */

type servent = struct {
	s_name    uintptr
	s_aliases uintptr
	s_proto   uintptr
	s_port    int16
	_         [6]byte
} /* _ip_types.h:40:1 */

type protoent = struct {
	p_name    uintptr
	p_aliases uintptr
	p_proto   int16
	_         [6]byte
} /* _ip_types.h:52:1 */

type sockproto = struct {
	sp_family   u_short
	sp_protocol u_short
} /* _ip_types.h:58:1 */

type linger = struct {
	l_onoff  u_short
	l_linger u_short
} /* _ip_types.h:63:1 */

type sockaddr = struct {
	sa_family u_short
	sa_data   [14]int8
} /* _ip_types.h:70:1 */

type sockaddr_in = struct {
	sin_family int16
	sin_port   u_short
	sin_addr   struct {
		S_un struct {
			_      [0]uint32
			S_un_b struct {
				s_b1 u_char
				s_b2 u_char
				s_b3 u_char
				s_b4 u_char
			}
		}
	}
	sin_zero [8]int8
} /* _ip_types.h:75:1 */

type HOSTENT = hostent   /* _ip_types.h:82:25 */
type PHOSTENT = uintptr  /* _ip_types.h:83:25 */
type LPHOSTENT = uintptr /* _ip_types.h:84:25 */

type SERVENT = servent   /* _ip_types.h:86:25 */
type PSERVENT = uintptr  /* _ip_types.h:87:25 */
type LPSERVENT = uintptr /* _ip_types.h:88:25 */

type PROTOENT = protoent  /* _ip_types.h:90:26 */
type PPROTOENT = uintptr  /* _ip_types.h:91:26 */
type LPPROTOENT = uintptr /* _ip_types.h:92:26 */

type SOCKADDR = sockaddr  /* _ip_types.h:94:26 */
type PSOCKADDR = uintptr  /* _ip_types.h:95:26 */
type LPSOCKADDR = uintptr /* _ip_types.h:96:26 */

type SOCKADDR_IN = sockaddr_in /* _ip_types.h:98:28 */
type PSOCKADDR_IN = uintptr    /* _ip_types.h:99:28 */
type LPSOCKADDR_IN = uintptr   /* _ip_types.h:100:28 */

type LINGER = linger    /* _ip_types.h:102:24 */
type PLINGER = uintptr  /* _ip_types.h:103:24 */
type LPLINGER = uintptr /* _ip_types.h:104:24 */

type TIMEVAL = timeval   /* _ip_types.h:115:25 */
type PTIMEVAL = uintptr  /* _ip_types.h:116:25 */
type LPTIMEVAL = uintptr /* _ip_types.h:117:25 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type WSAData = struct {
	wVersion       WORD
	wHighVersion   WORD
	iMaxSockets    uint16
	iMaxUdpDg      uint16
	lpVendorInfo   uintptr
	szDescription  [257]int8
	szSystemStatus [129]int8
	_              [6]byte
} /* _wsadata.h:13:9 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type WSADATA = WSAData   /* _wsadata.h:29:3 */
type LPWSADATA = uintptr /* _wsadata.h:29:12 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// FIXME FIXME FIXME FIXME FIXME: Much more data need moving here.
// This holds only SCOPE_LEVEL and SCOPE_ID so that compilations
// do not fail.

type SCOPE_LEVEL = uint32 /* ws2def.h:26:3 */

type _SCOPE_ID = struct {
	__0 struct {
		__0 struct {
			_    [0]uint32
			Zone uint32 /* ULONG Zone: 28, ULONG Level: 4 */
		}
	}
} /* ws2def.h:28:9 */

type SCOPE_ID = _SCOPE_ID /* ws2def.h:36:3 */
type PSCOPE_ID = uintptr  /* ws2def.h:36:13 */

type sockaddr_storage = struct {
	ss_family  int16
	__ss_pad1  [6]int8
	__ss_align int64
	__ss_pad2  [112]int8
} /* winsock2.h:269:3 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type LPWSAOVERLAPPED = uintptr /* winsock2.h:369:30 */

type _WSABUF = struct {
	len u_long
	_   [4]byte
	buf uintptr
} /* winsock2.h:386:11 */

type WSABUF = _WSABUF   /* winsock2.h:389:5 */
type LPWSABUF = uintptr /* winsock2.h:389:12 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type SERVICETYPE = ULONG /* qos.h:9:15 */

type _flowspec = struct {
	TokenRate          ULONG
	TokenBucketSize    ULONG
	PeakBandwidth      ULONG
	Latency            ULONG
	DelayVariation     ULONG
	ServiceType        SERVICETYPE
	MaxSduSize         ULONG
	MinimumPolicedSize ULONG
} /* qos.h:32:11 */

type FLOWSPEC = _flowspec /* qos.h:41:5 */
type PFLOWSPEC = uintptr  /* qos.h:41:14 */
type LPFLOWSPEC = uintptr /* qos.h:41:25 */

type _QOS_OBJECT_HDR = struct {
	ObjectType   ULONG
	ObjectLength ULONG
} /* qos.h:46:11 */

type QOS_OBJECT_HDR = _QOS_OBJECT_HDR /* qos.h:49:5 */
type LPQOS_OBJECT_HDR = uintptr       /* qos.h:49:21 */

type _QOS_SD_MODE = struct {
	ObjectHdr        QOS_OBJECT_HDR
	ShapeDiscardMode ULONG
} /* qos.h:57:11 */

type QOS_SD_MODE = _QOS_SD_MODE /* qos.h:60:5 */
type LPQOS_SD_MODE = uintptr    /* qos.h:60:18 */

type _QOS_SHAPING_RATE = struct {
	ObjectHdr   QOS_OBJECT_HDR
	ShapingRate ULONG
} /* qos.h:67:11 */

type QOS_SHAPING_RATE = _QOS_SHAPING_RATE /* qos.h:70:5 */
type LPQOS_SHAPING_RATE = uintptr         /* qos.h:70:23 */

type _QualityOfService = struct {
	SendingFlowspec   FLOWSPEC
	ReceivingFlowspec FLOWSPEC
	ProviderSpecific  WSABUF
} /* winsock2.h:393:11 */

type QOS = _QualityOfService /* winsock2.h:397:5 */
type LPQOS = uintptr         /* winsock2.h:397:9 */

type GROUP = uint32 /* winsock2.h:407:22 */

type _WSANETWORKEVENTS = struct {
	lNetworkEvents int32
	iErrorCode     [10]int32
} /* winsock2.h:412:11 */

type WSANETWORKEVENTS = _WSANETWORKEVENTS /* winsock2.h:415:5 */
type LPWSANETWORKEVENTS = uintptr         /* winsock2.h:415:22 */

type _WSAPROTOCOLCHAIN = struct {
	ChainLen     int32
	ChainEntries [7]DWORD
} /* winsock2.h:426:11 */

type WSAPROTOCOLCHAIN = _WSAPROTOCOLCHAIN /* winsock2.h:430:5 */
type LPWSAPROTOCOLCHAIN = uintptr         /* winsock2.h:430:22 */

type _WSAPROTOCOL_INFOA = struct {
	dwServiceFlags1    DWORD
	dwServiceFlags2    DWORD
	dwServiceFlags3    DWORD
	dwServiceFlags4    DWORD
	dwProviderFlags    DWORD
	ProviderId         GUID
	dwCatalogEntryId   DWORD
	ProtocolChain      WSAPROTOCOLCHAIN
	iVersion           int32
	iAddressFamily     int32
	iMaxSockAddr       int32
	iMinSockAddr       int32
	iSocketType        int32
	iProtocol          int32
	iProtocolMaxOffset int32
	iNetworkByteOrder  int32
	iSecurityScheme    int32
	dwMessageSize      DWORD
	dwProviderReserved DWORD
	szProtocol         [256]CHAR
} /* winsock2.h:434:11 */

type WSAPROTOCOL_INFOA = _WSAPROTOCOL_INFOA /* winsock2.h:455:5 */
type LPWSAPROTOCOL_INFOA = uintptr          /* winsock2.h:455:23 */

type _WSAPROTOCOL_INFOW = struct {
	dwServiceFlags1    DWORD
	dwServiceFlags2    DWORD
	dwServiceFlags3    DWORD
	dwServiceFlags4    DWORD
	dwProviderFlags    DWORD
	ProviderId         GUID
	dwCatalogEntryId   DWORD
	ProtocolChain      WSAPROTOCOLCHAIN
	iVersion           int32
	iAddressFamily     int32
	iMaxSockAddr       int32
	iMinSockAddr       int32
	iSocketType        int32
	iProtocol          int32
	iProtocolMaxOffset int32
	iNetworkByteOrder  int32
	iSecurityScheme    int32
	dwMessageSize      DWORD
	dwProviderReserved DWORD
	szProtocol         [256]WCHAR
} /* winsock2.h:457:11 */

type WSAPROTOCOL_INFOW = _WSAPROTOCOL_INFOW /* winsock2.h:478:5 */
type LPWSAPROTOCOL_INFOW = uintptr          /* winsock2.h:478:23 */

type WSAPROTOCOL_INFO = WSAPROTOCOL_INFOA     /* winsock2.h:480:3 */
type LPWSAPROTOCOL_INFO = LPWSAPROTOCOL_INFOA /* winsock2.h:481:3 */

type LPCONDITIONPROC = uintptr                    /* winsock2.h:562:15 */
type LPWSAOVERLAPPED_COMPLETION_ROUTINE = uintptr /* winsock2.h:563:16 */

type WSACOMPLETIONTYPE = uint32    /* winsock2.h:573:5 */
type PWSACOMPLETIONTYPE = uintptr  /* winsock2.h:573:23 */
type LPWSACOMPLETIONTYPE = uintptr /* winsock2.h:573:43 */

type _WSACOMPLETION = struct {
	Type       WSACOMPLETIONTYPE
	_          [4]byte
	Parameters struct {
		WindowMessage struct {
			hWnd    HWND
			uMsg    UINT
			_       [4]byte
			context WPARAM
		}
	}
} /* winsock2.h:575:11 */

type WSACOMPLETION = _WSACOMPLETION /* winsock2.h:596:5 */
type PWSACOMPLETION = uintptr       /* winsock2.h:596:19 */
type LPWSACOMPLETION = uintptr      /* winsock2.h:596:35 */

type SOCKADDR_STORAGE = sockaddr_storage /* winsock2.h:601:35 */
type PSOCKADDR_STORAGE = uintptr         /* winsock2.h:602:35 */
type LPSOCKADDR_STORAGE = uintptr        /* winsock2.h:603:35 */
type ADDRESS_FAMILY = u_short            /* winsock2.h:604:19 */

type _BLOB = struct {
	cbSize    ULONG
	_         [4]byte
	pBlobData uintptr
} /* winsock2.h:610:11 */

type BLOB = _BLOB     /* winsock2.h:613:5 */
type LPBLOB = uintptr /* winsock2.h:613:10 */

type _SOCKET_ADDRESS = struct {
	lpSockaddr      LPSOCKADDR
	iSockaddrLength INT
	_               [4]byte
} /* winsock2.h:686:11 */

type SOCKET_ADDRESS = _SOCKET_ADDRESS /* winsock2.h:689:5 */
type PSOCKET_ADDRESS = uintptr        /* winsock2.h:689:20 */
type LPSOCKET_ADDRESS = uintptr       /* winsock2.h:689:37 */

type _CSADDR_INFO = struct {
	LocalAddr   SOCKET_ADDRESS
	RemoteAddr  SOCKET_ADDRESS
	iSocketType INT
	iProtocol   INT
} /* winsock2.h:691:11 */

type CSADDR_INFO = _CSADDR_INFO /* winsock2.h:696:5 */
type PCSADDR_INFO = uintptr     /* winsock2.h:696:17 */
type LPCSADDR_INFO = uintptr    /* winsock2.h:696:31 */

type _SOCKET_ADDRESS_LIST = struct {
	iAddressCount INT
	_             [4]byte
	Address       [1]SOCKET_ADDRESS
} /* winsock2.h:699:11 */

type SOCKET_ADDRESS_LIST = _SOCKET_ADDRESS_LIST /* winsock2.h:702:5 */
type PSOCKET_ADDRESS_LIST = uintptr             /* winsock2.h:702:25 */
type LPSOCKET_ADDRESS_LIST = uintptr            /* winsock2.h:702:47 */

type _AFPROTOCOLS = struct {
	iAddressFamily INT
	iProtocol      INT
} /* winsock2.h:704:11 */

type AFPROTOCOLS = _AFPROTOCOLS /* winsock2.h:707:5 */
type PAFPROTOCOLS = uintptr     /* winsock2.h:707:17 */
type LPAFPROTOCOLS = uintptr    /* winsock2.h:707:31 */

type WSAECOMPARATOR = uint32    /* winsock2.h:712:5 */
type PWSAECOMPARATOR = uintptr  /* winsock2.h:712:20 */
type LPWSAECOMPARATOR = uintptr /* winsock2.h:712:37 */

type _WSAVersion = struct {
	dwVersion DWORD
	ecHow     WSAECOMPARATOR
} /* winsock2.h:714:11 */

type WSAVERSION = _WSAVersion /* winsock2.h:717:5 */
type PWSAVERSION = uintptr    /* winsock2.h:717:16 */
type LPWSAVERSION = uintptr   /* winsock2.h:717:29 */

type _WSAQuerySetA = struct {
	dwSize                  DWORD
	_                       [4]byte
	lpszServiceInstanceName LPSTR
	lpServiceClassId        LPGUID
	lpVersion               LPWSAVERSION
	lpszComment             LPSTR
	dwNameSpace             DWORD
	_                       [4]byte
	lpNSProviderId          LPGUID
	lpszContext             LPSTR
	dwNumberOfProtocols     DWORD
	_                       [4]byte
	lpafpProtocols          LPAFPROTOCOLS
	lpszQueryString         LPSTR
	dwNumberOfCsAddrs       DWORD
	_                       [4]byte
	lpcsaBuffer             LPCSADDR_INFO
	dwOutputFlags           DWORD
	_                       [4]byte
	lpBlob                  LPBLOB
} /* winsock2.h:719:11 */

type WSAQUERYSETA = _WSAQuerySetA /* winsock2.h:735:5 */
type PWSAQUERYSETA = uintptr      /* winsock2.h:735:18 */
type LPWSAQUERYSETA = uintptr     /* winsock2.h:735:33 */

type _WSAQuerySetW = struct {
	dwSize                  DWORD
	_                       [4]byte
	lpszServiceInstanceName LPWSTR
	lpServiceClassId        LPGUID
	lpVersion               LPWSAVERSION
	lpszComment             LPWSTR
	dwNameSpace             DWORD
	_                       [4]byte
	lpNSProviderId          LPGUID
	lpszContext             LPWSTR
	dwNumberOfProtocols     DWORD
	_                       [4]byte
	lpafpProtocols          LPAFPROTOCOLS
	lpszQueryString         LPWSTR
	dwNumberOfCsAddrs       DWORD
	_                       [4]byte
	lpcsaBuffer             LPCSADDR_INFO
	dwOutputFlags           DWORD
	_                       [4]byte
	lpBlob                  LPBLOB
} /* winsock2.h:737:11 */

type WSAQUERYSETW = _WSAQuerySetW /* winsock2.h:753:5 */
type PWSAQUERYSETW = uintptr      /* winsock2.h:753:18 */
type LPWSAQUERYSETW = uintptr     /* winsock2.h:753:33 */

type WSAQUERYSET = WSAQUERYSETA     /* winsock2.h:755:3 */
type PWSAQUERYSET = PWSAQUERYSETA   /* winsock2.h:756:3 */
type LPWSAQUERYSET = LPWSAQUERYSETA /* winsock2.h:757:3 */

type WSAESETSERVICEOP = uint32    /* winsock2.h:803:5 */
type PWSAESETSERVICEOP = uintptr  /* winsock2.h:803:22 */
type LPWSAESETSERVICEOP = uintptr /* winsock2.h:803:41 */

type _WSANSClassInfoA = struct {
	lpszName    LPSTR
	dwNameSpace DWORD
	dwValueType DWORD
	dwValueSize DWORD
	_           [4]byte
	lpValue     LPVOID
} /* winsock2.h:805:11 */

type WSANSCLASSINFOA = _WSANSClassInfoA /* winsock2.h:811:5 */
type PWSANSCLASSINFOA = uintptr         /* winsock2.h:811:21 */
type LPWSANSCLASSINFOA = uintptr        /* winsock2.h:811:39 */

type _WSANSClassInfoW = struct {
	lpszName    LPWSTR
	dwNameSpace DWORD
	dwValueType DWORD
	dwValueSize DWORD
	_           [4]byte
	lpValue     LPVOID
} /* winsock2.h:813:11 */

type WSANSCLASSINFOW = _WSANSClassInfoW /* winsock2.h:819:5 */
type PWSANSCLASSINFOW = uintptr         /* winsock2.h:819:21 */
type LPWSANSCLASSINFOW = uintptr        /* winsock2.h:819:39 */

type WSANSCLASSINFO = WSANSCLASSINFOA     /* winsock2.h:821:3 */
type PWSANSCLASSINFO = PWSANSCLASSINFOA   /* winsock2.h:822:3 */
type LPWSANSCLASSINFO = LPWSANSCLASSINFOA /* winsock2.h:823:3 */

type _WSAServiceClassInfoA = struct {
	lpServiceClassId     LPGUID
	lpszServiceClassName LPSTR
	dwCount              DWORD
	_                    [4]byte
	lpClassInfos         LPWSANSCLASSINFOA
} /* winsock2.h:825:11 */

type WSASERVICECLASSINFOA = _WSAServiceClassInfoA /* winsock2.h:830:5 */
type PWSASERVICECLASSINFOA = uintptr              /* winsock2.h:830:26 */
type LPWSASERVICECLASSINFOA = uintptr             /* winsock2.h:830:49 */

type _WSAServiceClassInfoW = struct {
	lpServiceClassId     LPGUID
	lpszServiceClassName LPWSTR
	dwCount              DWORD
	_                    [4]byte
	lpClassInfos         LPWSANSCLASSINFOW
} /* winsock2.h:832:11 */

type WSASERVICECLASSINFOW = _WSAServiceClassInfoW /* winsock2.h:837:5 */
type PWSASERVICECLASSINFOW = uintptr              /* winsock2.h:837:26 */
type LPWSASERVICECLASSINFOW = uintptr             /* winsock2.h:837:49 */

type WSASERVICECLASSINFO = WSASERVICECLASSINFOA     /* winsock2.h:839:3 */
type PWSASERVICECLASSINFO = PWSASERVICECLASSINFOA   /* winsock2.h:840:3 */
type LPWSASERVICECLASSINFO = LPWSASERVICECLASSINFOA /* winsock2.h:841:3 */

type _WSANAMESPACE_INFOA = struct {
	NSProviderId   GUID
	dwNameSpace    DWORD
	fActive        WINBOOL
	dwVersion      DWORD
	_              [4]byte
	lpszIdentifier LPSTR
} /* winsock2.h:843:11 */

type WSANAMESPACE_INFOA = _WSANAMESPACE_INFOA /* winsock2.h:849:5 */
type PWSANAMESPACE_INFOA = uintptr            /* winsock2.h:849:24 */
type LPWSANAMESPACE_INFOA = uintptr           /* winsock2.h:849:45 */

type _WSANAMESPACE_INFOW = struct {
	NSProviderId   GUID
	dwNameSpace    DWORD
	fActive        WINBOOL
	dwVersion      DWORD
	_              [4]byte
	lpszIdentifier LPWSTR
} /* winsock2.h:851:11 */

type WSANAMESPACE_INFOW = _WSANAMESPACE_INFOW /* winsock2.h:857:5 */
type PWSANAMESPACE_INFOW = uintptr            /* winsock2.h:857:24 */
type LPWSANAMESPACE_INFOW = uintptr           /* winsock2.h:857:45 */

type WSANAMESPACE_INFO = WSANAMESPACE_INFOA     /* winsock2.h:859:3 */
type PWSANAMESPACE_INFO = PWSANAMESPACE_INFOA   /* winsock2.h:860:3 */
type LPWSANAMESPACE_INFO = LPWSANAMESPACE_INFOA /* winsock2.h:861:3 */

// FIXME: WSAMSG originally lived in mswsock.h,
// newer SDKs moved it into a new ws2def.h. for
// now we keep it here.
type _WSAMSG = struct {
	name          LPSOCKADDR
	namelen       INT
	_             [4]byte
	lpBuffers     LPWSABUF
	dwBufferCount DWORD
	_             [4]byte
	Control       WSABUF
	dwFlags       DWORD
	_             [4]byte
} /* winsock2.h:866:11 */

// FIXME: WSAMSG originally lived in mswsock.h,
// newer SDKs moved it into a new ws2def.h. for
// now we keep it here.
type WSAMSG = _WSAMSG   /* winsock2.h:873:5 */
type PWSAMSG = uintptr  /* winsock2.h:873:12 */
type LPWSAMSG = uintptr /* winsock2.h:873:21 */

type LPFN_ACCEPT = uintptr                           /* winsock2.h:889:18 */
type LPFN_BIND = uintptr                             /* winsock2.h:890:15 */
type LPFN_CLOSESOCKET = uintptr                      /* winsock2.h:891:15 */
type LPFN_CONNECT = uintptr                          /* winsock2.h:892:15 */
type LPFN_IOCTLSOCKET = uintptr                      /* winsock2.h:893:15 */
type LPFN_GETPEERNAME = uintptr                      /* winsock2.h:894:15 */
type LPFN_GETSOCKNAME = uintptr                      /* winsock2.h:895:15 */
type LPFN_GETSOCKOPT = uintptr                       /* winsock2.h:896:15 */
type LPFN_HTONL = uintptr                            /* winsock2.h:897:18 */
type LPFN_HTONS = uintptr                            /* winsock2.h:898:19 */
type LPFN_INET_ADDR = uintptr                        /* winsock2.h:899:29 */
type LPFN_INET_NTOA = uintptr                        /* winsock2.h:900:16 */
type LPFN_LISTEN = uintptr                           /* winsock2.h:901:15 */
type LPFN_NTOHL = uintptr                            /* winsock2.h:902:18 */
type LPFN_NTOHS = uintptr                            /* winsock2.h:903:19 */
type LPFN_RECV = uintptr                             /* winsock2.h:904:15 */
type LPFN_RECVFROM = uintptr                         /* winsock2.h:905:15 */
type LPFN_SELECT = uintptr                           /* winsock2.h:906:15 */
type LPFN_SEND = uintptr                             /* winsock2.h:907:15 */
type LPFN_SENDTO = uintptr                           /* winsock2.h:908:15 */
type LPFN_SETSOCKOPT = uintptr                       /* winsock2.h:909:15 */
type LPFN_SHUTDOWN = uintptr                         /* winsock2.h:910:15 */
type LPFN_SOCKET = uintptr                           /* winsock2.h:911:18 */
type LPFN_GETHOSTBYADDR = uintptr                    /* winsock2.h:912:26 */
type LPFN_GETHOSTBYNAME = uintptr                    /* winsock2.h:913:26 */
type LPFN_GETHOSTNAME = uintptr                      /* winsock2.h:914:15 */
type LPFN_GETSERVBYPORT = uintptr                    /* winsock2.h:915:26 */
type LPFN_GETSERVBYNAME = uintptr                    /* winsock2.h:916:26 */
type LPFN_GETPROTOBYNUMBER = uintptr                 /* winsock2.h:917:27 */
type LPFN_GETPROTOBYNAME = uintptr                   /* winsock2.h:918:27 */
type LPFN_WSASTARTUP = uintptr                       /* winsock2.h:919:15 */
type LPFN_WSACLEANUP = uintptr                       /* winsock2.h:920:15 */
type LPFN_WSASETLASTERROR = uintptr                  /* winsock2.h:921:16 */
type LPFN_WSAGETLASTERROR = uintptr                  /* winsock2.h:922:15 */
type LPFN_WSAISBLOCKING = uintptr                    /* winsock2.h:923:19 */
type LPFN_WSAUNHOOKBLOCKINGHOOK = uintptr            /* winsock2.h:924:15 */
type LPFN_WSASETBLOCKINGHOOK = uintptr               /* winsock2.h:925:19 */
type LPFN_WSACANCELBLOCKINGCALL = uintptr            /* winsock2.h:926:15 */
type LPFN_WSAASYNCGETSERVBYNAME = uintptr            /* winsock2.h:927:18 */
type LPFN_WSAASYNCGETSERVBYPORT = uintptr            /* winsock2.h:928:18 */
type LPFN_WSAASYNCGETPROTOBYNAME = uintptr           /* winsock2.h:929:18 */
type LPFN_WSAASYNCGETPROTOBYNUMBER = uintptr         /* winsock2.h:930:18 */
type LPFN_WSAASYNCGETHOSTBYNAME = uintptr            /* winsock2.h:931:18 */
type LPFN_WSAASYNCGETHOSTBYADDR = uintptr            /* winsock2.h:932:18 */
type LPFN_WSACANCELASYNCREQUEST = uintptr            /* winsock2.h:933:15 */
type LPFN_WSAASYNCSELECT = uintptr                   /* winsock2.h:934:15 */
type LPFN_WSAACCEPT = uintptr                        /* winsock2.h:935:18 */
type LPFN_WSACLOSEEVENT = uintptr                    /* winsock2.h:936:19 */
type LPFN_WSACONNECT = uintptr                       /* winsock2.h:937:15 */
type LPFN_WSACREATEEVENT = uintptr                   /* winsock2.h:938:20 */
type LPFN_WSADUPLICATESOCKETA = uintptr              /* winsock2.h:939:15 */
type LPFN_WSADUPLICATESOCKETW = uintptr              /* winsock2.h:940:15 */
type LPFN_WSAENUMNETWORKEVENTS = uintptr             /* winsock2.h:941:15 */
type LPFN_WSAENUMPROTOCOLSA = uintptr                /* winsock2.h:942:15 */
type LPFN_WSAENUMPROTOCOLSW = uintptr                /* winsock2.h:943:15 */
type LPFN_WSAEVENTSELECT = uintptr                   /* winsock2.h:944:15 */
type LPFN_WSAGETOVERLAPPEDRESULT = uintptr           /* winsock2.h:945:19 */
type LPFN_WSAGETQOSBYNAME = uintptr                  /* winsock2.h:946:19 */
type LPFN_WSAHTONL = uintptr                         /* winsock2.h:947:15 */
type LPFN_WSAHTONS = uintptr                         /* winsock2.h:948:15 */
type LPFN_WSAIOCTL = uintptr                         /* winsock2.h:949:15 */
type LPFN_WSAJOINLEAF = uintptr                      /* winsock2.h:950:18 */
type LPFN_WSANTOHL = uintptr                         /* winsock2.h:951:15 */
type LPFN_WSANTOHS = uintptr                         /* winsock2.h:952:15 */
type LPFN_WSARECV = uintptr                          /* winsock2.h:953:15 */
type LPFN_WSARECVDISCONNECT = uintptr                /* winsock2.h:954:15 */
type LPFN_WSARECVFROM = uintptr                      /* winsock2.h:955:15 */
type LPFN_WSARESETEVENT = uintptr                    /* winsock2.h:956:19 */
type LPFN_WSASEND = uintptr                          /* winsock2.h:957:15 */
type LPFN_WSASENDDISCONNECT = uintptr                /* winsock2.h:958:15 */
type LPFN_WSASENDTO = uintptr                        /* winsock2.h:959:15 */
type LPFN_WSASETEVENT = uintptr                      /* winsock2.h:960:19 */
type LPFN_WSASOCKETA = uintptr                       /* winsock2.h:961:18 */
type LPFN_WSASOCKETW = uintptr                       /* winsock2.h:962:18 */
type LPFN_WSAWAITFORMULTIPLEEVENTS = uintptr         /* winsock2.h:963:17 */
type LPFN_WSAADDRESSTOSTRINGA = uintptr              /* winsock2.h:964:15 */
type LPFN_WSAADDRESSTOSTRINGW = uintptr              /* winsock2.h:965:15 */
type LPFN_WSASTRINGTOADDRESSA = uintptr              /* winsock2.h:966:15 */
type LPFN_WSASTRINGTOADDRESSW = uintptr              /* winsock2.h:967:15 */
type LPFN_WSALOOKUPSERVICEBEGINA = uintptr           /* winsock2.h:968:15 */
type LPFN_WSALOOKUPSERVICEBEGINW = uintptr           /* winsock2.h:969:15 */
type LPFN_WSALOOKUPSERVICENEXTA = uintptr            /* winsock2.h:970:15 */
type LPFN_WSALOOKUPSERVICENEXTW = uintptr            /* winsock2.h:971:15 */
type LPFN_WSANSPIOCTL = uintptr                      /* winsock2.h:972:15 */
type LPFN_WSALOOKUPSERVICEEND = uintptr              /* winsock2.h:973:15 */
type LPFN_WSAINSTALLSERVICECLASSA = uintptr          /* winsock2.h:974:15 */
type LPFN_WSAINSTALLSERVICECLASSW = uintptr          /* winsock2.h:975:15 */
type LPFN_WSAREMOVESERVICECLASS = uintptr            /* winsock2.h:976:15 */
type LPFN_WSAGETSERVICECLASSINFOA = uintptr          /* winsock2.h:977:15 */
type LPFN_WSAGETSERVICECLASSINFOW = uintptr          /* winsock2.h:978:15 */
type LPFN_WSAENUMNAMESPACEPROVIDERSA = uintptr       /* winsock2.h:979:15 */
type LPFN_WSAENUMNAMESPACEPROVIDERSW = uintptr       /* winsock2.h:980:15 */
type LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA = uintptr /* winsock2.h:981:15 */
type LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW = uintptr /* winsock2.h:982:15 */
type LPFN_WSASETSERVICEA = uintptr                   /* winsock2.h:983:15 */
type LPFN_WSASETSERVICEW = uintptr                   /* winsock2.h:984:15 */
type LPFN_WSAPROVIDERCONFIGCHANGE = uintptr          /* winsock2.h:985:15 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type in6_addr = struct {
	u struct {
		_    [0]uint16
		Byte [16]u_char
	}
} /* in6addr.h:17:9 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type IN6_ADDR = in6_addr  /* in6addr.h:25:3 */
type PIN6_ADDR = uintptr  /* in6addr.h:25:13 */
type LPIN6_ADDR = uintptr /* in6addr.h:25:25 */

type ipv6_mreq = struct {
	ipv6mr_multiaddr struct {
		u struct {
			_    [0]uint16
			Byte [16]u_char
		}
	}
	ipv6mr_interface uint32
} /* ws2ipdef.h:23:9 */

type IPV6_MREQ = ipv6_mreq /* ws2ipdef.h:26:3 */

type sockaddr_in6_old = struct {
	sin6_family   int16
	sin6_port     u_short
	sin6_flowinfo u_long
	sin6_addr     struct {
		u struct {
			_    [0]uint16
			Byte [16]u_char
		}
	}
} /* ws2ipdef.h:28:1 */

type sockaddr_gen1 = struct {
	_       [0]uint32
	Address struct {
		sa_family u_short
		sa_data   [14]int8
	}
	_ [8]byte
} /* ws2ipdef.h:35:9 */

type sockaddr_gen = sockaddr_gen1 /* ws2ipdef.h:39:3 */

type sockaddr_in6 = struct {
	sin6_family   int16
	sin6_port     u_short
	sin6_flowinfo u_long
	sin6_addr     struct {
		u struct {
			_    [0]uint16
			Byte [16]u_char
		}
	}
	__24 struct{ sin6_scope_id u_long }
} /* ws2ipdef.h:41:1 */

type SOCKADDR_IN6 = sockaddr_in6 /* ws2ipdef.h:52:29 */
type PSOCKADDR_IN6 = uintptr     /* ws2ipdef.h:53:29 */
type LPSOCKADDR_IN6 = uintptr    /* ws2ipdef.h:54:29 */

type _INTERFACE_INFO = struct {
	iiFlags            u_long
	iiAddress          sockaddr_gen
	iiBroadcastAddress sockaddr_gen
	iiNetmask          sockaddr_gen
} /* ws2ipdef.h:56:9 */

type INTERFACE_INFO = _INTERFACE_INFO /* ws2ipdef.h:61:3 */
type LPINTERFACE_INFO = uintptr       /* ws2ipdef.h:61:18 */

type MULTICAST_MODE_TYPE = uint32 /* ws2ipdef.h:66:3 */

type _sockaddr_in6_pair = struct {
	SourceAddress      PSOCKADDR_IN6
	DestinationAddress PSOCKADDR_IN6
} /* ws2ipdef.h:68:9 */

type SOCKADDR_IN6_PAIR = _sockaddr_in6_pair /* ws2ipdef.h:71:3 */
type PSOCKADDR_IN6_PAIR = uintptr           /* ws2ipdef.h:71:22 */

type _SOCKADDR_INET = struct {
	Ipv4 SOCKADDR_IN
	_    [12]byte
} /* ws2ipdef.h:73:9 */

type SOCKADDR_INET = _SOCKADDR_INET /* ws2ipdef.h:77:3 */
type PSOCKADDR_INET = uintptr       /* ws2ipdef.h:77:18 */

type group_filter = struct {
	gf_interface ULONG
	_            [4]byte
	gf_group     SOCKADDR_STORAGE
	gf_fmode     MULTICAST_MODE_TYPE
	gf_numsrc    ULONG
	gf_slist     [1]SOCKADDR_STORAGE
} /* ws2ipdef.h:79:9 */

type GROUP_FILTER = group_filter /* ws2ipdef.h:85:3 */
type PGROUP_FILTER = uintptr     /* ws2ipdef.h:85:17 */

type group_req = struct {
	gr_interface ULONG
	_            [4]byte
	gr_group     SOCKADDR_STORAGE
} /* ws2ipdef.h:87:9 */

type GROUP_REQ = group_req /* ws2ipdef.h:90:3 */
type PGROUP_REQ = uintptr  /* ws2ipdef.h:90:14 */

type group_source_req = struct {
	gsr_interface ULONG
	_             [4]byte
	gsr_group     SOCKADDR_STORAGE
	gsr_source    SOCKADDR_STORAGE
} /* ws2ipdef.h:92:9 */

type GROUP_SOURCE_REQ = group_source_req /* ws2ipdef.h:96:3 */
type PGROUP_SOURCE_REQ = uintptr         /* ws2ipdef.h:96:21 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type ip_mreq = struct {
	imr_multiaddr struct {
		S_un struct {
			_      [0]uint32
			S_un_b struct {
				s_b1 u_char
				s_b2 u_char
				s_b3 u_char
				s_b4 u_char
			}
		}
	}
	imr_interface struct {
		S_un struct {
			_      [0]uint32
			S_un_b struct {
				s_b1 u_char
				s_b2 u_char
				s_b3 u_char
				s_b4 u_char
			}
		}
	}
} /* _ip_mreq1.h:12:1 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type ip_mreq_source = struct {
	imr_multiaddr struct {
		S_un struct {
			_      [0]uint32
			S_un_b struct {
				s_b1 u_char
				s_b2 u_char
				s_b3 u_char
				s_b4 u_char
			}
		}
	}
	imr_sourceaddr struct {
		S_un struct {
			_      [0]uint32
			S_un_b struct {
				s_b1 u_char
				s_b2 u_char
				s_b3 u_char
				s_b4 u_char
			}
		}
	}
	imr_interface struct {
		S_un struct {
			_      [0]uint32
			S_un_b struct {
				s_b1 u_char
				s_b2 u_char
				s_b3 u_char
				s_b4 u_char
			}
		}
	}
} /* ws2tcpip.h:22:1 */

type ip_msfilter = struct {
	imsf_multiaddr struct {
		S_un struct {
			_      [0]uint32
			S_un_b struct {
				s_b1 u_char
				s_b2 u_char
				s_b3 u_char
				s_b4 u_char
			}
		}
	}
	imsf_interface struct {
		S_un struct {
			_      [0]uint32
			S_un_b struct {
				s_b1 u_char
				s_b2 u_char
				s_b3 u_char
				s_b4 u_char
			}
		}
	}
	imsf_fmode  u_long
	imsf_numsrc u_long
	imsf_slist  [1]struct {
		S_un struct {
			_      [0]uint32
			S_un_b struct {
				s_b1 u_char
				s_b2 u_char
				s_b3 u_char
				s_b4 u_char
			}
		}
	}
} /* ws2tcpip.h:28:1 */

// Those declarations are mandatory for Open Group Base spec

type _INTERFACE_INFO_EX = struct {
	iiFlags            u_long
	_                  [4]byte
	iiAddress          SOCKET_ADDRESS
	iiBroadcastAddress SOCKET_ADDRESS
	iiNetmask          SOCKET_ADDRESS
} /* ws2tcpip.h:157:9 */

// Those declarations are mandatory for Open Group Base spec

type INTERFACE_INFO_EX = _INTERFACE_INFO_EX /* ws2tcpip.h:162:3 */
type LPINTERFACE_INFO_EX = uintptr          /* ws2tcpip.h:162:21 */

type in_pktinfo = struct {
	ipi_addr    IN_ADDR
	ipi_ifindex UINT
} /* ws2tcpip.h:170:9 */

type IN_PKTINFO = in_pktinfo /* ws2tcpip.h:173:3 */

type in6_pktinfo = struct {
	ipi6_addr    IN6_ADDR
	ipi6_ifindex UINT
} /* ws2tcpip.h:177:9 */

type IN6_PKTINFO = in6_pktinfo /* ws2tcpip.h:180:3 */

type addrinfo = struct {
	ai_flags     int32
	ai_family    int32
	ai_socktype  int32
	ai_protocol  int32
	ai_addrlen   size_t
	ai_canonname uintptr
	ai_addr      uintptr
	ai_next      uintptr
} /* ws2tcpip.h:196:9 */

type ADDRINFOA = addrinfo /* ws2tcpip.h:205:3 */
type PADDRINFOA = uintptr /* ws2tcpip.h:205:13 */

type addrinfoW = struct {
	ai_flags     int32
	ai_family    int32
	ai_socktype  int32
	ai_protocol  int32
	ai_addrlen   size_t
	ai_canonname PWSTR
	ai_addr      uintptr
	ai_next      uintptr
} /* ws2tcpip.h:207:9 */

type ADDRINFOW = addrinfoW /* ws2tcpip.h:216:3 */
type PADDRINFOW = uintptr  /* ws2tcpip.h:216:13 */

type ADDRINFOT = ADDRINFOA /* ws2tcpip.h:218:35 */
type PADDRINFOT = uintptr  /* ws2tcpip.h:218:45 */

type ADDRINFO = ADDRINFOA /* ws2tcpip.h:220:19 */
type LPADDRINFO = uintptr /* ws2tcpip.h:220:28 */

type LPFN_GETADDRINFO = uintptr  /* ws2tcpip.h:254:15 */
type LPFN_GETADDRINFOW = uintptr /* ws2tcpip.h:255:15 */

type LPFN_FREEADDRINFO = uintptr  /* ws2tcpip.h:270:16 */
type LPFN_FREEADDRINFOW = uintptr /* ws2tcpip.h:271:16 */

type socklen_t = int32 /* ws2tcpip.h:278:15 */

type LPFN_GETNAMEINFO = uintptr  /* ws2tcpip.h:288:15 */
type LPFN_GETNAMEINFOW = uintptr /* ws2tcpip.h:289:15 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type tcp_keepalive = struct {
	onoff             u_long
	keepalivetime     u_long
	keepaliveinterval u_long
} /* mstcpip.h:18:1 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the Wine project.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _iobuf = struct {
	_ptr      uintptr
	_cnt      int32
	_         [4]byte
	_base     uintptr
	_flag     int32
	_file     int32
	_charbuf  int32
	_bufsiz   int32
	_tmpfname uintptr
} /* stdio.h:24:3 */

type FILE = _iobuf /* stdio.h:34:25 */

type _off_t = int32  /* _mingw_off_t.h:5:16 */
type off32_t = int32 /* _mingw_off_t.h:7:16 */

type _off64_t = int64 /* _mingw_off_t.h:13:39 */
type off64_t = int64  /* _mingw_off_t.h:15:39 */

type off_t = off64_t /* _mingw_off_t.h:24:17 */

type fpos_t = int64 /* stdio.h:102:37 */

func vsnwprintf(tls *libc.TLS, s uintptr, n size_t, format uintptr, arg va_list) int32 { /* stdio.h:1392:15: */
	return libc.X_vsnwprintf(tls, s, n, format, arg)

}

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

func vswprintf(tls *libc.TLS, __stream uintptr, __count size_t, __format uintptr, __local_argv uintptr) int32 { /* swprintf.inl:27:5: */
	return vsnwprintf(tls, __stream, __count, __format, __local_argv)
}

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type WSPIAPI_PGETADDRINFO = uintptr  /* wspiapi.h:36:13 */
type WSPIAPI_PGETNAMEINFO = uintptr  /* wspiapi.h:37:13 */
type WSPIAPI_PFREEADDRINFO = uintptr /* wspiapi.h:38:14 */

type WSPIAPI_FUNCTION = struct {
	pszName   uintptr
	pfAddress FARPROC
} /* wspiapi.h:46:5 */

//  Pull in the typedef of TCHAR for windows.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _TCHAR = int8   /* tchar.h:967:16 */
type _TSCHAR = int8  /* tchar.h:968:23 */
type _TUCHAR = uint8 /* tchar.h:969:25 */
type _TXCHAR = int8  /* tchar.h:970:16 */
type _TINT = int32   /* tchar.h:971:15 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

//---------------------------------------------------------------------------
// The following sets of #includes and #ifdefs are required to get Tcl to
// compile under the windows compilers.
//---------------------------------------------------------------------------

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type clock_t = int32 /* time.h:60:16 */

type tm = struct {
	tm_sec   int32
	tm_min   int32
	tm_hour  int32
	tm_mday  int32
	tm_mon   int32
	tm_year  int32
	tm_wday  int32
	tm_yday  int32
	tm_isdst int32
} /* time.h:97:3 */

var daylight int32    /* time.h:256:22: */
var timezone int32    /* time.h:257:23: */
var tzname [2]uintptr /* time.h:258:23: */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type timezone1 = struct {
	tz_minuteswest int32
	tz_dsttime     int32
} /* time.h:266:1 */

// Adding timespec definition.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type __timeb32 = struct {
	time     int32
	millitm  uint16
	timezone int16
	dstflag  int16
	_        [2]byte
} /* timeb.h:53:3 */

type timeb = struct {
	time     time_t
	millitm  uint16
	timezone int16
	dstflag  int16
	_        [2]byte
} /* timeb.h:61:3 */

type __timeb64 = struct {
	time     int64
	millitm  uint16
	timezone int16
	dstflag  int16
	_        [2]byte
} /* timeb.h:69:3 */

type timespec = struct {
	tv_sec  time_t
	tv_nsec int32
	_       [4]byte
} /* timeb.h:91:1 */

type itimerspec = struct {
	it_interval struct {
		tv_sec  time_t
		tv_nsec int32
		_       [4]byte
	}
	it_value struct {
		tv_sec  time_t
		tv_nsec int32
		_       [4]byte
	}
} /* timeb.h:96:1 */

// POSIX 2008 says clock_gettime and timespec are defined in time.h header,
//    but other systems - like Linux, Solaris, etc - tend to declare such
//    recent extensions only if the following guards are met.
//
//    Copyright (c) 2011-2016  mingw-w64 project
//
//    Permission is hereby granted, free of charge, to any person obtaining a
//    copy of this software and associated documentation files (the "Software"),
//    to deal in the Software without restriction, including without limitation
//    the rights to use, copy, modify, merge, publish, distribute, sublicense,
//    and/or sell copies of the Software, and to permit persons to whom the
//    Software is furnished to do so, subject to the following conditions:
//
//    The above copyright notice and this permission notice shall be included in
//    all copies or substantial portions of the Software.
//
//    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//    DEALINGS IN THE SOFTWARE.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Posix timers are supported

// Monotonic clocks are available.

// CPU-time clocks are available.

// Clock support in threads are available.

type clockid_t = int32 /* pthread_time.h:49:13 */

type _fsize_t = uint32 /* wchar.h:82:25 */

type _wfinddata32_t = struct {
	attrib      uint32
	time_create int32
	time_access int32
	time_write  int32
	size        _fsize_t
	name        [260]wchar_t
} /* wchar.h:87:3 */

type _wfinddata32i64_t = struct {
	attrib      uint32
	time_create int32
	time_access int32
	time_write  int32
	size        int64
	name        [260]wchar_t
} /* wchar.h:96:3 */

type _wfinddata64i32_t = struct {
	attrib      uint32
	_           [4]byte
	time_create int64
	time_access int64
	time_write  int64
	size        _fsize_t
	name        [260]wchar_t
	_           [4]byte
} /* wchar.h:105:3 */

type _wfinddata64_t = struct {
	attrib      uint32
	_           [4]byte
	time_create int64
	time_access int64
	time_write  int64
	size        int64
	name        [260]wchar_t
} /* wchar.h:114:3 */

type _ino_t = uint16 /* wchar.h:394:26 */
type ino_t = uint16  /* wchar.h:396:26 */

type _dev_t = uint32 /* wchar.h:402:24 */
type dev_t = uint32  /* wchar.h:404:24 */

type _stat32 = struct {
	st_dev   _dev_t
	st_ino   _ino_t
	st_mode  uint16
	st_nlink int16
	st_uid   int16
	st_gid   int16
	_        [2]byte
	st_rdev  _dev_t
	st_size  _off_t
	st_atime int32
	st_mtime int32
	st_ctime int32
} /* _mingw_stat64.h:25:3 */

type stat = struct {
	st_dev   _dev_t
	st_ino   _ino_t
	st_mode  uint16
	st_nlink int16
	st_uid   int16
	st_gid   int16
	_        [2]byte
	st_rdev  _dev_t
	st_size  _off_t
	st_atime time_t
	st_mtime time_t
	st_ctime time_t
} /* _mingw_stat64.h:40:3 */

type _stat32i64 = struct {
	st_dev   _dev_t
	st_ino   _ino_t
	st_mode  uint16
	st_nlink int16
	st_uid   int16
	st_gid   int16
	_        [2]byte
	st_rdev  _dev_t
	_        [4]byte
	st_size  int64
	st_atime int32
	st_mtime int32
	st_ctime int32
	_        [4]byte
} /* _mingw_stat64.h:55:3 */

type _stat64i32 = struct {
	st_dev   _dev_t
	st_ino   _ino_t
	st_mode  uint16
	st_nlink int16
	st_uid   int16
	st_gid   int16
	_        [2]byte
	st_rdev  _dev_t
	st_size  _off_t
	st_atime int64
	st_mtime int64
	st_ctime int64
} /* _mingw_stat64.h:69:3 */

type _stat64 = struct {
	st_dev   _dev_t
	st_ino   _ino_t
	st_mode  uint16
	st_nlink int16
	st_uid   int16
	st_gid   int16
	_        [2]byte
	st_rdev  _dev_t
	_        [4]byte
	st_size  int64
	st_atime int64
	st_mtime int64
	st_ctime int64
} /* _mingw_stat64.h:83:3 */

type mbstate_t = int32 /* wchar.h:1431:15 */
type _Wint_t = wchar_t /* wchar.h:1433:19 */

type _finddata32_t = struct {
	attrib      uint32
	time_create int32
	time_access int32
	time_write  int32
	size        _fsize_t
	name        [260]int8
} /* io.h:35:3 */

type _finddata32i64_t = struct {
	attrib      uint32
	time_create int32
	time_access int32
	time_write  int32
	size        int64
	name        [260]int8
	_           [4]byte
} /* io.h:44:3 */

type _finddata64i32_t = struct {
	attrib      uint32
	_           [4]byte
	time_create int64
	time_access int64
	time_write  int64
	size        _fsize_t
	name        [260]int8
} /* io.h:53:3 */

type __finddata64_t = struct {
	attrib      uint32
	_           [4]byte
	time_create int64
	time_access int64
	time_write  int64
	size        int64
	name        [260]int8
	_           [4]byte
} /* io.h:62:3 */

type _PVFV = uintptr /* corecrt_startup.h:20:14 */
type _PIFV = uintptr /* corecrt_startup.h:21:13 */
type _PVFI = uintptr /* corecrt_startup.h:22:14 */

type _onexit_table_t1 = struct {
	_first uintptr
	_last  uintptr
	_end   uintptr
} /* corecrt_startup.h:24:9 */

type _onexit_table_t = _onexit_table_t1 /* corecrt_startup.h:28:3 */

// Includes a definition of _pid_t and pid_t
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _pid_t = int64 /* types.h:63:17 */

type pid_t = _pid_t /* types.h:68:16 */

type _mode_t = uint16 /* types.h:74:24 */

type mode_t = _mode_t /* types.h:77:17 */

type useconds_t = uint32 /* types.h:84:22 */

type _sigset_t = uint64 /* types.h:104:28 */

type _beginthread_proc_type = uintptr   /* process.h:32:16 */
type _beginthreadex_proc_type = uintptr /* process.h:33:20 */

type _tls_callback_type = uintptr /* process.h:61:16 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

//
//    Copyright (c) 2013-2016  mingw-w64 project
//
//    Permission is hereby granted, free of charge, to any person obtaining a
//    copy of this software and associated documentation files (the "Software"),
//    to deal in the Software without restriction, including without limitation
//    the rights to use, copy, modify, merge, publish, distribute, sublicense,
//    and/or sell copies of the Software, and to permit persons to whom the
//    Software is furnished to do so, subject to the following conditions:
//
//    The above copyright notice and this permission notice shall be included in
//    all copies or substantial portions of the Software.
//
//    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//    DEALINGS IN THE SOFTWARE.

// Windows has rudimentary signals support.

type sig_atomic_t = int32 /* signal.h:18:15 */

// ISO C Standard:  7.17  Common definitions  <stddef.h>

// Any one of these symbols __need_* means that GNU libc
//    wants us just to define one data type.  So don't define
//    the symbols that indicate this file's entire job has been done.

// In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
//    defined if the corresponding type is *not* defined.
//    FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_

// Sequent's header files use _PTRDIFF_T_ in some conflicting way.
//    Just ignore it.

// On VxWorks, <type/vxTypesBase.h> may have defined macros like
//    _TYPE_size_t which will typedef size_t.  fixincludes patched the
//    vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
//    not defined, and so that defining this macro defines _GCC_SIZE_T.
//    If we find that the macros are still defined at this point, we must
//    invoke them so that the type is defined as expected.

// In case nobody has defined these types, but we aren't running under
//    GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
//    __WCHAR_TYPE__ have reasonable values.  This can happen if the
//    parts of GCC is compiled by an older compiler, that actually
//    include gstddef.h, such as collect2.

// Signed type of difference of two pointers.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// Unsigned type of `sizeof' something.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// Wide character type.
//    Locale-writers should change this as necessary to
//    be big enough to hold unique values not between 0 and 127,
//    and not (wchar_t) -1, for each defined multibyte character.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

//  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
//     are already defined.
//  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.

// A null pointer constant.

// Copyright (C) 1989-2020 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

// ISO C Standard:  7.17  Common definitions  <stddef.h>

// Any one of these symbols __need_* means that GNU libc
//    wants us just to define one data type.  So don't define
//    the symbols that indicate this file's entire job has been done.
// snaroff@next.com says the NeXT needs this.

// This avoids lossage on SunOS but only if stdtypes.h comes first.
//    There's no way to win with the other order!  Sun lossage.

// Sequent's header files use _PTRDIFF_T_ in some conflicting way.
//    Just ignore it.

// On VxWorks, <type/vxTypesBase.h> may have defined macros like
//    _TYPE_size_t which will typedef size_t.  fixincludes patched the
//    vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
//    not defined, and so that defining this macro defines _GCC_SIZE_T.
//    If we find that the macros are still defined at this point, we must
//    invoke them so that the type is defined as expected.

// In case nobody has defined these types, but we aren't running under
//    GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
//    __WCHAR_TYPE__ have reasonable values.  This can happen if the
//    parts of GCC is compiled by an older compiler, that actually
//    include gstddef.h, such as collect2.

// Signed type of difference of two pointers.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// If this symbol has done its job, get rid of it.

// Unsigned type of `sizeof' something.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// Wide character type.
//    Locale-writers should change this as necessary to
//    be big enough to hold unique values not between 0 and 127,
//    and not (wchar_t) -1, for each defined multibyte character.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// A null pointer constant.

// Offset of member MEMBER in a struct of type TYPE.

// Type whose alignment is supported in every context and is at least
//    as great as that of any standard type not using alignment
//    specifiers.
type max_align_t = struct {
	__max_align_ll int64
	__max_align_ld float64
} /* stddef.h:427:3 */

// 7.18.1.1  Exact-width integer types
type int8_t = int8     /* stdint.h:35:21 */
type uint8_t = uint8   /* stdint.h:36:25 */
type int16_t = int16   /* stdint.h:37:16 */
type uint16_t = uint16 /* stdint.h:38:25 */
type int32_t = int32   /* stdint.h:39:14 */
type uint32_t = uint32 /* stdint.h:40:20 */
type int64_t = int64   /* stdint.h:41:38 */
type uint64_t = uint64 /* stdint.h:42:48 */

// 7.18.1.2  Minimum-width integer types
type int_least8_t = int8     /* stdint.h:45:21 */
type uint_least8_t = uint8   /* stdint.h:46:25 */
type int_least16_t = int16   /* stdint.h:47:16 */
type uint_least16_t = uint16 /* stdint.h:48:25 */
type int_least32_t = int32   /* stdint.h:49:14 */
type uint_least32_t = uint32 /* stdint.h:50:20 */
type int_least64_t = int64   /* stdint.h:51:38 */
type uint_least64_t = uint64 /* stdint.h:52:48 */

// 7.18.1.3  Fastest minimum-width integer types
//  Not actually guaranteed to be fastest for all purposes
//  Here we use the exact-width types for 8 and 16-bit ints.
type int_fast8_t = int8     /* stdint.h:58:21 */
type uint_fast8_t = uint8   /* stdint.h:59:23 */
type int_fast16_t = int16   /* stdint.h:60:16 */
type uint_fast16_t = uint16 /* stdint.h:61:25 */
type int_fast32_t = int32   /* stdint.h:62:14 */
type uint_fast32_t = uint32 /* stdint.h:63:24 */
type int_fast64_t = int64   /* stdint.h:64:38 */
type uint_fast64_t = uint64 /* stdint.h:65:48 */

// 7.18.1.5  Greatest-width integer types
type intmax_t = int64   /* stdint.h:68:38 */
type uintmax_t = uint64 /* stdint.h:69:48 */

// 7.18.2  Limits of specified-width integer types

// 7.18.2.1  Limits of exact-width integer types

// 7.18.2.2  Limits of minimum-width integer types

// 7.18.2.3  Limits of fastest minimum-width integer types

// 7.18.2.4  Limits of integer types capable of holding
//     object pointers

// 7.18.2.5  Limits of greatest-width integer types

// 7.18.3  Limits of other integer types

// wint_t is unsigned short for compatibility with MS runtime

// 7.18.4  Macros for integer constants

// 7.18.4.1  Macros for minimum-width integer constants
//
//     Accoding to Douglas Gwyn <gwyn@arl.mil>:
// 	"This spec was changed in ISO/IEC 9899:1999 TC1; in ISO/IEC
// 	9899:1999 as initially published, the expansion was required
// 	to be an integer constant of precisely matching type, which
// 	is impossible to accomplish for the shorter types on most
// 	platforms, because C99 provides no standard way to designate
// 	an integer constant with width less than that of type int.
// 	TC1 changed this to require just an integer constant
// 	*expression* with *promoted* type."
//
// 	The trick used here is from Clive D W Feather.

//  The 'trick' doesn't work in C89 for long long because, without
//     suffix, (val) will be evaluated as int, not intmax_t

// 7.18.4.2  Macros for greatest-width integer constants

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// ISO C Standard:  7.17  Common definitions  <stddef.h>

// Any one of these symbols __need_* means that GNU libc
//    wants us just to define one data type.  So don't define
//    the symbols that indicate this file's entire job has been done.

// In 4.3bsd-net2, machine/ansi.h defines these symbols, which are
//    defined if the corresponding type is *not* defined.
//    FreeBSD-2.1 defines _MACHINE_ANSI_H_ instead of _ANSI_H_

// Sequent's header files use _PTRDIFF_T_ in some conflicting way.
//    Just ignore it.

// On VxWorks, <type/vxTypesBase.h> may have defined macros like
//    _TYPE_size_t which will typedef size_t.  fixincludes patched the
//    vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
//    not defined, and so that defining this macro defines _GCC_SIZE_T.
//    If we find that the macros are still defined at this point, we must
//    invoke them so that the type is defined as expected.

// In case nobody has defined these types, but we aren't running under
//    GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
//    __WCHAR_TYPE__ have reasonable values.  This can happen if the
//    parts of GCC is compiled by an older compiler, that actually
//    include gstddef.h, such as collect2.

// Signed type of difference of two pointers.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// If this symbol has done its job, get rid of it.

// Unsigned type of `sizeof' something.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// Wide character type.
//    Locale-writers should change this as necessary to
//    be big enough to hold unique values not between 0 and 127,
//    and not (wchar_t) -1, for each defined multibyte character.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

//  In 4.3bsd-net2, leave these undefined to indicate that size_t, etc.
//     are already defined.
//  BSD/OS 3.1 and FreeBSD [23].x require the MACHINE_ANSI_H check here.

// A null pointer constant.

// Offset of member MEMBER in a struct of type TYPE.

// Copyright (C) 1989-2020 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

// ISO C Standard:  7.17  Common definitions  <stddef.h>

type imaxdiv_t = struct {
	quot intmax_t
	rem  intmax_t
} /* inttypes.h:23:4 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _utimbuf = struct {
	actime  time_t
	modtime time_t
} /* utime.h:58:3 */

type __utimbuf32 = struct {
	actime  int32
	modtime int32
} /* utime.h:63:3 */

type __utimbuf64 = struct {
	actime  int64
	modtime int64
} /* utime.h:68:3 */

type utimbuf = struct {
	actime  time_t
	modtime time_t
} /* utime.h:74:3 */

type utimbuf32 = struct {
	actime  int32
	modtime int32
} /* utime.h:79:3 */

// The following defines redefine the Windows Socket errors as
// BSD errors so Tcl_PosixError can do the right thing.

// Visual Studio doesn't have these, so just choose some high numbers

// Signals not known to the standard ANSI signal.h.  These are used
// by Tcl_WaitPid() and generic/tclPosixStr.c

// Supply definitions for macros to query wait status, if not already
// defined in header files above.

// Define constants for waitpid() system call if they aren't defined
// by a system header file.

// Define access mode constants if they aren't already defined.

// Define macros to query file type bits, if they're not already
// defined.

// Windows compilers do not define S_IFBLK. However, Tcl uses it in
// GetTypeFromMode to identify blockSpecial devices based on the
// value in the statsbuf st_mode field. We have no other way to pass this
// from NativeStat on Windows so are forced to define it here.
// The definition here is essentially what is seen on Linux and MingW.
// XXX - the root problem is Tcl using Unix definitions instead of
// abstracting the structure into a platform independent one. Sigh - perhaps
// Tcl 9

// Define MAXPATHLEN in terms of MAXPATH if available

// Define pid_t and uid_t if they're not already defined.

// Visual C++ has some odd names for common functions, so we need to
// define a few macros to handle them.  Also, it defines EDEADLOCK and
// EDEADLK as the same value, which confuses Tcl_ErrnoId().

// Borland's timezone and environ functions.

// MSVC 8.0 started to mark many standard C library functions depreciated
// including the *printf family and others. Tell it to shut up.
// (_MSC_VER is 1200 for VC6, 1300 or 1310 for vc7.net, 1400 for 8.0)
//---------------------------------------------------------------------------
// The following macros and declarations represent the interface between
// generic and windows-specific parts of Tcl.  Some of the macros may
// override functions declared in tclInt.h.
//---------------------------------------------------------------------------

// The default platform eol translation on Windows is TCL_TRANSLATE_CRLF:

// Declare dynamic loading extension macro.

// The following define ensures that we use the native putenv
// implementation to modify the environment array.  This keeps
// the C level environment in synch with the system level environment.

// Msvcrt's putenv() copies the string rather than takes ownership of it.

// Older version of Mingw are known to lack a MWMO_ALERTABLE define.

// The following defines wrap the system memory allocation routines for
// use by tclAlloc.c.

// This type is not defined in the Windows headers

// The following macros have trivial definitions, allowing generic code to
// address platform-specific issues.

// The following macros and declarations wrap the C runtime library
// functions.

// tcl.h --
//
//	This header file describes the externally-visible facilities of the
//	Tcl interpreter.
//
// Copyright (c) 1987-1994 The Regents of the University of California.
// Copyright (c) 1993-1996 Lucent Technologies.
// Copyright (c) 1994-1998 Sun Microsystems, Inc.
// Copyright (c) 1998-2000 by Scriptics Corporation.
// Copyright (c) 2002 by Kevin B. Kenny.  All rights reserved.
//
// See the file "license.terms" for information on usage and redistribution of
// this file, and for a DISCLAIMER OF ALL WARRANTIES.

// For C++ compilers, use extern "C"

// The following defines are used to indicate the various release levels.

// When version numbers change here, must also go into the following files and
// update the version numbers:
//
// library/init.tcl	(1 LOC patch)
// unix/configure.in	(2 LOC Major, 2 LOC minor, 1 LOC patch)
// win/configure.in	(as above)
// win/tcl.m4		(not patchlevel)
// README		(sections 0 and 2, with and without separator)
// macosx/Tcl-Common.xcconfig (not patchlevel) 1 LOC
// win/README		(not patchlevel) (sections 0 and 2)
// unix/tcl.spec	(1 LOC patch)
// tools/tcl.hpj.in	(not patchlevel, for windows installer)

//----------------------------------------------------------------------------
// The following definitions set up the proper options for Windows compilers.
// We use this method because there is no autoconf equivalent.

// Utility macros: STRINGIFY takes an argument and wraps it in "" (double
// quotation marks), JOIN joins two arguments.

// A special definition used to allow this header file to be included from
// windows resource files so that they can obtain version information.
// RC_INVOKED is defined by default by the windows RC tool.
//
// Resource compilers don't like all the C stuff, like typedefs and function
// declarations, that occur below, so block them out.

// Special macro to define mutexes, that doesn't do anything if we are not
// using threads.

// Tcl's public routine Tcl_FSSeek() uses the values SEEK_SET, SEEK_CUR, and
// SEEK_END, all #define'd by stdio.h .
//
// Also, many extensions need stdio.h, and they've grown accustomed to tcl.h
// providing it for them rather than #include-ing it themselves as they
// should, so also for their sake, we keep the #include to be consistent with
// prior Tcl releases.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

//----------------------------------------------------------------------------
// Support for functions with a variable number of arguments.
//
// The following TCL_VARARGS* macros are to support old extensions
// written for older versions of Tcl where the macros permitted
// support for the varargs.h system as well as stdarg.h .
//
// New code should just directly be written to use stdarg.h conventions.

// Copyright (C) 1989, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with GCC; see the file COPYING.  If not, write to
// the Free Software Foundation, 51 Franklin Street, Fifth Floor,
// Boston, MA 02110-1301, USA.

// As a special exception, if you include this header file into source
//    files compiled by GCC, this header file does not by itself cause
//    the resulting executable to be covered by the GNU General Public
//    License.  This exception does not however invalidate any other
//    reasons why the executable file might be covered by the GNU General
//    Public License.

// ISO C Standard:  7.15  Variable arguments  <stdarg.h>

// include mingw stuff
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Copyright (C) 1989-2020 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

// ISO C Standard:  7.15  Variable arguments  <stdarg.h>

// Allow a part of Tcl's API to be explicitly marked as deprecated.
//
// Used to make TIP 330/336 generate moans even if people use the
// compatibility macros. Change your code, guys! We won't support you forever.

//----------------------------------------------------------------------------
// Macros used to declare a function to be exported by a DLL. Used by Windows,
// maps to no-op declarations on non-Windows systems. The default build on
// windows is for a DLL, which causes the DLLIMPORT and DLLEXPORT macros to be
// nonempty. To build a static library, the macro STATIC_BUILD should be
// defined.
//
// Note: when building static but linking dynamically to MSVCRT we must still
//       correctly decorate the C library imported function.  Use CRTIMPORT
//       for this purpose.  _DLL is defined by the compiler when linking to
//       MSVCRT.

// These macros are used to control whether functions are being declared for
// import or export. If a function is being declared while it is being built
// to be included in a shared library, then it should have the DLLEXPORT
// storage class. If is being declared for use by a module that is going to
// link against the shared library, then it should have the DLLIMPORT storage
// class. If the symbol is being declared for a static build or for use from a
// stub library, then the storage class should be empty.
//
// The convention is that a macro called BUILD_xxxx, where xxxx is the name of
// a library we are building, is set on the compile line for sources that are
// to be placed in the library. When this macro is set, the storage class will
// be set to DLLEXPORT. At the end of the header file, the storage class will
// be reset to DLLIMPORT.

// The following _ANSI_ARGS_ macro is to support old extensions
// written for older versions of Tcl where it permitted support
// for compilers written in the pre-prototype era of C.
//
// New code should use prototypes.

// Definitions that allow this header file to be used either with or without
// ANSI C features.

// Make sure EXTERN isn't defined elsewhere.

//----------------------------------------------------------------------------
// The following code is copied from winnt.h. If we don't replicate it here,
// then <windows.h> can't be included after tcl.h, since tcl.h also defines
// VOID. This block is skipped under Cygwin and Mingw.

// Macro to use instead of "void" for arguments that must have type "void *"
// in ANSI C; maps them to type "char *" in non-ANSI systems.

// Miscellaneous declarations.

type ClientData = uintptr /* tcl.h:344:15 */

// Darwin specific configure overrides (to support fat compiles, where
// configure runs only once for multiple architectures):

// Cross-compiling 32-bit on a 64-bit platform? Then our
// configure script does the wrong thing. Correct that here.

// Define Tcl_WideInt to be a type that is (at least) 64-bits wide, and define
// Tcl_WideUInt to be the unsigned variant of that type (assuming that where
// we have one, we can have the other.)
//
// Also defines the following macros:
// TCL_WIDE_INT_IS_LONG - if wide ints are really longs (i.e. we're on a
//	LP64 system such as modern Solaris or Linux ... not including Win64)
// Tcl_WideAsLong - forgetful converter from wideInt to long.
// Tcl_LongAsWide - sign-extending converter from long to wideInt.
// Tcl_WideAsDouble - converter from wideInt to double.
// Tcl_DoubleAsWide - converter from double to wideInt.
//
// The following invariant should hold for any long value 'longVal':
//	longVal == Tcl_WideAsLong(Tcl_LongAsWide(longVal))
//
// Note on converting between Tcl_WideInt and strings. This implementation (in
// tclObj.c) depends on the function
// sprintf(...,"%" TCL_LL_MODIFIER "d",...).

type Tcl_WideInt = int64   /* tcl.h:430:28 */
type Tcl_WideUInt = uint64 /* tcl.h:431:36 */

// The next short section of defines are only done when not running on Windows
// or some other strange platform.

type Tcl_StatBuf = _stat64 /* tcl.h:459:26 */

//----------------------------------------------------------------------------
// Data structures defined opaquely in this module. The definitions below just
// provide dummy types. A few fields are made visible in Tcl_Interp
// structures, namely those used for returning a string result from commands.
// Direct access to the result field is discouraged in Tcl 8.0. The
// interpreter result is either an object or a string, and the two values are
// kept consistent unless some C code sets interp->result directly.
// Programmers should use either the function Tcl_GetObjResult() or
// Tcl_GetStringResult() to read the interpreter's result. See the SetResult
// man page for details.
//
// Note: any change to the Tcl_Interp definition below must be mirrored in the
// "real" definition in tclInt.h.
//
// Note: Tcl_ObjCmdProc functions do not directly set result and freeProc.
// Instead, they set a Tcl_Obj member in the "real" structure that can be
// accessed with Tcl_GetObjResult() and Tcl_SetObjResult().

type Tcl_Interp1 = struct {
	resultDontUse    uintptr
	freeProcDontUse  uintptr
	errorLineDontUse int32
	_                [4]byte
} /* tcl.h:508:9 */

//----------------------------------------------------------------------------
// Data structures defined opaquely in this module. The definitions below just
// provide dummy types. A few fields are made visible in Tcl_Interp
// structures, namely those used for returning a string result from commands.
// Direct access to the result field is discouraged in Tcl 8.0. The
// interpreter result is either an object or a string, and the two values are
// kept consistent unless some C code sets interp->result directly.
// Programmers should use either the function Tcl_GetObjResult() or
// Tcl_GetStringResult() to read the interpreter's result. See the SetResult
// man page for details.
//
// Note: any change to the Tcl_Interp definition below must be mirrored in the
// "real" definition in tclInt.h.
//
// Note: Tcl_ObjCmdProc functions do not directly set result and freeProc.
// Instead, they set a Tcl_Obj member in the "real" structure that can be
// accessed with Tcl_GetObjResult() and Tcl_SetObjResult().

type Tcl_Interp = Tcl_Interp1 /* tcl.h:540:1 */

type Tcl_AsyncHandler = uintptr       /* tcl.h:542:34 */
type Tcl_Channel = uintptr            /* tcl.h:543:29 */
type Tcl_ChannelTypeVersion = uintptr /* tcl.h:544:40 */
type Tcl_Command = uintptr            /* tcl.h:545:29 */
type Tcl_Condition = uintptr          /* tcl.h:546:31 */
type Tcl_Dict = uintptr               /* tcl.h:547:26 */
type Tcl_EncodingState = uintptr      /* tcl.h:548:35 */
type Tcl_Encoding = uintptr           /* tcl.h:549:30 */
type Tcl_Event1 = struct {
	proc    uintptr
	nextPtr uintptr
} /* tcl.h:550:9 */

type Tcl_Event = Tcl_Event1    /* tcl.h:550:26 */
type Tcl_InterpState = uintptr /* tcl.h:551:33 */
type Tcl_LoadHandle_ = struct {
	clientData        ClientData
	findSymbolProcPtr uintptr
	unloadFileProcPtr uintptr
} /* tcl.h:552:9 */

type Tcl_LoadHandle = uintptr    /* tcl.h:552:32 */
type Tcl_Mutex = uintptr         /* tcl.h:553:27 */
type Tcl_Pid = uintptr           /* tcl.h:554:25 */
type Tcl_RegExp = uintptr        /* tcl.h:555:28 */
type Tcl_ThreadDataKey = uintptr /* tcl.h:556:35 */
type Tcl_ThreadId = uintptr      /* tcl.h:557:30 */
type Tcl_TimerToken = uintptr    /* tcl.h:558:32 */
type Tcl_Trace = uintptr         /* tcl.h:559:27 */
type Tcl_Var = uintptr           /* tcl.h:560:25 */
type Tcl_ZlibStream = uintptr    /* tcl.h:561:32 */

// Threading function return types used for abstracting away platform
// differences when writing a Tcl_ThreadCreateProc. See the NewThread function
// in generic/tclThreadTest.c for it's usage.

// Definition of values for default stacksize and the possible flags to be
// given to Tcl_CreateThread.

// Flag values passed to Tcl_StringCaseMatch.

// Flag values passed to Tcl_GetRegExpFromObj.

// Flags values passed to Tcl_RegExpExecObj.

// Structures filled in by Tcl_RegExpInfo. Note that all offset values are
// relative to the start of the match string, not the beginning of the entire
// string.

type Tcl_RegExpIndices1 = struct {
	start int32
	end   int32
} /* tcl.h:638:9 */

// Threading function return types used for abstracting away platform
// differences when writing a Tcl_ThreadCreateProc. See the NewThread function
// in generic/tclThreadTest.c for it's usage.

// Definition of values for default stacksize and the possible flags to be
// given to Tcl_CreateThread.

// Flag values passed to Tcl_StringCaseMatch.

// Flag values passed to Tcl_GetRegExpFromObj.

// Flags values passed to Tcl_RegExpExecObj.

// Structures filled in by Tcl_RegExpInfo. Note that all offset values are
// relative to the start of the match string, not the beginning of the entire
// string.

type Tcl_RegExpIndices = Tcl_RegExpIndices1 /* tcl.h:643:3 */

type Tcl_RegExpInfo1 = struct {
	nsubs       int32
	_           [4]byte
	matches     uintptr
	extendStart int32
	reserved    int32
} /* tcl.h:645:9 */

type Tcl_RegExpInfo = Tcl_RegExpInfo1 /* tcl.h:652:3 */

// Picky compilers complain if this typdef doesn't appear before the struct's
// reference in tclDecls.h.

type Tcl_Stat_ = uintptr    /* tcl.h:659:21 */
type Tcl_OldStat_ = uintptr /* tcl.h:660:21 */

//----------------------------------------------------------------------------
// When a TCL command returns, the interpreter contains a result from the
// command. Programmers are strongly encouraged to use one of the functions
// Tcl_GetObjResult() or Tcl_GetStringResult() to read the interpreter's
// result. See the SetResult man page for details. Besides this result, the
// command function returns an integer code, which is one of the following:
//
// TCL_OK		Command completed normally; the interpreter's result
//			contains the command's result.
// TCL_ERROR		The command couldn't be completed successfully; the
//			interpreter's result describes what went wrong.
// TCL_RETURN		The command requests that the current function return;
//			the interpreter's result contains the function's
//			return value.
// TCL_BREAK		The command requests that the innermost loop be
//			exited; the interpreter's result is meaningless.
// TCL_CONTINUE		Go on to the next iteration of the current loop; the
//			interpreter's result is meaningless.

//----------------------------------------------------------------------------
// Flags to control what substitutions are performed by Tcl_SubstObj():

// Argument descriptors for math function callbacks in expressions:

type Tcl_ValueType = uint32 /* tcl.h:707:3 */

type Tcl_Value1 = struct {
	__type      Tcl_ValueType
	intValue    int32
	doubleValue float64
	wideValue   Tcl_WideInt
} /* tcl.h:709:9 */

type Tcl_Value = Tcl_Value1 /* tcl.h:715:3 */

// Forward declaration of Tcl_Obj to prevent an error when the forward
// reference to Tcl_Obj is encountered in the function types declared below.

type Tcl_Obj1 = struct {
	refCount    int32
	_           [4]byte
	bytes       uintptr
	length      int32
	_           [4]byte
	typePtr     uintptr
	internalRep struct {
		_         [0]uint64
		longValue int32
		_         [12]byte
	}
} /* tcl.h:722:1 */

//----------------------------------------------------------------------------
// The following structure represents a type of object, which is a particular
// internal representation for an object plus a set of functions that provide
// standard operations on objects of that type.

type Tcl_ObjType1 = struct {
	name             uintptr
	freeIntRepProc   uintptr
	dupIntRepProc    uintptr
	updateStringProc uintptr
	setFromAnyProc   uintptr
} /* tcl.h:722:1 */

//----------------------------------------------------------------------------
// The following structure represents a type of object, which is a particular
// internal representation for an object plus a set of functions that provide
// standard operations on objects of that type.

type Tcl_ObjType = Tcl_ObjType1 /* tcl.h:811:3 */

// One of the following structures exists for each object in the Tcl system.
// An object stores a value as either a string, some internal representation,
// or both.

type Tcl_Obj = Tcl_Obj1 /* tcl.h:858:3 */

//----------------------------------------------------------------------------
// The following structure contains the state needed by Tcl_SaveResult. No-one
// outside of Tcl should access any of these fields. This structure is
// typically allocated on the stack.

type Tcl_SavedResult1 = struct {
	result       uintptr
	freeProc     uintptr
	objResultPtr uintptr
	appendResult uintptr
	appendAvl    int32
	appendUsed   int32
	resultSpace  [201]int8
	_            [7]byte
} /* tcl.h:879:9 */

//----------------------------------------------------------------------------
// The following structure contains the state needed by Tcl_SaveResult. No-one
// outside of Tcl should access any of these fields. This structure is
// typically allocated on the stack.

type Tcl_SavedResult = Tcl_SavedResult1 /* tcl.h:887:3 */

//----------------------------------------------------------------------------
// The following definitions support Tcl's namespace facility. Note: the first
// five fields must match exactly the fields in a Namespace structure (see
// tclInt.h).

type Tcl_Namespace1 = struct {
	name       uintptr
	fullName   uintptr
	clientData ClientData
	deleteProc uintptr
	parentPtr  uintptr
} /* tcl.h:896:9 */

//----------------------------------------------------------------------------
// The following definitions support Tcl's namespace facility. Note: the first
// five fields must match exactly the fields in a Namespace structure (see
// tclInt.h).

type Tcl_Namespace = Tcl_Namespace1 /* tcl.h:912:3 */

//----------------------------------------------------------------------------
// The following structure represents a call frame, or activation record. A
// call frame defines a naming context for a procedure call: its local scope
// (for local variables) and its namespace scope (used for non-local
// variables; often the global :: namespace). A call frame can also define the
// naming context for a namespace eval or namespace inscope command: the
// namespace in which the command's code should execute. The Tcl_CallFrame
// structures exist only while procedures or namespace eval/inscope's are
// being executed, and provide a Tcl call stack.
//
// A call frame is initialized and pushed using Tcl_PushCallFrame and popped
// using Tcl_PopCallFrame. Storage for a Tcl_CallFrame must be provided by the
// Tcl_PushCallFrame caller, and callers typically allocate them on the C call
// stack for efficiency. For this reason, Tcl_CallFrame is defined as a
// structure and not as an opaque token. However, most Tcl_CallFrame fields
// are hidden since applications should not access them directly; others are
// declared as "dummyX".
//
// WARNING!! The structure definition must be kept consistent with the
// CallFrame structure in tclInt.h. If you change one, change the other.

type Tcl_CallFrame1 = struct {
	nsPtr   uintptr
	dummy1  int32
	dummy2  int32
	dummy3  uintptr
	dummy4  uintptr
	dummy5  uintptr
	dummy6  int32
	_       [4]byte
	dummy7  uintptr
	dummy8  uintptr
	dummy9  int32
	_       [4]byte
	dummy10 uintptr
	dummy11 uintptr
	dummy12 uintptr
	dummy13 uintptr
} /* tcl.h:937:9 */

//----------------------------------------------------------------------------
// The following structure represents a call frame, or activation record. A
// call frame defines a naming context for a procedure call: its local scope
// (for local variables) and its namespace scope (used for non-local
// variables; often the global :: namespace). A call frame can also define the
// naming context for a namespace eval or namespace inscope command: the
// namespace in which the command's code should execute. The Tcl_CallFrame
// structures exist only while procedures or namespace eval/inscope's are
// being executed, and provide a Tcl call stack.
//
// A call frame is initialized and pushed using Tcl_PushCallFrame and popped
// using Tcl_PopCallFrame. Storage for a Tcl_CallFrame must be provided by the
// Tcl_PushCallFrame caller, and callers typically allocate them on the C call
// stack for efficiency. For this reason, Tcl_CallFrame is defined as a
// structure and not as an opaque token. However, most Tcl_CallFrame fields
// are hidden since applications should not access them directly; others are
// declared as "dummyX".
//
// WARNING!! The structure definition must be kept consistent with the
// CallFrame structure in tclInt.h. If you change one, change the other.

type Tcl_CallFrame = Tcl_CallFrame1 /* tcl.h:952:3 */

//----------------------------------------------------------------------------
// Information about commands that is returned by Tcl_GetCommandInfo and
// passed to Tcl_SetCommandInfo. objProc is an objc/objv object-based command
// function while proc is a traditional Tcl argc/argv string-based function.
// Tcl_CreateObjCommand and Tcl_CreateCommand ensure that both objProc and
// proc are non-NULL and can be called to execute the command. However, it may
// be faster to call one instead of the other. The member isNativeObjectProc
// is set to 1 if an object-based function was registered by
// Tcl_CreateObjCommand, and to 0 if a string-based function was registered by
// Tcl_CreateCommand. The other function is typically set to a compatibility
// wrapper that does string-to-object or object-to-string argument conversions
// then calls the other function.

type Tcl_CmdInfo1 = struct {
	isNativeObjectProc int32
	_                  [4]byte
	objProc            uintptr
	objClientData      ClientData
	proc               uintptr
	clientData         ClientData
	deleteProc         uintptr
	deleteData         ClientData
	namespacePtr       uintptr
} /* tcl.h:969:9 */

//----------------------------------------------------------------------------
// Information about commands that is returned by Tcl_GetCommandInfo and
// passed to Tcl_SetCommandInfo. objProc is an objc/objv object-based command
// function while proc is a traditional Tcl argc/argv string-based function.
// Tcl_CreateObjCommand and Tcl_CreateCommand ensure that both objProc and
// proc are non-NULL and can be called to execute the command. However, it may
// be faster to call one instead of the other. The member isNativeObjectProc
// is set to 1 if an object-based function was registered by
// Tcl_CreateObjCommand, and to 0 if a string-based function was registered by
// Tcl_CreateCommand. The other function is typically set to a compatibility
// wrapper that does string-to-object or object-to-string argument conversions
// then calls the other function.

type Tcl_CmdInfo = Tcl_CmdInfo1 /* tcl.h:988:3 */

//----------------------------------------------------------------------------
// The structure defined below is used to hold dynamic strings. The only
// fields that clients should use are string and length, accessible via the
// macros Tcl_DStringValue and Tcl_DStringLength.

type Tcl_DString1 = struct {
	string      uintptr
	length      int32
	spaceAvl    int32
	staticSpace [200]int8
} /* tcl.h:998:9 */

//----------------------------------------------------------------------------
// The structure defined below is used to hold dynamic strings. The only
// fields that clients should use are string and length, accessible via the
// macros Tcl_DStringValue and Tcl_DStringLength.

type Tcl_DString = Tcl_DString1 /* tcl.h:1008:3 */

// Definitions for the maximum number of digits of precision that may be
// specified in the "tcl_precision" variable, and the number of bytes of
// buffer space required by Tcl_PrintDouble.

// Definition for a number of bytes of buffer space sufficient to hold the
// string representation of an integer in base 10 (assuming the existence of
// 64-bit integers).

// Flag values passed to Tcl_ConvertElement.
// TCL_DONT_USE_BRACES forces it not to enclose the element in braces, but to
//	use backslash quoting instead.
// TCL_DONT_QUOTE_HASH disables the default quoting of the '#' character. It
//	is safe to leave the hash unquoted when the element is not the first
//	element of a list, and this flag can be used by the caller to indicate
//	that condition.

// Flag that may be passed to Tcl_GetIndexFromObj to force it to disallow
// abbreviated strings.

//----------------------------------------------------------------------------
// Flag values passed to Tcl_RecordAndEval, Tcl_EvalObj, Tcl_EvalObjv.
// WARNING: these bit choices must not conflict with the bit choices for
// evalFlag bits in tclInt.h!
//
// Meanings:
//	TCL_NO_EVAL:		Just record this command
//	TCL_EVAL_GLOBAL:	Execute script in global namespace
//	TCL_EVAL_DIRECT:	Do not compile this script
//	TCL_EVAL_INVOKE:	Magical Tcl_EvalObjv mode for aliases/ensembles
//				o Run in iPtr->lookupNsPtr or global namespace
//				o Cut out of error traces
//				o Don't reset the flags controlling ensemble
//				  error message rewriting.
//	TCL_CANCEL_UNWIND:	Magical Tcl_CancelEval mode that causes the
//				stack for the script in progress to be
//				completely unwound.
//	TCL_EVAL_NOERR:	Do no exception reporting at all, just return
//				as the caller will report.

// Special freeProc values that may be passed to Tcl_SetResult (see the man
// page for details):

// Flag values passed to variable-related functions.
// WARNING: these bit choices must not conflict with the bit choice for
// TCL_CANCEL_UNWIND, above.

// Required to support old variable/vdelete/vinfo traces.
// Indicate the semantics of the result of a trace.

// Flag values for ensemble commands.

// Flag values passed to command-related functions.

// The TCL_PARSE_PART1 flag is deprecated and has no effect. The part1 is now
// always parsed whenever the part2 is NULL. (This is to avoid a common error
// when converting code to use the new object based APIs and forgetting to
// give the flag)

// Types for linked variables:

//----------------------------------------------------------------------------
// Forward declarations of Tcl_HashTable and related types.

type Tcl_HashKeyType1 = struct {
	version         int32
	flags           int32
	hashKeyProc     uintptr
	compareKeysProc uintptr
	allocEntryProc  uintptr
	freeEntryProc   uintptr
} /* tcl.h:1167:9 */

// Definitions for the maximum number of digits of precision that may be
// specified in the "tcl_precision" variable, and the number of bytes of
// buffer space required by Tcl_PrintDouble.

// Definition for a number of bytes of buffer space sufficient to hold the
// string representation of an integer in base 10 (assuming the existence of
// 64-bit integers).

// Flag values passed to Tcl_ConvertElement.
// TCL_DONT_USE_BRACES forces it not to enclose the element in braces, but to
//	use backslash quoting instead.
// TCL_DONT_QUOTE_HASH disables the default quoting of the '#' character. It
//	is safe to leave the hash unquoted when the element is not the first
//	element of a list, and this flag can be used by the caller to indicate
//	that condition.

// Flag that may be passed to Tcl_GetIndexFromObj to force it to disallow
// abbreviated strings.

//----------------------------------------------------------------------------
// Flag values passed to Tcl_RecordAndEval, Tcl_EvalObj, Tcl_EvalObjv.
// WARNING: these bit choices must not conflict with the bit choices for
// evalFlag bits in tclInt.h!
//
// Meanings:
//	TCL_NO_EVAL:		Just record this command
//	TCL_EVAL_GLOBAL:	Execute script in global namespace
//	TCL_EVAL_DIRECT:	Do not compile this script
//	TCL_EVAL_INVOKE:	Magical Tcl_EvalObjv mode for aliases/ensembles
//				o Run in iPtr->lookupNsPtr or global namespace
//				o Cut out of error traces
//				o Don't reset the flags controlling ensemble
//				  error message rewriting.
//	TCL_CANCEL_UNWIND:	Magical Tcl_CancelEval mode that causes the
//				stack for the script in progress to be
//				completely unwound.
//	TCL_EVAL_NOERR:	Do no exception reporting at all, just return
//				as the caller will report.

// Special freeProc values that may be passed to Tcl_SetResult (see the man
// page for details):

// Flag values passed to variable-related functions.
// WARNING: these bit choices must not conflict with the bit choice for
// TCL_CANCEL_UNWIND, above.

// Required to support old variable/vdelete/vinfo traces.
// Indicate the semantics of the result of a trace.

// Flag values for ensemble commands.

// Flag values passed to command-related functions.

// The TCL_PARSE_PART1 flag is deprecated and has no effect. The part1 is now
// always parsed whenever the part2 is NULL. (This is to avoid a common error
// when converting code to use the new object based APIs and forgetting to
// give the flag)

// Types for linked variables:

//----------------------------------------------------------------------------
// Forward declarations of Tcl_HashTable and related types.

type Tcl_HashKeyType = Tcl_HashKeyType1 /* tcl.h:1167:32 */
type Tcl_HashTable1 = struct {
	buckets       uintptr
	staticBuckets [4]uintptr
	numBuckets    int32
	numEntries    int32
	rebuildSize   int32
	downShift     int32
	mask          int32
	keyType       int32
	findProc      uintptr
	createProc    uintptr
	typePtr       uintptr
} /* tcl.h:1168:9 */

type Tcl_HashTable = Tcl_HashTable1 /* tcl.h:1168:30 */
type Tcl_HashEntry1 = struct {
	nextPtr    uintptr
	tablePtr   uintptr
	hash       uintptr
	clientData ClientData
	key        struct{ oneWordValue uintptr }
} /* tcl.h:1168:9 */

type Tcl_HashEntry = Tcl_HashEntry1 /* tcl.h:1169:30 */

// Structure definition for information used to keep track of searches through
// hash tables:

type Tcl_HashSearch1 = struct {
	tablePtr     uintptr
	nextIndex    int32
	_            [4]byte
	nextEntryPtr uintptr
} /* tcl.h:1323:9 */

// Structure definition for information used to keep track of searches through
// hash tables:

type Tcl_HashSearch = Tcl_HashSearch1 /* tcl.h:1329:3 */

// Acceptable key types for hash tables:
//
// TCL_STRING_KEYS:		The keys are strings, they are copied into the
//				entry.
// TCL_ONE_WORD_KEYS:		The keys are pointers, the pointer is stored
//				in the entry.
// TCL_CUSTOM_TYPE_KEYS:	The keys are arbitrary types which are copied
//				into the entry.
// TCL_CUSTOM_PTR_KEYS:		The keys are pointers to arbitrary types, the
//				pointer is stored in the entry.
//
// While maintaining binary compatibility the above have to be distinct values
// as they are used to differentiate between old versions of the hash table
// which don't have a typePtr and new ones which do. Once binary compatibility
// is discarded in favour of making more wide spread changes TCL_STRING_KEYS
// can be the same as TCL_CUSTOM_TYPE_KEYS, and TCL_ONE_WORD_KEYS can be the
// same as TCL_CUSTOM_PTR_KEYS because they simply determine how the key is
// accessed from the entry and not the behaviour.

// Structure definition for information used to keep track of searches through
// dictionaries. These fields should not be accessed by code outside
// tclDictObj.c

type Tcl_DictSearch = struct {
	next          uintptr
	epoch         int32
	_             [4]byte
	dictionaryPtr Tcl_Dict
} /* tcl.h:1369:3 */

// Positions to pass to Tcl_QueueEvent:

type Tcl_QueuePosition = uint32 /* tcl.h:1404:3 */

// Values to pass to Tcl_SetServiceMode to specify the behavior of notifier
// event routines.

// The following structure keeps is used to hold a time value, either as an
// absolute time (the number of seconds from the epoch) or as an elapsed time.
// On Unix systems the epoch is Midnight Jan 1, 1970 GMT.

type Tcl_Time1 = struct {
	sec  int32
	usec int32
} /* tcl.h:1420:9 */

// Values to pass to Tcl_SetServiceMode to specify the behavior of notifier
// event routines.

// The following structure keeps is used to hold a time value, either as an
// absolute time (the number of seconds from the epoch) or as an elapsed time.
// On Unix systems the epoch is Midnight Jan 1, 1970 GMT.

type Tcl_Time = Tcl_Time1 /* tcl.h:1423:3 */

// struct Tcl_ChannelType:
//
// One such structure exists for each type (kind) of channel. It collects
// together in one place all the functions that are part of the specific
// channel type.
//
// It is recommend that the Tcl_Channel* functions are used to access elements
// of this structure, instead of direct accessing.

type Tcl_ChannelType1 = struct {
	typeName         uintptr
	version          Tcl_ChannelTypeVersion
	closeProc        uintptr
	inputProc        uintptr
	outputProc       uintptr
	seekProc         uintptr
	setOptionProc    uintptr
	getOptionProc    uintptr
	watchProc        uintptr
	getHandleProc    uintptr
	close2Proc       uintptr
	blockModeProc    uintptr
	flushProc        uintptr
	handlerProc      uintptr
	wideSeekProc     uintptr
	threadActionProc uintptr
	truncateProc     uintptr
} /* tcl.h:1539:9 */

// struct Tcl_ChannelType:
//
// One such structure exists for each type (kind) of channel. It collects
// together in one place all the functions that are part of the specific
// channel type.
//
// It is recommend that the Tcl_Channel* functions are used to access elements
// of this structure, instead of direct accessing.

type Tcl_ChannelType = Tcl_ChannelType1 /* tcl.h:1607:3 */

// The following flags determine whether the blockModeProc above should set
// the channel into blocking or nonblocking mode. They are passed as arguments
// to the blockModeProc function in the above structure.

//----------------------------------------------------------------------------
// Enum for different types of file paths.

type Tcl_PathType = uint32 /* tcl.h:1628:3 */

// The following structure is used to pass glob type data amongst the various
// glob routines and Tcl_FSMatchInDirectory.

type Tcl_GlobTypeData1 = struct {
	__type     int32
	perm       int32
	macType    uintptr
	macCreator uintptr
} /* tcl.h:1635:9 */

// The following structure is used to pass glob type data amongst the various
// glob routines and Tcl_FSMatchInDirectory.

type Tcl_GlobTypeData = Tcl_GlobTypeData1 /* tcl.h:1640:3 */

type Tcl_FSVersion = uintptr /* tcl.h:1715:31 */

//----------------------------------------------------------------------------
// Data structures related to hooking into the filesystem

// Filesystem version tag.  This was introduced in 8.4.

// struct Tcl_Filesystem:
//
// One such structure exists for each type (kind) of filesystem. It collects
// together the functions that form the interface for a particulr the
// filesystem. Tcl always accesses the filesystem through one of these
// structures.
//
// Not all entries need be non-NULL; any which are NULL are simply ignored.
// However, a complete filesystem should provide all of these functions. The
// explanations in the structure show the importance of each function.

type Tcl_Filesystem1 = struct {
	typeName                 uintptr
	structureLength          int32
	_                        [4]byte
	version                  Tcl_FSVersion
	pathInFilesystemProc     uintptr
	dupInternalRepProc       uintptr
	freeInternalRepProc      uintptr
	internalToNormalizedProc uintptr
	createInternalRepProc    uintptr
	normalizePathProc        uintptr
	filesystemPathTypeProc   uintptr
	filesystemSeparatorProc  uintptr
	statProc                 uintptr
	accessProc               uintptr
	openFileChannelProc      uintptr
	matchInDirectoryProc     uintptr
	utimeProc                uintptr
	linkProc                 uintptr
	listVolumesProc          uintptr
	fileAttrStringsProc      uintptr
	fileAttrsGetProc         uintptr
	fileAttrsSetProc         uintptr
	createDirectoryProc      uintptr
	removeDirectoryProc      uintptr
	deleteFileProc           uintptr
	copyFileProc             uintptr
	renameFileProc           uintptr
	copyDirectoryProc        uintptr
	lstatProc                uintptr
	loadFileProc             uintptr
	getCwdProc               uintptr
	chdirProc                uintptr
} /* tcl.h:1741:9 */

//----------------------------------------------------------------------------
// Data structures related to hooking into the filesystem

// Filesystem version tag.  This was introduced in 8.4.

// struct Tcl_Filesystem:
//
// One such structure exists for each type (kind) of filesystem. It collects
// together the functions that form the interface for a particulr the
// filesystem. Tcl always accesses the filesystem through one of these
// structures.
//
// Not all entries need be non-NULL; any which are NULL are simply ignored.
// However, a complete filesystem should provide all of these functions. The
// explanations in the structure show the importance of each function.

type Tcl_Filesystem = Tcl_Filesystem1 /* tcl.h:1860:3 */

// The following definitions are used as values for the 'linkAction' flag to
// Tcl_FSLink, or the linkProc of any filesystem. Any combination of flags can
// be given. For link creation, the linkProc should create a link which
// matches any of the types given.
//
// TCL_CREATE_SYMBOLIC_LINK -	Create a symbolic or soft link.
// TCL_CREATE_HARD_LINK -	Create a hard link.

//----------------------------------------------------------------------------
// The following structure represents the Notifier functions that you can
// override with the Tcl_SetNotifier call.

type Tcl_NotifierProcs1 = struct {
	setTimerProc          uintptr
	waitForEventProc      uintptr
	createFileHandlerProc uintptr
	deleteFileHandlerProc uintptr
	initNotifierProc      uintptr
	finalizeNotifierProc  uintptr
	alertNotifierProc     uintptr
	serviceModeHookProc   uintptr
} /* tcl.h:1881:9 */

// The following definitions are used as values for the 'linkAction' flag to
// Tcl_FSLink, or the linkProc of any filesystem. Any combination of flags can
// be given. For link creation, the linkProc should create a link which
// matches any of the types given.
//
// TCL_CREATE_SYMBOLIC_LINK -	Create a symbolic or soft link.
// TCL_CREATE_HARD_LINK -	Create a hard link.

//----------------------------------------------------------------------------
// The following structure represents the Notifier functions that you can
// override with the Tcl_SetNotifier call.

type Tcl_NotifierProcs = Tcl_NotifierProcs1 /* tcl.h:1890:3 */

//----------------------------------------------------------------------------
// The following data structures and declarations are for the new Tcl parser.
//
// For each word of a command, and for each piece of a word such as a variable
// reference, one of the following structures is created to describe the
// token.

type Tcl_Token1 = struct {
	__type        int32
	_             [4]byte
	start         uintptr
	size          int32
	numComponents int32
} /* tcl.h:1901:9 */

//----------------------------------------------------------------------------
// The following data structures and declarations are for the new Tcl parser.
//
// For each word of a command, and for each piece of a word such as a variable
// reference, one of the following structures is created to describe the
// token.

type Tcl_Token = Tcl_Token1 /* tcl.h:1911:3 */

// Type values defined for Tcl_Token structures. These values are defined as
// mask bits so that it's easy to check for collections of types.
//
// TCL_TOKEN_WORD -		The token describes one word of a command,
//				from the first non-blank character of the word
//				(which may be " or {) up to but not including
//				the space, semicolon, or bracket that
//				terminates the word. NumComponents counts the
//				total number of sub-tokens that make up the
//				word. This includes, for example, sub-tokens
//				of TCL_TOKEN_VARIABLE tokens.
// TCL_TOKEN_SIMPLE_WORD -	This token is just like TCL_TOKEN_WORD except
//				that the word is guaranteed to consist of a
//				single TCL_TOKEN_TEXT sub-token.
// TCL_TOKEN_TEXT -		The token describes a range of literal text
//				that is part of a word. NumComponents is
//				always 0.
// TCL_TOKEN_BS -		The token describes a backslash sequence that
//				must be collapsed. NumComponents is always 0.
// TCL_TOKEN_COMMAND -		The token describes a command whose result
//				must be substituted into the word. The token
//				includes the enclosing brackets. NumComponents
//				is always 0.
// TCL_TOKEN_VARIABLE -		The token describes a variable substitution,
//				including the dollar sign, variable name, and
//				array index (if there is one) up through the
//				right parentheses. NumComponents tells how
//				many additional tokens follow to represent the
//				variable name. The first token will be a
//				TCL_TOKEN_TEXT token that describes the
//				variable name. If the variable is an array
//				reference then there will be one or more
//				additional tokens, of type TCL_TOKEN_TEXT,
//				TCL_TOKEN_BS, TCL_TOKEN_COMMAND, and
//				TCL_TOKEN_VARIABLE, that describe the array
//				index; numComponents counts the total number
//				of nested tokens that make up the variable
//				reference, including sub-tokens of
//				TCL_TOKEN_VARIABLE tokens.
// TCL_TOKEN_SUB_EXPR -		The token describes one subexpression of an
//				expression, from the first non-blank character
//				of the subexpression up to but not including
//				the space, brace, or bracket that terminates
//				the subexpression. NumComponents counts the
//				total number of following subtokens that make
//				up the subexpression; this includes all
//				subtokens for any nested TCL_TOKEN_SUB_EXPR
//				tokens. For example, a numeric value used as a
//				primitive operand is described by a
//				TCL_TOKEN_SUB_EXPR token followed by a
//				TCL_TOKEN_TEXT token. A binary subexpression
//				is described by a TCL_TOKEN_SUB_EXPR token
//				followed by the TCL_TOKEN_OPERATOR token for
//				the operator, then TCL_TOKEN_SUB_EXPR tokens
//				for the left then the right operands.
// TCL_TOKEN_OPERATOR -		The token describes one expression operator.
//				An operator might be the name of a math
//				function such as "abs". A TCL_TOKEN_OPERATOR
//				token is always preceded by one
//				TCL_TOKEN_SUB_EXPR token for the operator's
//				subexpression, and is followed by zero or more
//				TCL_TOKEN_SUB_EXPR tokens for the operator's
//				operands. NumComponents is always 0.
// TCL_TOKEN_EXPAND_WORD -	This token is just like TCL_TOKEN_WORD except
//				that it marks a word that began with the
//				literal character prefix "{*}". This word is
//				marked to be expanded - that is, broken into
//				words after substitution is complete.

// Parsing error types. On any parsing error, one of these values will be
// stored in the error field of the Tcl_Parse structure defined below.

// A structure of the following type is filled in by Tcl_ParseCommand. It
// describes a single command parsed from an input string.

type Tcl_Parse1 = struct {
	commentStart    uintptr
	commentSize     int32
	_               [4]byte
	commandStart    uintptr
	commandSize     int32
	numWords        int32
	tokenPtr        uintptr
	numTokens       int32
	tokensAvailable int32
	errorType       int32
	_               [4]byte
	string          uintptr
	end             uintptr
	interp          uintptr
	term            uintptr
	incomplete      int32
	_               [4]byte
	staticTokens    [20]Tcl_Token
} /* tcl.h:2017:9 */

// Type values defined for Tcl_Token structures. These values are defined as
// mask bits so that it's easy to check for collections of types.
//
// TCL_TOKEN_WORD -		The token describes one word of a command,
//				from the first non-blank character of the word
//				(which may be " or {) up to but not including
//				the space, semicolon, or bracket that
//				terminates the word. NumComponents counts the
//				total number of sub-tokens that make up the
//				word. This includes, for example, sub-tokens
//				of TCL_TOKEN_VARIABLE tokens.
// TCL_TOKEN_SIMPLE_WORD -	This token is just like TCL_TOKEN_WORD except
//				that the word is guaranteed to consist of a
//				single TCL_TOKEN_TEXT sub-token.
// TCL_TOKEN_TEXT -		The token describes a range of literal text
//				that is part of a word. NumComponents is
//				always 0.
// TCL_TOKEN_BS -		The token describes a backslash sequence that
//				must be collapsed. NumComponents is always 0.
// TCL_TOKEN_COMMAND -		The token describes a command whose result
//				must be substituted into the word. The token
//				includes the enclosing brackets. NumComponents
//				is always 0.
// TCL_TOKEN_VARIABLE -		The token describes a variable substitution,
//				including the dollar sign, variable name, and
//				array index (if there is one) up through the
//				right parentheses. NumComponents tells how
//				many additional tokens follow to represent the
//				variable name. The first token will be a
//				TCL_TOKEN_TEXT token that describes the
//				variable name. If the variable is an array
//				reference then there will be one or more
//				additional tokens, of type TCL_TOKEN_TEXT,
//				TCL_TOKEN_BS, TCL_TOKEN_COMMAND, and
//				TCL_TOKEN_VARIABLE, that describe the array
//				index; numComponents counts the total number
//				of nested tokens that make up the variable
//				reference, including sub-tokens of
//				TCL_TOKEN_VARIABLE tokens.
// TCL_TOKEN_SUB_EXPR -		The token describes one subexpression of an
//				expression, from the first non-blank character
//				of the subexpression up to but not including
//				the space, brace, or bracket that terminates
//				the subexpression. NumComponents counts the
//				total number of following subtokens that make
//				up the subexpression; this includes all
//				subtokens for any nested TCL_TOKEN_SUB_EXPR
//				tokens. For example, a numeric value used as a
//				primitive operand is described by a
//				TCL_TOKEN_SUB_EXPR token followed by a
//				TCL_TOKEN_TEXT token. A binary subexpression
//				is described by a TCL_TOKEN_SUB_EXPR token
//				followed by the TCL_TOKEN_OPERATOR token for
//				the operator, then TCL_TOKEN_SUB_EXPR tokens
//				for the left then the right operands.
// TCL_TOKEN_OPERATOR -		The token describes one expression operator.
//				An operator might be the name of a math
//				function such as "abs". A TCL_TOKEN_OPERATOR
//				token is always preceded by one
//				TCL_TOKEN_SUB_EXPR token for the operator's
//				subexpression, and is followed by zero or more
//				TCL_TOKEN_SUB_EXPR tokens for the operator's
//				operands. NumComponents is always 0.
// TCL_TOKEN_EXPAND_WORD -	This token is just like TCL_TOKEN_WORD except
//				that it marks a word that began with the
//				literal character prefix "{*}". This word is
//				marked to be expanded - that is, broken into
//				words after substitution is complete.

// Parsing error types. On any parsing error, one of these values will be
// stored in the error field of the Tcl_Parse structure defined below.

// A structure of the following type is filled in by Tcl_ParseCommand. It
// describes a single command parsed from an input string.

type Tcl_Parse = Tcl_Parse1 /* tcl.h:2070:3 */

//----------------------------------------------------------------------------
// The following structure represents a user-defined encoding. It collects
// together all the functions that are used by the specific encoding.

type Tcl_EncodingType1 = struct {
	encodingName uintptr
	toUtfProc    uintptr
	fromUtfProc  uintptr
	freeProc     uintptr
	clientData   ClientData
	nullSize     int32
	_            [4]byte
} /* tcl.h:2078:9 */

//----------------------------------------------------------------------------
// The following structure represents a user-defined encoding. It collects
// together all the functions that are used by the specific encoding.

type Tcl_EncodingType = Tcl_EncodingType1 /* tcl.h:2098:3 */

// The following definitions are used as values for the conversion control
// flags argument when converting text from one character set to another:
//
// TCL_ENCODING_START -		Signifies that the source buffer is the first
//				block in a (potentially multi-block) input
//				stream. Tells the conversion function to reset
//				to an initial state and perform any
//				initialization that needs to occur before the
//				first byte is converted. If the source buffer
//				contains the entire input stream to be
//				converted, this flag should be set.
// TCL_ENCODING_END -		Signifies that the source buffer is the last
//				block in a (potentially multi-block) input
//				stream. Tells the conversion routine to
//				perform any finalization that needs to occur
//				after the last byte is converted and then to
//				reset to an initial state. If the source
//				buffer contains the entire input stream to be
//				converted, this flag should be set.
// TCL_ENCODING_STOPONERROR -	If set, the converter returns immediately upon
//				encountering an invalid byte sequence or a
//				source character that has no mapping in the
//				target encoding. If clear, the converter
//				substitues the problematic character(s) with
//				one or more "close" characters in the
//				destination buffer and then continues to
//				convert the source.
// TCL_ENCODING_NO_TERMINATE - 	If set, Tcl_ExternalToUtf does not append a
//				terminating NUL byte.  Since it does not need
//				an extra byte for a terminating NUL, it fills
//				all dstLen bytes with encoded UTF-8 content if
//				needed.  If clear, a byte is reserved in the
//				dst space for NUL termination, and a
//				terminating NUL is appended.
// TCL_ENCODING_CHAR_LIMIT -	If set and dstCharsPtr is not NULL, then
//				Tcl_ExternalToUtf takes the initial value of
//				*dstCharsPtr as a limit of the maximum number
//				of chars to produce in the encoded UTF-8
//				content.  Otherwise, the number of chars
//				produced is controlled only by other limiting
//				factors.

// The following definitions are the error codes returned by the conversion
// routines:
//
// TCL_OK -			All characters were converted.
// TCL_CONVERT_NOSPACE -	The output buffer would not have been large
//				enough for all of the converted data; as many
//				characters as could fit were converted though.
// TCL_CONVERT_MULTIBYTE -	The last few bytes in the source string were
//				the beginning of a multibyte sequence, but
//				more bytes were needed to complete this
//				sequence. A subsequent call to the conversion
//				routine should pass the beginning of this
//				unconverted sequence plus additional bytes
//				from the source stream to properly convert the
//				formerly split-up multibyte sequence.
// TCL_CONVERT_SYNTAX -		The source stream contained an invalid
//				character sequence. This may occur if the
//				input stream has been damaged or if the input
//				encoding method was misidentified. This error
//				is reported only if TCL_ENCODING_STOPONERROR
//				was specified.
// TCL_CONVERT_UNKNOWN -	The source string contained a character that
//				could not be represented in the target
//				encoding. This error is reported only if
//				TCL_ENCODING_STOPONERROR was specified.

// The maximum number of bytes that are necessary to represent a single
// Unicode character in UTF-8. The valid values should be 3, 4 or 6
// (or perhaps 1 if we want to support a non-unicode enabled core). If 3 or
// 4, then Tcl_UniChar must be 2-bytes in size (UCS-2) (the default). If 6,
// then Tcl_UniChar must be 4-bytes in size (UCS-4). At this time UCS-2 mode
// is the default and recommended mode. UCS-4 is experimental and not
// recommended. It works for the core, but most extensions expect UCS-2.

// This represents a Unicode character. Any changes to this should also be
// reflected in regcustom.h.

type Tcl_UniChar = uint16 /* tcl.h:2212:24 */

//----------------------------------------------------------------------------
// TIP #59: The following structure is used in calls 'Tcl_RegisterConfig' to
// provide the system with the embedded configuration data.

type Tcl_Config1 = struct {
	key   uintptr
	value uintptr
} /* tcl.h:2221:9 */

//----------------------------------------------------------------------------
// TIP #59: The following structure is used in calls 'Tcl_RegisterConfig' to
// provide the system with the embedded configuration data.

type Tcl_Config = Tcl_Config1 /* tcl.h:2226:3 */

//----------------------------------------------------------------------------
// Override definitions for libtommath.

type mp_int1 = struct {
	used  int32
	alloc int32
	sign  mp_sign
	_     [4]byte
	dp    uintptr
} /* tcl.h:2250:9 */

//----------------------------------------------------------------------------
// Override definitions for libtommath.

type mp_int = mp_int1  /* tcl.h:2250:23 */
type mp_digit = uint32 /* tcl.h:2252:22 */

//----------------------------------------------------------------------------
// Definitions needed for Tcl_ParseArgvObj routines.
// Based on tkArgv.c.
// Modifications from the original are copyright (c) Sam Bromley 2006

type Tcl_ArgvInfo = struct {
	__type     int32
	_          [4]byte
	keyStr     uintptr
	srcPtr     uintptr
	dstPtr     uintptr
	helpStr    uintptr
	clientData ClientData
} /* tcl.h:2273:3 */

type TclPlatStubs1 = struct {
	magic             int32
	_                 [4]byte
	hooks             uintptr
	tcl_WinUtfToTChar uintptr
	tcl_WinTCharToUtf uintptr
} /* tclDecls.h:1851:11 */

type TclIntStubs1 = struct {
	magic                        int32
	_                            [4]byte
	hooks                        uintptr
	reserved0                    uintptr
	reserved1                    uintptr
	reserved2                    uintptr
	tclAllocateFreeObjects       uintptr
	reserved4                    uintptr
	tclCleanupChildren           uintptr
	tclCleanupCommand            uintptr
	tclCopyAndCollapse           uintptr
	tclCopyChannelOld            uintptr
	tclCreatePipeline            uintptr
	tclCreateProc                uintptr
	tclDeleteCompiledLocalVars   uintptr
	tclDeleteVars                uintptr
	reserved13                   uintptr
	tclDumpMemoryInfo            uintptr
	reserved15                   uintptr
	tclExprFloatError            uintptr
	reserved17                   uintptr
	reserved18                   uintptr
	reserved19                   uintptr
	reserved20                   uintptr
	reserved21                   uintptr
	tclFindElement               uintptr
	tclFindProc                  uintptr
	tclFormatInt                 uintptr
	tclFreePackageInfo           uintptr
	reserved26                   uintptr
	reserved27                   uintptr
	tclpGetDefaultStdChannel     uintptr
	reserved29                   uintptr
	reserved30                   uintptr
	tclGetExtension              uintptr
	tclGetFrame                  uintptr
	reserved33                   uintptr
	tclGetIntForIndex            uintptr
	reserved35                   uintptr
	reserved36                   uintptr
	tclGetLoadedPackages         uintptr
	tclGetNamespaceForQualName   uintptr
	tclGetObjInterpProc          uintptr
	tclGetOpenMode               uintptr
	tclGetOriginalCommand        uintptr
	tclpGetUserHome              uintptr
	reserved43                   uintptr
	tclGuessPackageName          uintptr
	tclHideUnsafeCommands        uintptr
	tclInExit                    uintptr
	reserved47                   uintptr
	reserved48                   uintptr
	reserved49                   uintptr
	tclInitCompiledLocals        uintptr
	tclInterpInit                uintptr
	reserved52                   uintptr
	tclInvokeObjectCommand       uintptr
	tclInvokeStringCommand       uintptr
	tclIsProc                    uintptr
	reserved56                   uintptr
	reserved57                   uintptr
	tclLookupVar                 uintptr
	reserved59                   uintptr
	tclNeedSpace                 uintptr
	tclNewProcBodyObj            uintptr
	tclObjCommandComplete        uintptr
	tclObjInterpProc             uintptr
	tclObjInvoke                 uintptr
	reserved65                   uintptr
	reserved66                   uintptr
	reserved67                   uintptr
	reserved68                   uintptr
	tclpAlloc                    uintptr
	reserved70                   uintptr
	reserved71                   uintptr
	reserved72                   uintptr
	reserved73                   uintptr
	tclpFree                     uintptr
	tclpGetClicks                uintptr
	tclpGetSeconds               uintptr
	tclpGetTime                  uintptr
	reserved78                   uintptr
	reserved79                   uintptr
	reserved80                   uintptr
	tclpRealloc                  uintptr
	reserved82                   uintptr
	reserved83                   uintptr
	reserved84                   uintptr
	reserved85                   uintptr
	reserved86                   uintptr
	reserved87                   uintptr
	tclPrecTraceProc             uintptr
	tclPreventAliasLoop          uintptr
	reserved90                   uintptr
	tclProcCleanupProc           uintptr
	tclProcCompileProc           uintptr
	tclProcDeleteProc            uintptr
	reserved94                   uintptr
	reserved95                   uintptr
	tclRenameCommand             uintptr
	tclResetShadowedCmdRefs      uintptr
	tclServiceIdle               uintptr
	reserved99                   uintptr
	reserved100                  uintptr
	tclSetPreInitScript          uintptr
	tclSetupEnv                  uintptr
	tclSockGetPort               uintptr
	tclSockMinimumBuffersOld     uintptr
	reserved105                  uintptr
	reserved106                  uintptr
	reserved107                  uintptr
	tclTeardownNamespace         uintptr
	tclUpdateReturnInfo          uintptr
	tclSockMinimumBuffers        uintptr
	tcl_AddInterpResolvers       uintptr
	tcl_AppendExportList         uintptr
	tcl_CreateNamespace          uintptr
	tcl_DeleteNamespace          uintptr
	tcl_Export                   uintptr
	tcl_FindCommand              uintptr
	tcl_FindNamespace            uintptr
	tcl_GetInterpResolvers       uintptr
	tcl_GetNamespaceResolvers    uintptr
	tcl_FindNamespaceVar         uintptr
	tcl_ForgetImport             uintptr
	tcl_GetCommandFromObj        uintptr
	tcl_GetCommandFullName       uintptr
	tcl_GetCurrentNamespace      uintptr
	tcl_GetGlobalNamespace       uintptr
	tcl_GetVariableFullName      uintptr
	tcl_Import                   uintptr
	tcl_PopCallFrame             uintptr
	tcl_PushCallFrame            uintptr
	tcl_RemoveInterpResolvers    uintptr
	tcl_SetNamespaceResolvers    uintptr
	tclpHasSockets               uintptr
	tclpGetDate                  uintptr
	reserved134                  uintptr
	reserved135                  uintptr
	reserved136                  uintptr
	reserved137                  uintptr
	tclGetEnv                    uintptr
	reserved139                  uintptr
	reserved140                  uintptr
	tclpGetCwd                   uintptr
	tclSetByteCodeFromAny        uintptr
	tclAddLiteralObj             uintptr
	tclHideLiteral               uintptr
	tclGetAuxDataType            uintptr
	tclHandleCreate              uintptr
	tclHandleFree                uintptr
	tclHandlePreserve            uintptr
	tclHandleRelease             uintptr
	tclRegAbout                  uintptr
	tclRegExpRangeUniChar        uintptr
	tclSetLibraryPath            uintptr
	tclGetLibraryPath            uintptr
	reserved154                  uintptr
	reserved155                  uintptr
	tclRegError                  uintptr
	tclVarTraceExists            uintptr
	tclSetStartupScriptFileName  uintptr
	tclGetStartupScriptFileName  uintptr
	reserved160                  uintptr
	tclChannelTransform          uintptr
	tclChannelEventScriptInvoker uintptr
	tclGetInstructionTable       uintptr
	tclExpandCodeArray           uintptr
	tclpSetInitialEncodings      uintptr
	tclListObjSetElement         uintptr
	tclSetStartupScriptPath      uintptr
	tclGetStartupScriptPath      uintptr
	tclpUtfNcmp2                 uintptr
	tclCheckInterpTraces         uintptr
	tclCheckExecutionTraces      uintptr
	tclInThreadExit              uintptr
	tclUniCharMatch              uintptr
	reserved174                  uintptr
	tclCallVarTraces             uintptr
	tclCleanupVar                uintptr
	tclVarErrMsg                 uintptr
	tcl_SetStartupScript         uintptr
	tcl_GetStartupScript         uintptr
	reserved180                  uintptr
	reserved181                  uintptr
	tclpLocaltime                uintptr
	tclpGmtime                   uintptr
	reserved184                  uintptr
	reserved185                  uintptr
	reserved186                  uintptr
	reserved187                  uintptr
	reserved188                  uintptr
	reserved189                  uintptr
	reserved190                  uintptr
	reserved191                  uintptr
	reserved192                  uintptr
	reserved193                  uintptr
	reserved194                  uintptr
	reserved195                  uintptr
	reserved196                  uintptr
	reserved197                  uintptr
	tclObjGetFrame               uintptr
	reserved199                  uintptr
	tclpObjRemoveDirectory       uintptr
	tclpObjCopyDirectory         uintptr
	tclpObjCreateDirectory       uintptr
	tclpObjDeleteFile            uintptr
	tclpObjCopyFile              uintptr
	tclpObjRenameFile            uintptr
	tclpObjStat                  uintptr
	tclpObjAccess                uintptr
	tclpOpenFileChannel          uintptr
	reserved209                  uintptr
	reserved210                  uintptr
	reserved211                  uintptr
	tclpFindExecutable           uintptr
	tclGetObjNameOfExecutable    uintptr
	tclSetObjNameOfExecutable    uintptr
	tclStackAlloc                uintptr
	tclStackFree                 uintptr
	tclPushStackFrame            uintptr
	tclPopStackFrame             uintptr
	reserved219                  uintptr
	reserved220                  uintptr
	reserved221                  uintptr
	reserved222                  uintptr
	reserved223                  uintptr
	tclGetPlatform               uintptr
	tclTraceDictPath             uintptr
	tclObjBeingDeleted           uintptr
	tclSetNsPath                 uintptr
	reserved228                  uintptr
	tclPtrMakeUpvar              uintptr
	tclObjLookupVar              uintptr
	tclGetNamespaceFromObj       uintptr
	tclEvalObjEx                 uintptr
	tclGetSrcInfoForPc           uintptr
	tclVarHashCreateVar          uintptr
	tclInitVarHashTable          uintptr
	tclBackgroundException       uintptr
	tclResetCancellation         uintptr
	tclNRInterpProc              uintptr
	tclNRInterpProcCore          uintptr
	tclNRRunCallbacks            uintptr
	tclNREvalObjEx               uintptr
	tclNREvalObjv                uintptr
	tclDbDumpActiveObjects       uintptr
	tclGetNamespaceChildTable    uintptr
	tclGetNamespaceCommandTable  uintptr
	tclInitRewriteEnsemble       uintptr
	tclResetRewriteEnsemble      uintptr
	tclCopyChannel               uintptr
	tclDoubleDigits              uintptr
	tclSetSlaveCancelFlags       uintptr
	tclRegisterLiteral           uintptr
	tclPtrGetVar                 uintptr
	tclPtrSetVar                 uintptr
	tclPtrIncrObjVar             uintptr
	tclPtrObjMakeUpvar           uintptr
	tclPtrUnsetVar               uintptr
	tclStaticPackage             uintptr
	reserved258                  uintptr
	reserved259                  uintptr
	tclUnusedStubEntry           uintptr
} /* tclDecls.h:1852:11 */

type TclIntPlatStubs1 = struct {
	magic                    int32
	_                        [4]byte
	hooks                    uintptr
	tclWinConvertError       uintptr
	tclWinConvertWSAError    uintptr
	tclWinGetServByName      uintptr
	tclWinGetSockOpt         uintptr
	tclWinGetTclInstance     uintptr
	tclUnixWaitForFile       uintptr
	tclWinNToHS              uintptr
	tclWinSetSockOpt         uintptr
	tclpGetPid               uintptr
	tclWinGetPlatformId      uintptr
	tclpReaddir              uintptr
	tclGetAndDetachPids      uintptr
	tclpCloseFile            uintptr
	tclpCreateCommandChannel uintptr
	tclpCreatePipe           uintptr
	tclpCreateProcess        uintptr
	tclpIsAtty               uintptr
	tclUnixCopyFile          uintptr
	tclpMakeFile             uintptr
	tclpOpenFile             uintptr
	tclWinAddProcess         uintptr
	tclpInetNtoa             uintptr
	tclpCreateTempFile       uintptr
	reserved23               uintptr
	tclWinNoBackslash        uintptr
	reserved25               uintptr
	tclWinSetInterfaces      uintptr
	tclWinFlushDirtyChannels uintptr
	tclWinResetInterfaces    uintptr
	tclWinCPUID              uintptr
	tclUnixOpenTemporaryFile uintptr
} /* tclDecls.h:1853:11 */

type TclStubHooks = struct {
	tclPlatStubs    uintptr
	tclIntStubs     uintptr
	tclIntPlatStubs uintptr
} /* tclDecls.h:1854:3 */

type TclStubs = struct {
	magic                                  int32
	_                                      [4]byte
	hooks                                  uintptr
	tcl_PkgProvideEx                       uintptr
	tcl_PkgRequireEx                       uintptr
	tcl_Panic                              uintptr
	tcl_Alloc                              uintptr
	tcl_Free                               uintptr
	tcl_Realloc                            uintptr
	tcl_DbCkalloc                          uintptr
	tcl_DbCkfree                           uintptr
	tcl_DbCkrealloc                        uintptr
	reserved9                              uintptr
	reserved10                             uintptr
	tcl_SetTimer                           uintptr
	tcl_Sleep                              uintptr
	tcl_WaitForEvent                       uintptr
	tcl_AppendAllObjTypes                  uintptr
	tcl_AppendStringsToObj                 uintptr
	tcl_AppendToObj                        uintptr
	tcl_ConcatObj                          uintptr
	tcl_ConvertToType                      uintptr
	tcl_DbDecrRefCount                     uintptr
	tcl_DbIncrRefCount                     uintptr
	tcl_DbIsShared                         uintptr
	tcl_DbNewBooleanObj                    uintptr
	tcl_DbNewByteArrayObj                  uintptr
	tcl_DbNewDoubleObj                     uintptr
	tcl_DbNewListObj                       uintptr
	tcl_DbNewLongObj                       uintptr
	tcl_DbNewObj                           uintptr
	tcl_DbNewStringObj                     uintptr
	tcl_DuplicateObj                       uintptr
	tclFreeObj                             uintptr
	tcl_GetBoolean                         uintptr
	tcl_GetBooleanFromObj                  uintptr
	tcl_GetByteArrayFromObj                uintptr
	tcl_GetDouble                          uintptr
	tcl_GetDoubleFromObj                   uintptr
	tcl_GetIndexFromObj                    uintptr
	tcl_GetInt                             uintptr
	tcl_GetIntFromObj                      uintptr
	tcl_GetLongFromObj                     uintptr
	tcl_GetObjType                         uintptr
	tcl_GetStringFromObj                   uintptr
	tcl_InvalidateStringRep                uintptr
	tcl_ListObjAppendList                  uintptr
	tcl_ListObjAppendElement               uintptr
	tcl_ListObjGetElements                 uintptr
	tcl_ListObjIndex                       uintptr
	tcl_ListObjLength                      uintptr
	tcl_ListObjReplace                     uintptr
	tcl_NewBooleanObj                      uintptr
	tcl_NewByteArrayObj                    uintptr
	tcl_NewDoubleObj                       uintptr
	tcl_NewIntObj                          uintptr
	tcl_NewListObj                         uintptr
	tcl_NewLongObj                         uintptr
	tcl_NewObj                             uintptr
	tcl_NewStringObj                       uintptr
	tcl_SetBooleanObj                      uintptr
	tcl_SetByteArrayLength                 uintptr
	tcl_SetByteArrayObj                    uintptr
	tcl_SetDoubleObj                       uintptr
	tcl_SetIntObj                          uintptr
	tcl_SetListObj                         uintptr
	tcl_SetLongObj                         uintptr
	tcl_SetObjLength                       uintptr
	tcl_SetStringObj                       uintptr
	tcl_AddErrorInfo                       uintptr
	tcl_AddObjErrorInfo                    uintptr
	tcl_AllowExceptions                    uintptr
	tcl_AppendElement                      uintptr
	tcl_AppendResult                       uintptr
	tcl_AsyncCreate                        uintptr
	tcl_AsyncDelete                        uintptr
	tcl_AsyncInvoke                        uintptr
	tcl_AsyncMark                          uintptr
	tcl_AsyncReady                         uintptr
	tcl_BackgroundError                    uintptr
	tcl_Backslash                          uintptr
	tcl_BadChannelOption                   uintptr
	tcl_CallWhenDeleted                    uintptr
	tcl_CancelIdleCall                     uintptr
	tcl_Close                              uintptr
	tcl_CommandComplete                    uintptr
	tcl_Concat                             uintptr
	tcl_ConvertElement                     uintptr
	tcl_ConvertCountedElement              uintptr
	tcl_CreateAlias                        uintptr
	tcl_CreateAliasObj                     uintptr
	tcl_CreateChannel                      uintptr
	tcl_CreateChannelHandler               uintptr
	tcl_CreateCloseHandler                 uintptr
	tcl_CreateCommand                      uintptr
	tcl_CreateEventSource                  uintptr
	tcl_CreateExitHandler                  uintptr
	tcl_CreateInterp                       uintptr
	tcl_CreateMathFunc                     uintptr
	tcl_CreateObjCommand                   uintptr
	tcl_CreateSlave                        uintptr
	tcl_CreateTimerHandler                 uintptr
	tcl_CreateTrace                        uintptr
	tcl_DeleteAssocData                    uintptr
	tcl_DeleteChannelHandler               uintptr
	tcl_DeleteCloseHandler                 uintptr
	tcl_DeleteCommand                      uintptr
	tcl_DeleteCommandFromToken             uintptr
	tcl_DeleteEvents                       uintptr
	tcl_DeleteEventSource                  uintptr
	tcl_DeleteExitHandler                  uintptr
	tcl_DeleteHashEntry                    uintptr
	tcl_DeleteHashTable                    uintptr
	tcl_DeleteInterp                       uintptr
	tcl_DetachPids                         uintptr
	tcl_DeleteTimerHandler                 uintptr
	tcl_DeleteTrace                        uintptr
	tcl_DontCallWhenDeleted                uintptr
	tcl_DoOneEvent                         uintptr
	tcl_DoWhenIdle                         uintptr
	tcl_DStringAppend                      uintptr
	tcl_DStringAppendElement               uintptr
	tcl_DStringEndSublist                  uintptr
	tcl_DStringFree                        uintptr
	tcl_DStringGetResult                   uintptr
	tcl_DStringInit                        uintptr
	tcl_DStringResult                      uintptr
	tcl_DStringSetLength                   uintptr
	tcl_DStringStartSublist                uintptr
	tcl_Eof                                uintptr
	tcl_ErrnoId                            uintptr
	tcl_ErrnoMsg                           uintptr
	tcl_Eval                               uintptr
	tcl_EvalFile                           uintptr
	tcl_EvalObj                            uintptr
	tcl_EventuallyFree                     uintptr
	tcl_Exit                               uintptr
	tcl_ExposeCommand                      uintptr
	tcl_ExprBoolean                        uintptr
	tcl_ExprBooleanObj                     uintptr
	tcl_ExprDouble                         uintptr
	tcl_ExprDoubleObj                      uintptr
	tcl_ExprLong                           uintptr
	tcl_ExprLongObj                        uintptr
	tcl_ExprObj                            uintptr
	tcl_ExprString                         uintptr
	tcl_Finalize                           uintptr
	tcl_FindExecutable                     uintptr
	tcl_FirstHashEntry                     uintptr
	tcl_Flush                              uintptr
	tcl_FreeResult                         uintptr
	tcl_GetAlias                           uintptr
	tcl_GetAliasObj                        uintptr
	tcl_GetAssocData                       uintptr
	tcl_GetChannel                         uintptr
	tcl_GetChannelBufferSize               uintptr
	tcl_GetChannelHandle                   uintptr
	tcl_GetChannelInstanceData             uintptr
	tcl_GetChannelMode                     uintptr
	tcl_GetChannelName                     uintptr
	tcl_GetChannelOption                   uintptr
	tcl_GetChannelType                     uintptr
	tcl_GetCommandInfo                     uintptr
	tcl_GetCommandName                     uintptr
	tcl_GetErrno                           uintptr
	tcl_GetHostName                        uintptr
	tcl_GetInterpPath                      uintptr
	tcl_GetMaster                          uintptr
	tcl_GetNameOfExecutable                uintptr
	tcl_GetObjResult                       uintptr
	reserved167                            uintptr
	tcl_GetPathType                        uintptr
	tcl_Gets                               uintptr
	tcl_GetsObj                            uintptr
	tcl_GetServiceMode                     uintptr
	tcl_GetSlave                           uintptr
	tcl_GetStdChannel                      uintptr
	tcl_GetStringResult                    uintptr
	tcl_GetVar                             uintptr
	tcl_GetVar2                            uintptr
	tcl_GlobalEval                         uintptr
	tcl_GlobalEvalObj                      uintptr
	tcl_HideCommand                        uintptr
	tcl_Init                               uintptr
	tcl_InitHashTable                      uintptr
	tcl_InputBlocked                       uintptr
	tcl_InputBuffered                      uintptr
	tcl_InterpDeleted                      uintptr
	tcl_IsSafe                             uintptr
	tcl_JoinPath                           uintptr
	tcl_LinkVar                            uintptr
	reserved188                            uintptr
	tcl_MakeFileChannel                    uintptr
	tcl_MakeSafe                           uintptr
	tcl_MakeTcpClientChannel               uintptr
	tcl_Merge                              uintptr
	tcl_NextHashEntry                      uintptr
	tcl_NotifyChannel                      uintptr
	tcl_ObjGetVar2                         uintptr
	tcl_ObjSetVar2                         uintptr
	tcl_OpenCommandChannel                 uintptr
	tcl_OpenFileChannel                    uintptr
	tcl_OpenTcpClient                      uintptr
	tcl_OpenTcpServer                      uintptr
	tcl_Preserve                           uintptr
	tcl_PrintDouble                        uintptr
	tcl_PutEnv                             uintptr
	tcl_PosixError                         uintptr
	tcl_QueueEvent                         uintptr
	tcl_Read                               uintptr
	tcl_ReapDetachedProcs                  uintptr
	tcl_RecordAndEval                      uintptr
	tcl_RecordAndEvalObj                   uintptr
	tcl_RegisterChannel                    uintptr
	tcl_RegisterObjType                    uintptr
	tcl_RegExpCompile                      uintptr
	tcl_RegExpExec                         uintptr
	tcl_RegExpMatch                        uintptr
	tcl_RegExpRange                        uintptr
	tcl_Release                            uintptr
	tcl_ResetResult                        uintptr
	tcl_ScanElement                        uintptr
	tcl_ScanCountedElement                 uintptr
	tcl_SeekOld                            uintptr
	tcl_ServiceAll                         uintptr
	tcl_ServiceEvent                       uintptr
	tcl_SetAssocData                       uintptr
	tcl_SetChannelBufferSize               uintptr
	tcl_SetChannelOption                   uintptr
	tcl_SetCommandInfo                     uintptr
	tcl_SetErrno                           uintptr
	tcl_SetErrorCode                       uintptr
	tcl_SetMaxBlockTime                    uintptr
	tcl_SetPanicProc                       uintptr
	tcl_SetRecursionLimit                  uintptr
	tcl_SetResult                          uintptr
	tcl_SetServiceMode                     uintptr
	tcl_SetObjErrorCode                    uintptr
	tcl_SetObjResult                       uintptr
	tcl_SetStdChannel                      uintptr
	tcl_SetVar                             uintptr
	tcl_SetVar2                            uintptr
	tcl_SignalId                           uintptr
	tcl_SignalMsg                          uintptr
	tcl_SourceRCFile                       uintptr
	tcl_SplitList                          uintptr
	tcl_SplitPath                          uintptr
	tcl_StaticPackage                      uintptr
	tcl_StringMatch                        uintptr
	tcl_TellOld                            uintptr
	tcl_TraceVar                           uintptr
	tcl_TraceVar2                          uintptr
	tcl_TranslateFileName                  uintptr
	tcl_Ungets                             uintptr
	tcl_UnlinkVar                          uintptr
	tcl_UnregisterChannel                  uintptr
	tcl_UnsetVar                           uintptr
	tcl_UnsetVar2                          uintptr
	tcl_UntraceVar                         uintptr
	tcl_UntraceVar2                        uintptr
	tcl_UpdateLinkedVar                    uintptr
	tcl_UpVar                              uintptr
	tcl_UpVar2                             uintptr
	tcl_VarEval                            uintptr
	tcl_VarTraceInfo                       uintptr
	tcl_VarTraceInfo2                      uintptr
	tcl_Write                              uintptr
	tcl_WrongNumArgs                       uintptr
	tcl_DumpActiveMemory                   uintptr
	tcl_ValidateAllMemory                  uintptr
	tcl_AppendResultVA                     uintptr
	tcl_AppendStringsToObjVA               uintptr
	tcl_HashStats                          uintptr
	tcl_ParseVar                           uintptr
	tcl_PkgPresent                         uintptr
	tcl_PkgPresentEx                       uintptr
	tcl_PkgProvide                         uintptr
	tcl_PkgRequire                         uintptr
	tcl_SetErrorCodeVA                     uintptr
	tcl_VarEvalVA                          uintptr
	tcl_WaitPid                            uintptr
	tcl_PanicVA                            uintptr
	tcl_GetVersion                         uintptr
	tcl_InitMemory                         uintptr
	tcl_StackChannel                       uintptr
	tcl_UnstackChannel                     uintptr
	tcl_GetStackedChannel                  uintptr
	tcl_SetMainLoop                        uintptr
	reserved285                            uintptr
	tcl_AppendObjToObj                     uintptr
	tcl_CreateEncoding                     uintptr
	tcl_CreateThreadExitHandler            uintptr
	tcl_DeleteThreadExitHandler            uintptr
	tcl_DiscardResult                      uintptr
	tcl_EvalEx                             uintptr
	tcl_EvalObjv                           uintptr
	tcl_EvalObjEx                          uintptr
	tcl_ExitThread                         uintptr
	tcl_ExternalToUtf                      uintptr
	tcl_ExternalToUtfDString               uintptr
	tcl_FinalizeThread                     uintptr
	tcl_FinalizeNotifier                   uintptr
	tcl_FreeEncoding                       uintptr
	tcl_GetCurrentThread                   uintptr
	tcl_GetEncoding                        uintptr
	tcl_GetEncodingName                    uintptr
	tcl_GetEncodingNames                   uintptr
	tcl_GetIndexFromObjStruct              uintptr
	tcl_GetThreadData                      uintptr
	tcl_GetVar2Ex                          uintptr
	tcl_InitNotifier                       uintptr
	tcl_MutexLock                          uintptr
	tcl_MutexUnlock                        uintptr
	tcl_ConditionNotify                    uintptr
	tcl_ConditionWait                      uintptr
	tcl_NumUtfChars                        uintptr
	tcl_ReadChars                          uintptr
	tcl_RestoreResult                      uintptr
	tcl_SaveResult                         uintptr
	tcl_SetSystemEncoding                  uintptr
	tcl_SetVar2Ex                          uintptr
	tcl_ThreadAlert                        uintptr
	tcl_ThreadQueueEvent                   uintptr
	tcl_UniCharAtIndex                     uintptr
	tcl_UniCharToLower                     uintptr
	tcl_UniCharToTitle                     uintptr
	tcl_UniCharToUpper                     uintptr
	tcl_UniCharToUtf                       uintptr
	tcl_UtfAtIndex                         uintptr
	tcl_UtfCharComplete                    uintptr
	tcl_UtfBackslash                       uintptr
	tcl_UtfFindFirst                       uintptr
	tcl_UtfFindLast                        uintptr
	tcl_UtfNext                            uintptr
	tcl_UtfPrev                            uintptr
	tcl_UtfToExternal                      uintptr
	tcl_UtfToExternalDString               uintptr
	tcl_UtfToLower                         uintptr
	tcl_UtfToTitle                         uintptr
	tcl_UtfToUniChar                       uintptr
	tcl_UtfToUpper                         uintptr
	tcl_WriteChars                         uintptr
	tcl_WriteObj                           uintptr
	tcl_GetString                          uintptr
	tcl_GetDefaultEncodingDir              uintptr
	tcl_SetDefaultEncodingDir              uintptr
	tcl_AlertNotifier                      uintptr
	tcl_ServiceModeHook                    uintptr
	tcl_UniCharIsAlnum                     uintptr
	tcl_UniCharIsAlpha                     uintptr
	tcl_UniCharIsDigit                     uintptr
	tcl_UniCharIsLower                     uintptr
	tcl_UniCharIsSpace                     uintptr
	tcl_UniCharIsUpper                     uintptr
	tcl_UniCharIsWordChar                  uintptr
	tcl_UniCharLen                         uintptr
	tcl_UniCharNcmp                        uintptr
	tcl_UniCharToUtfDString                uintptr
	tcl_UtfToUniCharDString                uintptr
	tcl_GetRegExpFromObj                   uintptr
	tcl_EvalTokens                         uintptr
	tcl_FreeParse                          uintptr
	tcl_LogCommandInfo                     uintptr
	tcl_ParseBraces                        uintptr
	tcl_ParseCommand                       uintptr
	tcl_ParseExpr                          uintptr
	tcl_ParseQuotedString                  uintptr
	tcl_ParseVarName                       uintptr
	tcl_GetCwd                             uintptr
	tcl_Chdir                              uintptr
	tcl_Access                             uintptr
	tcl_Stat                               uintptr
	tcl_UtfNcmp                            uintptr
	tcl_UtfNcasecmp                        uintptr
	tcl_StringCaseMatch                    uintptr
	tcl_UniCharIsControl                   uintptr
	tcl_UniCharIsGraph                     uintptr
	tcl_UniCharIsPrint                     uintptr
	tcl_UniCharIsPunct                     uintptr
	tcl_RegExpExecObj                      uintptr
	tcl_RegExpGetInfo                      uintptr
	tcl_NewUnicodeObj                      uintptr
	tcl_SetUnicodeObj                      uintptr
	tcl_GetCharLength                      uintptr
	tcl_GetUniChar                         uintptr
	tcl_GetUnicode                         uintptr
	tcl_GetRange                           uintptr
	tcl_AppendUnicodeToObj                 uintptr
	tcl_RegExpMatchObj                     uintptr
	tcl_SetNotifier                        uintptr
	tcl_GetAllocMutex                      uintptr
	tcl_GetChannelNames                    uintptr
	tcl_GetChannelNamesEx                  uintptr
	tcl_ProcObjCmd                         uintptr
	tcl_ConditionFinalize                  uintptr
	tcl_MutexFinalize                      uintptr
	tcl_CreateThread                       uintptr
	tcl_ReadRaw                            uintptr
	tcl_WriteRaw                           uintptr
	tcl_GetTopChannel                      uintptr
	tcl_ChannelBuffered                    uintptr
	tcl_ChannelName                        uintptr
	tcl_ChannelVersion                     uintptr
	tcl_ChannelBlockModeProc               uintptr
	tcl_ChannelCloseProc                   uintptr
	tcl_ChannelClose2Proc                  uintptr
	tcl_ChannelInputProc                   uintptr
	tcl_ChannelOutputProc                  uintptr
	tcl_ChannelSeekProc                    uintptr
	tcl_ChannelSetOptionProc               uintptr
	tcl_ChannelGetOptionProc               uintptr
	tcl_ChannelWatchProc                   uintptr
	tcl_ChannelGetHandleProc               uintptr
	tcl_ChannelFlushProc                   uintptr
	tcl_ChannelHandlerProc                 uintptr
	tcl_JoinThread                         uintptr
	tcl_IsChannelShared                    uintptr
	tcl_IsChannelRegistered                uintptr
	tcl_CutChannel                         uintptr
	tcl_SpliceChannel                      uintptr
	tcl_ClearChannelHandlers               uintptr
	tcl_IsChannelExisting                  uintptr
	tcl_UniCharNcasecmp                    uintptr
	tcl_UniCharCaseMatch                   uintptr
	tcl_FindHashEntry                      uintptr
	tcl_CreateHashEntry                    uintptr
	tcl_InitCustomHashTable                uintptr
	tcl_InitObjHashTable                   uintptr
	tcl_CommandTraceInfo                   uintptr
	tcl_TraceCommand                       uintptr
	tcl_UntraceCommand                     uintptr
	tcl_AttemptAlloc                       uintptr
	tcl_AttemptDbCkalloc                   uintptr
	tcl_AttemptRealloc                     uintptr
	tcl_AttemptDbCkrealloc                 uintptr
	tcl_AttemptSetObjLength                uintptr
	tcl_GetChannelThread                   uintptr
	tcl_GetUnicodeFromObj                  uintptr
	tcl_GetMathFuncInfo                    uintptr
	tcl_ListMathFuncs                      uintptr
	tcl_SubstObj                           uintptr
	tcl_DetachChannel                      uintptr
	tcl_IsStandardChannel                  uintptr
	tcl_FSCopyFile                         uintptr
	tcl_FSCopyDirectory                    uintptr
	tcl_FSCreateDirectory                  uintptr
	tcl_FSDeleteFile                       uintptr
	tcl_FSLoadFile                         uintptr
	tcl_FSMatchInDirectory                 uintptr
	tcl_FSLink                             uintptr
	tcl_FSRemoveDirectory                  uintptr
	tcl_FSRenameFile                       uintptr
	tcl_FSLstat                            uintptr
	tcl_FSUtime                            uintptr
	tcl_FSFileAttrsGet                     uintptr
	tcl_FSFileAttrsSet                     uintptr
	tcl_FSFileAttrStrings                  uintptr
	tcl_FSStat                             uintptr
	tcl_FSAccess                           uintptr
	tcl_FSOpenFileChannel                  uintptr
	tcl_FSGetCwd                           uintptr
	tcl_FSChdir                            uintptr
	tcl_FSConvertToPathType                uintptr
	tcl_FSJoinPath                         uintptr
	tcl_FSSplitPath                        uintptr
	tcl_FSEqualPaths                       uintptr
	tcl_FSGetNormalizedPath                uintptr
	tcl_FSJoinToPath                       uintptr
	tcl_FSGetInternalRep                   uintptr
	tcl_FSGetTranslatedPath                uintptr
	tcl_FSEvalFile                         uintptr
	tcl_FSNewNativePath                    uintptr
	tcl_FSGetNativePath                    uintptr
	tcl_FSFileSystemInfo                   uintptr
	tcl_FSPathSeparator                    uintptr
	tcl_FSListVolumes                      uintptr
	tcl_FSRegister                         uintptr
	tcl_FSUnregister                       uintptr
	tcl_FSData                             uintptr
	tcl_FSGetTranslatedStringPath          uintptr
	tcl_FSGetFileSystemForPath             uintptr
	tcl_FSGetPathType                      uintptr
	tcl_OutputBuffered                     uintptr
	tcl_FSMountsChanged                    uintptr
	tcl_EvalTokensStandard                 uintptr
	tcl_GetTime                            uintptr
	tcl_CreateObjTrace                     uintptr
	tcl_GetCommandInfoFromToken            uintptr
	tcl_SetCommandInfoFromToken            uintptr
	tcl_DbNewWideIntObj                    uintptr
	tcl_GetWideIntFromObj                  uintptr
	tcl_NewWideIntObj                      uintptr
	tcl_SetWideIntObj                      uintptr
	tcl_AllocStatBuf                       uintptr
	tcl_Seek                               uintptr
	tcl_Tell                               uintptr
	tcl_ChannelWideSeekProc                uintptr
	tcl_DictObjPut                         uintptr
	tcl_DictObjGet                         uintptr
	tcl_DictObjRemove                      uintptr
	tcl_DictObjSize                        uintptr
	tcl_DictObjFirst                       uintptr
	tcl_DictObjNext                        uintptr
	tcl_DictObjDone                        uintptr
	tcl_DictObjPutKeyList                  uintptr
	tcl_DictObjRemoveKeyList               uintptr
	tcl_NewDictObj                         uintptr
	tcl_DbNewDictObj                       uintptr
	tcl_RegisterConfig                     uintptr
	tcl_CreateNamespace                    uintptr
	tcl_DeleteNamespace                    uintptr
	tcl_AppendExportList                   uintptr
	tcl_Export                             uintptr
	tcl_Import                             uintptr
	tcl_ForgetImport                       uintptr
	tcl_GetCurrentNamespace                uintptr
	tcl_GetGlobalNamespace                 uintptr
	tcl_FindNamespace                      uintptr
	tcl_FindCommand                        uintptr
	tcl_GetCommandFromObj                  uintptr
	tcl_GetCommandFullName                 uintptr
	tcl_FSEvalFileEx                       uintptr
	tcl_SetExitProc                        uintptr
	tcl_LimitAddHandler                    uintptr
	tcl_LimitRemoveHandler                 uintptr
	tcl_LimitReady                         uintptr
	tcl_LimitCheck                         uintptr
	tcl_LimitExceeded                      uintptr
	tcl_LimitSetCommands                   uintptr
	tcl_LimitSetTime                       uintptr
	tcl_LimitSetGranularity                uintptr
	tcl_LimitTypeEnabled                   uintptr
	tcl_LimitTypeExceeded                  uintptr
	tcl_LimitTypeSet                       uintptr
	tcl_LimitTypeReset                     uintptr
	tcl_LimitGetCommands                   uintptr
	tcl_LimitGetTime                       uintptr
	tcl_LimitGetGranularity                uintptr
	tcl_SaveInterpState                    uintptr
	tcl_RestoreInterpState                 uintptr
	tcl_DiscardInterpState                 uintptr
	tcl_SetReturnOptions                   uintptr
	tcl_GetReturnOptions                   uintptr
	tcl_IsEnsemble                         uintptr
	tcl_CreateEnsemble                     uintptr
	tcl_FindEnsemble                       uintptr
	tcl_SetEnsembleSubcommandList          uintptr
	tcl_SetEnsembleMappingDict             uintptr
	tcl_SetEnsembleUnknownHandler          uintptr
	tcl_SetEnsembleFlags                   uintptr
	tcl_GetEnsembleSubcommandList          uintptr
	tcl_GetEnsembleMappingDict             uintptr
	tcl_GetEnsembleUnknownHandler          uintptr
	tcl_GetEnsembleFlags                   uintptr
	tcl_GetEnsembleNamespace               uintptr
	tcl_SetTimeProc                        uintptr
	tcl_QueryTimeProc                      uintptr
	tcl_ChannelThreadActionProc            uintptr
	tcl_NewBignumObj                       uintptr
	tcl_DbNewBignumObj                     uintptr
	tcl_SetBignumObj                       uintptr
	tcl_GetBignumFromObj                   uintptr
	tcl_TakeBignumFromObj                  uintptr
	tcl_TruncateChannel                    uintptr
	tcl_ChannelTruncateProc                uintptr
	tcl_SetChannelErrorInterp              uintptr
	tcl_GetChannelErrorInterp              uintptr
	tcl_SetChannelError                    uintptr
	tcl_GetChannelError                    uintptr
	tcl_InitBignumFromDouble               uintptr
	tcl_GetNamespaceUnknownHandler         uintptr
	tcl_SetNamespaceUnknownHandler         uintptr
	tcl_GetEncodingFromObj                 uintptr
	tcl_GetEncodingSearchPath              uintptr
	tcl_SetEncodingSearchPath              uintptr
	tcl_GetEncodingNameFromEnvironment     uintptr
	tcl_PkgRequireProc                     uintptr
	tcl_AppendObjToErrorInfo               uintptr
	tcl_AppendLimitedToObj                 uintptr
	tcl_Format                             uintptr
	tcl_AppendFormatToObj                  uintptr
	tcl_ObjPrintf                          uintptr
	tcl_AppendPrintfToObj                  uintptr
	tcl_CancelEval                         uintptr
	tcl_Canceled                           uintptr
	tcl_CreatePipe                         uintptr
	tcl_NRCreateCommand                    uintptr
	tcl_NREvalObj                          uintptr
	tcl_NREvalObjv                         uintptr
	tcl_NRCmdSwap                          uintptr
	tcl_NRAddCallback                      uintptr
	tcl_NRCallObjProc                      uintptr
	tcl_GetFSDeviceFromStat                uintptr
	tcl_GetFSInodeFromStat                 uintptr
	tcl_GetModeFromStat                    uintptr
	tcl_GetLinkCountFromStat               uintptr
	tcl_GetUserIdFromStat                  uintptr
	tcl_GetGroupIdFromStat                 uintptr
	tcl_GetDeviceTypeFromStat              uintptr
	tcl_GetAccessTimeFromStat              uintptr
	tcl_GetModificationTimeFromStat        uintptr
	tcl_GetChangeTimeFromStat              uintptr
	tcl_GetSizeFromStat                    uintptr
	tcl_GetBlocksFromStat                  uintptr
	tcl_GetBlockSizeFromStat               uintptr
	tcl_SetEnsembleParameterList           uintptr
	tcl_GetEnsembleParameterList           uintptr
	tcl_ParseArgsObjv                      uintptr
	tcl_GetErrorLine                       uintptr
	tcl_SetErrorLine                       uintptr
	tcl_TransferResult                     uintptr
	tcl_InterpActive                       uintptr
	tcl_BackgroundException                uintptr
	tcl_ZlibDeflate                        uintptr
	tcl_ZlibInflate                        uintptr
	tcl_ZlibCRC32                          uintptr
	tcl_ZlibAdler32                        uintptr
	tcl_ZlibStreamInit                     uintptr
	tcl_ZlibStreamGetCommandName           uintptr
	tcl_ZlibStreamEof                      uintptr
	tcl_ZlibStreamChecksum                 uintptr
	tcl_ZlibStreamPut                      uintptr
	tcl_ZlibStreamGet                      uintptr
	tcl_ZlibStreamClose                    uintptr
	tcl_ZlibStreamReset                    uintptr
	tcl_SetStartupScript                   uintptr
	tcl_GetStartupScript                   uintptr
	tcl_CloseEx                            uintptr
	tcl_NRExprObj                          uintptr
	tcl_NRSubstObj                         uintptr
	tcl_LoadFile                           uintptr
	tcl_FindSymbol                         uintptr
	tcl_FSUnloadFile                       uintptr
	tcl_ZlibStreamSetCompressionDictionary uintptr
	reserved631                            uintptr
	reserved632                            uintptr
	reserved633                            uintptr
	reserved634                            uintptr
	reserved635                            uintptr
	reserved636                            uintptr
	reserved637                            uintptr
	reserved638                            uintptr
	reserved639                            uintptr
	reserved640                            uintptr
	reserved641                            uintptr
	reserved642                            uintptr
	reserved643                            uintptr
	reserved644                            uintptr
	reserved645                            uintptr
	reserved646                            uintptr
	reserved647                            uintptr
	reserved648                            uintptr
	reserved649                            uintptr
	reserved650                            uintptr
	reserved651                            uintptr
	reserved652                            uintptr
	reserved653                            uintptr
	reserved654                            uintptr
	reserved655                            uintptr
	reserved656                            uintptr
	reserved657                            uintptr
	reserved658                            uintptr
	reserved659                            uintptr
	tclUnusedStubEntry                     uintptr
} /* tclDecls.h:2545:3 */

type TclPlatStubs = TclPlatStubs1 /* tclPlatDecls.h:89:3 */

// end block for C++

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// ISO C Standard:  7.17  Common definitions  <stddef.h>

// Copyright (C) 1989-2020 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

// ISO C Standard:  7.17  Common definitions  <stddef.h>

// Ensure WORDS_BIGENDIAN is defined correctly:
// Needs to happen here in addition to configure to work with fat compiles on
// Darwin (where configure runs only once for multiple architectures).

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Used to tag functions that are only to be visible within the module being
// built and not outside it (where this is supported by the linker).

// Macros used to cast between pointers and integers (e.g. when storing an int
// in ClientData), on 64-bit architectures they avoid gcc warning about "cast
// to/from pointer from/to integer of different size".

// The following procedures allow namespaces to be customized to support
// special name resolution rules for commands/variables.

type Tcl_ResolvedVarInfo1 = struct {
	fetchProc  uintptr
	deleteProc uintptr
} /* tclInt.h:131:1 */

// The following structure encapsulates the routines needed to resolve a
// variable reference at runtime. Any variable specific state will typically
// be appended to this structure.

type Tcl_ResolvedVarInfo = Tcl_ResolvedVarInfo1 /* tclInt.h:147:3 */

type Tcl_ResolverInfo1 = struct {
	cmdResProc         uintptr
	varResProc         uintptr
	compiledVarResProc uintptr
} /* tclInt.h:159:9 */

type Tcl_ResolverInfo = Tcl_ResolverInfo1 /* tclInt.h:170:3 */
type NamespacePathEntry1 = struct {
	nsPtr        uintptr
	creatorNsPtr uintptr
	prevPtr      uintptr
	nextPtr      uintptr
} /* tclInt.h:194:9 */

type NamespacePathEntry = NamespacePathEntry1 /* tclInt.h:194:35 */

// Special hashtable for variables: this is just a Tcl_HashTable with an nsPtr
// field added at the end: in this way variables can find their namespace
// without having to copy a pointer in their struct: they can access it via
// their hPtr->tablePtr.

type TclVarHashTable1 = struct {
	table Tcl_HashTable
	nsPtr uintptr
} /* tclInt.h:194:9 */

// Special hashtable for variables: this is just a Tcl_HashTable with an nsPtr
// field added at the end: in this way variables can find their namespace
// without having to copy a pointer in their struct: they can access it via
// their hPtr->tablePtr.

type Namespace1 = struct {
	name                  uintptr
	fullName              uintptr
	clientData            ClientData
	deleteProc            uintptr
	parentPtr             uintptr
	childTable            Tcl_HashTable
	nsId                  int32
	_                     [4]byte
	interp                uintptr
	flags                 int32
	activationCount       int32
	refCount              int32
	_                     [4]byte
	cmdTable              Tcl_HashTable
	varTable              TclVarHashTable
	exportArrayPtr        uintptr
	numExportPatterns     int32
	maxExportPatterns     int32
	cmdRefEpoch           int32
	resolverEpoch         int32
	cmdResProc            uintptr
	varResProc            uintptr
	compiledVarResProc    uintptr
	exportLookupEpoch     int32
	_                     [4]byte
	ensembles             uintptr
	unknownHandlerPtr     uintptr
	commandPathLength     int32
	_                     [4]byte
	commandPathArray      uintptr
	commandPathSourceList uintptr
	earlyDeleteProc       uintptr
} /* tclInt.h:194:9 */

// Special hashtable for variables: this is just a Tcl_HashTable with an nsPtr
// field added at the end: in this way variables can find their namespace
// without having to copy a pointer in their struct: they can access it via
// their hPtr->tablePtr.

type TclVarHashTable = TclVarHashTable1 /* tclInt.h:206:3 */

// This is for itcl - it likes to search our varTables directly :(

// Define this to reduce the amount of space that the average namespace
// consumes by only allocating the table of child namespaces when necessary.
// Defining it breaks compatibility for Tcl extensions (e.g., itcl) which
// reach directly into the Namespace structure.

// The structure below defines a namespace.
// Note: the first five fields must match exactly the fields in a
// Tcl_Namespace structure (see tcl.h). If you change one, be sure to change
// the other.

type Namespace = Namespace1 /* tclInt.h:345:3 */

// Flags used to represent the status of a namespace:
//
// NS_DYING -	1 means Tcl_DeleteNamespace has been called to delete the
//		namespace but there are still active call frames on the Tcl
//		stack that refer to the namespace. When the last call frame
//		referring to it has been popped, it's variables and command
//		will be destroyed and it will be marked "dead" (NS_DEAD). The
//		namespace can no longer be looked up by name.
// NS_DEAD -	1 means Tcl_DeleteNamespace has been called to delete the
//		namespace and no call frames still refer to it. Its variables
//		and command have already been destroyed. This bit allows the
//		namespace resolution code to recognize that the namespace is
//		"deleted". When the last namespaceName object in any byte code
//		unit that refers to the namespace has been freed (i.e., when
//		the namespace's refCount is 0), the namespace's storage will
//		be freed.
// NS_KILLED -	1 means that TclTeardownNamespace has already been called on
//		this namespace and it should not be called again [Bug 1355942]
// NS_SUPPRESS_COMPILATION -
//		Marks the commands in this namespace for not being compiled,
//		forcing them to be looked up every time.

// Flags passed to TclGetNamespaceForQualName:
//
// TCL_GLOBAL_ONLY		- (see tcl.h) Look only in the global ns.
// TCL_NAMESPACE_ONLY		- (see tcl.h) Look only in the context ns.
// TCL_CREATE_NS_IF_UNKNOWN	- Create unknown namespaces.
// TCL_FIND_ONLY_NS		- The name sought is a namespace name.

// The client data for an ensemble command. This consists of the table of
// commands that are actually exported by the namespace, and an epoch counter
// that, combined with the exportLookupEpoch field of the namespace structure,
// defines whether the table contains valid data or will need to be recomputed
// next time the ensemble command is called.

type EnsembleConfig1 = struct {
	nsPtr              uintptr
	token              Tcl_Command
	epoch              int32
	_                  [4]byte
	subcommandArrayPtr uintptr
	subcommandTable    Tcl_HashTable
	next               uintptr
	flags              int32
	_                  [4]byte
	subcommandDict     uintptr
	subcmdList         uintptr
	unknownHandler     uintptr
	parameterList      uintptr
	numParameters      int32
	_                  [4]byte
} /* tclInt.h:415:9 */

// Flags used to represent the status of a namespace:
//
// NS_DYING -	1 means Tcl_DeleteNamespace has been called to delete the
//		namespace but there are still active call frames on the Tcl
//		stack that refer to the namespace. When the last call frame
//		referring to it has been popped, it's variables and command
//		will be destroyed and it will be marked "dead" (NS_DEAD). The
//		namespace can no longer be looked up by name.
// NS_DEAD -	1 means Tcl_DeleteNamespace has been called to delete the
//		namespace and no call frames still refer to it. Its variables
//		and command have already been destroyed. This bit allows the
//		namespace resolution code to recognize that the namespace is
//		"deleted". When the last namespaceName object in any byte code
//		unit that refers to the namespace has been freed (i.e., when
//		the namespace's refCount is 0), the namespace's storage will
//		be freed.
// NS_KILLED -	1 means that TclTeardownNamespace has already been called on
//		this namespace and it should not be called again [Bug 1355942]
// NS_SUPPRESS_COMPILATION -
//		Marks the commands in this namespace for not being compiled,
//		forcing them to be looked up every time.

// Flags passed to TclGetNamespaceForQualName:
//
// TCL_GLOBAL_ONLY		- (see tcl.h) Look only in the global ns.
// TCL_NAMESPACE_ONLY		- (see tcl.h) Look only in the context ns.
// TCL_CREATE_NS_IF_UNKNOWN	- Create unknown namespaces.
// TCL_FIND_ONLY_NS		- The name sought is a namespace name.

// The client data for an ensemble command. This consists of the table of
// commands that are actually exported by the namespace, and an epoch counter
// that, combined with the exportLookupEpoch field of the namespace structure,
// defines whether the table contains valid data or will need to be recomputed
// next time the ensemble command is called.

type EnsembleConfig = EnsembleConfig1 /* tclInt.h:483:3 */

// Various bits for the EnsembleConfig.flags field.

//----------------------------------------------------------------
// Data structures related to variables. These are used primarily in tclVar.c
//----------------------------------------------------------------

// The following structure defines a variable trace, which is used to invoke a
// specific C procedure whenever certain operations are performed on a
// variable.

type VarTrace1 = struct {
	traceProc  uintptr
	clientData ClientData
	flags      int32
	_          [4]byte
	nextPtr    uintptr
} /* tclInt.h:506:9 */

// Various bits for the EnsembleConfig.flags field.

//----------------------------------------------------------------
// Data structures related to variables. These are used primarily in tclVar.c
//----------------------------------------------------------------

// The following structure defines a variable trace, which is used to invoke a
// specific C procedure whenever certain operations are performed on a
// variable.

type VarTrace = VarTrace1 /* tclInt.h:516:3 */

// The following structure defines a command trace, which is used to invoke a
// specific C procedure whenever certain operations are performed on a
// command.

type CommandTrace1 = struct {
	traceProc  uintptr
	clientData ClientData
	flags      int32
	_          [4]byte
	nextPtr    uintptr
	refCount   int32
	_          [4]byte
} /* tclInt.h:524:9 */

// The following structure defines a command trace, which is used to invoke a
// specific C procedure whenever certain operations are performed on a
// command.

type CommandTrace = CommandTrace1 /* tclInt.h:539:3 */

// When a command trace is active (i.e. its associated procedure is executing)
// one of the following structures is linked into a list associated with the
// command's interpreter. The information in the structure is needed in order
// for Tcl to behave reasonably if traces are deleted while traces are active.

type ActiveCommandTrace1 = struct {
	cmdPtr       uintptr
	nextPtr      uintptr
	nextTracePtr uintptr
	reverseScan  int32
	_            [4]byte
} /* tclInt.h:548:9 */

// When a command trace is active (i.e. its associated procedure is executing)
// one of the following structures is linked into a list associated with the
// command's interpreter. The information in the structure is needed in order
// for Tcl to behave reasonably if traces are deleted while traces are active.

type Command1 = struct {
	hPtr          uintptr
	nsPtr         uintptr
	refCount      int32
	cmdEpoch      int32
	compileProc   uintptr
	objProc       uintptr
	objClientData ClientData
	proc          uintptr
	clientData    ClientData
	deleteProc    uintptr
	deleteData    ClientData
	flags         int32
	_             [4]byte
	importRefPtr  uintptr
	tracePtr      uintptr
	nreProc       uintptr
} /* tclInt.h:548:9 */

// When a command trace is active (i.e. its associated procedure is executing)
// one of the following structures is linked into a list associated with the
// command's interpreter. The information in the structure is needed in order
// for Tcl to behave reasonably if traces are deleted while traces are active.

type ActiveCommandTrace = ActiveCommandTrace1 /* tclInt.h:559:3 */

// When a variable trace is active (i.e. its associated procedure is
// executing) one of the following structures is linked into a list associated
// with the variable's interpreter. The information in the structure is needed
// in order for Tcl to behave reasonably if traces are deleted while traces
// are active.

type ActiveVarTrace1 = struct {
	varPtr       uintptr
	nextPtr      uintptr
	nextTracePtr uintptr
} /* tclInt.h:569:9 */

// When a variable trace is active (i.e. its associated procedure is
// executing) one of the following structures is linked into a list associated
// with the variable's interpreter. The information in the structure is needed
// in order for Tcl to behave reasonably if traces are deleted while traces
// are active.

type Var1 = struct {
	flags int32
	_     [4]byte
	value struct{ objPtr uintptr }
} /* tclInt.h:569:9 */

// When a variable trace is active (i.e. its associated procedure is
// executing) one of the following structures is linked into a list associated
// with the variable's interpreter. The information in the structure is needed
// in order for Tcl to behave reasonably if traces are deleted while traces
// are active.

type ActiveVarTrace = ActiveVarTrace1 /* tclInt.h:578:3 */

// The structure below defines a variable, which associates a string name with
// a Tcl_Obj value. These structures are kept in procedure call frames (for
// local variables recognized by the compiler) or in the heap (for global
// variables and any variable not known to the compiler). For each Var
// structure in the heap, a hash table entry holds the variable name and a
// pointer to the Var structure.

type Var = Var1 /* tclInt.h:604:3 */

type VarInHash1 = struct {
	__var    Var
	refCount int32
	_        [4]byte
	entry    Tcl_HashEntry
} /* tclInt.h:606:9 */

type VarInHash = VarInHash1 /* tclInt.h:621:3 */

// The variable-length structure below describes a local variable of a
// procedure that was recognized by the compiler. These variables have a name,
// an element in the array of compiler-assigned local variables in the
// procedure's call frame, and various other items of information. If the
// local variable is a formal argument, it may also have a default value. The
// compiler can't recognize local variables whose names are expressions (these
// names are only known at runtime when the expressions are evaluated) or
// local variables that are created as a result of an "upvar" or "uplevel"
// command. These other local variables are kept separately in a hash table in
// the call frame.

type CompiledLocal1 = struct {
	_           [0]uint64
	nextPtr     uintptr
	nameLength  int32
	frameIndex  int32
	flags       int32
	_           [4]byte
	defValuePtr uintptr
	resolveInfo uintptr
} /* tclInt.h:906:9 */

// The variable-length structure below describes a local variable of a
// procedure that was recognized by the compiler. These variables have a name,
// an element in the array of compiler-assigned local variables in the
// procedure's call frame, and various other items of information. If the
// local variable is a formal argument, it may also have a default value. The
// compiler can't recognize local variables whose names are expressions (these
// names are only known at runtime when the expressions are evaluated) or
// local variables that are created as a result of an "upvar" or "uplevel"
// command. These other local variables are kept separately in a hash table in
// the call frame.

type CompiledLocal = CompiledLocal1 /* tclInt.h:934:3 */

// The structure below defines a command procedure, which consists of a
// collection of Tcl commands plus information about arguments and other local
// variables recognized at compile time.

type Proc1 = struct {
	iPtr              uintptr
	refCount          int32
	_                 [4]byte
	cmdPtr            uintptr
	bodyPtr           uintptr
	numArgs           int32
	numCompiledLocals int32
	firstLocalPtr     uintptr
	lastLocalPtr      uintptr
} /* tclInt.h:942:9 */

// The structure below defines a command procedure, which consists of a
// collection of Tcl commands plus information about arguments and other local
// variables recognized at compile time.

type Interp1 = struct {
	result            uintptr
	freeProc          uintptr
	errorLine         int32
	_                 [4]byte
	stubTable         uintptr
	handle            TclHandle
	globalNsPtr       uintptr
	hiddenCmdTablePtr uintptr
	interpInfo        ClientData
	extra             struct {
		optimizer uintptr
		_         [80]byte
	}
	numLevels              int32
	maxNestingDepth        int32
	framePtr               uintptr
	varFramePtr            uintptr
	activeVarTracePtr      uintptr
	returnCode             int32
	_                      [4]byte
	rootFramePtr           uintptr
	lookupNsPtr            uintptr
	appendResult           uintptr
	appendAvl              int32
	appendUsed             int32
	packageTable           Tcl_HashTable
	packageUnknown         uintptr
	cmdCount               int32
	evalFlags              int32
	unused1                int32
	_                      [4]byte
	literalTable           LiteralTable
	compileEpoch           int32
	_                      [4]byte
	compiledProcPtr        uintptr
	resolverPtr            uintptr
	scriptFile             uintptr
	flags                  int32
	randSeed               int32
	tracePtr               uintptr
	assocData              uintptr
	execEnvPtr             uintptr
	emptyObjPtr            uintptr
	resultSpace            [201]int8
	_                      [7]byte
	objResultPtr           uintptr
	threadId               Tcl_ThreadId
	activeCmdTracePtr      uintptr
	activeInterpTracePtr   uintptr
	tracesForbiddingInline int32
	_                      [4]byte
	returnOpts             uintptr
	errorInfo              uintptr
	eiVar                  uintptr
	errorCode              uintptr
	ecVar                  uintptr
	returnLevel            int32
	_                      [4]byte
	limit                  struct {
		active            int32
		granularityTicker int32
		exceeded          int32
		cmdCount          int32
		cmdHandlers       uintptr
		cmdGranularity    int32
		time              Tcl_Time
		_                 [4]byte
		timeHandlers      uintptr
		timeGranularity   int32
		_                 [4]byte
		timeEvent         Tcl_TimerToken
		callbacks         Tcl_HashTable
	}
	ensembleRewrite struct {
		sourceObjs      uintptr
		numRemovedObjs  int32
		numInsertedObjs int32
	}
	chanMsg           uintptr
	cmdFramePtr       uintptr
	invokeCmdFramePtr uintptr
	invokeWord        int32
	_                 [4]byte
	linePBodyPtr      uintptr
	lineBCPtr         uintptr
	lineLABCPtr       uintptr
	lineLAPtr         uintptr
	scriptCLLocPtr    uintptr
	packagePrefer     int32
	_                 [4]byte
	varTraces         Tcl_HashTable
	varSearches       Tcl_HashTable
	allocCache        uintptr
	pendingObjDataPtr uintptr
	asyncReadyPtr     uintptr
	objectFoundation  uintptr
	deferredCallbacks uintptr
	asyncCancel       Tcl_AsyncHandler
	asyncCancelMsg    uintptr
	errorStack        uintptr
	upLiteral         uintptr
	callLiteral       uintptr
	innerLiteral      uintptr
	innerContext      uintptr
	resetErrorStack   int32
	_                 [4]byte
} /* tclInt.h:942:9 */

// The structure below defines a command procedure, which consists of a
// collection of Tcl commands plus information about arguments and other local
// variables recognized at compile time.

type Proc = Proc1 /* tclInt.h:969:3 */

// The structure below defines a command trace. This is used to allow Tcl
// clients to find out whenever a command is about to be executed.

type Trace1 = struct {
	level      int32
	_          [4]byte
	proc       uintptr
	clientData ClientData
	nextPtr    uintptr
	flags      int32
	_          [4]byte
	delProc    uintptr
} /* tclInt.h:942:9 */

// The structure below defines a command trace. This is used to allow Tcl
// clients to find out whenever a command is about to be executed.

type Trace = Trace1 /* tclInt.h:993:3 */

// When an interpreter trace is active (i.e. its associated procedure is
// executing), one of the following structures is linked into a list
// associated with the interpreter. The information in the structure is needed
// in order for Tcl to behave reasonably if traces are deleted while traces
// are active.

type ActiveInterpTrace1 = struct {
	nextPtr      uintptr
	nextTracePtr uintptr
	reverseScan  int32
	_            [4]byte
} /* tclInt.h:942:9 */

// When an interpreter trace is active (i.e. its associated procedure is
// executing), one of the following structures is linked into a list
// associated with the interpreter. The information in the structure is needed
// in order for Tcl to behave reasonably if traces are deleted while traces
// are active.

type ActiveInterpTrace = ActiveInterpTrace1 /* tclInt.h:1013:3 */

// Flag values designating types of execution traces. See tclTrace.c for
// related flag values.
//
// TCL_TRACE_ENTER_EXEC		- triggers enter/enterstep traces.
// 				- passed to Tcl_CreateObjTrace to set up
//				  "enterstep" traces.
// TCL_TRACE_LEAVE_EXEC		- triggers leave/leavestep traces.
// 				- passed to Tcl_CreateObjTrace to set up
//				  "leavestep" traces.

// The structure below defines an entry in the assocData hash table which is
// associated with an interpreter. The entry contains a pointer to a function
// to call when the interpreter is deleted, and a pointer to a user-defined
// piece of data.

type AssocData1 = struct {
	proc       uintptr
	clientData ClientData
} /* tclInt.h:1037:9 */

// Flag values designating types of execution traces. See tclTrace.c for
// related flag values.
//
// TCL_TRACE_ENTER_EXEC		- triggers enter/enterstep traces.
// 				- passed to Tcl_CreateObjTrace to set up
//				  "enterstep" traces.
// TCL_TRACE_LEAVE_EXEC		- triggers leave/leavestep traces.
// 				- passed to Tcl_CreateObjTrace to set up
//				  "leavestep" traces.

// The structure below defines an entry in the assocData hash table which is
// associated with an interpreter. The entry contains a pointer to a function
// to call when the interpreter is deleted, and a pointer to a user-defined
// piece of data.

type AssocData = AssocData1 /* tclInt.h:1040:3 */

// The structure below defines a call frame. A call frame defines a naming
// context for a procedure call: its local naming scope (for local variables)
// and its global naming scope (a namespace, perhaps the global :: namespace).
// A call frame can also define the naming context for a namespace eval or
// namespace inscope command: the namespace in which the command's code should
// execute. The Tcl_CallFrame structures exist only while procedures or
// namespace eval/inscope's are being executed, and provide a kind of Tcl call
// stack.
//
// WARNING!! The structure definition must be kept consistent with the
// Tcl_CallFrame structure in tcl.h. If you change one, change the other.

// Will be grown to contain: pointers to the varnames (allocated at the end),
// plus the init values for each variable (suitable to be memcopied on init)

type LocalCache1 = struct {
	refCount int32
	numVars  int32
	varName0 uintptr
} /* tclInt.h:942:9 */

// The structure below defines a call frame. A call frame defines a naming
// context for a procedure call: its local naming scope (for local variables)
// and its global naming scope (a namespace, perhaps the global :: namespace).
// A call frame can also define the naming context for a namespace eval or
// namespace inscope command: the namespace in which the command's code should
// execute. The Tcl_CallFrame structures exist only while procedures or
// namespace eval/inscope's are being executed, and provide a kind of Tcl call
// stack.
//
// WARNING!! The structure definition must be kept consistent with the
// Tcl_CallFrame structure in tcl.h. If you change one, change the other.

// Will be grown to contain: pointers to the varnames (allocated at the end),
// plus the init values for each variable (suitable to be memcopied on init)

type LocalCache = LocalCache1 /* tclInt.h:1065:3 */

type CallFrame1 = struct {
	nsPtr             uintptr
	isProcCallFrame   int32
	objc              int32
	objv              uintptr
	callerPtr         uintptr
	callerVarPtr      uintptr
	level             int32
	_                 [4]byte
	procPtr           uintptr
	varTablePtr       uintptr
	numCompiledLocals int32
	_                 [4]byte
	compiledLocals    uintptr
	clientData        ClientData
	localCachePtr     uintptr
	tailcallPtr       uintptr
} /* tclInt.h:942:9 */

type CallFrame = CallFrame1 /* tclInt.h:1129:3 */

// TIP #280
// The structure below defines a command frame. A command frame provides
// location information for all commands executing a tcl script (source, eval,
// uplevel, procedure bodies, ...). The runtime structure essentially contains
// the stack trace as it would be if the currently executing command were to
// throw an error.
//
// For commands where it makes sense it refers to the associated CallFrame as
// well.
//
// The structures are chained in a single list, with the top of the stack
// anchored in the Interp structure.
//
// Instances can be allocated on the C stack, or the heap, the former making
// cleanup a bit simpler.

type CmdFrame1 = struct {
	__type   int32
	level    int32
	line     uintptr
	nline    int32
	_        [4]byte
	framePtr uintptr
	nextPtr  uintptr
	data     struct {
		eval struct{ path uintptr }
		_    [8]byte
	}
	cmdObj uintptr
	cmd    uintptr
	len    int32
	_      [4]byte
	litarg uintptr
} /* tclInt.h:942:9 */

// TIP #280
// The structure below defines a command frame. A command frame provides
// location information for all commands executing a tcl script (source, eval,
// uplevel, procedure bodies, ...). The runtime structure essentially contains
// the stack trace as it would be if the currently executing command were to
// throw an error.
//
// For commands where it makes sense it refers to the associated CallFrame as
// well.
//
// The structures are chained in a single list, with the top of the stack
// anchored in the Interp structure.
//
// Instances can be allocated on the C stack, or the heap, the former making
// cleanup a bit simpler.

type CFWordBC1 = struct {
	framePtr uintptr
	pc       int32
	word     int32
	prevPtr  uintptr
	nextPtr  uintptr
	obj      uintptr
} /* tclInt.h:942:9 */

// TIP #280
// The structure below defines a command frame. A command frame provides
// location information for all commands executing a tcl script (source, eval,
// uplevel, procedure bodies, ...). The runtime structure essentially contains
// the stack trace as it would be if the currently executing command were to
// throw an error.
//
// For commands where it makes sense it refers to the associated CallFrame as
// well.
//
// The structures are chained in a single list, with the top of the stack
// anchored in the Interp structure.
//
// Instances can be allocated on the C stack, or the heap, the former making
// cleanup a bit simpler.

type CmdFrame = CmdFrame1 /* tclInt.h:1219:3 */

type CFWord1 = struct {
	framePtr uintptr
	word     int32
	refCount int32
} /* tclInt.h:1221:9 */

type CFWord = CFWord1 /* tclInt.h:1226:3 */

type CFWordBC = CFWordBC1 /* tclInt.h:1238:3 */

// Structure to record the locations of invisible continuation lines in
// literal scripts, as character offset from the beginning of the script. Both
// compiler and direct evaluator use this information to adjust their line
// counters when tracking through the script, because when it is invoked the
// continuation line marker as a whole has been removed already, meaning that
// the \n which was part of it is gone as well, breaking regular line
// tracking.
//
// These structures are allocated and filled by both the function
// TclSubstTokens() in the file "tclParse.c" and its caller TclEvalEx() in the
// file "tclBasic.c", and stored in the thread-global hashtable "lineCLPtr" in
// file "tclObj.c". They are used by the functions TclSetByteCodeFromAny() and
// TclCompileScript(), both found in the file "tclCompile.c". Their memory is
// released by the function TclFreeObj(), in the file "tclObj.c", and also by
// the function TclThreadFinalizeObjects(), in the same file.

type ContLineLoc1 = struct {
	_   [0]uint32
	num int32
} /* tclInt.h:942:9 */

// Structure to record the locations of invisible continuation lines in
// literal scripts, as character offset from the beginning of the script. Both
// compiler and direct evaluator use this information to adjust their line
// counters when tracking through the script, because when it is invoked the
// continuation line marker as a whole has been removed already, meaning that
// the \n which was part of it is gone as well, breaking regular line
// tracking.
//
// These structures are allocated and filled by both the function
// TclSubstTokens() in the file "tclParse.c" and its caller TclEvalEx() in the
// file "tclBasic.c", and stored in the thread-global hashtable "lineCLPtr" in
// file "tclObj.c". They are used by the functions TclSetByteCodeFromAny() and
// TclCompileScript(), both found in the file "tclCompile.c". Their memory is
// released by the function TclFreeObj(), in the file "tclObj.c", and also by
// the function TclThreadFinalizeObjects(), in the same file.

type ContLineLoc = ContLineLoc1 /* tclInt.h:1269:3 */
type ExtraFrameInfoField = struct {
	name       uintptr
	proc       uintptr
	clientData ClientData
} /* tclInt.h:1309:3 */
type ExtraFrameInfo = struct {
	length int32
	_      [4]byte
	fields [2]ExtraFrameInfoField
} /* tclInt.h:1315:3 */

//----------------------------------------------------------------
// Data structures and procedures related to TclHandles, which are a very
// lightweight method of preserving enough information to determine if an
// arbitrary malloc'd block has been deleted.
//----------------------------------------------------------------

type TclHandle = uintptr /* tclInt.h:1325:14 */

// The data structure for a (linked list of) execution stacks.

type ExecStack1 = struct {
	_         [0]uint64
	prevPtr   uintptr
	nextPtr   uintptr
	markerPtr uintptr
	endPtr    uintptr
	tosPtr    uintptr
} /* tclInt.h:942:9 */

// The data structure for a (linked list of) execution stacks.

type ExecStack = ExecStack1 /* tclInt.h:1413:3 */

// The data structure defining the execution environment for ByteCode's.
// There is one ExecEnv structure per Tcl interpreter. It holds the evaluation
// stack that holds command operands and results. The stack grows towards
// increasing addresses. The member stackPtr points to the stackItems of the
// currently active execution stack.

type CorContext1 = struct {
	framePtr    uintptr
	varFramePtr uintptr
	cmdFramePtr uintptr
	lineLABCPtr uintptr
} /* tclInt.h:942:9 */

// The data structure defining the execution environment for ByteCode's.
// There is one ExecEnv structure per Tcl interpreter. It holds the evaluation
// stack that holds command operands and results. The stack grows towards
// increasing addresses. The member stackPtr points to the stackItems of the
// currently active execution stack.

type CorContext = CorContext1 /* tclInt.h:1428:3 */

type CoroutineData1 = struct {
	cmdPtr       uintptr
	eePtr        uintptr
	callerEEPtr  uintptr
	caller       CorContext
	running      CorContext
	lineLABCPtr  uintptr
	stackLevel   uintptr
	auxNumLevels int32
	nargs        int32
} /* tclInt.h:942:9 */

type ExecEnv1 = struct {
	execStackPtr uintptr
	constants    [2]uintptr
	interp       uintptr
	callbackPtr  uintptr
	corPtr       uintptr
	rewind       int32
	_            [4]byte
} /* tclInt.h:942:9 */

type CoroutineData = CoroutineData1 /* tclInt.h:1449:3 */

type NRE_callback1 = struct {
	procPtr uintptr
	data    [4]ClientData
	nextPtr uintptr
} /* tclInt.h:942:9 */

type ExecEnv = ExecEnv1 /* tclInt.h:1460:3 */

// The definitions for the LiteralTable and LiteralEntry structures. Each
// interpreter contains a LiteralTable. It is used to reduce the storage
// needed for all the Tcl objects that hold the literals of scripts compiled
// by the interpreter. A literal's object is shared by all the ByteCodes that
// refer to the literal. Each distinct literal has one LiteralEntry entry in
// the LiteralTable. A literal table is a specialized hash table that is
// indexed by the literal's string representation, which may contain null
// characters.
//
// Note that we reduce the space needed for literals by sharing literal
// objects both within a ByteCode (each ByteCode contains a local
// LiteralTable) and across all an interpreter's ByteCodes (with the
// interpreter's global LiteralTable).

type LiteralEntry1 = struct {
	nextPtr  uintptr
	objPtr   uintptr
	refCount int32
	_        [4]byte
	nsPtr    uintptr
} /* tclInt.h:942:9 */

// The definitions for the LiteralTable and LiteralEntry structures. Each
// interpreter contains a LiteralTable. It is used to reduce the storage
// needed for all the Tcl objects that hold the literals of scripts compiled
// by the interpreter. A literal's object is shared by all the ByteCodes that
// refer to the literal. Each distinct literal has one LiteralEntry entry in
// the LiteralTable. A literal table is a specialized hash table that is
// indexed by the literal's string representation, which may contain null
// characters.
//
// Note that we reduce the space needed for literals by sharing literal
// objects both within a ByteCode (each ByteCode contains a local
// LiteralTable) and across all an interpreter's ByteCodes (with the
// interpreter's global LiteralTable).

type LiteralEntry = LiteralEntry1 /* tclInt.h:1496:3 */

type LiteralTable1 = struct {
	buckets       uintptr
	staticBuckets [4]uintptr
	numBuckets    int32
	numEntries    int32
	rebuildSize   int32
	mask          int32
} /* tclInt.h:942:9 */

type LiteralTable = LiteralTable1 /* tclInt.h:1512:3 */

// The following structure defines for each Tcl interpreter various
// statistics-related information about the bytecode compiler and
// interpreter's operation in that interpreter.

// Structure used in implementation of those core ensembles which are
// partially compiled. Used as an array of these, with a terminating field
// whose 'name' is NULL.

type EnsembleImplMap = struct {
	name        uintptr
	proc        uintptr
	compileProc uintptr
	nreProc     uintptr
	clientData  ClientData
	unsafe      int32
	_           [4]byte
} /* tclInt.h:1566:3 */

//----------------------------------------------------------------
// Data structures related to commands.
//----------------------------------------------------------------

// An imported command is created in an namespace when it imports a "real"
// command from another namespace. An imported command has a Command structure
// that points (via its ClientData value) to the "real" Command structure in
// the source namespace's command table. The real command records all the
// imported commands that refer to it in a list of ImportRef structures so
// that they can be deleted when the real command is deleted.

type ImportRef1 = struct {
	importedCmdPtr uintptr
	nextPtr        uintptr
} /* tclInt.h:548:9 */

//----------------------------------------------------------------
// Data structures related to commands.
//----------------------------------------------------------------

// An imported command is created in an namespace when it imports a "real"
// command from another namespace. An imported command has a Command structure
// that points (via its ClientData value) to the "real" Command structure in
// the source namespace's command table. The real command records all the
// imported commands that refer to it in a list of ImportRef structures so
// that they can be deleted when the real command is deleted.

type ImportRef = ImportRef1 /* tclInt.h:1594:3 */

// Data structure used as the ClientData of imported commands: commands
// created in an namespace when it imports a "real" command from another
// namespace.

type ImportedCmdData1 = struct {
	realCmdPtr uintptr
	selfPtr    uintptr
} /* tclInt.h:1602:9 */

// Data structure used as the ClientData of imported commands: commands
// created in an namespace when it imports a "real" command from another
// namespace.

type ImportedCmdData = ImportedCmdData1 /* tclInt.h:1609:3 */

// A Command structure exists for each command in a namespace. The Tcl_Command
// opaque type actually refers to these structures.

type Command = Command1 /* tclInt.h:1659:3 */

// Flag bits for commands.
//
// CMD_IS_DELETED -		Means that the command is in the process of
//				being deleted (its deleteProc is currently
//				executing). Other attempts to delete the
//				command should be ignored.
// CMD_TRACE_ACTIVE -		1 means that trace processing is currently
//				underway for a rename/delete change. See the
//				two flags below for which is currently being
//				processed.
// CMD_HAS_EXEC_TRACES -	1 means that this command has at least one
//				execution trace (as opposed to simple
//				delete/rename traces) in its tracePtr list.
// CMD_COMPILES_EXPANDED -	1 means that this command has a compiler that
//				can handle expansion (provided it is not the
//				first word).
// TCL_TRACE_RENAME -		A rename trace is in progress. Further
//				recursive renames will not be traced.
// TCL_TRACE_DELETE -		A delete trace is in progress. Further
//				recursive deletes will not be traced.
// (these last two flags are defined in tcl.h)

//----------------------------------------------------------------
// Data structures related to name resolution procedures.
//----------------------------------------------------------------

// The interpreter keeps a linked list of name resolution schemes. The scheme
// for a namespace is consulted first, followed by the list of schemes in an
// interpreter, followed by the default name resolution in Tcl. Schemes are
// added/removed from the interpreter's list by calling Tcl_AddInterpResolver
// and Tcl_RemoveInterpResolver.

type ResolverScheme1 = struct {
	name               uintptr
	cmdResProc         uintptr
	varResProc         uintptr
	compiledVarResProc uintptr
	nextPtr            uintptr
} /* tclInt.h:942:9 */

// Flag bits for commands.
//
// CMD_IS_DELETED -		Means that the command is in the process of
//				being deleted (its deleteProc is currently
//				executing). Other attempts to delete the
//				command should be ignored.
// CMD_TRACE_ACTIVE -		1 means that trace processing is currently
//				underway for a rename/delete change. See the
//				two flags below for which is currently being
//				processed.
// CMD_HAS_EXEC_TRACES -	1 means that this command has at least one
//				execution trace (as opposed to simple
//				delete/rename traces) in its tracePtr list.
// CMD_COMPILES_EXPANDED -	1 means that this command has a compiler that
//				can handle expansion (provided it is not the
//				first word).
// TCL_TRACE_RENAME -		A rename trace is in progress. Further
//				recursive renames will not be traced.
// TCL_TRACE_DELETE -		A delete trace is in progress. Further
//				recursive deletes will not be traced.
// (these last two flags are defined in tcl.h)

//----------------------------------------------------------------
// Data structures related to name resolution procedures.
//----------------------------------------------------------------

// The interpreter keeps a linked list of name resolution schemes. The scheme
// for a namespace is consulted first, followed by the list of schemes in an
// interpreter, followed by the default name resolution in Tcl. Schemes are
// added/removed from the interpreter's list by calling Tcl_AddInterpResolver
// and Tcl_RemoveInterpResolver.

type ResolverScheme = ResolverScheme1 /* tclInt.h:1723:3 */

//----------------------------------------------------------------
// This structure shadows the first few fields of the memory cache for the
// allocator defined in tclThreadAlloc.c; it has to be kept in sync with the
// definition there.
// Some macros require knowledge of some fields in the struct in order to
// avoid hitting the TSD unnecessarily. In order to facilitate this, a pointer
// to the relevant fields is kept in the allocCache field in struct Interp.
//----------------------------------------------------------------

type AllocCache1 = struct {
	nextPtr     uintptr
	owner       Tcl_ThreadId
	firstObjPtr uintptr
	numObjects  int32
	_           [4]byte
} /* tclInt.h:942:9 */

//----------------------------------------------------------------
// This structure shadows the first few fields of the memory cache for the
// allocator defined in tclThreadAlloc.c; it has to be kept in sync with the
// definition there.
// Some macros require knowledge of some fields in the struct in order to
// avoid hitting the TSD unnecessarily. In order to facilitate this, a pointer
// to the relevant fields is kept in the allocCache field in struct Interp.
//----------------------------------------------------------------

type AllocCache = AllocCache1 /* tclInt.h:1756:3 */

//----------------------------------------------------------------
// This structure defines an interpreter, which is a collection of commands
// plus other state information related to interpreting commands, such as
// variable storage. Primary responsibility for this data structure is in
// tclBasic.c, but almost every Tcl source file uses something in here.
//----------------------------------------------------------------

type Interp = Interp1 /* tclInt.h:2152:3 */

// Macros that use the TSD-ekeko.

// Macros for script cancellation support (TIP #285).

// Macros for splicing into and out of doubly linked lists. They assume
// existence of struct items 'prevPtr' and 'nextPtr'.
//
// a = element to add or remove.
// b = list head.
//
// TclSpliceIn adds to the head of the list.

// EvalFlag bits for Interp structures:
//
// TCL_ALLOW_EXCEPTIONS	1 means it's OK for the script to terminate with a
//			code other than TCL_OK or TCL_ERROR; 0 means codes
//			other than these should be turned into errors.

// Flag bits for Interp structures:
//
// DELETED:		Non-zero means the interpreter has been deleted:
//			don't process any more commands for it, and destroy
//			the structure as soon as all nested invocations of
//			Tcl_Eval are done.
// ERR_ALREADY_LOGGED:	Non-zero means information has already been logged in
//			iPtr->errorInfo for the current Tcl_Eval instance, so
//			Tcl_Eval needn't log it (used to implement the "error
//			message log" command).
// DONT_COMPILE_CMDS_INLINE: Non-zero means that the bytecode compiler should
//			not compile any commands into an inline sequence of
//			instructions. This is set 1, for example, when command
//			traces are requested.
// RAND_SEED_INITIALIZED: Non-zero means that the randSeed value of the interp
//			has not be initialized. This is set 1 when we first
//			use the rand() or srand() functions.
// SAFE_INTERP:		Non zero means that the current interp is a safe
//			interp (i.e. it has only the safe commands installed,
//			less privilege than a regular interp).
// INTERP_DEBUG_FRAME:	Used for switching on various extra interpreter
//			debug/info mechanisms (e.g. info frame eval/uplevel
//			tracing) which are performance intensive.
// INTERP_TRACE_IN_PROGRESS: Non-zero means that an interp trace is currently
//			active; so no further trace callbacks should be
//			invoked.
// INTERP_ALTERNATE_WRONG_ARGS: Used for listing second and subsequent forms
//			of the wrong-num-args string in Tcl_WrongNumArgs.
//			Makes it append instead of replacing and uses
//			different intermediate text.
// CANCELED:		Non-zero means that the script in progress should be
//			canceled as soon as possible. This can be checked by
//			extensions (and the core itself) by calling
//			Tcl_Canceled and checking if TCL_ERROR is returned.
//			This is a one-shot flag that is reset immediately upon
//			being detected; however, if the TCL_CANCEL_UNWIND flag
//			is set Tcl_Canceled will continue to report that the
//			script in progress has been canceled thereby allowing
//			the evaluation stack for the interp to be fully
//			unwound.
//
// WARNING: For the sake of some extensions that have made use of former
// internal values, do not re-use the flag values 2 (formerly ERR_IN_PROGRESS)
// or 8 (formerly ERROR_CODE_SET).

// Maximum number of levels of nesting permitted in Tcl commands (used to
// catch infinite recursion).

// The macro below is used to modify a "char" value (e.g. by casting it to an
// unsigned character) so that it can be used safely with macros such as
// isspace.

// This macro is used to properly align the memory allocated by Tcl, giving
// the same alignment as the native malloc.

// This macro is used to determine the offset needed to safely allocate any
// data structure in memory. Given a starting offset or size, it "rounds up"
// or "aligns" the offset to the next 8-byte boundary so that any data
// structure can be placed at the resulting offset without fear of an
// alignment error.
//
// WARNING!! DO NOT USE THIS MACRO TO ALIGN POINTERS: it will produce the
// wrong result on platforms that allocate addresses that are divisible by 4
// or 2. Only use it for offsets or sizes.
//
// This macro is only used by tclCompile.c in the core (Bug 926445). It
// however not be made file static, as extensions that touch bytecodes
// (notably tbcload) require it.

// The following enum values are used to specify the runtime platform setting
// of the tclPlatform variable.

type TclPlatformType = uint32 /* tclInt.h:2328:3 */

// The following enum values are used to indicate the translation of a Tcl
// channel. Declared here so that each platform can define
// TCL_PLATFORM_TRANSLATION to the native translation on that platform.

type TclEolTranslation = uint32 /* tclInt.h:2341:3 */

// Flags for TclInvoke:
//
// TCL_INVOKE_HIDDEN		Invoke a hidden command; if not set, invokes
//				an exposed command.
// TCL_INVOKE_NO_UNKNOWN	If set, "unknown" is not invoked if the
//				command to be invoked is not found. Only has
//				an effect if invoking an exposed command,
//				i.e. if TCL_INVOKE_HIDDEN is not also set.
// TCL_INVOKE_NO_TRACEBACK	Does not record traceback information if the
//				invoked command returns an error. Used if the
//				caller plans on recording its own traceback
//				information.

// The structure used as the internal representation of Tcl list objects. This
// struct is grown (reallocated and copied) as necessary to hold all the
// list's element pointers. The struct might contain more slots than currently
// used to hold all element pointers. This is done to make append operations
// faster.

type List1 = struct {
	refCount      int32
	maxElemCount  int32
	elemCount     int32
	canonicalFlag int32
	elements      uintptr
} /* tclInt.h:2370:9 */

// Flags for TclInvoke:
//
// TCL_INVOKE_HIDDEN		Invoke a hidden command; if not set, invokes
//				an exposed command.
// TCL_INVOKE_NO_UNKNOWN	If set, "unknown" is not invoked if the
//				command to be invoked is not found. Only has
//				an effect if invoking an exposed command,
//				i.e. if TCL_INVOKE_HIDDEN is not also set.
// TCL_INVOKE_NO_TRACEBACK	Does not record traceback information if the
//				invoked command returns an error. Used if the
//				caller plans on recording its own traceback
//				information.

// The structure used as the internal representation of Tcl list objects. This
// struct is grown (reallocated and copied) as necessary to hold all the
// list's element pointers. The struct might contain more slots than currently
// used to hold all element pointers. This is done to make append operations
// faster.

type List = List1 /* tclInt.h:2380:3 */

type TclFileAttrProcs1 = struct {
	getProc uintptr
	setProc uintptr
} /* tclInt.h:2550:9 */

type TclFileAttrProcs = TclFileAttrProcs1 /* tclInt.h:2553:3 */

// Opaque handle used in pipeline routines to encapsulate platform-dependent
// state.

type TclFile = uintptr /* tclInt.h:2560:25 */

// The "globParameters" argument of the function TclGlob is an or'ed
// combination of the following values:

type Tcl_PathPart = uint32 /* tclInt.h:2577:3 */

//----------------------------------------------------------------
// Data structures related to procedures
//----------------------------------------------------------------

type TclCmdProcType = uintptr    /* tclInt.h:2596:21 */
type TclObjCmdProcType = uintptr /* tclInt.h:2597:24 */

// A ProcessGlobalValue struct exists for each internal value in Tcl that is
// to be shared among several threads. Each thread sees a (Tcl_Obj) copy of
// the value, and the gobal value is kept as a counted string, with epoch and
// mutex control. Each ProcessGlobalValue struct should be a static variable in
// some file.

type ProcessGlobalValue1 = struct {
	epoch    int32
	numBytes int32
	value    uintptr
	encoding Tcl_Encoding
	proc     uintptr
	mutex    Tcl_Mutex
	key      Tcl_ThreadDataKey
} /* tclInt.h:2616:9 */

// A ProcessGlobalValue struct exists for each internal value in Tcl that is
// to be shared among several threads. Each thread sees a (Tcl_Obj) copy of
// the value, and the gobal value is kept as a counted string, with epoch and
// mutex control. Each ProcessGlobalValue struct should be a static variable in
// some file.

type ProcessGlobalValue = ProcessGlobalValue1 /* tclInt.h:2631:3 */

// This structure holds the data for the various iteration callbacks used to
// NRE the 'for' and 'while' commands. We need a separate structure because we
// have more than the 4 client data entries we can provide directly thorugh
// the callback API. It is the 'word' information which puts us over the
// limit. It is needed because the loop body is argument 4 of 'for' and
// argument 2 of 'while'. Not providing the correct index confuses the #280
// code. We TclSmallAlloc/Free this.

type ForIterData1 = struct {
	cond uintptr
	body uintptr
	next uintptr
	msg  uintptr
	word int32
	_    [4]byte
} /* tclInt.h:2801:9 */

// This structure holds the data for the various iteration callbacks used to
// NRE the 'for' and 'while' commands. We need a separate structure because we
// have more than the 4 client data entries we can provide directly thorugh
// the callback API. It is the 'word' information which puts us over the
// limit. It is needed because the loop body is argument 4 of 'for' and
// argument 2 of 'while'. Not providing the correct index confuses the #280
// code. We TclSmallAlloc/Free this.

type ForIterData = ForIterData1 /* tclInt.h:2807:3 */

type memCmpFn_t = uintptr /* tclInt.h:3166:13 */

//----------------------------------------------------------------
// Macro used by the Tcl core to check whether a pattern has any characters
// special to [string match]. The ANSI C "prototype" for this macro is:
//
// MODULE_SCOPE int	TclMatchIsTrivial(const char *pattern);
//----------------------------------------------------------------

//----------------------------------------------------------------
// Macros used by the Tcl core to set a Tcl_Obj's numeric representation
// avoiding the corresponding function calls in time critical parts of the
// core. They should only be called on unshared objects. The ANSI C
// "prototypes" for these macros are:
//
// MODULE_SCOPE void	TclSetIntObj(Tcl_Obj *objPtr, int intValue);
// MODULE_SCOPE void	TclSetLongObj(Tcl_Obj *objPtr, long longValue);
// MODULE_SCOPE void	TclSetBooleanObj(Tcl_Obj *objPtr, long boolValue);
// MODULE_SCOPE void	TclSetWideIntObj(Tcl_Obj *objPtr, Tcl_WideInt w);
// MODULE_SCOPE void	TclSetDoubleObj(Tcl_Obj *objPtr, double d);
//----------------------------------------------------------------

// NOTE: There is to be no such thing as a "pure" boolean. Boolean values set
// programmatically go straight to being "int" Tcl_Obj's, with value 0 or 1.
// The only "boolean" Tcl_Obj's shall be those holding the cached boolean
// value of strings like: "yes", "no", "true", "false", "on", "off".

//----------------------------------------------------------------
// Macros used by the Tcl core to create and initialise objects of standard
// types, avoiding the corresponding function calls in time critical parts of
// the core. The ANSI C "prototypes" for these macros are:
//
// MODULE_SCOPE void	TclNewIntObj(Tcl_Obj *objPtr, int i);
// MODULE_SCOPE void	TclNewLongObj(Tcl_Obj *objPtr, long l);
// MODULE_SCOPE void	TclNewBooleanObj(Tcl_Obj *objPtr, int b);
// MODULE_SCOPE void	TclNewWideObj(Tcl_Obj *objPtr, Tcl_WideInt w);
// MODULE_SCOPE void	TclNewDoubleObj(Tcl_Obj *objPtr, double d);
// MODULE_SCOPE void	TclNewStringObj(Tcl_Obj *objPtr, char *s, int len);
// MODULE_SCOPE void	TclNewLiteralStringObj(Tcl_Obj*objPtr, char*sLiteral);
//
//----------------------------------------------------------------

// NOTE: There is to be no such thing as a "pure" boolean.
// See comment above TclSetBooleanObj macro above.

// The sLiteral argument *must* be a string literal; the incantation with
// sizeof(sLiteral "") will fail to compile otherwise.

//----------------------------------------------------------------
// Convenience macros for DStrings.
// The ANSI C "prototypes" for these macros are:
//
// MODULE_SCOPE char * TclDStringAppendLiteral(Tcl_DString *dsPtr,
//			const char *sLiteral);
// MODULE_SCOPE void   TclDStringClear(Tcl_DString *dsPtr);

//----------------------------------------------------------------
// Macros used by the Tcl core to test for some special double values.
// The ANSI C "prototypes" for these macros are:
//
// MODULE_SCOPE int	TclIsInfinite(double d);
// MODULE_SCOPE int	TclIsNaN(double d);

// ----------------------------------------------------------------------
// Macro to use to find the offset of a field in a structure. Computes number
// of bytes from beginning of structure to a given field.

//----------------------------------------------------------------
// Inline version of Tcl_GetCurrentNamespace and Tcl_GetGlobalNamespace.

//----------------------------------------------------------------
// Inline version of TclCleanupCommand; still need the function as it is in
// the internal stubs, but the core can use the macro instead.

//----------------------------------------------------------------
// Inline versions of Tcl_LimitReady() and Tcl_LimitExceeded to limit number
// of calls out of the critical path. Note that this code isn't particularly
// readable; the non-inline version (in tclInterp.c) is much easier to
// understand. Note also that these macros takes different args (iPtr->limit)
// to the non-inline version.

// Compile-time assertions: these produce a compile time error if the
// expression is not known to be true at compile time. If the assertion is
// known to be false, the compiler (or optimizer?) will error out with
// "division by zero". If the assertion cannot be evaluated at compile time,
// the compiler will error out with "non-static initializer".
//
// Adapted with permission from
// http://www.pixelbeat.org/programming/gcc/static_assert.html

//----------------------------------------------------------------
// Allocator for small structs (<=sizeof(Tcl_Obj)) using the Tcl_Obj pool.
// Only checked at compile time.
//
// ONLY USE FOR CONSTANT nBytes.
//
// DO NOT LET THEM CROSS THREAD BOUNDARIES
//----------------------------------------------------------------

// Support for Clang Static Analyzer <http://clang-analyzer.llvm.org>

//----------------------------------------------------------------
// Parameters, structs and macros for the non-recursive engine (NRE)
//----------------------------------------------------------------

// This is the main data struct for representing NR commands. It is designed
// to fit in sizeof(Tcl_Obj) in order to exploit the fastest memory allocator
// available.

type NRE_callback = NRE_callback1 /* tclInt.h:4934:3 */

type TclIntStubs = TclIntStubs1 /* tclIntDecls.h:916:3 */

type TclIntPlatStubs = TclIntPlatStubs1 /* tclIntPlatDecls.h:374:3 */

// Inline function declarations:

// Slot 23 is reserved
// Slot 25 is reserved

// !END!: Do not edit above this line.

//----------------------------------------------------------------------
//
// tclTomMathDecls.h --
//
//	This file contains the declarations for the 'libtommath'
//	functions that are exported by the Tcl library.
//
// Copyright (c) 2005 by Kevin B. Kenny.  All rights reserved.
//
// See the file "license.terms" for information on usage and redistribution
// of this file, and for a DISCLAIMER OF ALL WARRANTIES.

// tcl.h --
//
//	This header file describes the externally-visible facilities of the
//	Tcl interpreter.
//
// Copyright (c) 1987-1994 The Regents of the University of California.
// Copyright (c) 1993-1996 Lucent Technologies.
// Copyright (c) 1994-1998 Sun Microsystems, Inc.
// Copyright (c) 1998-2000 by Scriptics Corporation.
// Copyright (c) 2002 by Kevin B. Kenny.  All rights reserved.
//
// See the file "license.terms" for information on usage and redistribution of
// this file, and for a DISCLAIMER OF ALL WARRANTIES.

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:
// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// MS Visual C++ doesn't have a 128bit type for words, so fall back to 32bit MPI's (where words are 64bit)

// detect 64-bit mode if possible

// some default configurations.
//
// A "mp_digit" must be able to hold MP_DIGIT_BIT + 1 bits
// A "mp_word" must be able to hold 2*MP_DIGIT_BIT + 1 bits
//
// At the very least a mp_digit must be able to hold 7 bits
// [any size beyond that is ok provided it doesn't overflow the data type]

// this is the default case, 28-bit digits

// this is to make porting into LibTomCrypt easier :-)
type private_mp_word = uint64 /* tclTomMath.h:92:28 */

// default case is 28-bit digits, defines MP_28BIT as a handy macro to test

// otherwise the bits per digit is calculated automatically from the size of a mp_digit

// Primality generation flags

type mp_sign = int32   /* tclTomMath.h:163:13 */
type mp_ord = int32    /* tclTomMath.h:166:13 */
type mp_bool = int32   /* tclTomMath.h:170:13 */
type mp_err = int32    /* tclTomMath.h:173:13 */
type mp_order = int32  /* tclTomMath.h:181:13 */
type mp_endian = int32 /* tclTomMath.h:184:13 */

type TclTomMathStubs1 = struct {
	magic                       int32
	_                           [4]byte
	hooks                       uintptr
	tclBN_epoch                 uintptr
	tclBN_revision              uintptr
	tclBN_mp_add                uintptr
	tclBN_mp_add_d              uintptr
	tclBN_mp_and                uintptr
	tclBN_mp_clamp              uintptr
	tclBN_mp_clear              uintptr
	tclBN_mp_clear_multi        uintptr
	tclBN_mp_cmp                uintptr
	tclBN_mp_cmp_d              uintptr
	tclBN_mp_cmp_mag            uintptr
	tclBN_mp_copy               uintptr
	tclBN_mp_count_bits         uintptr
	tclBN_mp_div                uintptr
	tclBN_mp_div_d              uintptr
	tclBN_mp_div_2              uintptr
	tclBN_mp_div_2d             uintptr
	tclBN_mp_div_3              uintptr
	tclBN_mp_exch               uintptr
	tclBN_mp_expt_d             uintptr
	tclBN_mp_grow               uintptr
	tclBN_mp_init               uintptr
	tclBN_mp_init_copy          uintptr
	tclBN_mp_init_multi         uintptr
	tclBN_mp_init_set           uintptr
	tclBN_mp_init_size          uintptr
	tclBN_mp_lshd               uintptr
	tclBN_mp_mod                uintptr
	tclBN_mp_mod_2d             uintptr
	tclBN_mp_mul                uintptr
	tclBN_mp_mul_d              uintptr
	tclBN_mp_mul_2              uintptr
	tclBN_mp_mul_2d             uintptr
	tclBN_mp_neg                uintptr
	tclBN_mp_or                 uintptr
	tclBN_mp_radix_size         uintptr
	tclBN_mp_read_radix         uintptr
	tclBN_mp_rshd               uintptr
	tclBN_mp_shrink             uintptr
	tclBN_mp_set                uintptr
	tclBN_mp_sqr                uintptr
	tclBN_mp_sqrt               uintptr
	tclBN_mp_sub                uintptr
	tclBN_mp_sub_d              uintptr
	tclBN_mp_to_unsigned_bin    uintptr
	tclBN_mp_to_unsigned_bin_n  uintptr
	tclBN_mp_toradix_n          uintptr
	tclBN_mp_unsigned_bin_size  uintptr
	tclBN_mp_xor                uintptr
	tclBN_mp_zero               uintptr
	tclBN_reverse               uintptr
	tclBN_fast_s_mp_mul_digs    uintptr
	tclBN_fast_s_mp_sqr         uintptr
	tclBN_mp_karatsuba_mul      uintptr
	tclBN_mp_karatsuba_sqr      uintptr
	tclBN_mp_toom_mul           uintptr
	tclBN_mp_toom_sqr           uintptr
	tclBN_s_mp_add              uintptr
	tclBN_s_mp_mul_digs         uintptr
	tclBN_s_mp_sqr              uintptr
	tclBN_s_mp_sub              uintptr
	tclBN_mp_init_set_int       uintptr
	tclBN_mp_set_int            uintptr
	tclBN_mp_cnt_lsb            uintptr
	tclBNInitBignumFromLong     uintptr
	tclBNInitBignumFromWideInt  uintptr
	tclBNInitBignumFromWideUInt uintptr
	tclBN_mp_expt_d_ex          uintptr
	tclBN_mp_set_ull            uintptr
	tclBN_mp_get_mag_ull        uintptr
	tclBN_mp_set_ll             uintptr
	reserved71                  uintptr
	reserved72                  uintptr
	tclBN_mp_tc_and             uintptr
	tclBN_mp_tc_or              uintptr
	tclBN_mp_tc_xor             uintptr
	tclBN_mp_signed_rsh         uintptr
	reserved77                  uintptr
	tclBN_mp_to_ubin            uintptr
	tclBN_mp_div_ld             uintptr
	tclBN_mp_to_radix           uintptr
} /* tclTomMathDecls.h:357:9 */

type TclTomMathStubs = TclTomMathStubs1 /* tclTomMathDecls.h:442:3 */

// These are opaque types.

type Tcl_Class = uintptr         /* tclOO.h:52:27 */
type Tcl_Method = uintptr        /* tclOO.h:53:28 */
type Tcl_Object = uintptr        /* tclOO.h:54:28 */
type Tcl_ObjectContext = uintptr /* tclOO.h:55:35 */

// The type of a method implementation. This describes how to call the method
// implementation, how to delete it (when the object or class is deleted) and
// how to create a clone of it (when the object or class is copied).

type Tcl_MethodType = struct {
	version    int32
	_          [4]byte
	name       uintptr
	callProc   uintptr
	deleteProc uintptr
	cloneProc  uintptr
} /* tclOO.h:93:3 */

// The correct value for the version field of the Tcl_MethodType structure.
// This allows new versions of the structure to be introduced without breaking
// binary compatability.

// The type of some object (or class) metadata. This describes how to delete
// the metadata (when the object or class is deleted) and how to create a
// clone of it (when the object or class is copied).

type Tcl_ObjectMetadataType = struct {
	version    int32
	_          [4]byte
	name       uintptr
	deleteProc uintptr
	cloneProc  uintptr
} /* tclOO.h:120:3 */

type TclOOStubHooks = struct{ tclOOIntStubs uintptr } /* tclOODecls.h:126:3 */

type TclOOStubs1 = struct {
	magic                         int32
	_                             [4]byte
	hooks                         uintptr
	tcl_CopyObjectInstance        uintptr
	tcl_GetClassAsObject          uintptr
	tcl_GetObjectAsClass          uintptr
	tcl_GetObjectCommand          uintptr
	tcl_GetObjectFromObj          uintptr
	tcl_GetObjectNamespace        uintptr
	tcl_MethodDeclarerClass       uintptr
	tcl_MethodDeclarerObject      uintptr
	tcl_MethodIsPublic            uintptr
	tcl_MethodIsType              uintptr
	tcl_MethodName                uintptr
	tcl_NewInstanceMethod         uintptr
	tcl_NewMethod                 uintptr
	tcl_NewObjectInstance         uintptr
	tcl_ObjectDeleted             uintptr
	tcl_ObjectContextIsFiltering  uintptr
	tcl_ObjectContextMethod       uintptr
	tcl_ObjectContextObject       uintptr
	tcl_ObjectContextSkippedArgs  uintptr
	tcl_ClassGetMetadata          uintptr
	tcl_ClassSetMetadata          uintptr
	tcl_ObjectGetMetadata         uintptr
	tcl_ObjectSetMetadata         uintptr
	tcl_ObjectContextInvokeNext   uintptr
	tcl_ObjectGetMethodNameMapper uintptr
	tcl_ObjectSetMethodNameMapper uintptr
	tcl_ClassSetConstructor       uintptr
	tcl_ClassSetDestructor        uintptr
	tcl_GetObjectName             uintptr
	reserved29                    uintptr
	reserved30                    uintptr
	tclOOUnusedStubEntry          uintptr
} /* tclOODecls.h:128:9 */

type TclOOStubs = TclOOStubs1 /* tclOODecls.h:164:3 */

// Inline function declarations:

// Slot 29 is reserved
// Slot 30 is reserved

// !END!: Do not edit above this line.

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _exception = struct {
	__type int32
	_      [4]byte
	name   uintptr
	arg1   float64
	arg2   float64
	retval float64
} /* math.h:15:1 */

// See also float.h

// IEEE float/double type shapes.

type __mingw_dbl_type_t = struct{ x float64 } /* math.h:119:11 */

type __mingw_flt_type_t = struct{ x float32 } /* math.h:127:11 */

type __mingw_ldbl_type_t = struct {
	x float64
	_ [8]byte
} /* math.h:132:11 */

type _complex = struct {
	x float64
	y float64
} /* math.h:260:3 */

// Use the compiler's builtin define for FLT_EVAL_METHOD to
//    set float_t and double_t.
type float_t = float32  /* math.h:362:15 */
type double_t = float64 /* math.h:363:16 */

// Documentation on decimal float math
//    http://h21007.www2.hp.com/portal/site/dspp/menuitem.863c3e4cbcdc3f3515b49c108973a801?ciid=8cf166fedd1aa110VgnVCM100000a360ea10RCRD
//

// Required for Testregexp*Cmd
// tclRegexp.h --
//
//	This file contains definitions used internally by Henry Spencer's
//	regular expression code.
//
// Copyright (c) 1998 by Sun Microsystems, Inc.
// Copyright (c) 1998-1999 by Scriptics Corporation.
//
// See the file "license.terms" for information on usage and redistribution of
// this file, and for a DISCLAIMER OF ALL WARRANTIES.

// tclInt.h --
//
//	Declarations of things used internally by the Tcl interpreter.
//
// Copyright (c) 1987-1993 The Regents of the University of California.
// Copyright (c) 1993-1997 Lucent Technologies.
// Copyright (c) 1994-1998 Sun Microsystems, Inc.
// Copyright (c) 1998-1999 by Scriptics Corporation.
// Copyright (c) 2001, 2002 by Kevin B. Kenny.  All rights reserved.
// Copyright (c) 2007 Daniel A. Steffen <das@users.sourceforge.net>
// Copyright (c) 2006-2008 by Joe Mistachkin.  All rights reserved.
// Copyright (c) 2008 by Miguel Sofer. All rights reserved.
//
// See the file "license.terms" for information on usage and redistribution of
// this file, and for a DISCLAIMER OF ALL WARRANTIES.

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:

// regular expressions
//
// Copyright (c) 1998, 1999 Henry Spencer.  All rights reserved.
//
// Development of this software was funded, in part, by Cray Research Inc.,
// UUNET Communications Services Inc., Sun Microsystems Inc., and Scriptics
// Corporation, none of whom are responsible for the results. The author
// thanks all of them.
//
// Redistribution and use in source and binary forms -- with or without
// modification -- are permitted for any purpose, provided that
// redistributions in source form retain this entire copyright notice and
// indicate the origin and nature of any modifications.
//
// I'd appreciate being given credit for this package in the documentation of
// software which uses it, but that is not a requirement.
//
// THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
// HENRY SPENCER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//
// Prototypes etc. marked with "^" within comments get gathered up (and
// possibly edited) by the regfwd program and inserted near the bottom of this
// file.
//
// We offer the option of declaring one wide-character version of the RE
// functions as well as the char versions. To do that, define __REG_WIDE_T to
// the type of wide characters (unfortunately, there is no consensus that
// wchar_t is suitable) and __REG_WIDE_COMPILE and __REG_WIDE_EXEC to the
// names to be used for the compile and execute functions (suggestion:
// re_Xcomp and re_Xexec, where X is a letter suggestive of the wide type,
// e.g. re_ucomp and re_uexec for Unicode). For cranky old compilers, it may
// be necessary to do something like:
// #define	__REG_WIDE_COMPILE(a,b,c,d)	re_Xcomp(a,b,c,d)
// #define	__REG_WIDE_EXEC(a,b,c,d,e,f,g)	re_Xexec(a,b,c,d,e,f,g)
// rather than just #defining the names as parameterless macros.
//
// For some specialized purposes, it may be desirable to suppress the
// declarations of the "front end" functions, regcomp() and regexec(), or of
// the char versions of the compile and execute functions. To suppress the
// front-end functions, define __REG_NOFRONT. To suppress the char versions,
// define __REG_NOCHAR.
//
// The right place to do those defines (and some others you may want, see
// below) would be <sys/types.h>. If you don't have control of that file, the
// right place to add your own defines to this file is marked below. This is
// normally done automatically, by the makefile and regmkhdr, based on the
// contents of regcustom.h.

// voodoo for C++

// Add your own defines, if needed, here.

// Location where a chunk of regcustom.h is automatically spliced into this
// file (working from its prototype, regproto.h).

// --- begin ---
// ensure certain things don't sneak in from system headers
// interface types
// names and declarations
// --- end ---

// interface types etc.

// regoff_t has to be large enough to hold either off_t or ssize_t, and must
// be signed; it's only a guess that long is suitable, so we offer
// <sys/types.h> an override.
type regoff_t = int32 /* regex.h:123:24 */

// other interface types

// the biggie, a compiled RE (or rather, a front end to same)
type regex_t = struct {
	re_magic int32
	_        [4]byte
	re_nsub  size_t
	re_info  int32
	re_csize int32
	re_endp  uintptr
	re_guts  uintptr
	re_fns   uintptr
} /* regex.h:156:3 */

// result reporting (may acquire more fields later)
type regmatch_t = struct {
	rm_so regoff_t
	rm_eo regoff_t
} /* regex.h:162:3 */

// supplementary control and reporting
type rm_detail_t = struct{ rm_extend regmatch_t } /* regex.h:167:3 */
// automatically gathered by fwd; do not hand-edit
// =====^!^===== end forwards =====^!^=====

// more C++ voodoo

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:

// The TclRegexp structure encapsulates a compiled regex_t, the flags that
// were used to compile it, and an array of pointers that are used to indicate
// subexpressions after a call to Tcl_RegExpExec. Note that the string and
// objPtr are mutually exclusive. These values are needed by Tcl_RegExpRange
// in order to return pointers into the original string.

type TclRegexp1 = struct {
	flags      int32
	_          [4]byte
	re         regex_t
	string     uintptr
	objPtr     uintptr
	globObjPtr uintptr
	matches    uintptr
	details    rm_detail_t
	refCount   int32
	_          [4]byte
} /* tclRegexp.h:27:9 */

// automatically gathered by fwd; do not hand-edit
// =====^!^===== end forwards =====^!^=====

// more C++ voodoo

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:

// The TclRegexp structure encapsulates a compiled regex_t, the flags that
// were used to compile it, and an array of pointers that are used to indicate
// subexpressions after a call to Tcl_RegExpExec. Note that the string and
// objPtr are mutually exclusive. These values are needed by Tcl_RegExpRange
// in order to return pointers into the original string.

type TclRegexp = TclRegexp1 /* tclRegexp.h:42:3 */

// Required for the TestChannelCmd and TestChannelEventCmd
// tclIO.h --
//
//	This file provides the generic portions (those that are the same on
//	all platforms and for all channel types) of Tcl's IO facilities.
//
// Copyright (c) 1998-2000 Ajuba Solutions
// Copyright (c) 1995-1997 Sun Microsystems, Inc.
//
// See the file "license.terms" for information on usage and redistribution of
// this file, and for a DISCLAIMER OF ALL WARRANTIES.

// Make sure that both EAGAIN and EWOULDBLOCK are defined. This does not
// compile on systems where neither is defined. We want both defined so that
// we can test safely for both. In the code we still have to test for both
// because there may be systems on which both are defined and have different
// values.

// struct ChannelBuffer:
//
// Buffers data being sent to or from a channel.

type ChannelBuffer1 = struct {
	_           [0]uint64
	refCount    int32
	nextAdded   int32
	nextRemoved int32
	bufLength   int32
	nextPtr     uintptr
} /* tclIO.h:38:9 */

// Required for the TestChannelCmd and TestChannelEventCmd
// tclIO.h --
//
//	This file provides the generic portions (those that are the same on
//	all platforms and for all channel types) of Tcl's IO facilities.
//
// Copyright (c) 1998-2000 Ajuba Solutions
// Copyright (c) 1995-1997 Sun Microsystems, Inc.
//
// See the file "license.terms" for information on usage and redistribution of
// this file, and for a DISCLAIMER OF ALL WARRANTIES.

// Make sure that both EAGAIN and EWOULDBLOCK are defined. This does not
// compile on systems where neither is defined. We want both defined so that
// we can test safely for both. In the code we still have to test for both
// because there may be systems on which both are defined and have different
// values.

// struct ChannelBuffer:
//
// Buffers data being sent to or from a channel.

type ChannelBuffer = ChannelBuffer1 /* tclIO.h:51:3 */

// How much extra space to allocate in buffer to hold bytes from previous
// buffer (when converting to UTF-8) or to hold bytes that will go to next
// buffer (when converting from UTF-8).

// The following defines the *default* buffer size for channels.

// The following structure describes the information saved from a call to
// "fileevent". This is used later when the event being waited for to invoke
// the saved script in the interpreter designed in this record.

type EventScriptRecord1 = struct {
	chanPtr   uintptr
	scriptPtr uintptr
	interp    uintptr
	mask      int32
	_         [4]byte
	nextPtr   uintptr
} /* tclIO.h:75:9 */

// How much extra space to allocate in buffer to hold bytes from previous
// buffer (when converting to UTF-8) or to hold bytes that will go to next
// buffer (when converting from UTF-8).

// The following defines the *default* buffer size for channels.

// The following structure describes the information saved from a call to
// "fileevent". This is used later when the event being waited for to invoke
// the saved script in the interpreter designed in this record.

type Channel1 = struct {
	state        uintptr
	instanceData ClientData
	typePtr      uintptr
	downChanPtr  uintptr
	upChanPtr    uintptr
	inQueueHead  uintptr
	inQueueTail  uintptr
	refCount     int32
	_            [4]byte
} /* tclIO.h:75:9 */

// How much extra space to allocate in buffer to hold bytes from previous
// buffer (when converting to UTF-8) or to hold bytes that will go to next
// buffer (when converting from UTF-8).

// The following defines the *default* buffer size for channels.

// The following structure describes the information saved from a call to
// "fileevent". This is used later when the event being waited for to invoke
// the saved script in the interpreter designed in this record.

type EventScriptRecord = EventScriptRecord1 /* tclIO.h:86:3 */

// struct Channel:
//
// One of these structures is allocated for each open channel. It contains
// data specific to the channel but which belongs to the generic part of the
// Tcl channel mechanism, and it points at an instance specific (and type
// specific) instance data, and at a channel type structure.

type ChannelState1 = struct {
	channelName         uintptr
	flags               int32
	_                   [4]byte
	encoding            Tcl_Encoding
	inputEncodingState  Tcl_EncodingState
	inputEncodingFlags  int32
	_                   [4]byte
	outputEncodingState Tcl_EncodingState
	outputEncodingFlags int32
	inputTranslation    TclEolTranslation
	outputTranslation   TclEolTranslation
	inEofChar           int32
	outEofChar          int32
	unreportedError     int32
	refCount            int32
	_                   [4]byte
	closeCbPtr          uintptr
	outputStage         uintptr
	curOutPtr           uintptr
	outQueueHead        uintptr
	outQueueTail        uintptr
	saveInBufPtr        uintptr
	inQueueHead         uintptr
	inQueueTail         uintptr
	chPtr               uintptr
	interestMask        int32
	_                   [4]byte
	scriptRecordPtr     uintptr
	bufSize             int32
	_                   [4]byte
	timer               Tcl_TimerToken
	csPtrR              uintptr
	csPtrW              uintptr
	topChanPtr          uintptr
	bottomChanPtr       uintptr
	nextCSPtr           uintptr
	managingThread      Tcl_ThreadId
	chanMsg             uintptr
	unreportedMsg       uintptr
	epoch               int32
	_                   [4]byte
} /* tclIO.h:75:9 */

// struct Channel:
//
// One of these structures is allocated for each open channel. It contains
// data specific to the channel but which belongs to the generic part of the
// Tcl channel mechanism, and it points at an instance specific (and type
// specific) instance data, and at a channel type structure.

type Channel = Channel1 /* tclIO.h:117:3 */

// struct ChannelState:
//
// One of these structures is allocated for each open channel. It contains
// data specific to the channel but which belongs to the generic part of the
// Tcl channel mechanism, and it points at an instance specific (and type
// specific) instance data, and at a channel type structure.

type ChannelState = ChannelState1 /* tclIO.h:219:3 */

// Dynamic string shared by TestdcallCmd and DelCallbackProc; used to collect
// the results of the various deletion callbacks.

var delString Tcl_DString /* tclTest.c:61:20: */
var delInterp uintptr     /* tclTest.c:62:19: */

// One of the following structures exists for each asynchronous handler
// created by the "testasync" command".

type TestAsyncHandler1 = struct {
	id      int32
	_       [4]byte
	handler Tcl_AsyncHandler
	command uintptr
	nextPtr uintptr
} /* tclTest.c:69:9 */

// One of the following structures exists for each asynchronous handler
// created by the "testasync" command".

type TestAsyncHandler = TestAsyncHandler1 /* tclTest.c:76:3 */

var firstHandler uintptr = uintptr(0) /* tclTest.c:80:25 */

// The dynamic string below is used by the "testdstring" command to test the
// dynamic string facilities.

var dstring Tcl_DString /* tclTest.c:87:20: */

// The command trace below is used by the "testcmdtraceCmd" command to test
// the command tracing facilities.

var cmdTrace Tcl_Trace /* tclTest.c:94:18: */

// One of the following structures exists for each command created by
// TestdelCmd:

type DelCmd = struct {
	interp    uintptr
	deleteCmd uintptr
} /* tclTest.c:105:3 */

// The following is used to keep track of an encoding that invokes a Tcl
// command.

type TclEncoding = struct {
	interp     uintptr
	toUtfCmd   uintptr
	fromUtfCmd uintptr
} /* tclTest.c:116:3 */

// The counter below is used to determine if the TestsaveresultFree routine
// was called for a result.

var freeCount int32 /* tclTest.c:123:12: */

// Boolean flag used by the "testsetmainloop" and "testexitmainloop" commands.

var exitMainLoop int32 = 0 /* tclTest.c:129:12 */

// Event structure used in testing the event queue management procedures.

type TestEvent = struct {
	header  Tcl_Event
	interp  uintptr
	command uintptr
	tag     uintptr
} /* tclTest.c:140:3 */

// Simple detach/attach facility for testchannel cut|splice. Allow testing of
// channel transfer in core testsuite.

type TestChannel1 = struct {
	__chan  Tcl_Channel
	nextPtr uintptr
} /* tclTest.c:147:9 */

// Simple detach/attach facility for testchannel cut|splice. Allow testing of
// channel transfer in core testsuite.

type TestChannel = TestChannel1 /* tclTest.c:150:3 */

var firstDetached uintptr /* tclTest.c:152:20: */

var testReportingFilesystem = Tcl_Filesystem{
	typeName:             ts,
	structureLength:      int32(unsafe.Sizeof(Tcl_Filesystem{})),
	version:              uintptr(0x1),
	pathInFilesystemProc: 0, // path in
	dupInternalRepProc:   0,
	freeInternalRepProc:  0, // convert to native
	normalizePathProc:    0, // separator
	statProc:             0,
	accessProc:           0,
	openFileChannelProc:  0,
	matchInDirectoryProc: 0,
	utimeProc:            0,
	linkProc:             0,
	fileAttrStringsProc:  0,
	fileAttrsGetProc:     0,
	fileAttrsSetProc:     0,
	createDirectoryProc:  0,
	removeDirectoryProc:  0,
	deleteFileProc:       0,
	copyFileProc:         0,
	renameFileProc:       0,
	copyDirectoryProc:    0,
	lstatProc:            0,
	loadFileProc:         0,
	chdirProc:            0,
} /* tclTest.c:333:29 */

var simpleFilesystem = Tcl_Filesystem{
	typeName:             ts + 10,
	structureLength:      int32(unsafe.Sizeof(Tcl_Filesystem{})),
	version:              uintptr(0x1),
	pathInFilesystemProc: 0,
	statProc:             0,
	accessProc:           0,
	openFileChannelProc:  0,
	matchInDirectoryProc: 0,
	listVolumesProc:      0,
} /* tclTest.c:367:29 */

//----------------------------------------------------------------------
//
// Tcltest_Init --
//
//	This procedure performs application-specific initialization. Most
//	applications, especially those that incorporate additional packages,
//	will have their own version of this procedure.
//
// Results:
//	Returns a standard Tcl completion code, and leaves an error message in
//	the interp's result if an error occurs.
//
// Side effects:
//	Depends on the startup script.
//
//----------------------------------------------------------------------

func Tcltest_Init(tls *libc.TLS, interp uintptr) int32 { /* tclTest.c:435:1: */
	bp := tls.Alloc(32)
	defer tls.Free(32)

	// var t3ArgTypes [2]Tcl_ValueType at bp, 8

	// var objv uintptr at bp+16, 8

	var objPtr uintptr
	// var objc int32 at bp+8, 4

	// var index int32 at bp+24, 4

	if tcl.XTcl_InitStubs(tls, interp, ts+17, 0) == uintptr(0) {
		return TCL_ERROR
	}
	if tcl.XTclTomMathInitializeStubs(tls, interp, ts+17, TCLTOMMATH_EPOCH, TCLTOMMATH_REVISION) == uintptr(0) {
		return TCL_ERROR
	}
	if tcl.XTclOOInitializeStubs(tls, interp, ts+21) == uintptr(0) {
		return TCL_ERROR
	}
	// TIP #268: Full patchlevel instead of just major.minor

	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_PkgProvideEx})).f(tls, interp, ts+27, ts+35, uintptr(0)) == TCL_ERROR {
		return TCL_ERROR
	}

	// Create additional commands and math functions for testing Tcl.

	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+42 /* "gettimes" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{GetTimesObjCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+51 /* "noop" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{NoopCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+51 /* "noop" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{NoopObjCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+56 /* "testpurebytesobj" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestpurebytesobjObjCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+73 /* "testsetbytearray..." */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestsetbytearraylengthObjCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+96 /* "testbytestring" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestbytestringObjCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+111 /* "teststringbytes" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TeststringbytesObjCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+127 /* "testwrongnumargs" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestWrongNumArgsObjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+144 /* "testfilesystem" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestFilesystemObjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+159 /* "testsimplefilesy..." */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestSimpleFilesystemObjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+180, /* "testgetindexfrom..." */
		*(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{TestGetIndexFromObjStructObjCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+206 /* "testasync" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestasyncCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+216, /* "testbumpinterpep..." */
		*(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{TestbumpinterpepochObjCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+236 /* "testchannel" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestChannelCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+248 /* "testchannelevent" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestChannelEventCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+265 /* "testcmdtoken" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestcmdtokenCmd})), uintptr(0),
		uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+278 /* "testcmdinfo" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestcmdinfoCmd})), uintptr(0),
		uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+290 /* "testcmdtrace" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestcmdtraceCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+303 /* "testconcatobj" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestconcatobjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+317 /* "testcreatecomman..." */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestcreatecommandCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+335 /* "testdcall" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestdcallCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+345 /* "testdel" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestdelCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+353 /* "testdelassocdata" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestdelassocdataCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+370 /* "testdoubledigits" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestdoubledigitsObjCmd})),
		uintptr(0), uintptr(0))
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringInit})).f(tls, uintptr(unsafe.Pointer(&dstring)))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+387 /* "testdstring" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestdstringCmd})), uintptr(0),
		uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+399 /* "testencoding" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestencodingObjCmd})), uintptr(0),
		uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+412 /* "testevalex" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestevalexObjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+423 /* "testevalobjv" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestevalobjvObjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+436 /* "testevent" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TesteventObjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+446 /* "testexithandler" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestexithandlerCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+462 /* "testexprlong" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestexprlongCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+475 /* "testexprlongobj" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestexprlongobjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+491 /* "testexprdouble" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestexprdoubleCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+506 /* "testexprdoubleob..." */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestexprdoubleobjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+524 /* "testexprparser" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestexprparserObjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+539 /* "testexprstring" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestexprstringCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+554 /* "testfevent" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestfeventCmd})), uintptr(0),
		uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+565 /* "testfilelink" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestfilelinkCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+578 /* "testfile" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestfileCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+587, /* "testhashsystemha..." */
		*(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{TestHashSystemHashCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+606 /* "testgetassocdata" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestgetassocdataCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+623 /* "testgetint" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestgetintCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+634 /* "testgetplatform" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestgetplatformCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+650, /* "testgetvarfullna..." */
		*(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{TestgetvarfullnameCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+669 /* "testinterpdelete" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestinterpdeleteCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+686 /* "testlink" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestlinkCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+695 /* "testlocale" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestlocaleCmd})), uintptr(0),
		uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+706 /* "testpanic" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestpanicCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+716 /* "testparseargs" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestparseargsCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+730 /* "testparser" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestparserObjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+741 /* "testparsevar" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestparsevarObjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+754 /* "testparsevarname" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestparsevarnameObjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+771 /* "testregexp" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestregexpObjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+782 /* "testreturn" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestreturnObjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+793 /* "testsaveresult" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestsaveresultCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+808 /* "testservicemode" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestServiceModeCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+824 /* "testsetassocdata" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestsetassocdataCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+841 /* "testsetnoerr" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestsetCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+854 /* "testseterr" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestsetCmd})),
		ClientData(TCL_LEAVE_ERR_MSG), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+865 /* "testset2" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{Testset2Cmd})),
		ClientData(TCL_LEAVE_ERR_MSG), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+874 /* "testseterrorcode" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestseterrorcodeCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+891, /* "testsetobjerrorc..." */
		*(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{TestsetobjerrorcodeCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+911, /* "testutfnext" */
		*(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{TestUtfNextCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+923, /* "testutfprev" */
		*(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{TestUtfPrevCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+935, /* "testnumutfchars" */
		*(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{TestNumUtfCharsCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+951, /* "testfindfirst" */
		*(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{TestFindFirstCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+965, /* "testfindlast" */
		*(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{TestFindLastCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+978 /* "testsetplatform" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestsetplatformCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+994 /* "teststaticpkg" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TeststaticpkgCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+1008, /* "testtranslatefil..." */
		*(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{TesttranslatefilenameCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+1030 /* "testupvar" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestupvarCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32, uintptr, uintptr, ClientData)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateMathFunc})).f(tls, interp, ts+1040 /* "T1" */, 0, uintptr(0), *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, uintptr, uintptr) int32
	}{TestMathFunc})), uintptr(123))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32, uintptr, uintptr, ClientData)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateMathFunc})).f(tls, interp, ts+1043 /* "T2" */, 0, uintptr(0), *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, uintptr, uintptr) int32
	}{TestMathFunc})), uintptr(345))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+1046 /* "testmainthread" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestmainthreadCmd})), uintptr(0),
		uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+1061 /* "testsetmainloop" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestsetmainloopCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+1077 /* "testexitmainloop" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestexitmainloopCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+1094 /* "testcpuid" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestcpuidCmd})),
		uintptr(0), uintptr(0))
	*(*Tcl_ValueType)(unsafe.Pointer(bp)) = TCL_EITHER
	*(*Tcl_ValueType)(unsafe.Pointer(bp + 1*4)) = TCL_EITHER
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32, uintptr, uintptr, ClientData)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateMathFunc})).f(tls, interp, ts+1104 /* "T3" */, 2, bp /* &t3ArgTypes[0] */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, uintptr, uintptr) int32
	}{TestMathFunc2})),
		uintptr(0))

	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+1107 /* "testnreunwind" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestNREUnwind})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+1121 /* "testnrelevels" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestNRELevels})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+1135 /* "testinterpresolv..." */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestInterpResolverCmd})),
		uintptr(0), uintptr(0))

	if TclObjTest_Init(tls, interp) != TCL_OK {
		return TCL_ERROR
	}
	if Procbodytest_Init(tls, interp) != TCL_OK {
		return TCL_ERROR
	}

	// Check for special options used in ../tests/main.test

	objPtr = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetVar2Ex})).f(tls, interp, ts+1154 /* "argv" */, uintptr(0), TCL_GLOBAL_ONLY)
	if objPtr != uintptr(0) {
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjGetElements})).f(tls, interp, objPtr, bp+8, bp+16) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 8)) != 0 && (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, uintptr(0), *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(bp + 16)))), uintptr(unsafe.Pointer(&specialOptions)), int32(unsafe.Sizeof(uintptr(0))), uintptr(0), TCL_EXACT, bp+24) == TCL_OK {
			switch *(*int32)(unsafe.Pointer(bp + 24 /* index */)) {
			case 0:
				return TCL_ERROR
				fallthrough
			case 1:
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteInterp})).f(tls, interp)
				return TCL_ERROR
				fallthrough
			case 2:
				{
					// var mode int32 at bp+28, 4

					(*struct {
						f func(*libc.TLS, uintptr, Tcl_Channel) int32
					})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnregisterChannel})).f(tls, interp,
						(*struct {
							f func(*libc.TLS, uintptr, uintptr, uintptr) Tcl_Channel
						})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetChannel})).f(tls, interp, ts+1159 /* "stderr" */, bp+28 /* &mode */))
					return TCL_ERROR

				}
				fallthrough
			case 3:
				if *(*int32)(unsafe.Pointer(bp + 8))-1 != 0 {
					(*struct {
						f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, int32) uintptr
					})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetVar2Ex})).f(tls, interp, ts+1166 /* "tcl_rcFileName" */, uintptr(0), *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(bp + 16 /* objv */)) + 1*8)),
						TCL_GLOBAL_ONLY)
				}
				return TCL_ERROR
			}
		}
	}

	// And finally add any platform specific test commands.

	return TclplatformtestInit(tls, interp)
}

var specialOptions = [5]uintptr{
	ts + 1181, ts + 1199,
	ts + 1224, ts + 1248, uintptr(0),
} /* tclTest.c:442:23 */

//----------------------------------------------------------------------
//
// Tcltest_SafeInit --
//
//	This procedure performs application-specific initialization. Most
//	applications, especially those that incorporate additional packages,
//	will have their own version of this procedure.
//
// Results:
//	Returns a standard Tcl completion code, and leaves an error message in
//	the interp's result if an error occurs.
//
// Side effects:
//	Depends on the startup script.
//
//----------------------------------------------------------------------

func Tcltest_SafeInit(tls *libc.TLS, interp uintptr) int32 { /* tclTest.c:691:1: */
	if tcl.XTcl_InitStubs(tls, interp, ts+17, 0) == uintptr(0) {
		return TCL_ERROR
	}
	return Procbodytest_SafeInit(tls, interp)
}

//----------------------------------------------------------------------
//
// TestasyncCmd --
//
//	This procedure implements the "testasync" command.  It is used
//	to test the asynchronous handler facilities of Tcl.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Creates, deletes, and invokes handlers.
//
//----------------------------------------------------------------------

func TestasyncCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:718:1: */
	bp := tls.Alloc(56)
	defer tls.Free(56)

	var asyncPtr uintptr
	var prevPtr uintptr
	// var id int32 at bp+48, 4

	// var code int32 at bp+52, 4

	_ = dummy

	if !(argc < 2) {
		goto __1
	}
wrongNumArgs:
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1270 /* "wrong # args" */, uintptr(0)))
	return TCL_ERROR
__1:
	;
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1283) == 0) {
		goto __2
	}
	if !(argc != 3) {
		goto __4
	}
	goto wrongNumArgs
__4:
	;
	asyncPtr = (*struct {
		f func(*libc.TLS, uint32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(unsafe.Sizeof(TestAsyncHandler{})))
	(*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).command = (*struct {
		f func(*libc.TLS, uint32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(libc.Xstrlen(tls, *(*uintptr)(unsafe.Pointer(argv + 2*8)))+uint64(1)))
	libc.Xstrcpy(tls, (*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).command, *(*uintptr)(unsafe.Pointer(argv + 2*8)))

	(*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).id = nextId
	nextId++
	(*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).handler = (*struct {
		f func(*libc.TLS, uintptr, ClientData) Tcl_AsyncHandler
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AsyncCreate})).f(tls, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32) int32
	}{AsyncHandlerProc})),
		uintptr(intptr_t((*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).id)))
	(*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).nextPtr = firstHandler
	firstHandler = asyncPtr

	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, (*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).id))
	goto __3
__2:
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1290) == 0) {
		goto __5
	}
	if !(argc == 2) {
		goto __7
	}

__8:
	if !(firstHandler != uintptr(0)) {
		goto __9
	}
	asyncPtr = firstHandler
	firstHandler = (*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).nextPtr
	(*struct {
		f func(*libc.TLS, Tcl_AsyncHandler)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AsyncDelete})).f(tls, (*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).handler)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, (*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).command)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, asyncPtr)
	goto __8
__9:
	;

	return TCL_OK
__7:
	;
	if !(argc != 3) {
		goto __10
	}
	goto wrongNumArgs
__10:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), bp+48) != TCL_OK) {
		goto __11
	}
	return TCL_ERROR
__11:
	;

	prevPtr = uintptr(0)
	asyncPtr = firstHandler
__12:
	if !(asyncPtr != uintptr(0)) {
		goto __14
	}
	if !((*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).id != *(*int32)(unsafe.Pointer(bp + 48))) {
		goto __15
	}
	goto __13
__15:
	;
	if !(prevPtr == uintptr(0)) {
		goto __16
	}
	firstHandler = (*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).nextPtr
	goto __17
__16:
	(*TestAsyncHandler)(unsafe.Pointer(prevPtr)).nextPtr = (*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).nextPtr
__17:
	;
	(*struct {
		f func(*libc.TLS, Tcl_AsyncHandler)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AsyncDelete})).f(tls, (*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).handler)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, (*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).command)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, asyncPtr)
	goto __14
	goto __13
__13:
	prevPtr = asyncPtr
	asyncPtr = (*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).nextPtr
	goto __12
	goto __14
__14:
	;

	goto __6
__5:
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1297) == 0) {
		goto __18
	}
	if !(argc != 5) {
		goto __20
	}
	goto wrongNumArgs
__20:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), bp+48) != TCL_OK ||
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 4*8)), bp+52) != TCL_OK) {
		goto __21
	}
	return TCL_ERROR
__21:
	;

	asyncPtr = firstHandler
__22:
	if !(asyncPtr != uintptr(0)) {
		goto __24
	}
	if !((*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).id == *(*int32)(unsafe.Pointer(bp + 48))) {
		goto __25
	}
	(*struct {
		f func(*libc.TLS, Tcl_AsyncHandler)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AsyncMark})).f(tls, (*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).handler)
	goto __24
__25:
	;
	goto __23
__23:
	asyncPtr = (*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).nextPtr
	goto __22
	goto __24
__24:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, *(*uintptr)(unsafe.Pointer(argv + 3*8)), -1))

	return *(*int32)(unsafe.Pointer(bp + 52 /* code */))
	goto __19
__18:
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+16, ts+1302 /* "bad option \"" */, *(*uintptr)(unsafe.Pointer(argv + 1*8)),
		ts+1315, uintptr(0)))
	return TCL_ERROR
__19:
	;
__6:
	;
__3:
	;
	return TCL_OK
}

var nextId int32 = 1 /* tclTest.c:726:16 */

func AsyncHandlerProc(tls *libc.TLS, clientData ClientData, interp uintptr, code int32) int32 { /* tclTest.c:844:1: */
	bp := tls.Alloc(56)
	defer tls.Free(56)

	var asyncPtr uintptr
	var id int32 = int32(clientData)
	// var listArgv [4]uintptr at bp+24, 32

	var cmd uintptr
	// var string [24]int8 at bp, 24

	for asyncPtr = firstHandler; asyncPtr != uintptr(0); asyncPtr = (*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).nextPtr {
		if (*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).id == id {
			break
		}
	}

	if !(asyncPtr != 0) {
		// Woops - this one was deleted between the AsyncMark and now
		return TCL_OK
	}

	(*struct {
		f func(*libc.TLS, uintptr, int32) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp /* &string[0] */, int32(code))
	*(*uintptr)(unsafe.Pointer(bp + 24)) = (*TestAsyncHandler)(unsafe.Pointer(asyncPtr)).command
	*(*uintptr)(unsafe.Pointer(bp + 24 + 1*8)) = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp))
	*(*uintptr)(unsafe.Pointer(bp + 24 + 2*8)) = bp /* &string[0] */
	*(*uintptr)(unsafe.Pointer(bp + 24 + 3*8)) = uintptr(0)
	cmd = (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Merge})).f(tls, 3, bp+24 /* &listArgv[0] */)
	if interp != uintptr(0) {
		code = (*struct {
			f func(*libc.TLS, uintptr, uintptr, int32, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_EvalEx})).f(tls, interp, cmd, -1, 0)
	} else {
		// this should not happen, but by definition of how async handlers are
		// invoked, it's possible.  Better error checking is needed here.
	}
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, cmd)
	return code
}

//----------------------------------------------------------------------
//
// AsyncThreadProc --
//
//	Delivers an asynchronous event to a handler in another thread.
//
// Results:
//	None.
//
// Side effects:
//	Invokes Tcl_AsyncMark on the handler
//
//----------------------------------------------------------------------

func TestbumpinterpepochObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:929:1: */
	var iPtr uintptr = interp

	if objc != 1 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+1355 /* "" */)
		return TCL_ERROR
	}
	(*Interp)(unsafe.Pointer(iPtr)).compileEpoch++
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestcmdinfoCmd --
//
//	This procedure implements the "testcmdinfo" command.  It is used to
//	test Tcl_GetCommandInfo, Tcl_SetCommandInfo, and command creation and
//	deletion.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Creates and deletes various commands and modifies their data.
//
//----------------------------------------------------------------------

func TestcmdinfoCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:964:1: */
	bp := tls.Alloc(360)
	defer tls.Free(360)

	// var info Tcl_CmdInfo at bp+296, 64

	_ = dummy

	if argc != 3 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+1382, uintptr(0)))
		return TCL_ERROR
	}
	if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1283) == 0 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{CmdProc1})), ts+1399, /* "original" */
			*(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS, ClientData) }{CmdDelProc1})))
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1290) == 0 {
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringInit})).f(tls, uintptr(unsafe.Pointer(&delString)))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteCommand})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringResult})).f(tls, interp, uintptr(unsafe.Pointer(&delString)))
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1408) == 0 {
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetCommandInfo})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), bp+296) == 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+32, ts+1412 /* "??" */, uintptr(0)))
			return TCL_OK
		}
		if (*Tcl_CmdInfo)(unsafe.Pointer(bp+296)).proc == *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{CmdProc1})) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+48, ts+1415 /* "CmdProc1" */, ts+1424, /* " " */
				(*Tcl_CmdInfo)(unsafe.Pointer(bp+296 /* &info */)).clientData, uintptr(0)))
		} else if (*Tcl_CmdInfo)(unsafe.Pointer(bp+296)).proc == *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{CmdProc2})) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+80, ts+1426 /* "CmdProc2" */, ts+1424, /* " " */
				(*Tcl_CmdInfo)(unsafe.Pointer(bp+296 /* &info */)).clientData, uintptr(0)))
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+112, ts+1435 /* "unknown" */, uintptr(0)))
		}
		if (*Tcl_CmdInfo)(unsafe.Pointer(bp+296)).deleteProc == *(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS, ClientData) }{CmdDelProc1})) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+128, ts+1443 /* " CmdDelProc1" */, ts+1424, /* " " */
				(*Tcl_CmdInfo)(unsafe.Pointer(bp+296 /* &info */)).deleteData, uintptr(0)))
		} else if (*Tcl_CmdInfo)(unsafe.Pointer(bp+296)).deleteProc == *(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS, ClientData) }{CmdDelProc2})) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+160, ts+1456 /* " CmdDelProc2" */, ts+1424, /* " " */
				(*Tcl_CmdInfo)(unsafe.Pointer(bp+296 /* &info */)).deleteData, uintptr(0)))
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+192, ts+1469 /* " unknown" */, uintptr(0)))
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+208, ts+1424 /* " " */, (*Tcl_Namespace)(unsafe.Pointer((*Tcl_CmdInfo)(unsafe.Pointer(bp+296 /* &info */)).namespacePtr)).fullName, uintptr(0)))
		if (*Tcl_CmdInfo)(unsafe.Pointer(bp+296)).isNativeObjectProc != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+232, ts+1478 /* " nativeObjectPro..." */, uintptr(0)))
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+248, ts+1496 /* " stringProc" */, uintptr(0)))
		}
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1508) == 0 {
		(*Tcl_CmdInfo)(unsafe.Pointer(bp + 296 /* &info */)).proc = *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{CmdProc2}))
		(*Tcl_CmdInfo)(unsafe.Pointer(bp + 296 /* &info */)).clientData = ts + 1515 /* "new_command_data" */
		(*Tcl_CmdInfo)(unsafe.Pointer(bp + 296 /* &info */)).objProc = uintptr(0)
		(*Tcl_CmdInfo)(unsafe.Pointer(bp + 296 /* &info */)).objClientData = uintptr(0)
		(*Tcl_CmdInfo)(unsafe.Pointer(bp + 296 /* &info */)).deleteProc = *(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS, ClientData) }{CmdDelProc2}))
		(*Tcl_CmdInfo)(unsafe.Pointer(bp + 296 /* &info */)).deleteData = ts + 1532 /* "new_delete_data" */
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetCommandInfo})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), bp+296) == 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
				f func(*libc.TLS, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, 0))
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
				f func(*libc.TLS, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, 1))
		}
	} else {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+264, ts+1302 /* "bad option \"" */, *(*uintptr)(unsafe.Pointer(argv + 1*8)),
			ts+1548, uintptr(0)))
		return TCL_ERROR
	}
	return TCL_OK
}

func CmdProc1(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:1035:1: */
	bp := tls.Alloc(24)
	defer tls.Free(24)

	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1590 /* "CmdProc1 " */, clientData, uintptr(0)))
	return TCL_OK
}

func CmdProc2(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:1046:1: */
	bp := tls.Alloc(24)
	defer tls.Free(24)

	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1600 /* "CmdProc2 " */, clientData, uintptr(0)))
	return TCL_OK
}

func CmdDelProc1(tls *libc.TLS, clientData ClientData) { /* tclTest.c:1057:1: */
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringInit})).f(tls, uintptr(unsafe.Pointer(&delString)))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringAppend})).f(tls, uintptr(unsafe.Pointer(&delString)), ts+1610 /* "CmdDelProc1 " */, -1)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringAppend})).f(tls, uintptr(unsafe.Pointer(&delString)), clientData, -1)
}

func CmdDelProc2(tls *libc.TLS, clientData ClientData) { /* tclTest.c:1066:1: */
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringInit})).f(tls, uintptr(unsafe.Pointer(&delString)))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringAppend})).f(tls, uintptr(unsafe.Pointer(&delString)), ts+1623 /* "CmdDelProc2 " */, -1)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringAppend})).f(tls, uintptr(unsafe.Pointer(&delString)), clientData, -1)
}

//----------------------------------------------------------------------
//
// TestcmdtokenCmd --
//
//	This procedure implements the "testcmdtoken" command. It is used to
//	test Tcl_Command tokens and procedures such as Tcl_GetCommandFullName.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Creates and deletes various commands and modifies their data.
//
//----------------------------------------------------------------------

func TestcmdtokenCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:1092:1: */
	bp := tls.Alloc(152)
	defer tls.Free(152)

	var token Tcl_Command
	// var l uintptr at bp+144, 8

	// var buf [30]int8 at bp+112, 30

	if argc != 3 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+1636, uintptr(0)))
		return TCL_ERROR
	}
	if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1283) == 0 {
		token = (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
		}{CmdProc1})),
			ts+1399, uintptr(0))
		libc.Xsprintf(tls, bp+112, ts+1649, libc.VaList(bp+32, token))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, bp+112 /* &buf[0] */, uintptr(1))
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1652) == 0 {
		var objPtr uintptr

		if libc.Xsscanf(tls, *(*uintptr)(unsafe.Pointer(argv + 2*8)), ts+1649, libc.VaList(bp+40, bp+144)) != 1 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+48, ts+1657 /* "bad command toke..." */, *(*uintptr)(unsafe.Pointer(argv + 2*8)),
				ts+1677, uintptr(0)))
			return TCL_ERROR
		}

		objPtr = (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewObj})).f(tls)
		(*struct {
			f func(*libc.TLS, uintptr, Tcl_Command, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tcl_GetCommandFullName})).f(tls, interp, *(*uintptr)(unsafe.Pointer(bp + 144 /* l */)), objPtr)

		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp,
			(*struct {
				f func(*libc.TLS, uintptr, Tcl_Command) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetCommandName})).f(tls, interp, *(*uintptr)(unsafe.Pointer(bp + 144 /* l */))))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, objPtr))
		for ok := true; ok; ok = 0 != 0 {
			var _objPtr uintptr = objPtr
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
	} else {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+80, ts+1302 /* "bad option \"" */, *(*uintptr)(unsafe.Pointer(argv + 1*8)),
			ts+1679, uintptr(0)))
		return TCL_ERROR
	}
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestcmdtraceCmd --
//
//	This procedure implements the "testcmdtrace" command. It is used
//	to test Tcl_CreateTrace and Tcl_DeleteTrace.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Creates and deletes a command trace, and tests the invocation of
//	a procedure by the command trace.
//
//----------------------------------------------------------------------

func TestcmdtraceCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:1155:1: */
	bp := tls.Alloc(328)
	defer tls.Free(328)

	// var buffer Tcl_DString at bp+112, 216

	var result int32

	if argc != 3 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+1705, uintptr(0)))
		return TCL_ERROR
	}

	if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1721) == 0 {
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringInit})).f(tls, bp+112 /* &buffer */)
		cmdTrace = (*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, ClientData) Tcl_Trace
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateTrace})).f(tls, interp, 50000, *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr, uintptr, ClientData, int32, uintptr)
		}{CmdTraceProc})), bp+112 /* &buffer */)
		result = (*struct {
			f func(*libc.TLS, uintptr, uintptr, int32, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_EvalEx})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), -1, 0)
		if result == TCL_OK {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ResetResult})).f(tls, interp)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+32, (*Tcl_DString)(unsafe.Pointer(bp+112 /* &buffer */)).string, uintptr(0)))
		}
		(*struct {
			f func(*libc.TLS, uintptr, Tcl_Trace)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteTrace})).f(tls, interp, cmdTrace)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringFree})).f(tls, bp+112 /* &buffer */)
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1731) == 0 {
		// Create a command trace then eval a script to check whether it is
		// called. Note that this trace procedure removes itself as a further
		// check of the robustness of the trace proc calling code in
		// TclNRExecuteByteCode.

		cmdTrace = (*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, ClientData) Tcl_Trace
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateTrace})).f(tls, interp, 50000, *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr, uintptr, ClientData, int32, uintptr)
		}{CmdTraceDeleteProc})), uintptr(0))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, int32, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_EvalEx})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), -1, 0)
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1742) == 0 {
		var iPtr uintptr = interp
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringInit})).f(tls, bp+112 /* &buffer */)
		cmdTrace = (*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, ClientData) Tcl_Trace
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateTrace})).f(tls, interp, (*Interp)(unsafe.Pointer(iPtr)).numLevels+4, *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr, uintptr, ClientData, int32, uintptr)
		}{CmdTraceProc})),
			bp+112)
		result = (*struct {
			f func(*libc.TLS, uintptr, uintptr, int32, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_EvalEx})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), -1, 0)
		if result == TCL_OK {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ResetResult})).f(tls, interp)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+48, (*Tcl_DString)(unsafe.Pointer(bp+112 /* &buffer */)).string, uintptr(0)))
		}
		(*struct {
			f func(*libc.TLS, uintptr, Tcl_Trace)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteTrace})).f(tls, interp, cmdTrace)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringFree})).f(tls, bp+112 /* &buffer */)
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1752) == 0 {

		deleteCalled = 0
		cmdTrace = (*struct {
			f func(*libc.TLS, uintptr, int32, int32, uintptr, ClientData, uintptr) Tcl_Trace
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjTrace})).f(tls, interp, 50000,
			TCL_ALLOW_INLINE_COMPILATION, *(*uintptr)(unsafe.Pointer(&struct {
				f func(*libc.TLS, ClientData, uintptr, int32, uintptr, Tcl_Command, int32, uintptr) int32
			}{ObjTraceProc})),
			uintptr(unsafe.Pointer(&deleteCalled)), *(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS, ClientData) }{ObjTraceDeleteProc})))
		result = (*struct {
			f func(*libc.TLS, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Eval})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)))
		(*struct {
			f func(*libc.TLS, uintptr, Tcl_Trace)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteTrace})).f(tls, interp, cmdTrace)
		if !(deleteCalled != 0) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+1763 /* "Delete wasn't ca..." */, uintptr(0))
			return TCL_ERROR
		} else {
			return result
		}
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1784) == 0 {
		var t1 Tcl_Trace
		var t2 Tcl_Trace

		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringInit})).f(tls, bp+112 /* &buffer */)
		t1 = (*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, ClientData) Tcl_Trace
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateTrace})).f(tls, interp, 1, *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr, uintptr, ClientData, int32, uintptr)
		}{CmdTraceProc})), bp+112 /* &buffer */)
		t2 = (*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, ClientData) Tcl_Trace
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateTrace})).f(tls, interp, 50000, *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, ClientData, uintptr, int32, uintptr, uintptr, ClientData, int32, uintptr)
		}{CmdTraceProc})), bp+112 /* &buffer */)
		result = (*struct {
			f func(*libc.TLS, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Eval})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)))
		if result == TCL_OK {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ResetResult})).f(tls, interp)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+64, (*Tcl_DString)(unsafe.Pointer(bp+112 /* &buffer */)).string, uintptr(0)))
		}
		(*struct {
			f func(*libc.TLS, uintptr, Tcl_Trace)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteTrace})).f(tls, interp, t2)
		(*struct {
			f func(*libc.TLS, uintptr, Tcl_Trace)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteTrace})).f(tls, interp, t1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringFree})).f(tls, bp+112 /* &buffer */)
	} else {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+80, ts+1302 /* "bad option \"" */, *(*uintptr)(unsafe.Pointer(argv + 1*8)),
			ts+1795, uintptr(0)))
		return TCL_ERROR
	}
	return TCL_OK
}

var deleteCalled int32 /* tclTest.c:1207:13: */

func CmdTraceProc(tls *libc.TLS, clientData ClientData, interp uintptr, level int32, command uintptr, cmdProc uintptr, cmdClientData ClientData, argc int32, argv uintptr) { /* tclTest.c:1244:1: */
	var bufPtr uintptr = clientData
	var i int32

	(*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringAppendElement})).f(tls, bufPtr, command)

	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringStartSublist})).f(tls, bufPtr)
	for i = 0; i < argc; i++ {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringAppendElement})).f(tls, bufPtr, *(*uintptr)(unsafe.Pointer(argv + uintptr(i)*8)))
	}
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringEndSublist})).f(tls, bufPtr)
}

func CmdTraceDeleteProc(tls *libc.TLS, clientData ClientData, interp uintptr, level int32, command uintptr, cmdProc uintptr, cmdClientData ClientData, argc int32, argv uintptr) { /* tclTest.c:1271:1: */
	// Remove ourselves to test whether calling Tcl_DeleteTrace within a trace
	// callback causes the for loop in TclNRExecuteByteCode that calls traces to
	// reference freed memory.

	(*struct {
		f func(*libc.TLS, uintptr, Tcl_Trace)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteTrace})).f(tls, interp, cmdTrace)
}

func ObjTraceProc(tls *libc.TLS, clientData ClientData, interp uintptr, level int32, command uintptr, token Tcl_Command, objc int32, objv uintptr) int32 { /* tclTest.c:1293:1: */
	var word uintptr = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv)))

	if !(libc.Xstrcmp(tls, word, ts+1854) != 0) {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
			f func(*libc.TLS, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, command, -1))
		return TCL_ERROR
	} else if !(libc.Xstrcmp(tls, word, ts+1860) != 0) {
		return TCL_BREAK
	} else if !(libc.Xstrcmp(tls, word, ts+1866) != 0) {
		return TCL_CONTINUE
	} else if !(libc.Xstrcmp(tls, word, ts+1875) != 0) {
		return TCL_RETURN
	} else if !(libc.Xstrcmp(tls, word, ts+1882) != 0) {
		return 6
	} else {
		return TCL_OK
	}
	return int32(0)
}

func ObjTraceDeleteProc(tls *libc.TLS, clientData ClientData) { /* tclTest.c:1321:1: */
	var intPtr uintptr = clientData
	*(*int32)(unsafe.Pointer(intPtr)) = 1 // Record that the trace was deleted
}

//----------------------------------------------------------------------
//
// TestcreatecommandCmd --
//
//	This procedure implements the "testcreatecommand" command. It is used
//	to test that the Tcl_CreateCommand creates a new command in the
//	namespace specified as part of its name, if any. It also checks that
//	the namespace code ignore single ":"s in the middle or end of a
//	command name.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Creates and deletes two commands ("test_ns_basic::createdcommand"
//	and "value:at:").
//
//----------------------------------------------------------------------

func TestcreatecommandCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:1350:1: */
	bp := tls.Alloc(64)
	defer tls.Free(64)

	if argc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+1894, uintptr(0)))
		return TCL_ERROR
	}
	if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1283) == 0 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+1903, /* "test_ns_basic::c..." */
			*(*uintptr)(unsafe.Pointer(&struct {
				f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
			}{CreatedCommandProc})), uintptr(0), uintptr(0))
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1290) == 0 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteCommand})).f(tls, interp, ts+1903 /* "test_ns_basic::c..." */)
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1933) == 0 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, interp, ts+1941, /* "value:at:" */
			*(*uintptr)(unsafe.Pointer(&struct {
				f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
			}{CreatedCommandProc2})), uintptr(0), uintptr(0))
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1951) == 0 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteCommand})).f(tls, interp, ts+1941 /* "value:at:" */)
	} else {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+32, ts+1302 /* "bad option \"" */, *(*uintptr)(unsafe.Pointer(argv + 1*8)),
			ts+1959, uintptr(0)))
		return TCL_ERROR
	}
	return TCL_OK
}

func CreatedCommandProc(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:1380:1: */
	bp := tls.Alloc(104)
	defer tls.Free(104)

	// var info Tcl_CmdInfo at bp+40, 64

	var found int32

	found = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetCommandInfo})).f(tls, interp, ts+1903, /* "test_ns_basic::c..." */
		bp+40)
	if !(found != 0) {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+2006, /* "CreatedCommandPr..." */
			uintptr(0)))
		return TCL_ERROR
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+16, ts+2086, /* "CreatedCommandPr..." */
		(*Tcl_Namespace)(unsafe.Pointer((*Tcl_CmdInfo)(unsafe.Pointer(bp+40 /* &info */)).namespacePtr)).fullName, uintptr(0)))
	return TCL_OK
}

func CreatedCommandProc2(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:1402:1: */
	bp := tls.Alloc(104)
	defer tls.Free(104)

	// var info Tcl_CmdInfo at bp+40, 64

	var found int32

	found = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetCommandInfo})).f(tls, interp, ts+1941 /* "value:at:" */, bp+40 /* &info */)
	if !(found != 0) {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+2109, /* "CreatedCommandPr..." */
			uintptr(0)))
		return TCL_ERROR
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+16, ts+2190, /* "CreatedCommandPr..." */
		(*Tcl_Namespace)(unsafe.Pointer((*Tcl_CmdInfo)(unsafe.Pointer(bp+40 /* &info */)).namespacePtr)).fullName, uintptr(0)))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestdcallCmd --
//
//	This procedure implements the "testdcall" command.  It is used
//	to test Tcl_CallWhenDeleted.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Creates and deletes interpreters.
//
//----------------------------------------------------------------------

func TestdcallCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:1440:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	var i int32
	// var id int32 at bp, 4

	delInterp = (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateInterp})).f(tls)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringInit})).f(tls, uintptr(unsafe.Pointer(&delString)))
	for i = 1; i < argc; i++ {
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + uintptr(i)*8)), bp) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp)) < 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, ClientData)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DontCallWhenDeleted})).f(tls, delInterp, *(*uintptr)(unsafe.Pointer(&struct {
				f func(*libc.TLS, ClientData, uintptr)
			}{DelCallbackProc})),
				uintptr(intptr_t(-*(*int32)(unsafe.Pointer(bp)))))
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, ClientData)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CallWhenDeleted})).f(tls, delInterp, *(*uintptr)(unsafe.Pointer(&struct {
				f func(*libc.TLS, ClientData, uintptr)
			}{DelCallbackProc})),
				uintptr(intptr_t(*(*int32)(unsafe.Pointer(bp /* id */)))))
		}
	}
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteInterp})).f(tls, delInterp)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringResult})).f(tls, interp, uintptr(unsafe.Pointer(&delString)))
	return TCL_OK
}

// The deletion callback used by TestdcallCmd:

func DelCallbackProc(tls *libc.TLS, clientData ClientData, interp uintptr) { /* tclTest.c:1472:1: */
	bp := tls.Alloc(24)
	defer tls.Free(24)

	var id int32 = int32(clientData)
	// var buffer [24]int8 at bp, 24

	(*struct {
		f func(*libc.TLS, uintptr, int32) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp /* &buffer[0] */, int32(id))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringAppendElement})).f(tls, uintptr(unsafe.Pointer(&delString)), bp /* &buffer[0] */)
	if interp != delInterp {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringAppendElement})).f(tls, uintptr(unsafe.Pointer(&delString)), ts+2214 /* "bogus interprete..." */)
	}
}

//----------------------------------------------------------------------
//
// TestdelCmd --
//
//	This procedure implements the "testdel" command.  It is used
//	to test calling of command deletion callbacks.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Creates a command.
//
//----------------------------------------------------------------------

func TestdelCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:1504:1: */
	var dPtr uintptr
	var child uintptr

	if argc != 4 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+1270 /* "wrong # args" */, uintptr(0))
		return TCL_ERROR
	}

	child = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetSlave})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)))
	if child == uintptr(0) {
		return TCL_ERROR
	}

	dPtr = (*struct {
		f func(*libc.TLS, uint32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(unsafe.Sizeof(DelCmd{})))
	(*DelCmd)(unsafe.Pointer(dPtr)).interp = interp
	(*DelCmd)(unsafe.Pointer(dPtr)).deleteCmd = (*struct {
		f func(*libc.TLS, uint32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(libc.Xstrlen(tls, *(*uintptr)(unsafe.Pointer(argv + 3*8)))+uint64(1)))
	libc.Xstrcpy(tls, (*DelCmd)(unsafe.Pointer(dPtr)).deleteCmd, *(*uintptr)(unsafe.Pointer(argv + 3*8)))

	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateCommand})).f(tls, child, *(*uintptr)(unsafe.Pointer(argv + 2*8)), *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{DelCmdProc})), dPtr,
		*(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS, ClientData) }{DelDeleteProc})))
	return TCL_OK
}

func DelCmdProc(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:1534:1: */
	bp := tls.Alloc(16)
	defer tls.Free(16)

	var dPtr uintptr = clientData

	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, (*DelCmd)(unsafe.Pointer(dPtr)).deleteCmd, uintptr(0)))
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, (*DelCmd)(unsafe.Pointer(dPtr)).deleteCmd)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, dPtr)
	return TCL_OK
}

func DelDeleteProc(tls *libc.TLS, clientData ClientData) { /* tclTest.c:1549:1: */
	var dPtr uintptr = clientData

	(*struct {
		f func(*libc.TLS, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Eval})).f(tls, (*DelCmd)(unsafe.Pointer(dPtr)).interp, (*DelCmd)(unsafe.Pointer(dPtr)).deleteCmd)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ResetResult})).f(tls, (*DelCmd)(unsafe.Pointer(dPtr)).interp)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, (*DelCmd)(unsafe.Pointer(dPtr)).deleteCmd)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, dPtr)
}

//----------------------------------------------------------------------
//
// TestdelassocdataCmd --
//
//	This procedure implements the "testdelassocdata" command. It is used
//	to test Tcl_DeleteAssocData.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Deletes an association between a key and associated data from an
//	interpreter.
//
//----------------------------------------------------------------------

func TestdelassocdataCmd(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:1579:1: */
	bp := tls.Alloc(32)
	defer tls.Free(32)

	if argc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+2242 /* "wrong # argument..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+2273, uintptr(0)))
		return TCL_ERROR
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteAssocData})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)))
	return TCL_OK
}

//-----------------------------------------------------------------------------
//
// TestdoubledigitsCmd --
//
//	This procedure implements the 'testdoubledigits' command. It is
//	used to test the low-level floating-point formatting primitives
//	in Tcl.
//
// Usage:
//	testdoubledigits fpval ndigits type ?shorten"
//
// Parameters:
//	fpval - Floating-point value to format.
//	ndigits - Digit count to request from Tcl_DoubleDigits
//	type - One of 'shortest', 'Steele', 'e', 'f'
//	shorten - Indicates that the 'shorten' flag should be passed in.
//
//-----------------------------------------------------------------------------

func TestdoubledigitsObjCmd(tls *libc.TLS, unused ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:1616:1: */
	bp := tls.Alloc(48)
	defer tls.Free(48)

	var doubleType uintptr
	// var d float64 at bp+8, 8

	var status int32
	// var ndigits int32 at bp+16, 4

	// var type1 int32 at bp+20, 4

	// var decpt int32 at bp+24, 4

	// var signum int32 at bp+28, 4

	var str uintptr
	// var endPtr uintptr at bp+32, 8

	// var strObj uintptr at bp+40, 8

	var retval uintptr

	if objc < 4 || objc > 5 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+2284 /* "fpval ndigits ty..." */)
		return TCL_ERROR
	}
	status = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetDoubleFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp+8 /* &d */)
	if status != TCL_OK {
		doubleType = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjType})).f(tls, ts+2313 /* "double" */)
		if (*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(objv + 1*8)))).typePtr == doubleType ||
			libc.X__isnan(tls, *(*float64)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(objv + 1*8)) + 32))) != 0 {
			status = TCL_OK
			libc.Xmemcpy(tls, bp+8, *(*uintptr)(unsafe.Pointer(objv + 1*8))+32, uint64(unsafe.Sizeof(float64(0))))
		}
	}
	if status != TCL_OK ||
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 2*8)), bp+16) != TCL_OK ||
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 3*8)), uintptr(unsafe.Pointer(&options)), int32(unsafe.Sizeof(uintptr(0))), ts+2320, TCL_EXACT, bp+20) != TCL_OK {
		libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+2336, libc.VaList(bp, *(*float64)(unsafe.Pointer(bp + 8 /* d */))))
		return TCL_ERROR
	}
	*(*int32)(unsafe.Pointer(bp + 20 /* type1 */)) = types1[*(*int32)(unsafe.Pointer(bp + 20 /* type1 */))]
	if objc > 4 {
		if libc.Xstrcmp(tls, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 4*8))), ts+2351) != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
				f func(*libc.TLS, uintptr, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+2359 /* "bad flag" */, -1))
			return TCL_ERROR
		}
		*(*int32)(unsafe.Pointer(bp + 20 /* type1 */)) |= TCL_DD_SHORTEN_FLAG
	}
	str = (*struct {
		f func(*libc.TLS, float64, int32, int32, uintptr, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclDoubleDigits})).f(tls, *(*float64)(unsafe.Pointer(bp + 8 /* d */)), *(*int32)(unsafe.Pointer(bp + 16 /* ndigits */)), *(*int32)(unsafe.Pointer(bp + 20 /* type1 */)), bp+24 /* &decpt */, bp+28 /* &signum */, bp+32 /* &endPtr */)
	*(*uintptr)(unsafe.Pointer(bp + 40 /* strObj */)) = (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, str, int32((int64(*(*uintptr)(unsafe.Pointer(bp + 32 /* endPtr */)))-int64(str))/1))
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, str)
	retval = (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewListObj})).f(tls, 1, bp+40 /* &strObj */)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, uintptr(0), retval, (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, *(*int32)(unsafe.Pointer(bp + 24 /* decpt */))))
	*(*uintptr)(unsafe.Pointer(bp + 40 /* strObj */)) = (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, func() uintptr {
		if *(*int32)(unsafe.Pointer(bp + 28)) != 0 {
			return ts + 2368 /* "-" */
		}
		return ts + 2370 /* "+" */
	}(), 1)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, uintptr(0), retval, *(*uintptr)(unsafe.Pointer(bp + 40 /* strObj */)))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, retval)
	return TCL_OK
}

var options = [5]uintptr{
	ts + 2372,
	ts + 2381,
	ts + 2388,
	ts + 2390,
	uintptr(0),
} /* tclTest.c:1625:22 */
var types1 = [4]int32{
	TCL_DD_SHORTEST,
	TCL_DD_STEELE,
	TCL_DD_E_FORMAT,
	TCL_DD_F_FORMAT,
} /* tclTest.c:1632:22 */

//----------------------------------------------------------------------
//
// TestdstringCmd --
//
//	This procedure implements the "testdstring" command.  It is used
//	to test the dynamic string facilities of Tcl.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Creates, deletes, and invokes handlers.
//
//----------------------------------------------------------------------

func TestdstringCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:1708:1: */
	bp := tls.Alloc(68)
	defer tls.Free(68)

	// var count int32 at bp+64, 4

	var s uintptr
	var s1 uintptr

	if !(argc < 2) {
		goto __1
	}
wrongNumArgs:
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+1270 /* "wrong # args" */, uintptr(0))
	return TCL_ERROR
__1:
	;
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+2392) == 0) {
		goto __2
	}
	if !(argc != 4) {
		goto __4
	}
	goto wrongNumArgs
__4:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 3*8)), bp+64) != TCL_OK) {
		goto __5
	}
	return TCL_ERROR
__5:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringAppend})).f(tls, uintptr(unsafe.Pointer(&dstring)), *(*uintptr)(unsafe.Pointer(argv + 2*8)), *(*int32)(unsafe.Pointer(bp + 64 /* count */)))
	goto __3
__2:
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+2399) == 0) {
		goto __6
	}
	if !(argc != 3) {
		goto __8
	}
	goto wrongNumArgs
__8:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringAppendElement})).f(tls, uintptr(unsafe.Pointer(&dstring)), *(*uintptr)(unsafe.Pointer(argv + 2*8)))
	goto __7
__6:
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+2407) == 0) {
		goto __9
	}
	if !(argc != 2) {
		goto __11
	}
	goto wrongNumArgs
__11:
	;
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringEndSublist})).f(tls, uintptr(unsafe.Pointer(&dstring)))
	goto __10
__9:
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+2411) == 0) {
		goto __12
	}
	if !(argc != 2) {
		goto __14
	}
	goto wrongNumArgs
__14:
	;
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringFree})).f(tls, uintptr(unsafe.Pointer(&dstring)))
	goto __13
__12:
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1408) == 0) {
		goto __15
	}
	if !(argc != 2) {
		goto __17
	}
	goto wrongNumArgs
__17:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, (*Tcl_DString)(unsafe.Pointer(uintptr(unsafe.Pointer(&dstring)))).string, uintptr(1))
	goto __16
__15:
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+2416) == 0) {
		goto __18
	}
	if !(argc != 3) {
		goto __20
	}
	goto wrongNumArgs
__20:
	;
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 2*8)), ts+2424) == 0) {
		goto __21
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+2436 /* "short" */, uintptr(0))
	goto __22
__21:
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 2*8)), ts+2442) == 0) {
		goto __23
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+2454 /* "first0 first1 fi..." */, uintptr(0))
	goto __24
__23:
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 2*8)), ts+2411) == 0) {
		goto __25
	}
	s = (*struct {
		f func(*libc.TLS, uint32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(100))
	libc.Xstrcpy(tls, s, ts+2985)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, s, uintptr(3))
	goto __26
__25:
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 2*8)), ts+3012) == 0) {
		goto __27
	}
	s1 = (*struct {
		f func(*libc.TLS, uint32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(100)) + uintptr(16)
	libc.Xstrcpy(tls, s1, ts+3020)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, s1, *(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS, uintptr) }{SpecialFree})))
	goto __28
__27:
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+3057 /* "bad gresult opti..." */, *(*uintptr)(unsafe.Pointer(argv + 2*8)),
		ts+3078,
		uintptr(0)))
	return TCL_ERROR
__28:
	;
__26:
	;
__24:
	;
__22:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringGetResult})).f(tls, interp, uintptr(unsafe.Pointer(&dstring)))
	goto __19
__18:
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+3132) == 0) {
		goto __29
	}

	if !(argc != 2) {
		goto __31
	}
	goto wrongNumArgs
__31:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, (*Tcl_DString)(unsafe.Pointer(uintptr(unsafe.Pointer(&dstring)))).length))
	goto __30
__29:
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+3139) == 0) {
		goto __32
	}
	if !(argc != 2) {
		goto __34
	}
	goto wrongNumArgs
__34:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringResult})).f(tls, interp, uintptr(unsafe.Pointer(&dstring)))
	goto __33
__32:
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+3146) == 0) {
		goto __35
	}
	if !(argc != 3) {
		goto __37
	}
	goto wrongNumArgs
__37:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), bp+64) != TCL_OK) {
		goto __38
	}
	return TCL_ERROR
__38:
	;
	(*struct {
		f func(*libc.TLS, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringSetLength})).f(tls, uintptr(unsafe.Pointer(&dstring)), *(*int32)(unsafe.Pointer(bp + 64 /* count */)))
	goto __36
__35:
	if !(libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+3152) == 0) {
		goto __39
	}
	if !(argc != 2) {
		goto __41
	}
	goto wrongNumArgs
__41:
	;
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringStartSublist})).f(tls, uintptr(unsafe.Pointer(&dstring)))
	goto __40
__39:
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+32, ts+1302 /* "bad option \"" */, *(*uintptr)(unsafe.Pointer(argv + 1*8)),

		ts+3158, uintptr(0)))
	return TCL_ERROR
__40:
	;
__36:
	;
__33:
	;
__30:
	;
__19:
	;
__16:
	;
__13:
	;
__10:
	;
__7:
	;
__3:
	;
	return TCL_OK
}

// The procedure below is used as a special freeProc to test how well
// Tcl_DStringGetResult handles freeProc's other than free.

func SpecialFree(tls *libc.TLS, blockPtr uintptr) { /* tclTest.c:1810:13: */
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, blockPtr-uintptr(16))
}

//----------------------------------------------------------------------
//
// TestencodingCmd --
//
//	This procedure implements the "testencoding" command.  It is used
//	to test the encoding package.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Load encodings.
//
//----------------------------------------------------------------------

func TestencodingObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:1834:1: */
	bp := tls.Alloc(56)
	defer tls.Free(56)

	var encoding Tcl_Encoding
	// var index int32 at bp, 4

	// var length int32 at bp+4, 4

	var string uintptr
	var encodingPtr uintptr

	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), uintptr(unsafe.Pointer(&optionStrings)), int32(unsafe.Sizeof(uintptr(0))), ts+3234, 0, bp) != TCL_OK {
		return TCL_ERROR
	}

	switch uint32(*(*int32)(unsafe.Pointer(bp /* index */))) {
	case uint32(0) /* ENC_CREATE */ :
		{
			// var type1 Tcl_EncodingType at bp+8, 48

			if objc != 5 {
				return TCL_ERROR
			}
			encodingPtr = (*struct {
				f func(*libc.TLS, uint32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(unsafe.Sizeof(TclEncoding{})))
			(*TclEncoding)(unsafe.Pointer(encodingPtr)).interp = interp

			string = (*struct {
				f func(*libc.TLS, uintptr, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 3*8)), bp+4 /* &length */)
			(*TclEncoding)(unsafe.Pointer(encodingPtr)).toUtfCmd = (*struct {
				f func(*libc.TLS, uint32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(*(*int32)(unsafe.Pointer(bp + 4))+1))
			libc.Xmemcpy(tls, (*TclEncoding)(unsafe.Pointer(encodingPtr)).toUtfCmd, string, uint64(*(*int32)(unsafe.Pointer(bp + 4))+1))

			string = (*struct {
				f func(*libc.TLS, uintptr, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 4*8)), bp+4 /* &length */)
			(*TclEncoding)(unsafe.Pointer(encodingPtr)).fromUtfCmd = (*struct {
				f func(*libc.TLS, uint32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(*(*int32)(unsafe.Pointer(bp + 4))+1))
			libc.Xmemcpy(tls, (*TclEncoding)(unsafe.Pointer(encodingPtr)).fromUtfCmd, string, uint64(*(*int32)(unsafe.Pointer(bp + 4))+1))

			string = (*struct {
				f func(*libc.TLS, uintptr, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)), bp+4 /* &length */)

			(*Tcl_EncodingType)(unsafe.Pointer(bp + 8 /* &type1 */)).encodingName = string
			(*Tcl_EncodingType)(unsafe.Pointer(bp + 8 /* &type1 */)).toUtfProc = *(*uintptr)(unsafe.Pointer(&struct {
				f func(*libc.TLS, ClientData, uintptr, int32, int32, uintptr, uintptr, int32, uintptr, uintptr, uintptr) int32
			}{EncodingToUtfProc}))
			(*Tcl_EncodingType)(unsafe.Pointer(bp + 8 /* &type1 */)).fromUtfProc = *(*uintptr)(unsafe.Pointer(&struct {
				f func(*libc.TLS, ClientData, uintptr, int32, int32, uintptr, uintptr, int32, uintptr, uintptr, uintptr) int32
			}{EncodingFromUtfProc}))
			(*Tcl_EncodingType)(unsafe.Pointer(bp + 8 /* &type1 */)).freeProc = *(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS, ClientData) }{EncodingFreeProc}))
			(*Tcl_EncodingType)(unsafe.Pointer(bp + 8 /* &type1 */)).clientData = encodingPtr
			(*Tcl_EncodingType)(unsafe.Pointer(bp + 8 /* &type1 */)).nullSize = 1

			(*struct {
				f func(*libc.TLS, uintptr) Tcl_Encoding
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateEncoding})).f(tls, bp+8 /* &type1 */)
			break

		}
	case uint32(1) /* ENC_DELETE */ :
		if objc != 3 {
			return TCL_ERROR
		}
		encoding = (*struct {
			f func(*libc.TLS, uintptr, uintptr) Tcl_Encoding
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetEncoding})).f(tls, uintptr(0), (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8))))
		(*struct{ f func(*libc.TLS, Tcl_Encoding) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FreeEncoding})).f(tls, encoding)
		(*struct{ f func(*libc.TLS, Tcl_Encoding) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FreeEncoding})).f(tls, encoding)
		break
	}
	return TCL_OK
}

var optionStrings = [3]uintptr{
	ts + 1283, ts + 1290, uintptr(0),
} /* tclTest.c:1844:23 */

func EncodingToUtfProc(tls *libc.TLS, clientData ClientData, src uintptr, srcLen int32, flags int32, statePtr uintptr, dst uintptr, dstLen int32, srcReadPtr uintptr, dstWrotePtr uintptr, dstCharsPtr uintptr) int32 { /* tclTest.c:1899:1: */
	var len int32
	var encodingPtr uintptr

	encodingPtr = clientData
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32, int32) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_EvalEx})).f(tls, (*TclEncoding)(unsafe.Pointer(encodingPtr)).interp, (*TclEncoding)(unsafe.Pointer(encodingPtr)).toUtfCmd, -1, TCL_EVAL_GLOBAL)

	len = int32(libc.Xstrlen(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringResult})).f(tls, (*TclEncoding)(unsafe.Pointer(encodingPtr)).interp)))
	if len > dstLen {
		len = dstLen
	}
	libc.Xmemcpy(tls, dst, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringResult})).f(tls, (*TclEncoding)(unsafe.Pointer(encodingPtr)).interp), uint64(len))
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ResetResult})).f(tls, (*TclEncoding)(unsafe.Pointer(encodingPtr)).interp)

	*(*int32)(unsafe.Pointer(srcReadPtr)) = srcLen
	*(*int32)(unsafe.Pointer(dstWrotePtr)) = len
	*(*int32)(unsafe.Pointer(dstCharsPtr)) = len
	return TCL_OK
}

func EncodingFromUtfProc(tls *libc.TLS, clientData ClientData, src uintptr, srcLen int32, flags int32, statePtr uintptr, dst uintptr, dstLen int32, srcReadPtr uintptr, dstWrotePtr uintptr, dstCharsPtr uintptr) int32 { /* tclTest.c:1931:1: */
	var len int32
	var encodingPtr uintptr

	encodingPtr = clientData
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32, int32) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_EvalEx})).f(tls, (*TclEncoding)(unsafe.Pointer(encodingPtr)).interp, (*TclEncoding)(unsafe.Pointer(encodingPtr)).fromUtfCmd, -1, TCL_EVAL_GLOBAL)

	len = int32(libc.Xstrlen(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringResult})).f(tls, (*TclEncoding)(unsafe.Pointer(encodingPtr)).interp)))
	if len > dstLen {
		len = dstLen
	}
	libc.Xmemcpy(tls, dst, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringResult})).f(tls, (*TclEncoding)(unsafe.Pointer(encodingPtr)).interp), uint64(len))
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ResetResult})).f(tls, (*TclEncoding)(unsafe.Pointer(encodingPtr)).interp)

	*(*int32)(unsafe.Pointer(srcReadPtr)) = srcLen
	*(*int32)(unsafe.Pointer(dstWrotePtr)) = len
	*(*int32)(unsafe.Pointer(dstCharsPtr)) = len
	return TCL_OK
}

func EncodingFreeProc(tls *libc.TLS, clientData ClientData) { /* tclTest.c:1963:1: */
	var encodingPtr uintptr = clientData

	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, (*TclEncoding)(unsafe.Pointer(encodingPtr)).toUtfCmd)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, (*TclEncoding)(unsafe.Pointer(encodingPtr)).fromUtfCmd)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, encodingPtr)
}

//----------------------------------------------------------------------
//
// TestevalexObjCmd --
//
//	This procedure implements the "testevalex" command.  It is
//	used to test Tcl_EvalEx.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestevalexObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:1991:1: */
	bp := tls.Alloc(36)
	defer tls.Free(36)

	// var length int32 at bp+32, 4

	var flags int32
	var script uintptr

	flags = 0
	if objc == 3 {
		var global uintptr = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
		if libc.Xstrcmp(tls, global, ts+3241) != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+3248 /* "bad value \"" */, global,
				ts+3260, uintptr(0)))
			return TCL_ERROR
		}
		flags = TCL_EVAL_GLOBAL
	} else if objc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+3278 /* "script ?global?" */)
		return TCL_ERROR
	}

	script = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp+32 /* &length */)
	return (*struct {
		f func(*libc.TLS, uintptr, uintptr, int32, int32) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_EvalEx})).f(tls, interp, script, *(*int32)(unsafe.Pointer(bp + 32 /* length */)), flags)
}

//----------------------------------------------------------------------
//
// TestevalobjvObjCmd --
//
//	This procedure implements the "testevalobjv" command.  It is
//	used to test Tcl_EvalObjv.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestevalobjvObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:2036:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	// var evalGlobal int32 at bp, 4

	if objc < 3 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+3294 /* "global word ?wor..." */)
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp) != TCL_OK {
		return TCL_ERROR
	}
	return (*struct {
		f func(*libc.TLS, uintptr, int32, uintptr, int32) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_EvalObjv})).f(tls, interp, objc-2, objv+uintptr(2)*8,
		func() int32 {
			if *(*int32)(unsafe.Pointer(bp)) != 0 {
				return TCL_EVAL_GLOBAL
			}
			return 0
		}())
}

//----------------------------------------------------------------------
//
// TesteventObjCmd --
//
//	This procedure implements a 'testevent' command.  The command
//	is used to test event queue management.
//
// The command takes two forms:
//	- testevent queue name position script
//		Queues an event at the given position in the queue, and
//		associates a given name with it (the same name may be
//		associated with multiple events). When the event comes
//		to the head of the queue, executes the given script at
//		global level in the current interp. The position may be
//		one of 'head', 'tail' or 'mark'.
//	- testevent delete name
//		Deletes any events associated with the given name from
//		the queue.
//
// Return value:
//	Returns a standard Tcl result.
//
// Side effects:
//	Manipulates the event queue as directed.
//
//----------------------------------------------------------------------

func TesteventObjCmd(tls *libc.TLS, unused ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:2085:1: */
	bp := tls.Alloc(8)
	defer tls.Free(8)

	// var subCmdIndex int32 at bp, 4

	// var posIndex int32 at bp+4, 4

	var ev uintptr // Event to be queued

	if objc < 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+3317 /* "subcommand ?arg ..." */)
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), uintptr(unsafe.Pointer(&subcommands)), int32(unsafe.Sizeof(uintptr(0))), ts+3338, TCL_EXACT, bp) != TCL_OK {
		return TCL_ERROR
	}
	switch *(*int32)(unsafe.Pointer(bp /* subCmdIndex */)) {
	case 0: // queue
		if objc != 5 {
			(*struct {
				f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 2, objv, ts+3349 /* "name position sc..." */)
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 3*8)), uintptr(unsafe.Pointer(&positions)), int32(unsafe.Sizeof(uintptr(0))), ts+3370, TCL_EXACT, bp+4) != TCL_OK {
			return TCL_ERROR
		}
		ev = (*struct {
			f func(*libc.TLS, uint32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(unsafe.Sizeof(TestEvent{})))
		(*TestEvent)(unsafe.Pointer(ev)).header.proc = *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, uintptr, int32) int32
		}{TesteventProc}))
		(*TestEvent)(unsafe.Pointer(ev)).header.nextPtr = uintptr(0)
		(*TestEvent)(unsafe.Pointer(ev)).interp = interp
		(*TestEvent)(unsafe.Pointer(ev)).command = *(*uintptr)(unsafe.Pointer(objv + 4*8))
		(*Tcl_Obj)(unsafe.Pointer((*TestEvent)(unsafe.Pointer(ev)).command)).refCount++
		(*TestEvent)(unsafe.Pointer(ev)).tag = *(*uintptr)(unsafe.Pointer(objv + 2*8))
		(*Tcl_Obj)(unsafe.Pointer((*TestEvent)(unsafe.Pointer(ev)).tag)).refCount++
		(*struct {
			f func(*libc.TLS, uintptr, Tcl_QueuePosition)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_QueueEvent})).f(tls, ev, posNum[*(*int32)(unsafe.Pointer(bp + 4 /* posIndex */))])
		break

	case 1: // delete
		if objc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 2, objv, ts+1652 /* "name" */)
			return TCL_ERROR
		}
		(*struct {
			f func(*libc.TLS, uintptr, ClientData)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteEvents})).f(tls, *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, uintptr, ClientData) int32
		}{TesteventDeleteProc})), *(*uintptr)(unsafe.Pointer(objv + 2*8)))
		break
	}

	return TCL_OK
}

var subcommands = [3]uintptr{ // Possible subcommands
	ts + 3389, ts + 1290, uintptr(0),
}                           /* tclTest.c:2091:23 */
var positions = [4]uintptr{ // Possible queue positions
	ts + 3395, ts + 3400, ts + 1297, uintptr(0),
} /* tclTest.c:2095:23 */
var posNum = [3]Tcl_QueuePosition{
	// Interpretation of the chosen position
	TCL_QUEUE_HEAD,
	TCL_QUEUE_TAIL,
	TCL_QUEUE_MARK,
} /* tclTest.c:2099:36 */

//----------------------------------------------------------------------
//
// TesteventProc --
//
//	Delivers a test event to the Tcl interpreter as part of event
//	queue testing.
//
// Results:
//	Returns 1 if the event has been serviced, 0 otherwise.
//
// Side effects:
//	Evaluates the event's callback script, so has whatever side effects
//	the callback has.  The return value of the callback script becomes the
//	return value of this function.  If the callback script reports an
//	error, it is reported as a background error.
//
//----------------------------------------------------------------------

func TesteventProc(tls *libc.TLS, event uintptr, flags int32) int32 { /* tclTest.c:2169:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	var ev uintptr = event
	var interp uintptr = (*TestEvent)(unsafe.Pointer(ev)).interp
	var command uintptr = (*TestEvent)(unsafe.Pointer(ev)).command
	var result int32 = (*struct {
		f func(*libc.TLS, uintptr, uintptr, int32) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_EvalObjEx})).f(tls, interp, command,
		TCL_EVAL_GLOBAL|TCL_EVAL_DIRECT)
	// var retval int32 at bp, 4

	if result != TCL_OK {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AddErrorInfo})).f(tls, interp,
			ts+3405)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_BackgroundError})).f(tls, interp)
		return 1 // Avoid looping on errors
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBooleanFromObj})).f(tls, interp, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp),
		bp) != TCL_OK {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AddErrorInfo})).f(tls, interp,
			ts+3449)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_BackgroundError})).f(tls, interp)
		return 1
	}
	if *(*int32)(unsafe.Pointer(bp)) != 0 {
		for ok := true; ok; ok = 0 != 0 {
			var _objPtr uintptr = (*TestEvent)(unsafe.Pointer(ev)).tag
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
		for ok1 := true; ok1; ok1 = 0 != 0 {
			var _objPtr uintptr = (*TestEvent)(unsafe.Pointer(ev)).command
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
	}

	return *(*int32)(unsafe.Pointer(bp /* retval */))
}

//----------------------------------------------------------------------
//
// TesteventDeleteProc --
//
//	Removes some set of events from the queue.
//
// This procedure is used as part of testing event queue management.
//
// Results:
//	Returns 1 if a given event should be deleted, 0 otherwise.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TesteventDeleteProc(tls *libc.TLS, event uintptr, clientData ClientData) int32 { /* tclTest.c:2220:1: */
	var ev uintptr // Event to examine
	var evNameStr uintptr
	var targetName uintptr // Name of the event(s) to delete
	var targetNameStr uintptr

	if (*Tcl_Event)(unsafe.Pointer(event)).proc != *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, uintptr, int32) int32
	}{TesteventProc})) {
		return 0
	}
	targetName = clientData
	targetNameStr = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, targetName)
	ev = event
	evNameStr = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, (*TestEvent)(unsafe.Pointer(ev)).tag)
	if libc.Xstrcmp(tls, evNameStr, targetNameStr) == 0 {
		for ok := true; ok; ok = 0 != 0 {
			var _objPtr uintptr = (*TestEvent)(unsafe.Pointer(ev)).tag
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
		for ok1 := true; ok1; ok1 = 0 != 0 {
			var _objPtr uintptr = (*TestEvent)(unsafe.Pointer(ev)).command
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
		return 1
	} else {
		return 0
	}
	return int32(0)
}

//----------------------------------------------------------------------
//
// TestexithandlerCmd --
//
//	This procedure implements the "testexithandler" command. It is
//	used to test Tcl_CreateExitHandler and Tcl_DeleteExitHandler.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestexithandlerCmd(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:2264:1: */
	bp := tls.Alloc(68)
	defer tls.Free(68)

	// var value int32 at bp+64, 4

	if argc != 3 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+2242 /* "wrong # argument..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+3494, uintptr(0)))
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), bp+64) != TCL_OK {
		return TCL_ERROR
	}
	if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1283) == 0 {
		(*struct {
			f func(*libc.TLS, uintptr, ClientData)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateExitHandler})).f(tls, func() uintptr {
			if *(*int32)(unsafe.Pointer(bp + 64))&1 != 0 {
				return *(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS, ClientData) }{ExitProcOdd}))
			}
			return *(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS, ClientData) }{ExitProcEven}))
		}(),
			uintptr(intptr_t(*(*int32)(unsafe.Pointer(bp + 64)))))
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1290) == 0 {
		(*struct {
			f func(*libc.TLS, uintptr, ClientData)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteExitHandler})).f(tls, func() uintptr {
			if *(*int32)(unsafe.Pointer(bp + 64))&1 != 0 {
				return *(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS, ClientData) }{ExitProcOdd}))
			}
			return *(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS, ClientData) }{ExitProcEven}))
		}(),
			uintptr(intptr_t(*(*int32)(unsafe.Pointer(bp + 64)))))
	} else {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+32, ts+1302 /* "bad option \"" */, *(*uintptr)(unsafe.Pointer(argv + 1*8)),
			ts+3516, uintptr(0)))
		return TCL_ERROR
	}
	return TCL_OK
}

func ExitProcOdd(tls *libc.TLS, clientData ClientData) { /* tclTest.c:2295:1: */
	bp := tls.Alloc(48)
	defer tls.Free(48)

	// var buf [40]int8 at bp+8, 40

	var len int32

	libc.Xsprintf(tls, bp+8, ts+3544, libc.VaList(bp, int32(clientData)))
	len = int32(libc.Xstrlen(tls, bp+8))
	if len != libc.Xwrite(tls, 1, bp+8, uint32(len)) {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Panic})).f(tls, ts+3552 /* "ExitProcOdd: una..." */, 0)
	}
}

func ExitProcEven(tls *libc.TLS, clientData ClientData) { /* tclTest.c:2309:1: */
	bp := tls.Alloc(48)
	defer tls.Free(48)

	// var buf [40]int8 at bp+8, 40

	var len int32

	libc.Xsprintf(tls, bp+8, ts+3591, libc.VaList(bp, int32(clientData)))
	len = int32(libc.Xstrlen(tls, bp+8))
	if len != libc.Xwrite(tls, 1, bp+8, uint32(len)) {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Panic})).f(tls, ts+3600 /* "ExitProcEven: un..." */, 0)
	}
}

//----------------------------------------------------------------------
//
// TestexprlongCmd --
//
//	This procedure verifies that Tcl_ExprLong does not modify the
//	interpreter result if there is no error.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestexprlongCmd(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:2340:1: */
	bp := tls.Alloc(88)
	defer tls.Free(88)

	// var exprResult int32 at bp+56, 4

	// var buf [28]int8 at bp+60, 28

	var result int32

	if argc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+2242 /* "wrong # argument..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+3640, uintptr(0)))
		return TCL_ERROR
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+3653 /* "This is a result" */, uintptr(0))
	result = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ExprLong})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)), bp+56 /* &exprResult */)
	if result != TCL_OK {
		return result
	}
	libc.Xsprintf(tls, bp+60, ts+3670, libc.VaList(bp+32, *(*int32)(unsafe.Pointer(bp + 56 /* exprResult */))))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+40, bp+60 /* &buf[0] */, uintptr(0)))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestexprlongobjCmd --
//
//	This procedure verifies that Tcl_ExprLongObj does not modify the
//	interpreter result if there is no error.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestexprlongobjCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:2383:1: */
	bp := tls.Alloc(56)
	defer tls.Free(56)

	// var exprResult int32 at bp+24, 4

	// var buf [28]int8 at bp+28, 28

	var result int32

	if objc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+3676 /* "expression" */)
		return TCL_ERROR
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+3653 /* "This is a result" */, uintptr(0))
	result = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ExprLongObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp+24 /* &exprResult */)
	if result != TCL_OK {
		return result
	}
	libc.Xsprintf(tls, bp+28, ts+3670, libc.VaList(bp, *(*int32)(unsafe.Pointer(bp + 24 /* exprResult */))))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+8, bp+28 /* &buf[0] */, uintptr(0)))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestexprdoubleCmd --
//
//	This procedure verifies that Tcl_ExprDouble does not modify the
//	interpreter result if there is no error.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestexprdoubleCmd(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:2425:1: */
	bp := tls.Alloc(87)
	defer tls.Free(87)

	// var exprResult float64 at bp+48, 8

	// var buf [31]int8 at bp+56, 31

	var result int32

	if argc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+2242 /* "wrong # argument..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+3640, uintptr(0)))
		return TCL_ERROR
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+3653 /* "This is a result" */, uintptr(0))
	result = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ExprDouble})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)), bp+48 /* &exprResult */)
	if result != TCL_OK {
		return result
	}
	libc.Xstrcpy(tls, bp+56, ts+3687)
	(*struct {
		f func(*libc.TLS, uintptr, float64, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_PrintDouble})).f(tls, interp, *(*float64)(unsafe.Pointer(bp + 48 /* exprResult */)), bp+56 /* &buf[0] */ +uintptr(2))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+32, bp+56 /* &buf[0] */, uintptr(0)))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestexprdoubleobjCmd --
//
//	This procedure verifies that Tcl_ExprLongObj does not modify the
//	interpreter result if there is no error.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestexprdoubleobjCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:2469:1: */
	bp := tls.Alloc(55)
	defer tls.Free(55)

	// var exprResult float64 at bp+16, 8

	// var buf [31]int8 at bp+24, 31

	var result int32

	if objc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+3676 /* "expression" */)
		return TCL_ERROR
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+3653 /* "This is a result" */, uintptr(0))
	result = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ExprDoubleObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp+16 /* &exprResult */)
	if result != TCL_OK {
		return result
	}
	libc.Xstrcpy(tls, bp+24, ts+3687)
	(*struct {
		f func(*libc.TLS, uintptr, float64, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_PrintDouble})).f(tls, interp, *(*float64)(unsafe.Pointer(bp + 16 /* exprResult */)), bp+24 /* &buf[0] */ +uintptr(2))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, bp+24 /* &buf[0] */, uintptr(0)))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestexprstringCmd --
//
//	This procedure tests the basic operation of Tcl_ExprString.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestexprstringCmd(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:2511:1: */
	bp := tls.Alloc(32)
	defer tls.Free(32)

	if argc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+2242 /* "wrong # argument..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+3640, uintptr(0)))
		return TCL_ERROR
	}
	return (*struct {
		f func(*libc.TLS, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ExprString})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)))
}

//----------------------------------------------------------------------
//
// TestfilelinkCmd --
//
//	This procedure implements the "testfilelink" command.  It is used to
//	test the effects of creating and manipulating filesystem links in Tcl.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	May create a link on disk.
//
//----------------------------------------------------------------------

func TestfilelinkCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:2543:1: */
	bp := tls.Alloc(96)
	defer tls.Free(96)

	var contents uintptr

	if objc < 2 || objc > 3 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+3690 /* "source ?target?" */)
		return TCL_ERROR
	}

	if (*struct {
		f func(*libc.TLS, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSConvertToPathType})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8))) != TCL_OK {
		return TCL_ERROR
	}

	if objc == 3 {
		// Create link from source to target
		contents = (*struct {
			f func(*libc.TLS, uintptr, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSLink})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)), *(*uintptr)(unsafe.Pointer(objv + 2*8)),
			TCL_CREATE_SYMBOLIC_LINK|TCL_CREATE_HARD_LINK)
		if contents == uintptr(0) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+3706, /* "could not create..." */
				(*struct {
					f func(*libc.TLS, uintptr) uintptr
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8))), ts+3735, /* "\" to \"" */
				(*struct {
					f func(*libc.TLS, uintptr) uintptr
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8))), ts+3742, /* "\": " */
				(*struct {
					f func(*libc.TLS, uintptr) uintptr
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_PosixError})).f(tls, interp), uintptr(0)))
			return TCL_ERROR
		}
	} else {
		// Read link
		contents = (*struct {
			f func(*libc.TLS, uintptr, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSLink})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)), uintptr(0), 0)
		if contents == uintptr(0) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+56, ts+3746, /* "could not read l..." */
				(*struct {
					f func(*libc.TLS, uintptr) uintptr
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8))), ts+3742, /* "\": " */
				(*struct {
					f func(*libc.TLS, uintptr) uintptr
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_PosixError})).f(tls, interp), uintptr(0)))
			return TCL_ERROR
		}
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, contents)
	if objc == 2 {
		// If we are creating a link, this will actually just
		// be objv[3], and we don't own it
		for ok := true; ok; ok = 0 != 0 {
			var _objPtr uintptr = contents
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
	}
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestgetassocdataCmd --
//
//	This procedure implements the "testgetassocdata" command. It is
//	used to test Tcl_GetAssocData.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestgetassocdataCmd(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:2610:1: */
	bp := tls.Alloc(48)
	defer tls.Free(48)

	var res uintptr

	if argc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+2242 /* "wrong # argument..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+2273, uintptr(0)))
		return TCL_ERROR
	}
	res = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) ClientData
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetAssocData})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)), uintptr(0))
	if res != uintptr(0) {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+32, res, uintptr(0)))
	}
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestgetplatformCmd --
//
//	This procedure implements the "testgetplatform" command. It is
//	used to retrievel the value of the tclPlatform global variable.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestgetplatformCmd(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:2648:1: */
	bp := tls.Alloc(40)
	defer tls.Free(40)

	var platform uintptr

	platform = (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclGetPlatform})).f(tls)

	if argc != 1 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+2242 /* "wrong # argument..." */, *(*uintptr)(unsafe.Pointer(argv)),
			uintptr(0)))
		return TCL_ERROR
	}

	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+24, platformStrings[*(*TclPlatformType)(unsafe.Pointer(platform))], uintptr(0)))
	return TCL_OK
}

var platformStrings = [3]uintptr{ts + 3768, ts + 3773, ts + 3777} /* tclTest.c:2654:23 */

//----------------------------------------------------------------------
//
// TestinterpdeleteCmd --
//
//	This procedure tests the code in tclInterp.c that deals with
//	interpreter deletion. It deletes a user-specified interpreter
//	from the hierarchy, and subsequent code checks integrity.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Deletes one or more interpreters.
//
//----------------------------------------------------------------------

func TestinterpdeleteCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:2688:1: */
	bp := tls.Alloc(32)
	defer tls.Free(32)

	var childToDelete uintptr

	if argc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+3785, uintptr(0)))
		return TCL_ERROR
	}
	childToDelete = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetSlave})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)))
	if childToDelete == uintptr(0) {
		return TCL_ERROR
	}
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteInterp})).f(tls, childToDelete)
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestlinkCmd --
//
//	This procedure implements the "testlink" command.  It is used
//	to test Tcl_LinkVar and related library procedures.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Creates and deletes various variable links, plus returns
//	values of the linked variables.
//
//----------------------------------------------------------------------

func TestlinkCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:2728:1: */
	bp := tls.Alloc(312)
	defer tls.Free(312)

	// var buffer [54]int8 at bp+212, 54

	// var writable int32 at bp+208, 4

	var flag int32
	var tmp uintptr

	if argc < 2 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),

			ts+3792, uintptr(0)))
		return TCL_ERROR
	}
	if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1283) == 0 {
		if argc != 16 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+32, ts+1356, /* "wrong # args: sh..." */
				*(*uintptr)(unsafe.Pointer(argv)), ts+1424, *(*uintptr)(unsafe.Pointer(argv + 1*8)),

				ts+3859, uintptr(0)))
			return TCL_ERROR
		}
		if created != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+3967 /* "int" */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+3971 /* "real" */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+3976 /* "bool" */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+3981 /* "string" */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+3988 /* "wide" */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+3993 /* "char" */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+3998 /* "uchar" */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+2436 /* "short" */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+4004 /* "ushort" */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+4011 /* "uint" */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+4016 /* "long" */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+4021 /* "ulong" */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+4027 /* "float" */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+4033 /* "uwide" */)
		}
		created = 1
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBoolean})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), bp+208) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 208)) != 0 {
			flag = 0
		} else {
			flag = TCL_LINK_READ_ONLY
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_LinkVar})).f(tls, interp, ts+3967, uintptr(unsafe.Pointer(&intVar)),
			TCL_LINK_INT|flag) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBoolean})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 3*8)), bp+208) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 208)) != 0 {
			flag = 0
		} else {
			flag = TCL_LINK_READ_ONLY
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_LinkVar})).f(tls, interp, ts+3971, uintptr(unsafe.Pointer(&realVar)),
			TCL_LINK_DOUBLE|flag) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBoolean})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 4*8)), bp+208) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 208)) != 0 {
			flag = 0
		} else {
			flag = TCL_LINK_READ_ONLY
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_LinkVar})).f(tls, interp, ts+3976, uintptr(unsafe.Pointer(&boolVar)),
			TCL_LINK_BOOLEAN|flag) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBoolean})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 5*8)), bp+208) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 208)) != 0 {
			flag = 0
		} else {
			flag = TCL_LINK_READ_ONLY
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_LinkVar})).f(tls, interp, ts+3981, uintptr(unsafe.Pointer(&stringVar)),
			TCL_LINK_STRING|flag) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBoolean})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 6*8)), bp+208) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 208)) != 0 {
			flag = 0
		} else {
			flag = TCL_LINK_READ_ONLY
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_LinkVar})).f(tls, interp, ts+3988, uintptr(unsafe.Pointer(&wideVar)),
			TCL_LINK_WIDE_INT|flag) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBoolean})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 7*8)), bp+208) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 208)) != 0 {
			flag = 0
		} else {
			flag = TCL_LINK_READ_ONLY
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_LinkVar})).f(tls, interp, ts+3993, uintptr(unsafe.Pointer(&charVar)),
			TCL_LINK_CHAR|flag) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBoolean})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 8*8)), bp+208) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 208)) != 0 {
			flag = 0
		} else {
			flag = TCL_LINK_READ_ONLY
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_LinkVar})).f(tls, interp, ts+3998, uintptr(unsafe.Pointer(&ucharVar)),
			TCL_LINK_UCHAR|flag) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBoolean})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 9*8)), bp+208) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 208)) != 0 {
			flag = 0
		} else {
			flag = TCL_LINK_READ_ONLY
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_LinkVar})).f(tls, interp, ts+2436, uintptr(unsafe.Pointer(&shortVar)),
			TCL_LINK_SHORT|flag) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBoolean})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 10*8)), bp+208) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 208)) != 0 {
			flag = 0
		} else {
			flag = TCL_LINK_READ_ONLY
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_LinkVar})).f(tls, interp, ts+4004, uintptr(unsafe.Pointer(&ushortVar)),
			TCL_LINK_USHORT|flag) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBoolean})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 11*8)), bp+208) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 208)) != 0 {
			flag = 0
		} else {
			flag = TCL_LINK_READ_ONLY
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_LinkVar})).f(tls, interp, ts+4011, uintptr(unsafe.Pointer(&uintVar)),
			TCL_LINK_UINT|flag) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBoolean})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 12*8)), bp+208) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 208)) != 0 {
			flag = 0
		} else {
			flag = TCL_LINK_READ_ONLY
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_LinkVar})).f(tls, interp, ts+4016, uintptr(unsafe.Pointer(&longVar)),
			TCL_LINK_LONG|flag) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBoolean})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 13*8)), bp+208) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 208)) != 0 {
			flag = 0
		} else {
			flag = TCL_LINK_READ_ONLY
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_LinkVar})).f(tls, interp, ts+4021, uintptr(unsafe.Pointer(&ulongVar)),
			TCL_LINK_ULONG|flag) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBoolean})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 14*8)), bp+208) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 208)) != 0 {
			flag = 0
		} else {
			flag = TCL_LINK_READ_ONLY
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_LinkVar})).f(tls, interp, ts+4027, uintptr(unsafe.Pointer(&floatVar)),
			TCL_LINK_FLOAT|flag) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBoolean})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 15*8)), bp+208) != TCL_OK {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 208)) != 0 {
			flag = 0
		} else {
			flag = TCL_LINK_READ_ONLY
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_LinkVar})).f(tls, interp, ts+4033, uintptr(unsafe.Pointer(&uwideVar)),
			TCL_LINK_WIDE_UINT|flag) != TCL_OK {
			return TCL_ERROR
		}

	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1290) == 0 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+3967 /* "int" */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+3971 /* "real" */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+3976 /* "bool" */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+3981 /* "string" */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+3988 /* "wide" */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+3993 /* "char" */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+3998 /* "uchar" */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+2436 /* "short" */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+4004 /* "ushort" */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+4011 /* "uint" */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+4016 /* "long" */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+4021 /* "ulong" */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+4027 /* "float" */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnlinkVar})).f(tls, interp, ts+4033 /* "uwide" */)
		created = 0
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1408) == 0 {
		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+212 /* &buffer[0] */, int32(intVar))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, bp+212 /* &buffer[0] */)
		(*struct {
			f func(*libc.TLS, uintptr, float64, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_PrintDouble})).f(tls, uintptr(0), realVar, bp+212 /* &buffer[0] */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, bp+212 /* &buffer[0] */)
		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+212 /* &buffer[0] */, int32(boolVar))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, bp+212 /* &buffer[0] */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, func() uintptr {
			if stringVar == uintptr(0) {
				return ts + 2368 /* "-" */
			}
			return stringVar
		}())
		// Wide ints only have an object-based interface.
		tmp = (*struct {
			f func(*libc.TLS, Tcl_WideInt) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewWideIntObj})).f(tls, wideVar)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, tmp))
		for ok := true; ok; ok = 0 != 0 {
			var _objPtr uintptr = tmp
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+212 /* &buffer[0] */, int32(int32(charVar)))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, bp+212 /* &buffer[0] */)
		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+212 /* &buffer[0] */, int32(int32(ucharVar)))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, bp+212 /* &buffer[0] */)
		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+212 /* &buffer[0] */, int32(int32(shortVar)))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, bp+212 /* &buffer[0] */)
		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+212 /* &buffer[0] */, int32(int32(ushortVar)))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, bp+212 /* &buffer[0] */)
		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+212 /* &buffer[0] */, int32(int32(uintVar)))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, bp+212 /* &buffer[0] */)
		tmp = (*struct {
			f func(*libc.TLS, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewLongObj})).f(tls, longVar)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, tmp))
		for ok1 := true; ok1; ok1 = 0 != 0 {
			var _objPtr uintptr = tmp
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
		tmp = (*struct {
			f func(*libc.TLS, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewLongObj})).f(tls, int32(ulongVar))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, tmp))
		for ok2 := true; ok2; ok2 = 0 != 0 {
			var _objPtr uintptr = tmp
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
		(*struct {
			f func(*libc.TLS, uintptr, float64, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_PrintDouble})).f(tls, uintptr(0), float64(floatVar), bp+212 /* &buffer[0] */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, bp+212 /* &buffer[0] */)
		tmp = (*struct {
			f func(*libc.TLS, Tcl_WideInt) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewWideIntObj})).f(tls, Tcl_WideInt(uwideVar))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, tmp))
		for ok3 := true; ok3; ok3 = 0 != 0 {
			var _objPtr uintptr = tmp
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+4039) == 0 {
		// var v int32 at bp+268, 4

		if argc != 16 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+80, ts+1356, /* "wrong # args: sh..." */
				*(*uintptr)(unsafe.Pointer(argv)), ts+1424, *(*uintptr)(unsafe.Pointer(argv + 1*8)),

				ts+4043, uintptr(0)))
			return TCL_ERROR
		}
		if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 2*8))))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), uintptr(unsafe.Pointer(&intVar))) != TCL_OK {
				return TCL_ERROR
			}
		}
		if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 3*8))))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetDouble})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 3*8)), uintptr(unsafe.Pointer(&realVar))) != TCL_OK {
				return TCL_ERROR
			}
		}
		if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 4*8))))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 4*8)), uintptr(unsafe.Pointer(&boolVar))) != TCL_OK {
				return TCL_ERROR
			}
		}
		if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 5*8))))) != 0 {
			if stringVar != uintptr(0) {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, stringVar)
			}
			if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 5*8)), ts+2368) == 0 {
				stringVar = uintptr(0)
			} else {
				stringVar = (*struct {
					f func(*libc.TLS, uint32) uintptr
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(libc.Xstrlen(tls, *(*uintptr)(unsafe.Pointer(argv + 5*8)))+uint64(1)))
				libc.Xstrcpy(tls, stringVar, *(*uintptr)(unsafe.Pointer(argv + 5*8)))
			}
		}
		if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 6*8))))) != 0 {
			tmp = (*struct {
				f func(*libc.TLS, uintptr, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, *(*uintptr)(unsafe.Pointer(argv + 6*8)), -1)
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetWideIntFromObj})).f(tls, interp, tmp, uintptr(unsafe.Pointer(&wideVar))) != TCL_OK {
				for ok4 := true; ok4; ok4 = 0 != 0 {
					var _objPtr uintptr = tmp
					if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
						(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
					}
				}
				return TCL_ERROR
			}
			for ok5 := true; ok5; ok5 = 0 != 0 {
				var _objPtr uintptr = tmp
				if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
				}
			}
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 7*8)))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 7*8)), bp+268) != TCL_OK {
				return TCL_ERROR
			}
			charVar = int8(*(*int32)(unsafe.Pointer(bp + 268 /* v */)))
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 8*8)))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 8*8)), bp+268) != TCL_OK {
				return TCL_ERROR
			}
			ucharVar = uint8(*(*int32)(unsafe.Pointer(bp + 268 /* v */)))
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 9*8)))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 9*8)), bp+268) != TCL_OK {
				return TCL_ERROR
			}
			shortVar = int16(*(*int32)(unsafe.Pointer(bp + 268 /* v */)))
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 10*8)))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 10*8)), bp+268) != TCL_OK {
				return TCL_ERROR
			}
			ushortVar = uint16(*(*int32)(unsafe.Pointer(bp + 268 /* v */)))
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 11*8)))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 11*8)), bp+268) != TCL_OK {
				return TCL_ERROR
			}
			uintVar = uint32(*(*int32)(unsafe.Pointer(bp + 268 /* v */)))
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 12*8)))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 12*8)), bp+268) != TCL_OK {
				return TCL_ERROR
			}
			longVar = int32(*(*int32)(unsafe.Pointer(bp + 268 /* v */)))
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 13*8)))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 13*8)), bp+268) != TCL_OK {
				return TCL_ERROR
			}
			ulongVar = uint32(*(*int32)(unsafe.Pointer(bp + 268 /* v */)))
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 14*8)))) != 0 {
			// var d float64 at bp+272, 8

			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetDouble})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 14*8)), bp+272) != TCL_OK {
				return TCL_ERROR
			}
			floatVar = float32(*(*float64)(unsafe.Pointer(bp + 272 /* d */)))
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 15*8)))) != 0 {
			// var w Tcl_WideInt at bp+280, 8

			tmp = (*struct {
				f func(*libc.TLS, uintptr, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, *(*uintptr)(unsafe.Pointer(argv + 15*8)), -1)
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetWideIntFromObj})).f(tls, interp, tmp, bp+280) != TCL_OK {
				for ok6 := true; ok6; ok6 = 0 != 0 {
					var _objPtr uintptr = tmp
					if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
						(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
					}
				}
				return TCL_ERROR
			}
			for ok7 := true; ok7; ok7 = 0 != 0 {
				var _objPtr uintptr = tmp
				if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
				}
			}
			uwideVar = Tcl_WideUInt(*(*Tcl_WideInt)(unsafe.Pointer(bp + 280 /* w */)))
		}
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+4193) == 0 {
		// var v int32 at bp+288, 4

		if argc != 16 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+128, ts+1356, /* "wrong # args: sh..." */
				*(*uintptr)(unsafe.Pointer(argv)), ts+1424, *(*uintptr)(unsafe.Pointer(argv + 1*8)),

				ts+4043, uintptr(0)))
			return TCL_ERROR
		}
		if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 2*8))))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), uintptr(unsafe.Pointer(&intVar))) != TCL_OK {
				return TCL_ERROR
			}
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpdateLinkedVar})).f(tls, interp, ts+3967 /* "int" */)
		}
		if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 3*8))))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetDouble})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 3*8)), uintptr(unsafe.Pointer(&realVar))) != TCL_OK {
				return TCL_ERROR
			}
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpdateLinkedVar})).f(tls, interp, ts+3971 /* "real" */)
		}
		if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 4*8))))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 4*8)), uintptr(unsafe.Pointer(&boolVar))) != TCL_OK {
				return TCL_ERROR
			}
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpdateLinkedVar})).f(tls, interp, ts+3976 /* "bool" */)
		}
		if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 5*8))))) != 0 {
			if stringVar != uintptr(0) {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, stringVar)
			}
			if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 5*8)), ts+2368) == 0 {
				stringVar = uintptr(0)
			} else {
				stringVar = (*struct {
					f func(*libc.TLS, uint32) uintptr
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(libc.Xstrlen(tls, *(*uintptr)(unsafe.Pointer(argv + 5*8)))+uint64(1)))
				libc.Xstrcpy(tls, stringVar, *(*uintptr)(unsafe.Pointer(argv + 5*8)))
			}
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpdateLinkedVar})).f(tls, interp, ts+3981 /* "string" */)
		}
		if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 6*8))))) != 0 {
			tmp = (*struct {
				f func(*libc.TLS, uintptr, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, *(*uintptr)(unsafe.Pointer(argv + 6*8)), -1)
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetWideIntFromObj})).f(tls, interp, tmp, uintptr(unsafe.Pointer(&wideVar))) != TCL_OK {
				for ok8 := true; ok8; ok8 = 0 != 0 {
					var _objPtr uintptr = tmp
					if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
						(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
					}
				}
				return TCL_ERROR
			}
			for ok9 := true; ok9; ok9 = 0 != 0 {
				var _objPtr uintptr = tmp
				if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
				}
			}
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpdateLinkedVar})).f(tls, interp, ts+3988 /* "wide" */)
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 7*8)))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 7*8)), bp+288) != TCL_OK {
				return TCL_ERROR
			}
			charVar = int8(*(*int32)(unsafe.Pointer(bp + 288 /* v */)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpdateLinkedVar})).f(tls, interp, ts+3993 /* "char" */)
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 8*8)))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 8*8)), bp+288) != TCL_OK {
				return TCL_ERROR
			}
			ucharVar = uint8(*(*int32)(unsafe.Pointer(bp + 288 /* v */)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpdateLinkedVar})).f(tls, interp, ts+3998 /* "uchar" */)
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 9*8)))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 9*8)), bp+288) != TCL_OK {
				return TCL_ERROR
			}
			shortVar = int16(*(*int32)(unsafe.Pointer(bp + 288 /* v */)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpdateLinkedVar})).f(tls, interp, ts+2436 /* "short" */)
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 10*8)))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 10*8)), bp+288) != TCL_OK {
				return TCL_ERROR
			}
			ushortVar = uint16(*(*int32)(unsafe.Pointer(bp + 288 /* v */)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpdateLinkedVar})).f(tls, interp, ts+4004 /* "ushort" */)
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 11*8)))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 11*8)), bp+288) != TCL_OK {
				return TCL_ERROR
			}
			uintVar = uint32(*(*int32)(unsafe.Pointer(bp + 288 /* v */)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpdateLinkedVar})).f(tls, interp, ts+4011 /* "uint" */)
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 12*8)))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 12*8)), bp+288) != TCL_OK {
				return TCL_ERROR
			}
			longVar = int32(*(*int32)(unsafe.Pointer(bp + 288 /* v */)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpdateLinkedVar})).f(tls, interp, ts+4016 /* "long" */)
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 13*8)))) != 0 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 13*8)), bp+288) != TCL_OK {
				return TCL_ERROR
			}
			ulongVar = uint32(*(*int32)(unsafe.Pointer(bp + 288 /* v */)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpdateLinkedVar})).f(tls, interp, ts+4021 /* "ulong" */)
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 14*8)))) != 0 {
			// var d float64 at bp+296, 8

			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetDouble})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 14*8)), bp+296) != TCL_OK {
				return TCL_ERROR
			}
			floatVar = float32(*(*float64)(unsafe.Pointer(bp + 296 /* d */)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpdateLinkedVar})).f(tls, interp, ts+4027 /* "float" */)
		}
		if *(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 15*8)))) != 0 {
			// var w Tcl_WideInt at bp+304, 8

			tmp = (*struct {
				f func(*libc.TLS, uintptr, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, *(*uintptr)(unsafe.Pointer(argv + 15*8)), -1)
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetWideIntFromObj})).f(tls, interp, tmp, bp+304) != TCL_OK {
				for ok10 := true; ok10; ok10 = 0 != 0 {
					var _objPtr uintptr = tmp
					if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
						(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
					}
				}
				return TCL_ERROR
			}
			for ok11 := true; ok11; ok11 = 0 != 0 {
				var _objPtr uintptr = tmp
				if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
				}
			}
			uwideVar = Tcl_WideUInt(*(*Tcl_WideInt)(unsafe.Pointer(bp + 304 /* w */)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpdateLinkedVar})).f(tls, interp, ts+4033 /* "uwide" */)
		}
	} else {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+176, ts+1302 /* "bad option \"" */, *(*uintptr)(unsafe.Pointer(argv + 1*8)),
			ts+4200, uintptr(0)))
		return TCL_ERROR
	}
	return TCL_OK
}

var intVar int32 = 43                                      /* tclTest.c:2734:16 */
var boolVar int32 = 4                                      /* tclTest.c:2735:16 */
var realVar float64 = 1.23                                 /* tclTest.c:2736:19 */
var wideVar Tcl_WideInt = Tcl_WideInt(79)                  /* tclTest.c:2737:24 */
var stringVar uintptr = uintptr(0)                         /* tclTest.c:2738:17 */
var charVar int8 = int8('@')                               /* tclTest.c:2739:17 */
var ucharVar uint8 = uint8(130)                            /* tclTest.c:2740:26 */
var shortVar int16 = int16(3000)                           /* tclTest.c:2741:18 */
var ushortVar uint16 = uint16(60000)                       /* tclTest.c:2742:27 */
var uintVar uint32 = 0xBEEFFEED                            /* tclTest.c:2743:25 */
var longVar int32 = 123456789                              /* tclTest.c:2744:17 */
var ulongVar uint32 = 3456789012                           /* tclTest.c:2745:26 */
var floatVar float32 = 4.5                                 /* tclTest.c:2746:18 */
var uwideVar Tcl_WideUInt = Tcl_WideUInt(Tcl_WideInt(123)) /* tclTest.c:2747:25 */
var created int32 = 0                                      /* tclTest.c:2748:16 */

//----------------------------------------------------------------------
//
// TestlocaleCmd --
//
//	This procedure implements the "testlocale" command.  It is used
//	to test the effects of setting different locales in Tcl.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Modifies the current C locale.
//
//----------------------------------------------------------------------

func TestlocaleCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:3196:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	// var index int32 at bp, 4

	var locale uintptr

	// LC_CTYPE, etc. correspond to the indices for the strings.

	if objc < 2 || objc > 3 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+4249 /* "category ?locale..." */)
		return TCL_ERROR
	}

	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), uintptr(unsafe.Pointer(&optionStrings1)), int32(unsafe.Sizeof(uintptr(0))), ts+3234, 0, bp) != TCL_OK {
		return TCL_ERROR
	}

	if objc == 3 {
		locale = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	} else {
		locale = uintptr(0)
	}
	locale = libc.Xsetlocale(tls, lcTypes[*(*int32)(unsafe.Pointer(bp /* index */))], locale)
	if locale != 0 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, int32)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetStringObj})).f(tls, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), locale, -1)
	}
	return TCL_OK
}

var optionStrings1 = [7]uintptr{
	ts + 4267, ts + 4273, ts + 4281, ts + 4286, ts + 4294,
	ts + 4303, uintptr(0),
} /* tclTest.c:3205:23 */
var lcTypes = [6]int32{
	LC_CTYPE, LC_NUMERIC, LC_TIME, LC_COLLATE, LC_MONETARY,
	LC_ALL,
} /* tclTest.c:3209:22 */

//----------------------------------------------------------------------
//
// TestMathFunc --
//
//	This is a user-defined math procedure to test out math procedures
//	with no arguments.
//
// Results:
//	A normal Tcl completion code.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestMathFunc(tls *libc.TLS, clientData ClientData, interp uintptr, args uintptr, resultPtr uintptr) int32 { /* tclTest.c:3258:1: */
	(*Tcl_Value)(unsafe.Pointer(resultPtr)).__type = TCL_INT
	(*Tcl_Value)(unsafe.Pointer(resultPtr)).intValue = int32(int32(clientData))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestMathFunc2 --
//
//	This is a user-defined math procedure to test out math procedures
//	that do have arguments, in this case 2.
//
// Results:
//	A normal Tcl completion code.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestMathFunc2(tls *libc.TLS, clientData ClientData, interp uintptr, args uintptr, resultPtr uintptr) int32 { /* tclTest.c:3287:1: */
	var result int32 = TCL_OK

	// Return the maximum of the two arguments with the correct type.

	if (*Tcl_Value)(unsafe.Pointer(args)).__type == TCL_INT {
		var i0 int32 = int32((*Tcl_Value)(unsafe.Pointer(args)).intValue)

		if (*Tcl_Value)(unsafe.Pointer(args+1*24)).__type == TCL_INT {
			var i1 int32 = int32((*Tcl_Value)(unsafe.Pointer(args + 1*24)).intValue)

			(*Tcl_Value)(unsafe.Pointer(resultPtr)).__type = TCL_INT
			(*Tcl_Value)(unsafe.Pointer(resultPtr)).intValue = func() int32 {
				if i0 > i1 {
					return int32(i0)
				}
				return int32(i1)
			}()
		} else if (*Tcl_Value)(unsafe.Pointer(args+1*24)).__type == TCL_DOUBLE {
			var d0 float64 = float64(i0)
			var d1 float64 = (*Tcl_Value)(unsafe.Pointer(args + 1*24)).doubleValue

			(*Tcl_Value)(unsafe.Pointer(resultPtr)).__type = TCL_DOUBLE
			(*Tcl_Value)(unsafe.Pointer(resultPtr)).doubleValue = func() float64 {
				if d0 > d1 {
					return d0
				}
				return d1
			}()
		} else if (*Tcl_Value)(unsafe.Pointer(args+1*24)).__type == TCL_WIDE_INT {
			var w0 Tcl_WideInt = Tcl_WideInt(int32(i0))
			var w1 Tcl_WideInt = (*Tcl_Value)(unsafe.Pointer(args + 1*24)).wideValue

			(*Tcl_Value)(unsafe.Pointer(resultPtr)).__type = TCL_WIDE_INT
			(*Tcl_Value)(unsafe.Pointer(resultPtr)).wideValue = func() int64 {
				if w0 > w1 {
					return w0
				}
				return w1
			}()
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+4307 /* "T3: wrong type f..." */, uintptr(0))
			result = TCL_ERROR
		}
	} else if (*Tcl_Value)(unsafe.Pointer(args)).__type == TCL_DOUBLE {
		var d0 float64 = (*Tcl_Value)(unsafe.Pointer(args)).doubleValue

		if (*Tcl_Value)(unsafe.Pointer(args+1*24)).__type == TCL_INT {
			var d1 float64 = float64((*Tcl_Value)(unsafe.Pointer(args + 1*24)).intValue)

			(*Tcl_Value)(unsafe.Pointer(resultPtr)).__type = TCL_DOUBLE
			(*Tcl_Value)(unsafe.Pointer(resultPtr)).doubleValue = func() float64 {
				if d0 > d1 {
					return d0
				}
				return d1
			}()
		} else if (*Tcl_Value)(unsafe.Pointer(args+1*24)).__type == TCL_DOUBLE {
			var d1 float64 = (*Tcl_Value)(unsafe.Pointer(args + 1*24)).doubleValue

			(*Tcl_Value)(unsafe.Pointer(resultPtr)).__type = TCL_DOUBLE
			(*Tcl_Value)(unsafe.Pointer(resultPtr)).doubleValue = func() float64 {
				if d0 > d1 {
					return d0
				}
				return d1
			}()
		} else if (*Tcl_Value)(unsafe.Pointer(args+1*24)).__type == TCL_WIDE_INT {
			var d1 float64 = float64((*Tcl_Value)(unsafe.Pointer(args + 1*24)).wideValue)

			(*Tcl_Value)(unsafe.Pointer(resultPtr)).__type = TCL_DOUBLE
			(*Tcl_Value)(unsafe.Pointer(resultPtr)).doubleValue = func() float64 {
				if d0 > d1 {
					return d0
				}
				return d1
			}()
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+4307 /* "T3: wrong type f..." */, uintptr(0))
			result = TCL_ERROR
		}
	} else if (*Tcl_Value)(unsafe.Pointer(args)).__type == TCL_WIDE_INT {
		var w0 Tcl_WideInt = (*Tcl_Value)(unsafe.Pointer(args)).wideValue

		if (*Tcl_Value)(unsafe.Pointer(args+1*24)).__type == TCL_INT {
			var w1 Tcl_WideInt = Tcl_WideInt((*Tcl_Value)(unsafe.Pointer(args + 1*24)).intValue)

			(*Tcl_Value)(unsafe.Pointer(resultPtr)).__type = TCL_WIDE_INT
			(*Tcl_Value)(unsafe.Pointer(resultPtr)).wideValue = func() int64 {
				if w0 > w1 {
					return w0
				}
				return w1
			}()
		} else if (*Tcl_Value)(unsafe.Pointer(args+1*24)).__type == TCL_DOUBLE {
			var d0 float64 = float64(w0)
			var d1 float64 = (*Tcl_Value)(unsafe.Pointer(args + 1*24)).doubleValue

			(*Tcl_Value)(unsafe.Pointer(resultPtr)).__type = TCL_DOUBLE
			(*Tcl_Value)(unsafe.Pointer(resultPtr)).doubleValue = func() float64 {
				if d0 > d1 {
					return d0
				}
				return d1
			}()
		} else if (*Tcl_Value)(unsafe.Pointer(args+1*24)).__type == TCL_WIDE_INT {
			var w1 Tcl_WideInt = (*Tcl_Value)(unsafe.Pointer(args + 1*24)).wideValue

			(*Tcl_Value)(unsafe.Pointer(resultPtr)).__type = TCL_WIDE_INT
			(*Tcl_Value)(unsafe.Pointer(resultPtr)).wideValue = func() int64 {
				if w0 > w1 {
					return w0
				}
				return w1
			}()
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+4307 /* "T3: wrong type f..." */, uintptr(0))
			result = TCL_ERROR
		}
	} else {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+4332 /* "T3: wrong type f..." */, uintptr(0))
		result = TCL_ERROR
	}
	return result
}

//----------------------------------------------------------------------
//
// CleanupTestSetassocdataTests --
//
//	This function is called when an interpreter is deleted to clean
//	up any data left over from running the testsetassocdata command.
//
// Results:
//	None.
//
// Side effects:
//	Releases storage.
//
//----------------------------------------------------------------------
func CleanupTestSetassocdataTests(tls *libc.TLS, clientData ClientData, interp uintptr) { /* tclTest.c:3393:1: */
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, clientData)
}

//----------------------------------------------------------------------
//
// TestparserObjCmd --
//
//	This procedure implements the "testparser" command.  It is
//	used for testing the new Tcl script parser in Tcl 8.1.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestparserObjCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:3418:1: */
	bp := tls.Alloc(584)
	defer tls.Free(584)

	var script uintptr
	// var length int32 at bp+4, 4

	// var dummy int32 at bp, 4

	// var parse Tcl_Parse at bp+8, 576

	if objc != 3 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+4357 /* "script length" */)
		return TCL_ERROR
	}
	script = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp /* &dummy */)
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 2*8)), bp+4) != 0 {
		return TCL_ERROR
	}
	if *(*int32)(unsafe.Pointer(bp + 4)) == 0 {
		*(*int32)(unsafe.Pointer(bp + 4 /* length */)) = *(*int32)(unsafe.Pointer(bp /* dummy */))
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, int32, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ParseCommand})).f(tls, interp, script, *(*int32)(unsafe.Pointer(bp + 4)), 0, bp+8) != TCL_OK {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AddErrorInfo})).f(tls, interp, ts+4371 /* "\n    (remainder ..." */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AddErrorInfo})).f(tls, interp, (*Tcl_Parse)(unsafe.Pointer(bp+8 /* &parse */)).term)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AddErrorInfo})).f(tls, interp, ts+4400 /* "\")" */)
		return TCL_ERROR
	}

	// The parse completed successfully.  Just print out the contents
	// of the parse structure into the interpreter's result.

	PrintParse(tls, interp, bp+8)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FreeParse})).f(tls, bp+8 /* &parse */)
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestexprparserObjCmd --
//
//	This procedure implements the "testexprparser" command.  It is
//	used for testing the new Tcl expression parser in Tcl 8.1.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestexprparserObjCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:3474:1: */
	bp := tls.Alloc(584)
	defer tls.Free(584)

	var script uintptr
	// var length int32 at bp+4, 4

	// var dummy int32 at bp, 4

	// var parse Tcl_Parse at bp+8, 576

	if objc != 3 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+4403 /* "expr length" */)
		return TCL_ERROR
	}
	script = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp /* &dummy */)
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 2*8)), bp+4) != 0 {
		return TCL_ERROR
	}
	if *(*int32)(unsafe.Pointer(bp + 4)) == 0 {
		*(*int32)(unsafe.Pointer(bp + 4 /* length */)) = *(*int32)(unsafe.Pointer(bp /* dummy */))
	}
	(*Tcl_Parse)(unsafe.Pointer(bp + 8 /* &parse */)).commentStart = uintptr(0)
	(*Tcl_Parse)(unsafe.Pointer(bp + 8 /* &parse */)).commentSize = 0
	(*Tcl_Parse)(unsafe.Pointer(bp + 8 /* &parse */)).commandStart = uintptr(0)
	(*Tcl_Parse)(unsafe.Pointer(bp + 8 /* &parse */)).commandSize = 0
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ParseExpr})).f(tls, interp, script, *(*int32)(unsafe.Pointer(bp + 4)), bp+8) != TCL_OK {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AddErrorInfo})).f(tls, interp, ts+4415 /* "\n    (remainder ..." */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AddErrorInfo})).f(tls, interp, (*Tcl_Parse)(unsafe.Pointer(bp+8 /* &parse */)).term)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AddErrorInfo})).f(tls, interp, ts+4400 /* "\")" */)
		return TCL_ERROR
	}

	// The parse completed successfully.  Just print out the contents
	// of the parse structure into the interpreter's result.

	PrintParse(tls, interp, bp+8)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FreeParse})).f(tls, bp+8 /* &parse */)
	return TCL_OK
}

//----------------------------------------------------------------------
//
// PrintParse --
//
//	This procedure prints out the contents of a Tcl_Parse structure
//	in the result of an interpreter.
//
// Results:
//	Interp's result is set to a prettily formatted version of the
//	contents of parsePtr.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func PrintParse(tls *libc.TLS, interp uintptr, parsePtr uintptr) { /* tclTest.c:3535:1: */
	var objPtr uintptr
	var typeString uintptr
	var tokenPtr uintptr
	var i int32

	objPtr = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp)
	if (*Tcl_Parse)(unsafe.Pointer(parsePtr)).commentSize > 0 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, uintptr(0), objPtr,
			(*struct {
				f func(*libc.TLS, uintptr, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, (*Tcl_Parse)(unsafe.Pointer(parsePtr)).commentStart,
				(*Tcl_Parse)(unsafe.Pointer(parsePtr)).commentSize))
	} else {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, uintptr(0), objPtr, (*struct {
			f func(*libc.TLS, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+2368 /* "-" */, 1))
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, uintptr(0), objPtr,
		(*struct {
			f func(*libc.TLS, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, (*Tcl_Parse)(unsafe.Pointer(parsePtr)).commandStart, (*Tcl_Parse)(unsafe.Pointer(parsePtr)).commandSize))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, uintptr(0), objPtr,
		(*struct {
			f func(*libc.TLS, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, (*Tcl_Parse)(unsafe.Pointer(parsePtr)).numWords))
	for i = 0; i < (*Tcl_Parse)(unsafe.Pointer(parsePtr)).numTokens; i++ {
		tokenPtr = (*Tcl_Parse)(unsafe.Pointer(parsePtr)).tokenPtr + uintptr(i)*24
		switch (*Tcl_Token)(unsafe.Pointer(tokenPtr)).__type {
		case TCL_TOKEN_EXPAND_WORD:
			typeString = ts + 4442 /* "expand" */
			break
		case TCL_TOKEN_WORD:
			typeString = ts + 4449 /* "word" */
			break
		case TCL_TOKEN_SIMPLE_WORD:
			typeString = ts + 10 /* "simple" */
			break
		case TCL_TOKEN_TEXT:
			typeString = ts + 4454 /* "text" */
			break
		case TCL_TOKEN_BS:
			typeString = ts + 4459 /* "backslash" */
			break
		case TCL_TOKEN_COMMAND:
			typeString = ts + 4469 /* "command" */
			break
		case TCL_TOKEN_VARIABLE:
			typeString = ts + 4477 /* "variable" */
			break
		case TCL_TOKEN_SUB_EXPR:
			typeString = ts + 4486 /* "subexpr" */
			break
		case TCL_TOKEN_OPERATOR:
			typeString = ts + 4494 /* "operator" */
			break
		default:
			typeString = ts + 1412 /* "??" */
			break
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, uintptr(0), objPtr,
			(*struct {
				f func(*libc.TLS, uintptr, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, typeString, -1))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, uintptr(0), objPtr,
			(*struct {
				f func(*libc.TLS, uintptr, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, (*Tcl_Token)(unsafe.Pointer(tokenPtr)).start, (*Tcl_Token)(unsafe.Pointer(tokenPtr)).size))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, uintptr(0), objPtr,
			(*struct {
				f func(*libc.TLS, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, (*Tcl_Token)(unsafe.Pointer(tokenPtr)).numComponents))
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, uintptr(0), objPtr,
		(*struct {
			f func(*libc.TLS, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, (*Tcl_Parse)(unsafe.Pointer(parsePtr)).commandStart+uintptr((*Tcl_Parse)(unsafe.Pointer(parsePtr)).commandSize),
			-1))
}

//----------------------------------------------------------------------
//
// TestparsevarObjCmd --
//
//	This procedure implements the "testparsevar" command.  It is
//	used for testing Tcl_ParseVar.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestparsevarObjCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:3621:1: */
	bp := tls.Alloc(8)
	defer tls.Free(8)

	var value uintptr
	var name uintptr
	// var termPtr uintptr at bp, 8

	if objc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+4503 /* "varName" */)
		return TCL_ERROR
	}
	name = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)))
	value = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ParseVar})).f(tls, interp, name, bp /* &termPtr */)
	if value == uintptr(0) {
		return TCL_ERROR
	}

	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, value)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, *(*uintptr)(unsafe.Pointer(bp /* termPtr */)))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestparsevarnameObjCmd --
//
//	This procedure implements the "testparsevarname" command.  It is
//	used for testing the new Tcl script parser in Tcl 8.1.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestparsevarnameObjCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:3662:1: */
	bp := tls.Alloc(592)
	defer tls.Free(592)

	var script uintptr
	// var append int32 at bp+8, 4

	// var length int32 at bp+4, 4

	// var dummy int32 at bp, 4

	// var parse Tcl_Parse at bp+16, 576

	if objc != 4 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+4511 /* "script length ap..." */)
		return TCL_ERROR
	}
	script = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp /* &dummy */)
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 2*8)), bp+4) != 0 {
		return TCL_ERROR
	}
	if *(*int32)(unsafe.Pointer(bp + 4)) == 0 {
		*(*int32)(unsafe.Pointer(bp + 4 /* length */)) = *(*int32)(unsafe.Pointer(bp /* dummy */))
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 3*8)), bp+8) != 0 {
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, int32, uintptr, int32) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ParseVarName})).f(tls, interp, script, *(*int32)(unsafe.Pointer(bp + 4)), bp+16, *(*int32)(unsafe.Pointer(bp + 8))) != TCL_OK {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AddErrorInfo})).f(tls, interp, ts+4371 /* "\n    (remainder ..." */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AddErrorInfo})).f(tls, interp, (*Tcl_Parse)(unsafe.Pointer(bp+16 /* &parse */)).term)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AddErrorInfo})).f(tls, interp, ts+4400 /* "\")" */)
		return TCL_ERROR
	}

	// The parse completed successfully.  Just print out the contents
	// of the parse structure into the interpreter's result.

	(*Tcl_Parse)(unsafe.Pointer(bp + 16 /* &parse */)).commentSize = 0
	(*Tcl_Parse)(unsafe.Pointer(bp + 16 /* &parse */)).commandStart = script + uintptr((*Tcl_Token)(unsafe.Pointer((*Tcl_Parse)(unsafe.Pointer(bp+16)).tokenPtr)).size)
	(*Tcl_Parse)(unsafe.Pointer(bp + 16 /* &parse */)).commandSize = 0
	PrintParse(tls, interp, bp+16)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FreeParse})).f(tls, bp+16 /* &parse */)
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestregexpObjCmd --
//
//	This procedure implements the "testregexp" command. It is used to give
//	a direct interface for regexp flags. It's identical to
//	Tcl_RegexpObjCmd except for the -xflags option, and the consequences
//	thereof (including the REG_EXPECT kludge).
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	See the user documentation.
//
//----------------------------------------------------------------------

func TestregexpObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:3726:1: */
	bp := tls.Alloc(256)
	defer tls.Free(256)

	var i int32
	var ii int32
	var indices int32
	// var stringLength int32 at bp+92, 4

	var match int32
	var about int32
	var hasxflags int32
	// var cflags int32 at bp+96, 4

	// var eflags int32 at bp+100, 4

	var regExpr Tcl_RegExp
	var string uintptr
	var objPtr uintptr
	// var info Tcl_RegExpInfo at bp+160, 24

	var name uintptr
	// var index int32 at bp+88, 4

	var varName uintptr
	var value uintptr
	// var start int32 at bp+104, 4

	// var end int32 at bp+108, 4

	// var resinfo [48]int8 at bp+112, 48

	var varName1 uintptr
	var value1 uintptr
	// var resinfo1 [48]int8 at bp+184, 48

	// var objs [2]uintptr at bp+240, 16

	// var start1 int32 at bp+232, 4

	// var end1 int32 at bp+236, 4

	var newPtr uintptr
	var varPtr uintptr
	var valuePtr uintptr

	indices = 0
	about = 0
	*(*int32)(unsafe.Pointer(bp + 96 /* cflags */)) = REG_ADVANCED
	*(*int32)(unsafe.Pointer(bp + 100 /* eflags */)) = 0
	hasxflags = 0

	i = 1
__1:
	if !(i < objc) {
		goto __3
	}

	name = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + uintptr(i)*8)))
	if !(int32(*(*int8)(unsafe.Pointer(name))) != '-') {
		goto __4
	}
	goto __3
__4:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + uintptr(i)*8)), uintptr(unsafe.Pointer(&options1)), int32(unsafe.Sizeof(uintptr(0))), ts+4532, TCL_EXACT, bp+88) != TCL_OK) {
		goto __5
	}
	return TCL_ERROR
__5:
	;
	switch uint32(*(*int32)(unsafe.Pointer(bp + 88 /* index */))) {
	case uint32(0) /* REGEXP_INDICES */ :
		goto __7
	case uint32(1) /* REGEXP_NOCASE */ :
		goto __8
	case uint32(2) /* REGEXP_ABOUT */ :
		goto __9
	case uint32(3) /* REGEXP_EXPANDED */ :
		goto __10
	case uint32(4) /* REGEXP_MULTI */ :
		goto __11
	case uint32(5) /* REGEXP_NOCROSS */ :
		goto __12
	case uint32(6) /* REGEXP_NEWL */ :
		goto __13
	case uint32(7) /* REGEXP_XFLAGS */ :
		goto __14
	case uint32(8) /* REGEXP_LAST */ :
		goto __15
	}
	goto __6
__7:
	indices = 1
	goto __6
__8:
	*(*int32)(unsafe.Pointer(bp + 96 /* cflags */)) |= REG_ICASE
	goto __6
__9:
	about = 1
	goto __6
__10:
	*(*int32)(unsafe.Pointer(bp + 96 /* cflags */)) |= REG_EXPANDED
	goto __6
__11:
	*(*int32)(unsafe.Pointer(bp + 96 /* cflags */)) |= REG_NEWLINE
	goto __6
__12:
	*(*int32)(unsafe.Pointer(bp + 96 /* cflags */)) |= REG_NLSTOP
	goto __6
__13:
	*(*int32)(unsafe.Pointer(bp + 96 /* cflags */)) |= REG_NLANCH
	goto __6
__14:
	hasxflags = 1
	goto __6
__15:
	i++
	goto endOfForLoop
__6:
	;
	goto __2
__2:
	i++
	goto __1
	goto __3
__3:
	;

endOfForLoop:
	if !(objc-i < hasxflags+2-about) {
		goto __16
	}
	(*struct {
		f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv,
		ts+4539)
	return TCL_ERROR
__16:
	;
	objc = objc - i
	objv += 8 * uintptr(i)

	if !(hasxflags != 0) {
		goto __17
	}
	string = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv)), bp+92 /* &stringLength */)
	TestregexpXflags(tls, string, *(*int32)(unsafe.Pointer(bp + 92 /* stringLength */)), bp+96, bp+100)
	objc--
	objv += 8
__17:
	;

	regExpr = (*struct {
		f func(*libc.TLS, uintptr, uintptr, int32) Tcl_RegExp
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetRegExpFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv)), *(*int32)(unsafe.Pointer(bp + 96 /* cflags */)))
	if !(regExpr == uintptr(0)) {
		goto __18
	}
	return TCL_ERROR
__18:
	;

	if !(about != 0) {
		goto __19
	}
	if !((*struct {
		f func(*libc.TLS, uintptr, Tcl_RegExp) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclRegAbout})).f(tls, interp, regExpr) < 0) {
		goto __20
	}
	return TCL_ERROR
__20:
	;
	return TCL_OK
__19:
	;

	objPtr = *(*uintptr)(unsafe.Pointer(objv + 1*8))
	match = (*struct {
		f func(*libc.TLS, uintptr, Tcl_RegExp, uintptr, int32, int32, int32) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_RegExpExecObj})).f(tls, interp, regExpr, objPtr, 0,
		objc-2, *(*int32)(unsafe.Pointer(bp + 100 /* eflags */)))

	if !(match < 0) {
		goto __21
	}
	return TCL_ERROR
__21:
	;
	if !(match == 0) {
		goto __22
	}
	// Set the interpreter's object result to an integer object w/
	// value 0.

	(*struct {
		f func(*libc.TLS, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetIntObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), 0)
	if !(objc > 2 && *(*int32)(unsafe.Pointer(bp + 96))&REG_EXPECT != 0 && indices != 0) {
		goto __23
	}

	varName = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	(*struct {
		f func(*libc.TLS, Tcl_RegExp, int32, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclRegExpRangeUniChar})).f(tls, regExpr, -1, bp+104 /* &start */, bp+108 /* &end */)
	libc.Xsprintf(tls, bp+112, ts+4593, libc.VaList(bp, *(*int32)(unsafe.Pointer(bp + 104 /* start */)), *(*int32)(unsafe.Pointer(bp + 108))-1))
	value = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetVar2})).f(tls, interp, varName, uintptr(0), bp+112 /* &resinfo[0] */, 0)
	if !(value == uintptr(0)) {
		goto __25
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+16, ts+4599, /* "couldn't set var..." */
		varName, ts+1677, uintptr(0)))
	return TCL_ERROR
__25:
	;
	goto __24
__23:
	if !(*(*int32)(unsafe.Pointer(bp + 96))&TCL_REG_CANMATCH != 0) {
		goto __26
	}

	(*struct {
		f func(*libc.TLS, Tcl_RegExp, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_RegExpGetInfo})).f(tls, regExpr, bp+160 /* &info */)
	varName1 = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	libc.Xsprintf(tls, bp+184, ts+4623, libc.VaList(bp+48, (*Tcl_RegExpInfo)(unsafe.Pointer(bp+160 /* &info */)).extendStart))
	value1 = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetVar2})).f(tls, interp, varName1, uintptr(0), bp+184 /* &resinfo1[0] */, 0)
	if !(value1 == uintptr(0)) {
		goto __27
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+56, ts+4599, /* "couldn't set var..." */
		varName1, ts+1677, uintptr(0)))
	return TCL_ERROR
__27:
	;
__26:
	;
__24:
	;
	return TCL_OK
__22:
	;

	// If additional variable names have been specified, return
	// index information in those variables.

	objc = objc - 2
	objv += 8 * uintptr(2)

	(*struct {
		f func(*libc.TLS, Tcl_RegExp, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_RegExpGetInfo})).f(tls, regExpr, bp+160 /* &info */)
	i = 0
__28:
	if !(i < objc) {
		goto __30
	}

	varPtr = *(*uintptr)(unsafe.Pointer(objv + uintptr(i)*8))
	if *(*int32)(unsafe.Pointer(bp + 96))&REG_EXPECT != 0 && i == objc-1 {
		ii = -1
	} else {
		ii = i
	}
	if !(indices != 0) {
		goto __31
	}

	if !(ii == -1) {
		goto __33
	}
	(*struct {
		f func(*libc.TLS, Tcl_RegExp, int32, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclRegExpRangeUniChar})).f(tls, regExpr, ii, bp+232 /* &start1 */, bp+236 /* &end1 */)
	goto __34
__33:
	if !(ii > (*Tcl_RegExpInfo)(unsafe.Pointer(bp+160)).nsubs) {
		goto __35
	}
	*(*int32)(unsafe.Pointer(bp + 232 /* start1 */)) = -1
	*(*int32)(unsafe.Pointer(bp + 236 /* end1 */)) = -1
	goto __36
__35:
	*(*int32)(unsafe.Pointer(bp + 232 /* start1 */)) = int32((*Tcl_RegExpIndices)(unsafe.Pointer((*Tcl_RegExpInfo)(unsafe.Pointer(bp+160 /* &info */)).matches + uintptr(ii)*8)).start)
	*(*int32)(unsafe.Pointer(bp + 236 /* end1 */)) = int32((*Tcl_RegExpIndices)(unsafe.Pointer((*Tcl_RegExpInfo)(unsafe.Pointer(bp+160 /* &info */)).matches + uintptr(ii)*8)).end)
__36:
	;
__34:
	;

	// Adjust index so it refers to the last character in the match
	// instead of the first character after the match.

	if !(*(*int32)(unsafe.Pointer(bp + 236)) >= 0) {
		goto __37
	}
	*(*int32)(unsafe.Pointer(bp + 236 /* end1 */))--
__37:
	;

	*(*uintptr)(unsafe.Pointer(bp + 240)) = (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewLongObj})).f(tls, int32(*(*int32)(unsafe.Pointer(bp + 232 /* start1 */))))
	*(*uintptr)(unsafe.Pointer(bp + 240 + 1*8)) = (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewLongObj})).f(tls, int32(*(*int32)(unsafe.Pointer(bp + 236 /* end1 */))))

	newPtr = (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewListObj})).f(tls, 2, bp+240 /* &objs[0] */)
	goto __32
__31:
	if !(ii == -1) {
		goto __38
	}
	(*struct {
		f func(*libc.TLS, Tcl_RegExp, int32, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclRegExpRangeUniChar})).f(tls, regExpr, ii, bp+232 /* &start1 */, bp+236 /* &end1 */)
	newPtr = (*struct {
		f func(*libc.TLS, uintptr, int32, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetRange})).f(tls, objPtr, *(*int32)(unsafe.Pointer(bp + 232 /* start1 */)), *(*int32)(unsafe.Pointer(bp + 236 /* end1 */)))
	goto __39
__38:
	if !(ii > (*Tcl_RegExpInfo)(unsafe.Pointer(bp+160)).nsubs) {
		goto __40
	}
	newPtr = (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewObj})).f(tls)
	goto __41
__40:
	newPtr = (*struct {
		f func(*libc.TLS, uintptr, int32, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetRange})).f(tls, objPtr, int32((*Tcl_RegExpIndices)(unsafe.Pointer((*Tcl_RegExpInfo)(unsafe.Pointer(bp+160 /* &info */)).matches+uintptr(ii)*8)).start),
		int32((*Tcl_RegExpIndices)(unsafe.Pointer((*Tcl_RegExpInfo)(unsafe.Pointer(bp+160)).matches+uintptr(ii)*8)).end-1))
__41:
	;
__39:
	;
__32:
	;
	valuePtr = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ObjSetVar2})).f(tls, interp, varPtr, uintptr(0), newPtr, TCL_LEAVE_ERR_MSG)
	if !(valuePtr == uintptr(0)) {
		goto __42
	}
	return TCL_ERROR
__42:
	;
	goto __29
__29:
	i++
	goto __28
	goto __30
__30:
	;

	// Set the interpreter's object result to an integer object w/ value 1.

	(*struct {
		f func(*libc.TLS, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetIntObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), 1)
	return TCL_OK
}

var options1 = [10]uintptr{
	ts + 4627, ts + 4636, ts + 4644, ts + 4651,
	ts + 4661, ts + 4667, ts + 4677,
	ts + 4689,
	ts + 4697, uintptr(0),
} /* tclTest.c:3738:23 */

//---------------------------------------------------------------------------
//
// TestregexpXflags --
//
//	Parse a string of extended regexp flag letters, for testing.
//
// Results:
//	No return value (you're on your own for errors here).
//
// Side effects:
//	Modifies *cflagsPtr, a regcomp flags word, and *eflagsPtr, a
//	regexec flags word, as appropriate.
//
//----------------------------------------------------------------------

func TestregexpXflags(tls *libc.TLS, string uintptr, length int32, cflagsPtr uintptr, eflagsPtr uintptr) { /* tclTest.c:3959:1: */
	var i int32
	var cflags int32
	var eflags int32

	cflags = *(*int32)(unsafe.Pointer(cflagsPtr))
	eflags = *(*int32)(unsafe.Pointer(eflagsPtr))
	for i = 0; i < length; i++ {
		switch int32(*(*int8)(unsafe.Pointer(string + uintptr(i)))) {
		case 'a':
			cflags = cflags | REG_ADVF
			break
		case 'b':
			cflags = cflags & libc.CplInt32(REG_ADVANCED)
			break
		case 'c':
			cflags = cflags | TCL_REG_CANMATCH
			break
		case 'e':
			cflags = cflags & libc.CplInt32(REG_ADVANCED)
			cflags = cflags | REG_EXTENDED
			break
		case 'q':
			cflags = cflags & libc.CplInt32(REG_ADVANCED)
			cflags = cflags | REG_QUOTE
			break
		case 'o': // o for opaque
			cflags = cflags | REG_NOSUB
			break
		case 's': // s for start
			cflags = cflags | REG_BOSONLY
			break
		case '+':
			cflags = cflags | REG_FAKE
			break
		case ',':
			cflags = cflags | REG_PROGRESS
			break
		case '.':
			cflags = cflags | REG_DUMP
			break
		case ':':
			eflags = eflags | REG_MTRACE
			break
		case ';':
			eflags = eflags | REG_FTRACE
			break
		case '^':
			eflags = eflags | REG_NOTBOL
			break
		case '$':
			eflags = eflags | REG_NOTEOL
			break
		case 't':
			cflags = cflags | REG_EXPECT
			break
		case '%':
			eflags = eflags | REG_SMALL
			break
		}
	}

	*(*int32)(unsafe.Pointer(cflagsPtr)) = cflags
	*(*int32)(unsafe.Pointer(eflagsPtr)) = eflags
}

//----------------------------------------------------------------------
//
// TestreturnObjCmd --
//
//	This procedure implements the "testreturn" command. It is
//	used to verify that a
//		return TCL_RETURN;
//	has same behavior as
//		return Tcl_SetReturnOptions(interp, Tcl_NewObj());
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	See the user documentation.
//
//----------------------------------------------------------------------

func TestreturnObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:4049:1: */
	return TCL_RETURN
}

//----------------------------------------------------------------------
//
// TestsetassocdataCmd --
//
//	This procedure implements the "testsetassocdata" command. It is used
//	to test Tcl_SetAssocData.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Modifies or creates an association between a key and associated
//	data for this interpreter.
//
//----------------------------------------------------------------------

func TestsetassocdataCmd(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:4077:1: */
	bp := tls.Alloc(40)
	defer tls.Free(40)

	var buf uintptr
	var oldData uintptr
	// var procPtr uintptr at bp+32, 8

	if argc != 3 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+2242 /* "wrong # argument..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+4700, uintptr(0)))
		return TCL_ERROR
	}

	buf = (*struct {
		f func(*libc.TLS, uint32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(libc.Xstrlen(tls, *(*uintptr)(unsafe.Pointer(argv + 2*8)))+uint64(1)))
	libc.Xstrcpy(tls, buf, *(*uintptr)(unsafe.Pointer(argv + 2*8)))

	// If we previously associated a malloced value with the variable,
	// free it before associating a new value.

	oldData = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) ClientData
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetAssocData})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)), bp+32 /* &procPtr */)
	if oldData != uintptr(0) && *(*uintptr)(unsafe.Pointer(bp + 32)) == *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr)
	}{CleanupTestSetassocdataTests})) {
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, oldData)
	}

	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetAssocData})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)), *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr)
	}{CleanupTestSetassocdataTests})),
		buf)
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestsetplatformCmd --
//
//	This procedure implements the "testsetplatform" command. It is
//	used to change the tclPlatform global variable so all file
//	name conversions can be tested on a single platform.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Sets the tclPlatform global variable.
//
//----------------------------------------------------------------------

func TestsetplatformCmd(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:4129:1: */
	bp := tls.Alloc(48)
	defer tls.Free(48)

	var length size_t
	var platform uintptr

	platform = (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclGetPlatform})).f(tls)

	if argc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+2242 /* "wrong # argument..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+4721, uintptr(0)))
		return TCL_ERROR
	}

	length = libc.Xstrlen(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)))
	if libc.Xstrncmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+3768, length) == 0 {
		*(*TclPlatformType)(unsafe.Pointer(platform)) = TCL_PLATFORM_UNIX
	} else if libc.Xstrncmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+3777, length) == 0 {
		*(*TclPlatformType)(unsafe.Pointer(platform)) = TCL_PLATFORM_WINDOWS
	} else {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp,
			libc.VaList(bp+32, ts+4732, uintptr(0)))
		return TCL_ERROR
	}
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TeststaticpkgCmd --
//
//	This procedure implements the "teststaticpkg" command.
//	It is used to test the procedure Tcl_StaticPackage.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	When the packge given by argv[1] is loaded into an interpeter,
//	variable "x" in that interpreter is set to "loaded".
//
//----------------------------------------------------------------------

func TeststaticpkgCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:4178:1: */
	bp := tls.Alloc(40)
	defer tls.Free(40)

	// var safe int32 at bp+32, 4

	// var loaded int32 at bp+36, 4

	if argc != 4 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+2242, /* "wrong # argument..." */
			*(*uintptr)(unsafe.Pointer(argv)), ts+4788, uintptr(0)))
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), bp+32) != TCL_OK {
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 3*8)), bp+36) != TCL_OK {
		return TCL_ERROR
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_StaticPackage})).f(tls, func() uintptr {
		if *(*int32)(unsafe.Pointer(bp + 36)) != 0 {
			return interp
		}
		return uintptr(0)
	}(), *(*uintptr)(unsafe.Pointer(argv + 1*8)),
		*(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, uintptr) int32
		}{StaticInitProc})), func() uintptr {
			if *(*int32)(unsafe.Pointer(bp + 32)) != 0 {
				return *(*uintptr)(unsafe.Pointer(&struct {
					f func(*libc.TLS, uintptr) int32
				}{StaticInitProc}))
			}
			return uintptr(0)
		}())
	return TCL_OK
}

func StaticInitProc(tls *libc.TLS, interp uintptr) int32 { /* tclTest.c:4203:1: */
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetVar2})).f(tls, interp, ts+4809 /* "x" */, uintptr(0), ts+4811 /* "loaded" */, TCL_GLOBAL_ONLY)
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TesttranslatefilenameCmd --
//
//	This procedure implements the "testtranslatefilename" command.
//	It is used to test the Tcl_TranslateFileName command.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TesttranslatefilenameCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:4229:1: */
	bp := tls.Alloc(264)
	defer tls.Free(264)

	// var buffer Tcl_DString at bp+48, 216

	var result uintptr

	if argc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+2242, /* "wrong # argument..." */
			*(*uintptr)(unsafe.Pointer(argv)), ts+3785, uintptr(0)))
		return TCL_ERROR
	}
	result = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_TranslateFileName})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)), bp+48 /* &buffer */)
	if result == uintptr(0) {
		return TCL_ERROR
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+32, result, uintptr(0)))
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringFree})).f(tls, bp+48 /* &buffer */)
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestupvarCmd --
//
//	This procedure implements the "testupvar" command.  It is used
//	to test Tcl_UpVar and Tcl_UpVar2.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Creates or modifies an "upvar" reference.
//
//----------------------------------------------------------------------

func TestupvarCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:4270:1: */
	bp := tls.Alloc(32)
	defer tls.Free(32)

	var flags int32 = 0

	if argc != 5 && argc != 6 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+2242, /* "wrong # argument..." */
			*(*uintptr)(unsafe.Pointer(argv)), ts+4818, uintptr(0)))
		return TCL_ERROR
	}

	if argc == 5 {
		if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 4*8)), ts+3241) == 0 {
			flags = TCL_GLOBAL_ONLY
		} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 4*8)), ts+4851) == 0 {
			flags = TCL_NAMESPACE_ONLY
		}
		return (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpVar2})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)), *(*uintptr)(unsafe.Pointer(argv + 2*8)), uintptr(0), *(*uintptr)(unsafe.Pointer(argv + 3*8)), flags)
	} else {
		if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 5*8)), ts+3241) == 0 {
			flags = TCL_GLOBAL_ONLY
		} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 5*8)), ts+4851) == 0 {
			flags = TCL_NAMESPACE_ONLY
		}
		return (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UpVar2})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)), *(*uintptr)(unsafe.Pointer(argv + 2*8)),
			func() uintptr {
				if int32(*(*int8)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(argv + 3*8))))) == 0 {
					return uintptr(0)
				}
				return *(*uintptr)(unsafe.Pointer(argv + 3*8))
			}(), *(*uintptr)(unsafe.Pointer(argv + 4*8)),
			flags)
	}
	return int32(0)
}

//----------------------------------------------------------------------
//
// TestseterrorcodeCmd --
//
//	This procedure implements the "testseterrorcodeCmd".  This tests up to
//	five elements passed to the Tcl_SetErrorCode command.
//
// Results:
//	A standard Tcl result. Always returns TCL_ERROR so that
//	the error code can be tested.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestseterrorcodeCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:4322:1: */
	bp := tls.Alloc(176)
	defer tls.Free(176)

	if argc > 6 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+4861 /* "too many args" */, uintptr(0))
		return TCL_ERROR
	}
	switch argc {
	case 1:
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetErrorCode})).f(tls, interp, libc.VaList(bp, ts+4875 /* "NONE" */, uintptr(0)))
		break
	case 2:
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetErrorCode})).f(tls, interp, libc.VaList(bp+16, *(*uintptr)(unsafe.Pointer(argv + 1*8)), uintptr(0)))
		break
	case 3:
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetErrorCode})).f(tls, interp, libc.VaList(bp+32, *(*uintptr)(unsafe.Pointer(argv + 1*8)), *(*uintptr)(unsafe.Pointer(argv + 2*8)), uintptr(0)))
		break
	case 4:
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetErrorCode})).f(tls, interp, libc.VaList(bp+56, *(*uintptr)(unsafe.Pointer(argv + 1*8)), *(*uintptr)(unsafe.Pointer(argv + 2*8)), *(*uintptr)(unsafe.Pointer(argv + 3*8)), uintptr(0)))
		break
	case 5:
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetErrorCode})).f(tls, interp, libc.VaList(bp+88, *(*uintptr)(unsafe.Pointer(argv + 1*8)), *(*uintptr)(unsafe.Pointer(argv + 2*8)), *(*uintptr)(unsafe.Pointer(argv + 3*8)), *(*uintptr)(unsafe.Pointer(argv + 4*8)), uintptr(0)))
		break
	case 6:
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetErrorCode})).f(tls, interp, libc.VaList(bp+128, *(*uintptr)(unsafe.Pointer(argv + 1*8)), *(*uintptr)(unsafe.Pointer(argv + 2*8)), *(*uintptr)(unsafe.Pointer(argv + 3*8)), *(*uintptr)(unsafe.Pointer(argv + 4*8)),
			*(*uintptr)(unsafe.Pointer(argv + 5*8)), uintptr(0)))
	}
	return TCL_ERROR
}

//----------------------------------------------------------------------
//
// TestsetobjerrorcodeCmd --
//
//	This procedure implements the "testsetobjerrorcodeCmd".
//	This tests the Tcl_SetObjErrorCode function.
//
// Results:
//	A standard Tcl result. Always returns TCL_ERROR so that
//	the error code can be tested.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestsetobjerrorcodeCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:4374:1: */
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjErrorCode})).f(tls, interp, (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ConcatObj})).f(tls, objc-1, objv+uintptr(1)*8))
	return TCL_ERROR
}

//----------------------------------------------------------------------
//
// TestfeventCmd --
//
//	This procedure implements the "testfevent" command.  It is
//	used for testing the "fileevent" command.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Creates and deletes interpreters.
//
//----------------------------------------------------------------------

func TestfeventCmd(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:4402:1: */
	bp := tls.Alloc(80)
	defer tls.Free(80)

	var code int32
	var chan1 Tcl_Channel

	if argc < 2 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+4880, uintptr(0)))
		return TCL_ERROR
	}
	if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+4898) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+32, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
				ts+4902, uintptr(0)))
			return TCL_ERROR
		}
		if interp2 != uintptr(0) {
			code = (*struct {
				f func(*libc.TLS, uintptr, uintptr, int32, int32) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_EvalEx})).f(tls, interp2, *(*uintptr)(unsafe.Pointer(argv + 2*8)), -1, TCL_EVAL_GLOBAL)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
				f func(*libc.TLS, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp2))
			return code
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp,
				libc.VaList(bp+64, ts+4914,
					uintptr(0)))
			return TCL_ERROR
		}
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1283) == 0 {
		if interp2 != uintptr(0) {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteInterp})).f(tls, interp2)
		}
		interp2 = (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateInterp})).f(tls)
		return (*struct {
			f func(*libc.TLS, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Init})).f(tls, interp2)
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+1290) == 0 {
		if interp2 != uintptr(0) {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteInterp})).f(tls, interp2)
		}
		interp2 = uintptr(0)
	} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)), ts+4966) == 0 {
		if interp2 != uintptr(0) {
			chan1 = (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) Tcl_Channel
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetChannel})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), uintptr(0))
			if chan1 == uintptr(0) {
				return TCL_ERROR
			}
			(*struct {
				f func(*libc.TLS, uintptr, Tcl_Channel)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_RegisterChannel})).f(tls, interp2, chan1)
		}
	}

	return TCL_OK
}

var interp2 uintptr = uintptr(0) /* tclTest.c:4408:23 */

//----------------------------------------------------------------------
//
// TestpanicCmd --
//
//	Calls the panic routine.
//
// Results:
//	Always returns TCL_OK.
//
// Side effects:
//	May exit application.
//
//----------------------------------------------------------------------

func TestpanicCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:4474:1: */
	bp := tls.Alloc(8)
	defer tls.Free(8)

	var argString uintptr

	//  Put the arguments into a var args structure
	//  Append all of the arguments together separated by spaces

	argString = (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Merge})).f(tls, argc-1, argv+uintptr(1)*8)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Panic})).f(tls, ts+4972 /* "%s" */, libc.VaList(bp, argString))
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, argString)

	return TCL_OK
}

func TestfileCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:4495:1: */
	bp := tls.Alloc(48)
	defer tls.Free(48)

	var force int32
	var i int32
	var j int32
	var result int32
	// var error uintptr at bp+40, 8

	var subcmd uintptr
	var _objPtr uintptr
	*(*uintptr)(unsafe.Pointer(bp + 40 /* error */)) = uintptr(0)

	if !(argc < 3) {
		goto __1
	}
	return TCL_ERROR
__1:
	;

	force = 0
	i = 2
	if !(libc.Xstrcmp(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(argv + 2*8))), ts+4975) == 0) {
		goto __2
	}
	force = 1
	i = 3
__2:
	;

	if !(argc-i > 2) {
		goto __3
	}
	return TCL_ERROR
__3:
	;

	j = i
__4:
	if !(j < argc) {
		goto __6
	}
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSGetNormalizedPath})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + uintptr(j)*8))) == uintptr(0)) {
		goto __7
	}
	return TCL_ERROR
__7:
	;
	goto __5
__5:
	j++
	goto __4
	goto __6
__6:
	;

	subcmd = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(argv + 1*8)))

	if !(libc.Xstrcmp(tls, subcmd, ts+4982) == 0) {
		goto __8
	}
	result = (*struct {
		f func(*libc.TLS, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclpObjRenameFile})).f(tls, *(*uintptr)(unsafe.Pointer(argv + uintptr(i)*8)), *(*uintptr)(unsafe.Pointer(argv + uintptr(i+1)*8)))
	goto __9
__8:
	if !(libc.Xstrcmp(tls, subcmd, ts+4985) == 0) {
		goto __10
	}
	result = (*struct {
		f func(*libc.TLS, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclpObjCopyFile})).f(tls, *(*uintptr)(unsafe.Pointer(argv + uintptr(i)*8)), *(*uintptr)(unsafe.Pointer(argv + uintptr(i+1)*8)))
	goto __11
__10:
	if !(libc.Xstrcmp(tls, subcmd, ts+4988) == 0) {
		goto __12
	}
	result = (*struct {
		f func(*libc.TLS, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclpObjDeleteFile})).f(tls, *(*uintptr)(unsafe.Pointer(argv + uintptr(i)*8)))
	goto __13
__12:
	if !(libc.Xstrcmp(tls, subcmd, ts+4991) == 0) {
		goto __14
	}
	result = (*struct {
		f func(*libc.TLS, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclpObjCreateDirectory})).f(tls, *(*uintptr)(unsafe.Pointer(argv + uintptr(i)*8)))
	goto __15
__14:
	if !(libc.Xstrcmp(tls, subcmd, ts+4997) == 0) {
		goto __16
	}
	result = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclpObjCopyDirectory})).f(tls, *(*uintptr)(unsafe.Pointer(argv + uintptr(i)*8)), *(*uintptr)(unsafe.Pointer(argv + uintptr(i+1)*8)), bp+40 /* &error */)
	goto __17
__16:
	if !(libc.Xstrcmp(tls, subcmd, ts+5003) == 0) {
		goto __18
	}
	result = (*struct {
		f func(*libc.TLS, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclpObjRemoveDirectory})).f(tls, *(*uintptr)(unsafe.Pointer(argv + uintptr(i)*8)), force, bp+40 /* &error */)
	goto __19
__18:
	result = TCL_ERROR
	goto end
__19:
	;
__17:
	;
__15:
	;
__13:
	;
__11:
	;
__9:
	;

	if !(result != TCL_OK) {
		goto __20
	}
	if !(*(*uintptr)(unsafe.Pointer(bp + 40)) != uintptr(0)) {
		goto __21
	}
	if !(int32(*(*int8)(unsafe.Pointer((*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(bp + 40)))))) != 0) {
		goto __22
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(bp + 40 /* error */))), ts+1424 /* " " */, uintptr(0)))
__22:
	;
__23:
	_objPtr = *(*uintptr)(unsafe.Pointer(bp + 40))
	if !(libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1) {
		goto __26
	}
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
__26:
	;
	goto __24
__24:
	if 0 != 0 {
		goto __23
	}
	goto __25
__25:
	;
__21:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+24, (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ErrnoId})).f(tls), uintptr(0)))
__20:
	;

end:
	return result
}

//----------------------------------------------------------------------
//
// TestgetvarfullnameCmd --
//
//	Implements the "testgetvarfullname" cmd that is used when testing
//	the Tcl_GetVariableFullName procedure.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestgetvarfullnameCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:4577:1: */
	bp := tls.Alloc(8)
	defer tls.Free(8)

	var name uintptr
	var arg uintptr
	var flags int32 = 0
	var namespacePtr uintptr
	// var framePtr uintptr at bp, 8

	var variable Tcl_Var

	if objc != 3 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+5009 /* "name scope" */)
		return TCL_ERROR
	}

	name = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)))

	arg = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	if libc.Xstrcmp(tls, arg, ts+3241) == 0 {
		flags = TCL_GLOBAL_ONLY
	} else if libc.Xstrcmp(tls, arg, ts+4851) == 0 {
		flags = TCL_NAMESPACE_ONLY
	}

	// This command, like any other created with Tcl_Create[Obj]Command, runs
	// in the global namespace. As a "namespace-aware" command that needs to
	// run in a particular namespace, it must activate that namespace itself.

	if flags == TCL_NAMESPACE_ONLY {
		namespacePtr = (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tcl_FindNamespace})).f(tls, interp, ts+5020 /* "::test_ns_var" */, uintptr(0),
			TCL_LEAVE_ERR_MSG)
		if namespacePtr == uintptr(0) {
			return TCL_ERROR
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclPushStackFrame})).f(tls, interp, bp /* &framePtr */, namespacePtr,
			/*isProcCallFrame*/ 0)
	}

	variable = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32) Tcl_Var
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tcl_FindNamespaceVar})).f(tls, interp, name, uintptr(0),
		flags|TCL_LEAVE_ERR_MSG)

	if flags == TCL_NAMESPACE_ONLY {
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclPopStackFrame})).f(tls, interp)
	}
	if variable == uintptr(0) {
		return TCL_ERROR
	}
	(*struct {
		f func(*libc.TLS, uintptr, Tcl_Var, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tcl_GetVariableFullName})).f(tls, interp, variable, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// GetTimesObjCmd --
//
//	This procedure implements the "gettimes" command.  It is used for
//	computing the time needed for various basic operations such as reading
//	variables, allocating memory, sprintf, converting variables, etc.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Allocates and frees memory, sets a variable "a" in the interpreter.
//
//----------------------------------------------------------------------

func GetTimesObjCmd(tls *libc.TLS, unused ClientData, interp uintptr, objc int32, dummy uintptr) int32 { /* tclTest.c:4651:1: */
	bp := tls.Alloc(344)
	defer tls.Free(344)

	var iPtr uintptr = interp
	var i int32
	// var n int32 at bp+224, 4

	var timePer float64
	// var start Tcl_Time at bp+112, 8

	// var stop Tcl_Time at bp+128, 8

	var objPtr uintptr
	var objv uintptr
	var s uintptr
	// var newString [24]int8 at bp+264, 24

	_ = objc
	_ = dummy

	// alloc & free 100000 times
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5034, 0)
	for ok := true; ok; ok = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+104, 8
		*(*int64)(unsafe.Pointer(bp + 104)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+104 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 104 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 104 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 104 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 112 /* &start */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 104 /* &_t */))
	}
	for i = 0; i < 100000; i++ {
		objPtr = (*struct {
			f func(*libc.TLS, uint32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(unsafe.Sizeof(Tcl_Obj{})))
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, objPtr)
	}
	for ok1 := true; ok1; ok1 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+120, 8
		*(*int64)(unsafe.Pointer(bp + 120)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+120 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 120 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 120 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 120 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 128 /* &stop */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 120 /* &_t */))
	}
	timePer = float64(((*Tcl_Time)(unsafe.Pointer(bp+128)).sec-(*Tcl_Time)(unsafe.Pointer(bp+112)).sec)*1000000 + ((*Tcl_Time)(unsafe.Pointer(bp+128)).usec - (*Tcl_Time)(unsafe.Pointer(bp+112)).usec))
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5068, libc.VaList(bp, timePer/float64(100000)))

	// alloc 5000 times
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5097, 0)
	objv = (*struct {
		f func(*libc.TLS, uint32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(uint64(5000)*uint64(unsafe.Sizeof(uintptr(0)))))
	for ok2 := true; ok2; ok2 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+136, 8
		*(*int64)(unsafe.Pointer(bp + 136)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+136 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 136 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 136 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 136 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 112 /* &start */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 136 /* &_t */))
	}
	for i = 0; i < 5000; i++ {
		*(*uintptr)(unsafe.Pointer(objv + uintptr(i)*8)) = (*struct {
			f func(*libc.TLS, uint32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(unsafe.Sizeof(Tcl_Obj{})))
	}
	for ok3 := true; ok3; ok3 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+144, 8
		*(*int64)(unsafe.Pointer(bp + 144)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+144 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 144 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 144 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 144 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 128 /* &stop */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 144 /* &_t */))
	}
	timePer = float64(((*Tcl_Time)(unsafe.Pointer(bp+128)).sec-(*Tcl_Time)(unsafe.Pointer(bp+112)).sec)*1000000 + ((*Tcl_Time)(unsafe.Pointer(bp+128)).usec - (*Tcl_Time)(unsafe.Pointer(bp+112)).usec))
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5122, libc.VaList(bp+8, timePer/float64(5000)))

	// free 5000 times
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5146, 0)
	for ok4 := true; ok4; ok4 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+152, 8
		*(*int64)(unsafe.Pointer(bp + 152)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+152 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 152 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 152 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 152 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 112 /* &start */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 152 /* &_t */))
	}
	for i = 0; i < 5000; i++ {
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, *(*uintptr)(unsafe.Pointer(objv + uintptr(i)*8)))
	}
	for ok5 := true; ok5; ok5 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+160, 8
		*(*int64)(unsafe.Pointer(bp + 160)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+160 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 160 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 160 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 160 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 128 /* &stop */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 160 /* &_t */))
	}
	timePer = float64(((*Tcl_Time)(unsafe.Pointer(bp+128)).sec-(*Tcl_Time)(unsafe.Pointer(bp+112)).sec)*1000000 + ((*Tcl_Time)(unsafe.Pointer(bp+128)).usec - (*Tcl_Time)(unsafe.Pointer(bp+112)).usec))
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5170, libc.VaList(bp+16, timePer/float64(5000)))

	// Tcl_NewObj 5000 times
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5193, 0)
	for ok6 := true; ok6; ok6 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+168, 8
		*(*int64)(unsafe.Pointer(bp + 168)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+168 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 168 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 168 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 168 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 112 /* &start */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 168 /* &_t */))
	}
	for i = 0; i < 5000; i++ {
		*(*uintptr)(unsafe.Pointer(objv + uintptr(i)*8)) = (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewObj})).f(tls)
	}
	for ok7 := true; ok7; ok7 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+176, 8
		*(*int64)(unsafe.Pointer(bp + 176)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+176 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 176 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 176 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 176 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 128 /* &stop */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 176 /* &_t */))
	}
	timePer = float64(((*Tcl_Time)(unsafe.Pointer(bp+128)).sec-(*Tcl_Time)(unsafe.Pointer(bp+112)).sec)*1000000 + ((*Tcl_Time)(unsafe.Pointer(bp+128)).usec - (*Tcl_Time)(unsafe.Pointer(bp+112)).usec))
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5216, libc.VaList(bp+24, timePer/float64(5000)))

	// Tcl_DecrRefCount 5000 times
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5245, 0)
	for ok8 := true; ok8; ok8 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+184, 8
		*(*int64)(unsafe.Pointer(bp + 184)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+184 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 184 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 184 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 184 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 112 /* &start */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 184 /* &_t */))
	}
	for i = 0; i < 5000; i++ {
		objPtr = *(*uintptr)(unsafe.Pointer(objv + uintptr(i)*8))
		for ok9 := true; ok9; ok9 = 0 != 0 {
			var _objPtr uintptr = objPtr
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
	}
	for ok10 := true; ok10; ok10 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+192, 8
		*(*int64)(unsafe.Pointer(bp + 192)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+192 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 192 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 192 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 192 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 128 /* &stop */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 192 /* &_t */))
	}
	timePer = float64(((*Tcl_Time)(unsafe.Pointer(bp+128)).sec-(*Tcl_Time)(unsafe.Pointer(bp+112)).sec)*1000000 + ((*Tcl_Time)(unsafe.Pointer(bp+128)).usec - (*Tcl_Time)(unsafe.Pointer(bp+112)).usec))
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5274, libc.VaList(bp+32, timePer/float64(5000)))
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, objv)

	// TclGetString 100000 times
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5309, 0)
	objPtr = (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+5354 /* "12345" */, -1)
	for ok11 := true; ok11; ok11 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+200, 8
		*(*int64)(unsafe.Pointer(bp + 200)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+200 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 200 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 200 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 200 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 112 /* &start */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 200 /* &_t */))
	}
	for i = 0; i < 100000; i++ {
		if !((*Tcl_Obj)(unsafe.Pointer(objPtr)).bytes != 0) {
			(*struct {
				f func(*libc.TLS, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, objPtr)
		}
	}
	for ok12 := true; ok12; ok12 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+208, 8
		*(*int64)(unsafe.Pointer(bp + 208)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+208 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 208 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 208 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 208 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 128 /* &stop */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 208 /* &_t */))
	}
	timePer = float64(((*Tcl_Time)(unsafe.Pointer(bp+128)).sec-(*Tcl_Time)(unsafe.Pointer(bp+112)).sec)*1000000 + ((*Tcl_Time)(unsafe.Pointer(bp+128)).usec - (*Tcl_Time)(unsafe.Pointer(bp+112)).usec))
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5360,
		libc.VaList(bp+40, timePer/float64(100000)))

	// Tcl_GetIntFromObj 100000 times
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5409, 0)
	for ok13 := true; ok13; ok13 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+216, 8
		*(*int64)(unsafe.Pointer(bp + 216)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+216 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 216 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 216 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 216 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 112 /* &start */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 216 /* &_t */))
	}
	for i = 0; i < 100000; i++ {
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, objPtr, bp+224) != TCL_OK {
			return TCL_ERROR
		}
	}
	for ok14 := true; ok14; ok14 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+232, 8
		*(*int64)(unsafe.Pointer(bp + 232)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+232 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 232 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 232 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 232 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 128 /* &stop */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 232 /* &_t */))
	}
	timePer = float64(((*Tcl_Time)(unsafe.Pointer(bp+128)).sec-(*Tcl_Time)(unsafe.Pointer(bp+112)).sec)*1000000 + ((*Tcl_Time)(unsafe.Pointer(bp+128)).usec - (*Tcl_Time)(unsafe.Pointer(bp+112)).usec))
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5452,
		libc.VaList(bp+48, timePer/float64(100000)))
	for ok15 := true; ok15; ok15 = 0 != 0 {
		var _objPtr uintptr = objPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}

	// Tcl_GetInt 100000 times
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5499, 0)
	for ok16 := true; ok16; ok16 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+240, 8
		*(*int64)(unsafe.Pointer(bp + 240)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+240 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 240 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 240 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 240 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 112 /* &start */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 240 /* &_t */))
	}
	for i = 0; i < 100000; i++ {
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, ts+5354, bp+224) != TCL_OK {
			return TCL_ERROR
		}
	}
	for ok17 := true; ok17; ok17 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+248, 8
		*(*int64)(unsafe.Pointer(bp + 248)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+248 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 248 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 248 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 248 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 128 /* &stop */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 248 /* &_t */))
	}
	timePer = float64(((*Tcl_Time)(unsafe.Pointer(bp+128)).sec-(*Tcl_Time)(unsafe.Pointer(bp+112)).sec)*1000000 + ((*Tcl_Time)(unsafe.Pointer(bp+128)).usec - (*Tcl_Time)(unsafe.Pointer(bp+112)).usec))
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5535,
		libc.VaList(bp+56, timePer/float64(100000)))

	// sprintf 100000 times
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5575, 0)
	for ok18 := true; ok18; ok18 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+256, 8
		*(*int64)(unsafe.Pointer(bp + 256)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+256 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 256 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 256 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 256 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 112 /* &start */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 256 /* &_t */))
	}
	for i = 0; i < 100000; i++ {
		libc.Xsprintf(tls, bp+264, ts+5606, libc.VaList(bp+64, 12345))
	}
	for ok19 := true; ok19; ok19 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+288, 8
		*(*int64)(unsafe.Pointer(bp + 288)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+288 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 288 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 288 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 288 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 128 /* &stop */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 288 /* &_t */))
	}
	timePer = float64(((*Tcl_Time)(unsafe.Pointer(bp+128)).sec-(*Tcl_Time)(unsafe.Pointer(bp+112)).sec)*1000000 + ((*Tcl_Time)(unsafe.Pointer(bp+128)).usec - (*Tcl_Time)(unsafe.Pointer(bp+112)).usec))
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5609,
		libc.VaList(bp+72, timePer/float64(100000)))

	// hashtable lookup 100000 times
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5644, 0)
	for ok20 := true; ok20; ok20 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+296, 8
		*(*int64)(unsafe.Pointer(bp + 296)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+296 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 296 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 296 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 296 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 112 /* &start */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 296 /* &_t */))
	}
	for i = 0; i < 100000; i++ {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*Tcl_HashTable)(unsafe.Pointer((*Interp)(unsafe.Pointer(iPtr)).globalNsPtr + 160 /* &.cmdTable */)).findProc})).f(tls, (*Interp)(unsafe.Pointer(iPtr)).globalNsPtr+160 /* &.cmdTable */, ts+42 /* "gettimes" */)
	}
	for ok21 := true; ok21; ok21 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+304, 8
		*(*int64)(unsafe.Pointer(bp + 304)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+304 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 304 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 304 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 304 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 128 /* &stop */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 304 /* &_t */))
	}
	timePer = float64(((*Tcl_Time)(unsafe.Pointer(bp+128)).sec-(*Tcl_Time)(unsafe.Pointer(bp+112)).sec)*1000000 + ((*Tcl_Time)(unsafe.Pointer(bp+128)).usec - (*Tcl_Time)(unsafe.Pointer(bp+112)).usec))
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5689,
		libc.VaList(bp+80, timePer/float64(100000)))

	// Tcl_SetVar 100000 times
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5738, 0)
	for ok22 := true; ok22; ok22 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+312, 8
		*(*int64)(unsafe.Pointer(bp + 312)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+312 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 312 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 312 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 312 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 112 /* &start */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 312 /* &_t */))
	}
	for i = 0; i < 100000; i++ {
		s = (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetVar2})).f(tls, interp, ts+5774 /* "a" */, uintptr(0), ts+5354 /* "12345" */, TCL_LEAVE_ERR_MSG)
		if s == uintptr(0) {
			return TCL_ERROR
		}
	}
	for ok23 := true; ok23; ok23 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+320, 8
		*(*int64)(unsafe.Pointer(bp + 320)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+320 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 320 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 320 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 320 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 128 /* &stop */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 320 /* &_t */))
	}
	timePer = float64(((*Tcl_Time)(unsafe.Pointer(bp+128)).sec-(*Tcl_Time)(unsafe.Pointer(bp+112)).sec)*1000000 + ((*Tcl_Time)(unsafe.Pointer(bp+128)).usec - (*Tcl_Time)(unsafe.Pointer(bp+112)).usec))
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5776,
		libc.VaList(bp+88, timePer/float64(100000)))

	// Tcl_GetVar 100000 times
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5821, 0)
	for ok24 := true; ok24; ok24 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+328, 8
		*(*int64)(unsafe.Pointer(bp + 328)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+328 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 328 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 328 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 328 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 112 /* &start */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 328 /* &_t */))
	}
	for i = 0; i < 100000; i++ {
		s = (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetVar2})).f(tls, interp, ts+5774 /* "a" */, uintptr(0), TCL_LEAVE_ERR_MSG)
		if s == uintptr(0) {
			return TCL_ERROR
		}
	}
	for ok25 := true; ok25; ok25 = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+336, 8
		*(*int64)(unsafe.Pointer(bp + 336)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+336 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 336 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 336 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 336 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 128 /* &stop */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 336 /* &_t */))
	}
	timePer = float64(((*Tcl_Time)(unsafe.Pointer(bp+128)).sec-(*Tcl_Time)(unsafe.Pointer(bp+112)).sec)*1000000 + ((*Tcl_Time)(unsafe.Pointer(bp+128)).usec - (*Tcl_Time)(unsafe.Pointer(bp+112)).usec))
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(2)), ts+5860,
		libc.VaList(bp+96, timePer/float64(100000)))

	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ResetResult})).f(tls, interp)
	return TCL_OK
}

//----------------------------------------------------------------------
//
// NoopCmd --
//
//	This procedure is just used to time the overhead involved in
//	parsing and invoking a command.
//
// Results:
//	None.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func NoopCmd(tls *libc.TLS, unused ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:4832:1: */
	return TCL_OK
}

//----------------------------------------------------------------------
//
// NoopObjCmd --
//
//	This object-based procedure is just used to time the overhead
//	involved in parsing and invoking a command.
//
// Results:
//	Returns the TCL_OK result code.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func NoopObjCmd(tls *libc.TLS, unused ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:4859:1: */
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TeststringbytesObjCmd --
//	Returns bytearray value of the bytes in argument string rep
//
// Results:
//	Returns the TCL_OK result code.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TeststringbytesObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:4884:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	// var n int32 at bp, 4

	var p uintptr
	_ = dummy

	if objc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+5903 /* "value" */)
		return TCL_ERROR
	}
	p = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp /* &n */)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewByteArrayObj})).f(tls, p, *(*int32)(unsafe.Pointer(bp /* n */))))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestpurebytesobjObjCmd --
//
//	This object-based procedure constructs a pure bytes object
//	without type and with internal representation containing NULL's.
//
//	If no argument supplied it returns empty object with tclEmptyStringRep,
//	otherwise it returns this as pure bytes object with bytes value equal
//	string.
//
// Results:
//	Returns the TCL_OK result code.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestpurebytesobjObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:4925:1: */
	var objPtr uintptr
	_ = dummy

	if objc > 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+5909 /* "?string?" */)
		return TCL_ERROR
	}
	objPtr = (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewObj})).f(tls)
	//
	//     objPtr->internalRep.twoPtrValue.ptr1 = NULL;
	//     objPtr->internalRep.twoPtrValue.ptr2 = NULL;
	//
	libc.Xmemset(tls, objPtr+32, 0, uint64(unsafe.Sizeof(struct {
		_         [0]uint64
		longValue int32
		_         [12]byte
	}{})))
	if objc == 2 {
		var s uintptr = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)))
		(*Tcl_Obj)(unsafe.Pointer(objPtr)).length = (*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(objv + 1*8)))).length
		(*Tcl_Obj)(unsafe.Pointer(objPtr)).bytes = (*struct {
			f func(*libc.TLS, uint32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32((*Tcl_Obj)(unsafe.Pointer(objPtr)).length+1))
		libc.Xmemcpy(tls, (*Tcl_Obj)(unsafe.Pointer(objPtr)).bytes, s, uint64((*Tcl_Obj)(unsafe.Pointer(objPtr)).length))
		*(*int8)(unsafe.Pointer((*Tcl_Obj)(unsafe.Pointer(objPtr)).bytes + uintptr((*Tcl_Obj)(unsafe.Pointer(objPtr)).length))) = int8(0)
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, objPtr)
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestsetbytearraylengthObjCmd --
//
//	Testing command 'testsetbytearraylength` used to test the public
//	interface routine Tcl_SetByteArrayLength().
//
// Results:
//	Returns the TCL_OK result code.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestsetbytearraylengthObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:4973:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	// var n int32 at bp, 4

	var obj uintptr = uintptr(0)
	_ = dummy

	if objc != 3 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+5918 /* "value length" */)
		return TCL_ERROR
	}
	if TCL_OK != (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 2*8)), bp) {
		return TCL_ERROR
	}
	if (*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(objv + 1*8)))).refCount > 1 {
		obj = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)))
	} else {
		obj = *(*uintptr)(unsafe.Pointer(objv + 1*8))
	}
	(*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetByteArrayLength})).f(tls, obj, *(*int32)(unsafe.Pointer(bp /* n */)))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, obj)
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestbytestringObjCmd --
//
//	This object-based procedure constructs a string which can
//	possibly contain invalid UTF-8 bytes.
//
// Results:
//	Returns the TCL_OK result code.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestbytestringObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:5018:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	*(*int32)(unsafe.Pointer(bp /* n */)) = 0
	var p uintptr
	_ = dummy

	if objc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+5931 /* "bytearray" */)
		return TCL_ERROR
	}

	p = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetByteArrayFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp /* &n */)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, p, *(*int32)(unsafe.Pointer(bp /* n */))))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestsetCmd --
//
//	Implements the "testset{err,noerr}" cmds that are used when testing
//	Tcl_Set/GetVar C Api with/without TCL_LEAVE_ERR_MSG flag
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//     Variables may be set.
//
//----------------------------------------------------------------------

func TestsetCmd(tls *libc.TLS, data ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:5056:1: */
	bp := tls.Alloc(32)
	defer tls.Free(32)

	var flags int32 = int32(data)
	var value uintptr

	if argc == 2 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+5941 /* "before get" */, uintptr(0))
		value = (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetVar2})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)), uintptr(0), flags)
		if value == uintptr(0) {
			return TCL_ERROR
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, value)
		return TCL_OK
	} else if argc == 3 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+5952 /* "before set" */, uintptr(0))
		value = (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetVar2})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)), uintptr(0), *(*uintptr)(unsafe.Pointer(argv + 2*8)), flags)
		if value == uintptr(0) {
			return TCL_ERROR
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, value)
		return TCL_OK
	} else {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1356, /* "wrong # args: sh..." */
			*(*uintptr)(unsafe.Pointer(argv)), ts+5963, uintptr(0)))
		return TCL_ERROR
	}
	return int32(0)
}

func Testset2Cmd(tls *libc.TLS, data ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:5088:1: */
	bp := tls.Alloc(32)
	defer tls.Free(32)

	var flags int32 = int32(data)
	var value uintptr

	if argc == 3 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+5941 /* "before get" */, uintptr(0))
		value = (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetVar2})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)), *(*uintptr)(unsafe.Pointer(argv + 2*8)), flags)
		if value == uintptr(0) {
			return TCL_ERROR
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, value)
		return TCL_OK
	} else if argc == 4 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+5952 /* "before set" */, uintptr(0))
		value = (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetVar2})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)), *(*uintptr)(unsafe.Pointer(argv + 2*8)), *(*uintptr)(unsafe.Pointer(argv + 3*8)), flags)
		if value == uintptr(0) {
			return TCL_ERROR
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, value)
		return TCL_OK
	} else {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1356, /* "wrong # args: sh..." */
			*(*uintptr)(unsafe.Pointer(argv)), ts+5984, uintptr(0)))
		return TCL_ERROR
	}
	return int32(0)
}

//----------------------------------------------------------------------
//
// TestsaveresultCmd --
//
//	Implements the "testsaveresult" cmd that is used when testing the
//	Tcl_SaveResult, Tcl_RestoreResult, and Tcl_DiscardResult interfaces.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestsaveresultCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:5138:1: */
	bp := tls.Alloc(272)
	defer tls.Free(272)

	var iPtr uintptr = interp
	// var discard int32 at bp+20, 4

	var result int32
	// var index int32 at bp+16, 4

	// var state Tcl_SavedResult at bp+24, 248

	var objPtr uintptr

	// Parse arguments

	if objc != 4 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+6014 /* "type script disc..." */)
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), uintptr(unsafe.Pointer(&optionStrings2)), int32(unsafe.Sizeof(uintptr(0))), ts+3234, 0, bp+16) != TCL_OK {
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBooleanFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 3*8)), bp+20) != TCL_OK {
		return TCL_ERROR
	}

	objPtr = uintptr(0) // Lint.
	switch uint32(*(*int32)(unsafe.Pointer(bp + 16 /* index */))) {
	case uint32(4) /* RESULT_SMALL */ :
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+6034 /* "small result" */, uintptr(1))
		break
	case uint32(0) /* RESULT_APPEND */ :
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+6047 /* "append result" */, uintptr(0)))
		break
	case uint32(2) /* RESULT_FREE */ :
		{
			var buf uintptr = (*struct {
				f func(*libc.TLS, uint32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(200))

			libc.Xstrcpy(tls, buf, ts+6061)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, buf, uintptr(3))
			break

		}
	case uint32(1) /* RESULT_DYNAMIC */ :
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+6073 /* "dynamic result" */, *(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS, uintptr) }{TestsaveresultFree})))
		break
	case uint32(3) /* RESULT_OBJECT */ :
		objPtr = (*struct {
			f func(*libc.TLS, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+6088 /* "object result" */, -1)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, objPtr)
		break
	}

	freeCount = 0
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SaveResult})).f(tls, interp, bp+24 /* &state */)

	if int32(uint32(*(*int32)(unsafe.Pointer(bp + 16)))) == 3 {
		result = (*struct {
			f func(*libc.TLS, uintptr, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_EvalObjEx})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 2*8)), 0)
	} else {
		result = (*struct {
			f func(*libc.TLS, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Eval})).f(tls, interp, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8))))
	}

	if *(*int32)(unsafe.Pointer(bp + 20)) != 0 {
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DiscardResult})).f(tls, bp+24 /* &state */)
	} else {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_RestoreResult})).f(tls, interp, bp+24 /* &state */)
		result = TCL_OK
	}

	switch uint32(*(*int32)(unsafe.Pointer(bp + 16 /* index */))) {
	case uint32(1) /* RESULT_DYNAMIC */ :
		{
			var present int32 = libc.Bool32((*Interp)(unsafe.Pointer(iPtr)).freeProc == *(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS, uintptr) }{TestsaveresultFree})))
			var called int32 = freeCount

			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, func() uintptr {
				if called != 0 {
					return ts + 6102 /* "called" */
				}
				return ts + 6109 /* "notCalled" */
			}())
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, func() uintptr {
				if present != 0 {
					return ts + 6119 /* "present" */
				}
				return ts + 6127 /* "missing" */
			}())
			break

		}
	case uint32(3) /* RESULT_OBJECT */ :
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, func() uintptr {
			if (*struct {
				f func(*libc.TLS, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp) == objPtr {
				return ts + 6135 /* "same" */
			}
			return ts + 6140 /* "different" */
		}())
		break
	default:
		break
	}
	return result
}

var optionStrings2 = [6]uintptr{
	ts + 2392, ts + 6150, ts + 2411, ts + 6158, ts + 6165, uintptr(0),
} /* tclTest.c:5148:23 */

//----------------------------------------------------------------------
//
// TestsaveresultFree --
//
//	Special purpose freeProc used by TestsaveresultCmd.
//
// Results:
//	None.
//
// Side effects:
//	Increments the freeCount.
//
//----------------------------------------------------------------------

func TestsaveresultFree(tls *libc.TLS, blockPtr uintptr) { /* tclTest.c:5247:1: */
	freeCount++
}

//----------------------------------------------------------------------
//
// TestmainthreadCmd  --
//
//	Implements the "testmainthread" cmd that is used to test the
//	'Tcl_GetCurrentThread' API.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestmainthreadCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:5271:1: */
	if argc == 1 {
		var idObj uintptr = (*struct {
			f func(*libc.TLS, Tcl_WideInt) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewWideIntObj})).f(tls, Tcl_WideInt((*struct{ f func(*libc.TLS) Tcl_ThreadId })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetCurrentThread})).f(tls)))

		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, idObj)
		return TCL_OK
	} else {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+1270 /* "wrong # args" */, uintptr(0))
		return TCL_ERROR
	}
	return int32(0)
}

//----------------------------------------------------------------------
//
// MainLoop --
//
//	A main loop set by TestsetmainloopCmd below.
//
// Results:
//	None.
//
// Side effects:
//	Event handlers could do anything.
//
//----------------------------------------------------------------------

func MainLoop(tls *libc.TLS) { /* tclTest.c:5305:1: */
	for !(exitMainLoop != 0) {
		(*struct{ f func(*libc.TLS, int32) int32 })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DoOneEvent})).f(tls, 0)
	}
	libc.Xfprintf(tls, libc.X__acrt_iob_func(tls, uint32(1)), ts+6171, 0)
	libc.Xfflush(tls, libc.X__acrt_iob_func(tls, uint32(1)))
}

//----------------------------------------------------------------------
//
// TestsetmainloopCmd  --
//
//	Implements the "testsetmainloop" cmd that is used to test the
//	'Tcl_SetMainLoop' API.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestsetmainloopCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:5332:1: */
	exitMainLoop = 0
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetMainLoop})).f(tls, *(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS) }{MainLoop})))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestexitmainloopCmd  --
//
//	Implements the "testexitmainloop" cmd that is used to test the
//	'Tcl_SetMainLoop' API.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestexitmainloopCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:5361:1: */
	exitMainLoop = 1
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestChannelCmd --
//
//	Implements the Tcl "testchannel" debugging command and its
//	subcommands. This is part of the testing environment.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestChannelCmd(tls *libc.TLS, clientData ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:5389:1: */
	bp := tls.Alloc(632)
	defer tls.Free(632)

	var cmdName uintptr // Sub command.
	var hTblPtr uintptr // Hash table of channels.
	// var hSearch Tcl_HashSearch at bp+608, 24
	// Search variable.
	var hPtr uintptr      // Search variable.
	var chanPtr uintptr   // The actual channel.
	var statePtr uintptr  // state info for channel
	var chan1 Tcl_Channel // The opaque type.
	var len size_t        // Length of subcommand string.
	var IOQueued int32    // How much IO is queued inside channel?
	// var buf [24]int8 at bp+584, 24
	// For sprintf.
	// var mode int32 at bp+560, 4
	// rw mode of the channel

	if argc < 2 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+6186, uintptr(0)))
		return TCL_ERROR
	}
	cmdName = *(*uintptr)(unsafe.Pointer(argv + 1*8))
	len = libc.Xstrlen(tls, cmdName)

	chanPtr = uintptr(0)

	if argc > 2 {
		if int32(*(*int8)(unsafe.Pointer(cmdName))) == 's' && libc.Xstrncmp(tls, cmdName, ts+6219, len) == 0 {
			// For splice access the pool of detached channels.
			// Locate channel, remove from the list.

			var nextPtrPtr uintptr
			var curPtr uintptr

			chan1 = uintptr(0)
			nextPtrPtr = uintptr(unsafe.Pointer(&firstDetached))
			curPtr = firstDetached
		__1:
			if !(curPtr != uintptr(0)) {
				goto __3
			}
			{

				if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 2*8)), (*struct {
					f func(*libc.TLS, Tcl_Channel) uintptr
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetChannelName})).f(tls, (*TestChannel)(unsafe.Pointer(curPtr)).__chan)) == 0 {
					*(*uintptr)(unsafe.Pointer(nextPtrPtr)) = (*TestChannel)(unsafe.Pointer(curPtr)).nextPtr
					(*TestChannel)(unsafe.Pointer(curPtr)).nextPtr = uintptr(0)
					chan1 = (*TestChannel)(unsafe.Pointer(curPtr)).__chan
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, curPtr)
					goto __3
				}

			}
			goto __2
		__2:
			nextPtrPtr = curPtr + 8
			curPtr = (*TestChannel)(unsafe.Pointer(curPtr)).nextPtr
			goto __1
			goto __3
		__3:
		} else {
			chan1 = (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) Tcl_Channel
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetChannel})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)), bp+560 /* &mode */)
		}
		if chan1 == uintptr(0) {
			return TCL_ERROR
		}
		chanPtr = chan1
		statePtr = (*Channel)(unsafe.Pointer(chanPtr)).state
		chanPtr = (*ChannelState)(unsafe.Pointer(statePtr)).topChanPtr
		chan1 = chanPtr
	} else {
		statePtr = uintptr(0)
		chan1 = uintptr(0)
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 's' && libc.Xstrncmp(tls, cmdName, ts+6226, len) == 0 {

		*(*uintptr)(unsafe.Pointer(bp + 568 /* msg */)) = (*struct {
			f func(*libc.TLS, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, *(*uintptr)(unsafe.Pointer(argv + 3*8)), -1)

		(*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(bp + 568)))).refCount++
		(*struct {
			f func(*libc.TLS, Tcl_Channel, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetChannelError})).f(tls, chan1, *(*uintptr)(unsafe.Pointer(bp + 568 /* msg */)))
		for ok := true; ok; ok = 0 != 0 {
			var _objPtr uintptr = *(*uintptr)(unsafe.Pointer(bp + 568))
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}

		(*struct {
			f func(*libc.TLS, Tcl_Channel, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetChannelError})).f(tls, chan1, bp+568 /* &msg */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(bp + 568 /* msg */)))
		for ok1 := true; ok1; ok1 = 0 != 0 {
			var _objPtr uintptr = *(*uintptr)(unsafe.Pointer(bp + 568))
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
		return TCL_OK
	}
	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 's' && libc.Xstrncmp(tls, cmdName, ts+6242, len) == 0 {

		*(*uintptr)(unsafe.Pointer(bp + 576 /* msg */)) = (*struct {
			f func(*libc.TLS, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, *(*uintptr)(unsafe.Pointer(argv + 3*8)), -1)

		(*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(bp + 576)))).refCount++
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetChannelErrorInterp})).f(tls, interp, *(*uintptr)(unsafe.Pointer(bp + 576 /* msg */)))
		for ok2 := true; ok2; ok2 = 0 != 0 {
			var _objPtr uintptr = *(*uintptr)(unsafe.Pointer(bp + 576))
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}

		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetChannelErrorInterp})).f(tls, interp, bp+576 /* &msg */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(bp + 576 /* msg */)))
		for ok3 := true; ok3; ok3 = 0 != 0 {
			var _objPtr uintptr = *(*uintptr)(unsafe.Pointer(bp + 576))
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
		return TCL_OK
	}

	// "cut" is actually more a simplified detach facility as provided by the
	// Thread package. Without the safeguards of a regular command (no
	// checking that the command is truly cut'able, no mutexes for
	// thread-safety). Its complementary command is "splice", see below.

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'c' && libc.Xstrncmp(tls, cmdName, ts+6264, len) == 0 {
		var det uintptr

		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+32, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
				ts+6268, uintptr(0)))
			return TCL_ERROR
		}

		(*struct {
			f func(*libc.TLS, uintptr, Tcl_Channel)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_RegisterChannel})).f(tls, uintptr(0), chan1) // prevent closing
		(*struct {
			f func(*libc.TLS, uintptr, Tcl_Channel) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnregisterChannel})).f(tls, interp, chan1)

		(*struct{ f func(*libc.TLS, Tcl_Channel) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CutChannel})).f(tls, chan1)

		// Remember the channel in the pool of detached channels

		det = (*struct {
			f func(*libc.TLS, uint32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(unsafe.Sizeof(TestChannel{})))
		(*TestChannel)(unsafe.Pointer(det)).__chan = chan1
		(*TestChannel)(unsafe.Pointer(det)).nextPtr = firstDetached
		firstDetached = det

		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'c' && libc.Xstrncmp(tls, cmdName, ts+6286, len) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+64, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
				ts+6307, uintptr(0)))
			return TCL_ERROR
		}
		(*struct{ f func(*libc.TLS, Tcl_Channel) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ClearChannelHandlers})).f(tls, chan1)
		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'i' && libc.Xstrncmp(tls, cmdName, ts+6342, len) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+96, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
				ts+6347, uintptr(0)))
			return TCL_ERROR
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 2*8)))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ChannelName})).f(tls, (*Channel)(unsafe.Pointer(chanPtr)).typePtr))
		if (*ChannelState)(unsafe.Pointer(statePtr)).flags&(int32(1)<<1) != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6366 /* "read" */)
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+1355 /* "" */)
		}
		if (*ChannelState)(unsafe.Pointer(statePtr)).flags&(int32(1)<<2) != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6371 /* "write" */)
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+1355 /* "" */)
		}
		if (*ChannelState)(unsafe.Pointer(statePtr)).flags&(int32(1)<<3) != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6377 /* "nonblocking" */)
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6389 /* "blocking" */)
		}
		if (*ChannelState)(unsafe.Pointer(statePtr)).flags&(int32(1)<<4) != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6398 /* "line" */)
		} else if (*ChannelState)(unsafe.Pointer(statePtr)).flags&(int32(1)<<5) != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6403 /* "none" */)
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6408 /* "full" */)
		}
		if (*ChannelState)(unsafe.Pointer(statePtr)).flags&(int32(1)<<7) != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6413 /* "async_flush" */)
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+1355 /* "" */)
		}
		if (*ChannelState)(unsafe.Pointer(statePtr)).flags&(int32(1)<<9) != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6425 /* "eof" */)
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+1355 /* "" */)
		}
		if (*ChannelState)(unsafe.Pointer(statePtr)).flags&(int32(1)<<11) != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6429 /* "blocked" */)
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6437 /* "unblocked" */)
		}
		if (*ChannelState)(unsafe.Pointer(statePtr)).inputTranslation == TCL_TRANSLATE_AUTO {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6447 /* "auto" */)
			if (*ChannelState)(unsafe.Pointer(statePtr)).flags&(int32(1)<<12) != 0 {
				(*struct {
					f func(*libc.TLS, uintptr, uintptr)
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6452 /* "saw_cr" */)
			} else {
				(*struct {
					f func(*libc.TLS, uintptr, uintptr)
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+1355 /* "" */)
			}
		} else if (*ChannelState)(unsafe.Pointer(statePtr)).inputTranslation == TCL_TRANSLATE_LF {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6459 /* "lf" */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+1355 /* "" */)
		} else if (*ChannelState)(unsafe.Pointer(statePtr)).inputTranslation == TCL_TRANSLATE_CR {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6462 /* "cr" */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+1355 /* "" */)
		} else if (*ChannelState)(unsafe.Pointer(statePtr)).inputTranslation == TCL_TRANSLATE_CRLF {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6465 /* "crlf" */)
			if (*ChannelState)(unsafe.Pointer(statePtr)).flags&(int32(1)<<12) != 0 {
				(*struct {
					f func(*libc.TLS, uintptr, uintptr)
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6470 /* "queued_cr" */)
			} else {
				(*struct {
					f func(*libc.TLS, uintptr, uintptr)
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+1355 /* "" */)
			}
		}
		if (*ChannelState)(unsafe.Pointer(statePtr)).outputTranslation == TCL_TRANSLATE_AUTO {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6447 /* "auto" */)
		} else if (*ChannelState)(unsafe.Pointer(statePtr)).outputTranslation == TCL_TRANSLATE_LF {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6459 /* "lf" */)
		} else if (*ChannelState)(unsafe.Pointer(statePtr)).outputTranslation == TCL_TRANSLATE_CR {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6462 /* "cr" */)
		} else if (*ChannelState)(unsafe.Pointer(statePtr)).outputTranslation == TCL_TRANSLATE_CRLF {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6465 /* "crlf" */)
		}
		IOQueued = (*struct {
			f func(*libc.TLS, Tcl_Channel) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_InputBuffered})).f(tls, chan1)
		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+584 /* &buf[0] */, int32(IOQueued))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, bp+584 /* &buf[0] */)

		IOQueued = (*struct {
			f func(*libc.TLS, Tcl_Channel) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_OutputBuffered})).f(tls, chan1)
		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+584 /* &buf[0] */, int32(IOQueued))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, bp+584 /* &buf[0] */)

		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+584 /* &buf[0] */, int32(int32((*struct {
			f func(*libc.TLS, Tcl_Channel) Tcl_WideInt
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Tell})).f(tls, chan1))))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, bp+584 /* &buf[0] */)

		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+584 /* &buf[0] */, int32((*ChannelState)(unsafe.Pointer(statePtr)).refCount))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, bp+584 /* &buf[0] */)

		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'i' && libc.Xstrncmp(tls, cmdName, ts+6480, len) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+128, ts+6494 /* "channel name req..." */, uintptr(0)))
			return TCL_ERROR
		}
		IOQueued = (*struct {
			f func(*libc.TLS, Tcl_Channel) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_InputBuffered})).f(tls, chan1)
		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+584 /* &buf[0] */, int32(IOQueued))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+144, bp+584 /* &buf[0] */, uintptr(0)))
		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'i' && libc.Xstrncmp(tls, cmdName, ts+6516, len) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+160, ts+6494 /* "channel name req..." */, uintptr(0)))
			return TCL_ERROR
		}

		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+584 /* &buf[0] */, int32((*struct {
			f func(*libc.TLS, Tcl_Channel) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_IsChannelShared})).f(tls, chan1)))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+176, bp+584 /* &buf[0] */, uintptr(0)))
		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'i' && libc.Xstrncmp(tls, cmdName, ts+6525, len) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+192, ts+6494 /* "channel name req..." */, uintptr(0)))
			return TCL_ERROR
		}

		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+584 /* &buf[0] */, int32((*struct {
			f func(*libc.TLS, Tcl_Channel) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_IsStandardChannel})).f(tls, chan1)))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+208, bp+584 /* &buf[0] */, uintptr(0)))
		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'm' && libc.Xstrncmp(tls, cmdName, ts+6536, len) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+224, ts+6494 /* "channel name req..." */, uintptr(0)))
			return TCL_ERROR
		}

		if (*ChannelState)(unsafe.Pointer(statePtr)).flags&(int32(1)<<1) != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6366 /* "read" */)
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+1355 /* "" */)
		}
		if (*ChannelState)(unsafe.Pointer(statePtr)).flags&(int32(1)<<2) != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+6371 /* "write" */)
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, ts+1355 /* "" */)
		}
		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'm' && libc.Xstrncmp(tls, cmdName, ts+6541, len) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+240, ts+6494 /* "channel name req..." */, uintptr(0)))
			return TCL_ERROR
		}

		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
			f func(*libc.TLS, Tcl_WideInt) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewWideIntObj})).f(tls,
			Tcl_WideInt((*struct {
				f func(*libc.TLS, Tcl_Channel) Tcl_ThreadId
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetChannelThread})).f(tls, chan1))))
		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'n' && libc.Xstrncmp(tls, cmdName, ts+1652, len) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+256, ts+6494 /* "channel name req..." */, uintptr(0)))
			return TCL_ERROR
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+272, (*ChannelState)(unsafe.Pointer(statePtr)).channelName, uintptr(0)))
		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'o' && libc.Xstrncmp(tls, cmdName, ts+6549, len) == 0 {
		hTblPtr = (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) ClientData
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetAssocData})).f(tls, interp, ts+6554 /* "tclIO" */, uintptr(0))
		if hTblPtr == uintptr(0) {
			return TCL_OK
		}
		for hPtr = (*struct {
			f func(*libc.TLS, uintptr, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FirstHashEntry})).f(tls, hTblPtr, bp+608 /* &hSearch */); hPtr != uintptr(0); hPtr = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NextHashEntry})).f(tls, bp+608 /* &hSearch */) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, func() uintptr {
				if (*Tcl_HashTable)(unsafe.Pointer(hTblPtr)).keyType == 1 || (*Tcl_HashTable)(unsafe.Pointer(hTblPtr)).keyType == -1 {
					return *(*uintptr)(unsafe.Pointer(hPtr + 32))
				}
				return hPtr + 32 /* &.key */
			}())
		}
		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'o' && libc.Xstrncmp(tls, cmdName, ts+6560, len) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+288, ts+6494 /* "channel name req..." */, uintptr(0)))
			return TCL_ERROR
		}

		IOQueued = (*struct {
			f func(*libc.TLS, Tcl_Channel) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_OutputBuffered})).f(tls, chan1)
		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+584 /* &buf[0] */, int32(IOQueued))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+304, bp+584 /* &buf[0] */, uintptr(0)))
		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'q' && libc.Xstrncmp(tls, cmdName, ts+6575, len) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+320, ts+6494 /* "channel name req..." */, uintptr(0)))
			return TCL_ERROR
		}

		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp,
			libc.VaList(bp+336, func() uintptr {
				if (*ChannelState)(unsafe.Pointer(statePtr)).flags&(int32(1)<<12) != 0 {
					return ts + 6584 /* "1" */
				}
				return ts + 6586 /* "0" */
			}(), uintptr(0)))
		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'r' && libc.Xstrncmp(tls, cmdName, ts+6588, len) == 0 {
		hTblPtr = (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) ClientData
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetAssocData})).f(tls, interp, ts+6554 /* "tclIO" */, uintptr(0))
		if hTblPtr == uintptr(0) {
			return TCL_OK
		}
		for hPtr = (*struct {
			f func(*libc.TLS, uintptr, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FirstHashEntry})).f(tls, hTblPtr, bp+608 /* &hSearch */); hPtr != uintptr(0); hPtr = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NextHashEntry})).f(tls, bp+608 /* &hSearch */) {
			chanPtr = (*Tcl_HashEntry)(unsafe.Pointer(hPtr)).clientData
			statePtr = (*Channel)(unsafe.Pointer(chanPtr)).state
			if (*ChannelState)(unsafe.Pointer(statePtr)).flags&(int32(1)<<1) != 0 {
				(*struct {
					f func(*libc.TLS, uintptr, uintptr)
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, func() uintptr {
					if (*Tcl_HashTable)(unsafe.Pointer(hTblPtr)).keyType == 1 || (*Tcl_HashTable)(unsafe.Pointer(hTblPtr)).keyType == -1 {
						return *(*uintptr)(unsafe.Pointer(hPtr + 32))
					}
					return hPtr + 32
				}())
			}
		}
		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'r' && libc.Xstrncmp(tls, cmdName, ts+6597, len) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+352, ts+6494 /* "channel name req..." */, uintptr(0)))
			return TCL_ERROR
		}

		(*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclFormatInt})).f(tls, bp+584 /* &buf[0] */, int32((*ChannelState)(unsafe.Pointer(statePtr)).refCount))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+368, bp+584 /* &buf[0] */, uintptr(0)))
		return TCL_OK
	}

	// "splice" is actually more a simplified attach facility as provided by
	// the Thread package. Without the safeguards of a regular command (no
	// checking that the command is truly cut'able, no mutexes for
	// thread-safety). Its complementary command is "cut", see above.

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 's' && libc.Xstrncmp(tls, cmdName, ts+6219, len) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+384, ts+6494 /* "channel name req..." */, uintptr(0)))
			return TCL_ERROR
		}

		(*struct{ f func(*libc.TLS, Tcl_Channel) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SpliceChannel})).f(tls, chan1)

		(*struct {
			f func(*libc.TLS, uintptr, Tcl_Channel)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_RegisterChannel})).f(tls, interp, chan1)
		(*struct {
			f func(*libc.TLS, uintptr, Tcl_Channel) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnregisterChannel})).f(tls, uintptr(0), chan1)

		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 't' && libc.Xstrncmp(tls, cmdName, ts+6606, len) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+400, ts+6494 /* "channel name req..." */, uintptr(0)))
			return TCL_ERROR
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+416, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ChannelName})).f(tls, (*Channel)(unsafe.Pointer(chanPtr)).typePtr), uintptr(0)))
		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'w' && libc.Xstrncmp(tls, cmdName, ts+6611, len) == 0 {
		hTblPtr = (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) ClientData
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetAssocData})).f(tls, interp, ts+6554 /* "tclIO" */, uintptr(0))
		if hTblPtr == uintptr(0) {
			return TCL_OK
		}
		for hPtr = (*struct {
			f func(*libc.TLS, uintptr, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FirstHashEntry})).f(tls, hTblPtr, bp+608 /* &hSearch */); hPtr != uintptr(0); hPtr = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NextHashEntry})).f(tls, bp+608 /* &hSearch */) {
			chanPtr = (*Tcl_HashEntry)(unsafe.Pointer(hPtr)).clientData
			statePtr = (*Channel)(unsafe.Pointer(chanPtr)).state
			if (*ChannelState)(unsafe.Pointer(statePtr)).flags&(int32(1)<<2) != 0 {
				(*struct {
					f func(*libc.TLS, uintptr, uintptr)
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendElement})).f(tls, interp, func() uintptr {
					if (*Tcl_HashTable)(unsafe.Pointer(hTblPtr)).keyType == 1 || (*Tcl_HashTable)(unsafe.Pointer(hTblPtr)).keyType == -1 {
						return *(*uintptr)(unsafe.Pointer(hPtr + 32))
					}
					return hPtr + 32
				}())
			}
		}
		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 't' && libc.Xstrncmp(tls, cmdName, ts+6620, len) == 0 {
		// Syntax: transform channel -command command

		if argc != 5 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+432, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
				ts+6630, uintptr(0)))
			return TCL_ERROR
		}
		if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 3*8)), ts+6665) != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+464, ts+6674 /* "bad argument \"" */, *(*uintptr)(unsafe.Pointer(argv + 3*8)),
				ts+6689, uintptr(0)))
			return TCL_ERROR
		}

		return (*struct {
			f func(*libc.TLS, uintptr, Tcl_Channel, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclChannelTransform})).f(tls, interp, chan1,
			(*struct {
				f func(*libc.TLS, uintptr, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, *(*uintptr)(unsafe.Pointer(argv + 4*8)), -1))
	}

	if int32(*(*int8)(unsafe.Pointer(cmdName))) == 'u' && libc.Xstrncmp(tls, cmdName, ts+6713, len) == 0 {
		// Syntax: unstack channel

		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+496, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
				ts+6721, uintptr(0)))
			return TCL_ERROR
		}
		return (*struct {
			f func(*libc.TLS, uintptr, Tcl_Channel) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UnstackChannel})).f(tls, interp, chan1)
	}

	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+528, ts+1302 /* "bad option \"" */, cmdName,

		ts+6739, uintptr(0)))
	return TCL_ERROR
}

//----------------------------------------------------------------------
//
// TestChannelEventCmd --
//
//	This procedure implements the "testchannelevent" command. It is used
//	to test the Tcl channel event mechanism.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Creates, deletes and returns channel event handlers.
//
//----------------------------------------------------------------------

func TestChannelEventCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:5856:1: */
	bp := tls.Alloc(420)
	defer tls.Free(420)

	var resultListPtr uintptr
	var chanPtr uintptr
	var statePtr uintptr // state info for channel
	var esPtr uintptr
	var prevEsPtr uintptr
	var nextEsPtr uintptr
	var cmd uintptr
	// var index int32 at bp+416, 4

	var i int32
	var mask int32
	var len int32

	if argc < 3 || argc > 5 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+6854, uintptr(0)))
		return TCL_ERROR
	}
	chanPtr = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) Tcl_Channel
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetChannel})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)), uintptr(0))
	if chanPtr == uintptr(0) {
		return TCL_ERROR
	}
	statePtr = (*Channel)(unsafe.Pointer(chanPtr)).state

	cmd = *(*uintptr)(unsafe.Pointer(argv + 2*8))
	len = int32(libc.Xstrlen(tls, cmd))
	if int32(*(*int8)(unsafe.Pointer(cmd))) == 'a' && libc.Xstrncmp(tls, cmd, ts+6886, uint64(len)) == 0 {
		if argc != 5 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+32, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
				ts+6890, uintptr(0)))
			return TCL_ERROR
		}
		if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 3*8)), ts+6588) == 0 {
			mask = int32(1) << 1
		} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 3*8)), ts+6611) == 0 {
			mask = int32(1) << 2
		} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 3*8)), ts+6403) == 0 {
			mask = 0
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+64, ts+6925 /* "bad event name \"" */, *(*uintptr)(unsafe.Pointer(argv + 3*8)),
				ts+6942, uintptr(0)))
			return TCL_ERROR
		}

		esPtr = (*struct {
			f func(*libc.TLS, uint32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(unsafe.Sizeof(EventScriptRecord{})))
		(*EventScriptRecord)(unsafe.Pointer(esPtr)).nextPtr = (*ChannelState)(unsafe.Pointer(statePtr)).scriptRecordPtr
		(*ChannelState)(unsafe.Pointer(statePtr)).scriptRecordPtr = esPtr

		(*EventScriptRecord)(unsafe.Pointer(esPtr)).chanPtr = chanPtr
		(*EventScriptRecord)(unsafe.Pointer(esPtr)).interp = interp
		(*EventScriptRecord)(unsafe.Pointer(esPtr)).mask = mask
		(*EventScriptRecord)(unsafe.Pointer(esPtr)).scriptPtr = (*struct {
			f func(*libc.TLS, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, *(*uintptr)(unsafe.Pointer(argv + 4*8)), -1)
		(*Tcl_Obj)(unsafe.Pointer((*EventScriptRecord)(unsafe.Pointer(esPtr)).scriptPtr)).refCount++

		(*struct {
			f func(*libc.TLS, Tcl_Channel, int32, uintptr, ClientData)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateChannelHandler})).f(tls, chanPtr, mask,
			(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclChannelEventScriptInvoker, esPtr)

		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmd))) == 'd' && libc.Xstrncmp(tls, cmd, ts+1290, uint64(len)) == 0 {
		if argc != 4 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+96, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
				ts+6981, uintptr(0)))
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 3*8)), bp+416) == TCL_ERROR {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 416)) < 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+128, ts+7008 /* "bad event index:..." */, *(*uintptr)(unsafe.Pointer(argv + 3*8)),
				ts+7026, uintptr(0)))
			return TCL_ERROR
		}
		i = 0
		esPtr = (*ChannelState)(unsafe.Pointer(statePtr)).scriptRecordPtr
	__1:
		if !(i < *(*int32)(unsafe.Pointer(bp + 416)) && esPtr != uintptr(0)) {
			goto __3
		}
		{
			// Empty loop body.

		}
		goto __2
	__2:
		i++
		esPtr = (*EventScriptRecord)(unsafe.Pointer(esPtr)).nextPtr
		goto __1
		goto __3
	__3:
		;
		if esPtr == uintptr(0) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+160, ts+7048 /* "bad event index " */, *(*uintptr)(unsafe.Pointer(argv + 3*8)),
				ts+7065, uintptr(0)))
			return TCL_ERROR
		}
		if esPtr == (*ChannelState)(unsafe.Pointer(statePtr)).scriptRecordPtr {
			(*ChannelState)(unsafe.Pointer(statePtr)).scriptRecordPtr = (*EventScriptRecord)(unsafe.Pointer(esPtr)).nextPtr
		} else {
			for prevEsPtr = (*ChannelState)(unsafe.Pointer(statePtr)).scriptRecordPtr; prevEsPtr != uintptr(0) && (*EventScriptRecord)(unsafe.Pointer(prevEsPtr)).nextPtr != esPtr; prevEsPtr = (*EventScriptRecord)(unsafe.Pointer(prevEsPtr)).nextPtr {
				// Empty loop body.
			}
			if prevEsPtr == uintptr(0) {
				(*struct {
					f func(*libc.TLS, uintptr, uintptr)
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Panic})).f(tls, ts+7080 /* "TestChannelEvent..." */, 0)
			}
			(*EventScriptRecord)(unsafe.Pointer(prevEsPtr)).nextPtr = (*EventScriptRecord)(unsafe.Pointer(esPtr)).nextPtr
		}
		(*struct {
			f func(*libc.TLS, Tcl_Channel, uintptr, ClientData)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteChannelHandler})).f(tls, chanPtr,
			(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclChannelEventScriptInvoker, esPtr)
		for ok := true; ok; ok = 0 != 0 {
			var _objPtr uintptr = (*EventScriptRecord)(unsafe.Pointer(esPtr)).scriptPtr
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, esPtr)

		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmd))) == 'l' && libc.Xstrncmp(tls, cmd, ts+7127, uint64(len)) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+192, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
				ts+7132, uintptr(0)))
			return TCL_ERROR
		}
		resultListPtr = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp)
		for esPtr = (*ChannelState)(unsafe.Pointer(statePtr)).scriptRecordPtr; esPtr != uintptr(0); esPtr = (*EventScriptRecord)(unsafe.Pointer(esPtr)).nextPtr {
			if (*EventScriptRecord)(unsafe.Pointer(esPtr)).mask != 0 {
				(*struct {
					f func(*libc.TLS, uintptr, uintptr, uintptr) int32
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, interp, resultListPtr, (*struct {
					f func(*libc.TLS, uintptr, int32) uintptr
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls,
					func() uintptr {
						if (*EventScriptRecord)(unsafe.Pointer(esPtr)).mask == int32(1)<<1 {
							return ts + 6588 /* "readable" */
						}
						return ts + 6611 /* "writable" */
					}(), -1))
			} else {
				(*struct {
					f func(*libc.TLS, uintptr, uintptr, uintptr) int32
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, interp, resultListPtr,
					(*struct {
						f func(*libc.TLS, uintptr, int32) uintptr
					})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+6403 /* "none" */, -1))
			}
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, interp, resultListPtr, (*EventScriptRecord)(unsafe.Pointer(esPtr)).scriptPtr)
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, resultListPtr)
		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmd))) == 'r' && libc.Xstrncmp(tls, cmd, ts+7151, uint64(len)) == 0 {
		if argc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+224, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
				ts+7161, uintptr(0)))
			return TCL_ERROR
		}
		for esPtr = (*ChannelState)(unsafe.Pointer(statePtr)).scriptRecordPtr; esPtr != uintptr(0); esPtr = nextEsPtr {
			nextEsPtr = (*EventScriptRecord)(unsafe.Pointer(esPtr)).nextPtr
			(*struct {
				f func(*libc.TLS, Tcl_Channel, uintptr, ClientData)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteChannelHandler})).f(tls, chanPtr,
				(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclChannelEventScriptInvoker, esPtr)
			for ok1 := true; ok1; ok1 = 0 != 0 {
				var _objPtr uintptr = (*EventScriptRecord)(unsafe.Pointer(esPtr)).scriptPtr
				if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
				}
			}
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, esPtr)
		}
		(*ChannelState)(unsafe.Pointer(statePtr)).scriptRecordPtr = uintptr(0)
		return TCL_OK
	}

	if int32(*(*int8)(unsafe.Pointer(cmd))) == 's' && libc.Xstrncmp(tls, cmd, ts+4039, uint64(len)) == 0 {
		if argc != 5 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+256, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
				ts+7185, uintptr(0)))
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 3*8)), bp+416) == TCL_ERROR {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 416)) < 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+288, ts+7008 /* "bad event index:..." */, *(*uintptr)(unsafe.Pointer(argv + 3*8)),
				ts+7026, uintptr(0)))
			return TCL_ERROR
		}
		i = 0
		esPtr = (*ChannelState)(unsafe.Pointer(statePtr)).scriptRecordPtr
	__4:
		if !(i < *(*int32)(unsafe.Pointer(bp + 416)) && esPtr != uintptr(0)) {
			goto __6
		}
		{
			// Empty loop body.

		}
		goto __5
	__5:
		i++
		esPtr = (*EventScriptRecord)(unsafe.Pointer(esPtr)).nextPtr
		goto __4
		goto __6
	__6:
		;
		if esPtr == uintptr(0) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+320, ts+7048 /* "bad event index " */, *(*uintptr)(unsafe.Pointer(argv + 3*8)),
				ts+7065, uintptr(0)))
			return TCL_ERROR
		}

		if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 4*8)), ts+6588) == 0 {
			mask = int32(1) << 1
		} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 4*8)), ts+6611) == 0 {
			mask = int32(1) << 2
		} else if libc.Xstrcmp(tls, *(*uintptr)(unsafe.Pointer(argv + 4*8)), ts+6403) == 0 {
			mask = 0
		} else {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+352, ts+6925 /* "bad event name \"" */, *(*uintptr)(unsafe.Pointer(argv + 4*8)),
				ts+6942, uintptr(0)))
			return TCL_ERROR
		}
		(*EventScriptRecord)(unsafe.Pointer(esPtr)).mask = mask
		(*struct {
			f func(*libc.TLS, Tcl_Channel, int32, uintptr, ClientData)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateChannelHandler})).f(tls, chanPtr, mask,
			(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclChannelEventScriptInvoker, esPtr)
		return TCL_OK
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+384, ts+7218 /* "bad command " */, cmd,
		ts+7231, uintptr(0)))
	return TCL_ERROR
}

//----------------------------------------------------------------------
//
// TestServiceModeCmd --
//
//	This procedure implements the "testservicemode" command which gets or
//      sets the current Tcl ServiceMode.  There are several tests which open
//      a file and assign various handlers to it.  For these tests to be
//      deterministic it is important that file events not be processed until
//      all of the handlers are in place.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	May change the ServiceMode setting.
//
//----------------------------------------------------------------------

func TestServiceModeCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:6072:1: */
	bp := tls.Alloc(36)
	defer tls.Free(36)

	// var newmode int32 at bp+32, 4

	var oldmode int32
	if argc > 2 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1356 /* "wrong # args: sh..." */, *(*uintptr)(unsafe.Pointer(argv)),
			ts+7285, uintptr(0)))
		return TCL_ERROR
	}
	oldmode = libc.Bool32((*struct{ f func(*libc.TLS) int32 })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetServiceMode})).f(tls) != TCL_SERVICE_NONE)
	if argc == 2 {
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + 1*8)), bp+32) == TCL_ERROR {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 32)) == 0 {
			(*struct{ f func(*libc.TLS, int32) int32 })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetServiceMode})).f(tls, TCL_SERVICE_NONE)
		} else {
			(*struct{ f func(*libc.TLS, int32) int32 })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetServiceMode})).f(tls, TCL_SERVICE_ALL)
		}
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, oldmode))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestWrongNumArgsObjCmd --
//
//	Test the Tcl_WrongNumArgs function.
//
// Results:
//	Standard Tcl result.
//
// Side effects:
//	Sets interpreter result.
//
//----------------------------------------------------------------------

func TestWrongNumArgsObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:6116:1: */
	bp := tls.Alloc(8)
	defer tls.Free(8)

	// var i int32 at bp, 4

	// var length int32 at bp+4, 4

	var msg uintptr

	if objc < 3 {
		// Don't use Tcl_WrongNumArgs here, as that is the function
		// we want to test!
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+7297 /* "insufficient arg..." */, uintptr(0))
		return TCL_ERROR
	}

	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp) != TCL_OK {
		return TCL_ERROR
	}

	msg = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)), bp+4 /* &length */)
	if *(*int32)(unsafe.Pointer(bp + 4)) == 0 {
		msg = uintptr(0)
	}

	if *(*int32)(unsafe.Pointer(bp)) > objc-3 {
		// Asked for more arguments than were given.
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+7297 /* "insufficient arg..." */, uintptr(0))
		return TCL_ERROR
	}

	(*struct {
		f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, *(*int32)(unsafe.Pointer(bp /* i */)), objv+3*8, msg)
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestGetIndexFromObjStructObjCmd --
//
//	Test the Tcl_GetIndexFromObjStruct function.
//
// Results:
//	Standard Tcl result.
//
// Side effects:
//	Sets interpreter result.
//
//----------------------------------------------------------------------

func TestGetIndexFromObjStructObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:6172:1: */
	bp := tls.Alloc(208)
	defer tls.Free(208)

	*(*[8]uintptr)(unsafe.Pointer(bp + 72 /* ary */)) = [8]uintptr{
		ts + 5774, ts + 7320, ts + 7322, ts + 7324, ts + 2388, ts + 2390, uintptr(0), uintptr(0),
	}
	// var idx int32 at bp+136, 4

	// var target int32 at bp+140, 4

	if objc != 3 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+7326 /* "argument targetv..." */)
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp+72, int32(uint64(2)*uint64(unsafe.Sizeof(uintptr(0)))),
		ts+7347, 0, bp+136) != TCL_OK {
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 2*8)), bp+140) != TCL_OK {
		return TCL_ERROR
	}
	if *(*int32)(unsafe.Pointer(bp + 136)) != *(*int32)(unsafe.Pointer(bp + 140)) {
		// var buffer [64]int8 at bp+144, 64

		libc.Xsprintf(tls, bp+144, ts+5606, libc.VaList(bp, *(*int32)(unsafe.Pointer(bp + 136 /* idx */))))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+8, ts+7353, /* "index value comp..." */
			bp+144, uintptr(0)))
		libc.Xsprintf(tls, bp+144, ts+5606, libc.VaList(bp+32, *(*int32)(unsafe.Pointer(bp + 140 /* target */))))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+40, ts+7389 /* " when " */, bp+144 /* &buffer[0] */, ts+7396 /* " expected" */, uintptr(0)))
		return TCL_ERROR
	}
	(*struct {
		f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 3, objv, uintptr(0))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestFilesystemObjCmd --
//
//	This procedure implements the "testfilesystem" command. It is used to
//	test Tcl_FSRegister, Tcl_FSUnregister, and can be used to test that
//	the pluggable filesystem works.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Inserts or removes a filesystem from Tcl's stack.
//
//----------------------------------------------------------------------

func TestFilesystemObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:6226:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	var res int32
	// var boolVal int32 at bp, 4

	var msg uintptr

	if objc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+7406 /* "boolean" */)
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBooleanFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp) != TCL_OK {
		return TCL_ERROR
	}
	if *(*int32)(unsafe.Pointer(bp)) != 0 {
		res = (*struct {
			f func(*libc.TLS, ClientData, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSRegister})).f(tls, interp, uintptr(unsafe.Pointer(&testReportingFilesystem)))
		if res == TCL_OK {
			msg = ts + 7414 /* "registered" */
		} else {
			msg = ts + 7425 /* "failed" */
		}
	} else {
		res = (*struct {
			f func(*libc.TLS, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSUnregister})).f(tls, uintptr(unsafe.Pointer(&testReportingFilesystem)))
		if res == TCL_OK {
			msg = ts + 7432 /* "unregistered" */
		} else {
			msg = ts + 7425 /* "failed" */
		}
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, msg, -1))
	return res
}

func TestReportInFilesystem(tls *libc.TLS, pathPtr uintptr, clientDataPtr uintptr) int32 { /* tclTest.c:6254:1: */
	var newPathPtr uintptr

	if pathPtr == lastPathPtr {
		// Reject all files second time around
		return -1
	}

	// Try to claim all files first time around

	newPathPtr = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, pathPtr)
	lastPathPtr = newPathPtr
	(*Tcl_Obj)(unsafe.Pointer(newPathPtr)).refCount++
	if (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSGetFileSystemForPath})).f(tls, newPathPtr) == uintptr(0) {
		// Nothing claimed it. Therefore we don't either
		for ok := true; ok; ok = 0 != 0 {
			var _objPtr uintptr = newPathPtr
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
		lastPathPtr = uintptr(0)
		return -1
	}
	lastPathPtr = uintptr(0)
	*(*ClientData)(unsafe.Pointer(clientDataPtr)) = newPathPtr
	return TCL_OK
}

var lastPathPtr uintptr = uintptr(0) /* tclTest.c:6258:20 */

// Simple helper function to extract the native vfs representation of a path
// object, or NULL if no such representation exists.

func TestReportGetNativePath(tls *libc.TLS, pathPtr uintptr) uintptr { /* tclTest.c:6287:16: */
	return (*struct {
		f func(*libc.TLS, uintptr, uintptr) ClientData
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSGetInternalRep})).f(tls, pathPtr, uintptr(unsafe.Pointer(&testReportingFilesystem)))
}

func TestReportFreeInternalRep(tls *libc.TLS, clientData ClientData) { /* tclTest.c:6295:1: */
	var nativeRep uintptr = clientData

	if nativeRep != uintptr(0) {
		// Free the path
		for ok := true; ok; ok = 0 != 0 {
			var _objPtr uintptr = nativeRep
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
	}
}

func TestReportDupInternalRep(tls *libc.TLS, clientData ClientData) ClientData { /* tclTest.c:6307:1: */
	var original uintptr = clientData

	(*Tcl_Obj)(unsafe.Pointer(original)).refCount++
	return clientData
}

func TestReport(tls *libc.TLS, cmd uintptr, path uintptr, arg2 uintptr) { /* tclTest.c:6317:1: */
	bp := tls.Alloc(216)
	defer tls.Free(216)

	var interp uintptr = (*struct {
		f func(*libc.TLS, uintptr) ClientData
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSData})).f(tls, uintptr(unsafe.Pointer(&testReportingFilesystem)))

	if interp == uintptr(0) {
		// This is bad, but not much we can do about it
	} else {
		var savedResult uintptr
		// var ds Tcl_DString at bp, 216

		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringInit})).f(tls, bp /* &ds */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringAppend})).f(tls, bp /* &ds */, ts+7445 /* "lappend filesyst..." */, -1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringStartSublist})).f(tls, bp /* &ds */)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringAppendElement})).f(tls, bp /* &ds */, cmd)
		if path != uintptr(0) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringAppendElement})).f(tls, bp /* &ds */, (*struct {
				f func(*libc.TLS, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, path))
		}
		if arg2 != uintptr(0) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringAppendElement})).f(tls, bp /* &ds */, (*struct {
				f func(*libc.TLS, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, arg2))
		}
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringEndSublist})).f(tls, bp /* &ds */)
		savedResult = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp)
		(*Tcl_Obj)(unsafe.Pointer(savedResult)).refCount++
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewObj})).f(tls))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Eval})).f(tls, interp, (*Tcl_DString)(unsafe.Pointer(bp /* &ds */)).string)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringFree})).f(tls, bp /* &ds */)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ResetResult})).f(tls, interp)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, savedResult)
		for ok := true; ok; ok = 0 != 0 {
			var _objPtr uintptr = savedResult
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
	}
}

func TestReportStat(tls *libc.TLS, path uintptr, buf uintptr) int32 { /* tclTest.c:6353:1: */
	TestReport(tls, ts+7471, path, uintptr(0))
	return (*struct {
		f func(*libc.TLS, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSStat})).f(tls, TestReportGetNativePath(tls, path), buf)
}

func TestReportLstat(tls *libc.TLS, path uintptr, buf uintptr) int32 { /* tclTest.c:6362:1: */
	TestReport(tls, ts+7476, path, uintptr(0))
	return (*struct {
		f func(*libc.TLS, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSLstat})).f(tls, TestReportGetNativePath(tls, path), buf)
}

func TestReportAccess(tls *libc.TLS, path uintptr, mode int32) int32 { /* tclTest.c:6371:1: */
	TestReport(tls, ts+7482, path, uintptr(0))
	return (*struct {
		f func(*libc.TLS, uintptr, int32) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSAccess})).f(tls, TestReportGetNativePath(tls, path), mode)
}

func TestReportOpenFileChannel(tls *libc.TLS, interp uintptr, fileName uintptr, mode int32, permissions int32) Tcl_Channel { /* tclTest.c:6380:1: */
	TestReport(tls, ts+6549, fileName, uintptr(0))
	return (*struct {
		f func(*libc.TLS, uintptr, uintptr, int32, int32) Tcl_Channel
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclpOpenFileChannel})).f(tls, interp, TestReportGetNativePath(tls, fileName),
		mode, permissions)
}

func TestReportMatchInDirectory(tls *libc.TLS, interp uintptr, resultPtr uintptr, dirPtr uintptr, pattern uintptr, types1 uintptr) int32 { /* tclTest.c:6394:1: */
	if types1 != uintptr(0) && (*Tcl_GlobTypeData)(unsafe.Pointer(types1)).__type&(int32(1)<<7) != 0 {
		TestReport(tls, ts+7489, dirPtr, uintptr(0))
		return TCL_OK
	} else {
		TestReport(tls, ts+7501, dirPtr, uintptr(0))
		return (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSMatchInDirectory})).f(tls, interp, resultPtr,
			TestReportGetNativePath(tls, dirPtr), pattern, types1)
	}
	return int32(0)
}

func TestReportChdir(tls *libc.TLS, dirName uintptr) int32 { /* tclTest.c:6413:1: */
	TestReport(tls, ts+7518, dirName, uintptr(0))
	return (*struct {
		f func(*libc.TLS, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSChdir})).f(tls, TestReportGetNativePath(tls, dirName))
}

func TestReportLoadFile(tls *libc.TLS, interp uintptr, fileName uintptr, handlePtr uintptr, unloadProcPtr uintptr) int32 { /* tclTest.c:6421:1: */
	TestReport(tls, ts+7524, fileName, uintptr(0))
	return (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSLoadFile})).f(tls, interp, TestReportGetNativePath(tls, fileName), uintptr(0),
		uintptr(0), uintptr(0), uintptr(0), handlePtr, unloadProcPtr)
}

func TestReportLink(tls *libc.TLS, path uintptr, to uintptr, linkType int32) uintptr { /* tclTest.c:6438:16: */
	TestReport(tls, ts+7533, path, to)
	return (*struct {
		f func(*libc.TLS, uintptr, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSLink})).f(tls, TestReportGetNativePath(tls, path), to, linkType)
}

func TestReportRenameFile(tls *libc.TLS, src uintptr, dst uintptr) int32 { /* tclTest.c:6449:1: */
	TestReport(tls, ts+7538, src, dst)
	return (*struct {
		f func(*libc.TLS, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSRenameFile})).f(tls, TestReportGetNativePath(tls, src),
		TestReportGetNativePath(tls, dst))
}

func TestReportCopyFile(tls *libc.TLS, src uintptr, dst uintptr) int32 { /* tclTest.c:6461:1: */
	TestReport(tls, ts+7549, src, dst)
	return (*struct {
		f func(*libc.TLS, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSCopyFile})).f(tls, TestReportGetNativePath(tls, src),
		TestReportGetNativePath(tls, dst))
}

func TestReportDeleteFile(tls *libc.TLS, path uintptr) int32 { /* tclTest.c:6471:1: */
	TestReport(tls, ts+7558, path, uintptr(0))
	return (*struct {
		f func(*libc.TLS, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSDeleteFile})).f(tls, TestReportGetNativePath(tls, path))
}

func TestReportCreateDirectory(tls *libc.TLS, path uintptr) int32 { /* tclTest.c:6479:1: */
	TestReport(tls, ts+7569, path, uintptr(0))
	return (*struct {
		f func(*libc.TLS, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSCreateDirectory})).f(tls, TestReportGetNativePath(tls, path))
}

func TestReportCopyDirectory(tls *libc.TLS, src uintptr, dst uintptr, errorPtr uintptr) int32 { /* tclTest.c:6487:1: */
	TestReport(tls, ts+7585, src, dst)
	return (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSCopyDirectory})).f(tls, TestReportGetNativePath(tls, src),
		TestReportGetNativePath(tls, dst), errorPtr)
}

func TestReportRemoveDirectory(tls *libc.TLS, path uintptr, recursive int32, errorPtr uintptr) int32 { /* tclTest.c:6500:1: */
	TestReport(tls, ts+7599, path, uintptr(0))
	return (*struct {
		f func(*libc.TLS, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSRemoveDirectory})).f(tls, TestReportGetNativePath(tls, path), recursive,
		errorPtr)
}

func TestReportFileAttrStrings(tls *libc.TLS, fileName uintptr, objPtrRef uintptr) uintptr { /* tclTest.c:6514:19: */
	TestReport(tls, ts+7615, fileName, uintptr(0))
	return (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSFileAttrStrings})).f(tls, TestReportGetNativePath(tls, fileName), objPtrRef)
}

func TestReportFileAttrsGet(tls *libc.TLS, interp uintptr, index int32, fileName uintptr, objPtrRef uintptr) int32 { /* tclTest.c:6524:1: */
	TestReport(tls, ts+7636, fileName, uintptr(0))
	return (*struct {
		f func(*libc.TLS, uintptr, int32, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSFileAttrsGet})).f(tls, interp, index,
		TestReportGetNativePath(tls, fileName), objPtrRef)
}

func TestReportFileAttrsSet(tls *libc.TLS, interp uintptr, index int32, fileName uintptr, objPtr uintptr) int32 { /* tclTest.c:6536:1: */
	TestReport(tls, ts+7654, fileName, objPtr)
	return (*struct {
		f func(*libc.TLS, uintptr, int32, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSFileAttrsSet})).f(tls, interp, index,
		TestReportGetNativePath(tls, fileName), objPtr)
}

func TestReportUtime(tls *libc.TLS, fileName uintptr, tval uintptr) int32 { /* tclTest.c:6548:1: */
	TestReport(tls, ts+7672, fileName, uintptr(0))
	return (*struct {
		f func(*libc.TLS, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSUtime})).f(tls, TestReportGetNativePath(tls, fileName), tval)
}

func TestReportNormalizePath(tls *libc.TLS, interp uintptr, pathPtr uintptr, nextCheckpoint int32) int32 { /* tclTest.c:6557:1: */
	TestReport(tls, ts+7678, pathPtr, uintptr(0))
	return nextCheckpoint
}

func SimplePathInFilesystem(tls *libc.TLS, pathPtr uintptr, clientDataPtr uintptr) int32 { /* tclTest.c:6567:1: */
	var str uintptr = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, pathPtr)

	if libc.Xstrncmp(tls, str, ts+7692, uint64(10)) != 0 {
		return -1
	}
	return TCL_OK
}

// This is a slightly 'hacky' filesystem which is used just to test a few
// important features of the vfs code: (1) that you can load a shared library
// from a vfs, (2) that when copying files from one fs to another, the 'mtime'
// is preserved. (3) that recursive cross-filesystem directory copies have the
// correct behaviour with/without -force.
//
// It treats any file in 'simplefs:/' as a file, which it routes to the
// current directory. The real file it uses is whatever follows the trailing
// '/' (e.g. 'foo' in 'simplefs:/foo'), and that file exists or not according
// to what is in the native pwd.
//
// Please do not consider this filesystem a model of how things are to be
// done. It is quite the opposite!  But, it does allow us to test some
// important features.

func TestSimpleFilesystemObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:6597:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	var res int32
	// var boolVal int32 at bp, 4

	var msg uintptr

	if objc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+7406 /* "boolean" */)
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBooleanFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp) != TCL_OK {
		return TCL_ERROR
	}
	if *(*int32)(unsafe.Pointer(bp)) != 0 {
		res = (*struct {
			f func(*libc.TLS, ClientData, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSRegister})).f(tls, interp, uintptr(unsafe.Pointer(&simpleFilesystem)))
		if res == TCL_OK {
			msg = ts + 7414 /* "registered" */
		} else {
			msg = ts + 7425 /* "failed" */
		}
	} else {
		res = (*struct {
			f func(*libc.TLS, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSUnregister})).f(tls, uintptr(unsafe.Pointer(&simpleFilesystem)))
		if res == TCL_OK {
			msg = ts + 7432 /* "unregistered" */
		} else {
			msg = ts + 7425 /* "failed" */
		}
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, msg, -1))
	return res
}

// Treats a file name 'simplefs:/foo' by using the file 'foo' in the current
// (native) directory.

func SimpleRedirect(tls *libc.TLS, pathPtr uintptr) uintptr { /* tclTest.c:6629:16: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	// var len int32 at bp, 4

	var str uintptr
	var origPtr uintptr

	// We assume the same name in the current directory is ok.

	str = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, pathPtr, bp /* &len */)
	if *(*int32)(unsafe.Pointer(bp)) < 10 || libc.Xstrncmp(tls, str, ts+7692, uint64(10)) != 0 {
		// Probably shouldn't ever reach here
		(*Tcl_Obj)(unsafe.Pointer(pathPtr)).refCount++
		return pathPtr
	}
	origPtr = (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, str+uintptr(10), -1)
	(*Tcl_Obj)(unsafe.Pointer(origPtr)).refCount++
	return origPtr
}

func SimpleMatchInDirectory(tls *libc.TLS, interp uintptr, resultPtr uintptr, dirPtr uintptr, pattern uintptr, types1 uintptr) int32 { /* tclTest.c:6653:1: */
	bp := tls.Alloc(16)
	defer tls.Free(16)

	var res int32
	var origPtr uintptr
	var resPtr uintptr

	// We only provide a new volume, therefore no mounts at all
	if types1 != uintptr(0) && (*Tcl_GlobTypeData)(unsafe.Pointer(types1)).__type&(int32(1)<<7) != 0 {
		return TCL_OK
	}

	// We assume the same name in the current directory is ok.
	resPtr = (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewObj})).f(tls)
	(*Tcl_Obj)(unsafe.Pointer(resPtr)).refCount++
	origPtr = SimpleRedirect(tls, dirPtr)
	res = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSMatchInDirectory})).f(tls, interp, resPtr, origPtr, pattern, types1)
	if res == TCL_OK {
		// var gLength int32 at bp, 4

		var j int32
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjLength})).f(tls, uintptr(0), resPtr, bp /* &gLength */)
		for j = 0; j < *(*int32)(unsafe.Pointer(bp /* gLength */)); j++ {
			// var gElt uintptr at bp+8, 8

			var nElt uintptr
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, int32, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjIndex})).f(tls, uintptr(0), resPtr, j, bp+8 /* &gElt */)
			nElt = (*struct {
				f func(*libc.TLS, uintptr, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+7692 /* "simplefs:/" */, 10)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendObjToObj})).f(tls, nElt, *(*uintptr)(unsafe.Pointer(bp + 8 /* gElt */)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, uintptr(0), resultPtr, nElt)
		}
	}
	for ok := true; ok; ok = 0 != 0 {
		var _objPtr uintptr = origPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}
	for ok1 := true; ok1; ok1 = 0 != 0 {
		var _objPtr uintptr = resPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}
	return res
}

func SimpleOpenFileChannel(tls *libc.TLS, interp uintptr, pathPtr uintptr, mode int32, permissions int32) Tcl_Channel { /* tclTest.c:6695:1: */
	bp := tls.Alloc(16)
	defer tls.Free(16)

	var tempPtr uintptr
	var chan1 Tcl_Channel

	if mode != 0 && !(mode&X_O_RDONLY != 0) {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+7703 /* "read-only" */, uintptr(0)))
		return uintptr(0)
	}

	tempPtr = SimpleRedirect(tls, pathPtr)
	chan1 = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32) Tcl_Channel
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSOpenFileChannel})).f(tls, interp, tempPtr, ts+7713 /* "r" */, permissions)
	for ok := true; ok; ok = 0 != 0 {
		var _objPtr uintptr = tempPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}
	return chan1
}

func SimpleAccess(tls *libc.TLS, pathPtr uintptr, mode int32) int32 { /* tclTest.c:6718:1: */
	var tempPtr uintptr = SimpleRedirect(tls, pathPtr)
	var res int32 = (*struct {
		f func(*libc.TLS, uintptr, int32) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSAccess})).f(tls, tempPtr, mode)

	for ok := true; ok; ok = 0 != 0 {
		var _objPtr uintptr = tempPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}
	return res
}

func SimpleStat(tls *libc.TLS, pathPtr uintptr, bufPtr uintptr) int32 { /* tclTest.c:6730:1: */
	var tempPtr uintptr = SimpleRedirect(tls, pathPtr)
	var res int32 = (*struct {
		f func(*libc.TLS, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_FSStat})).f(tls, tempPtr, bufPtr)

	for ok := true; ok; ok = 0 != 0 {
		var _objPtr uintptr = tempPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}
	return res
}

func SimpleListVolumes(tls *libc.TLS) uintptr { /* tclTest.c:6741:16: */
	// Add one new volume
	var retVal uintptr

	retVal = (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+7692 /* "simplefs:/" */, -1)
	(*Tcl_Obj)(unsafe.Pointer(retVal)).refCount++
	return retVal
}

// Used to check operations of Tcl_UtfNext.
//
// Usage: testutfnext $bytes $offset

func TestUtfNextCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:6759:1: */
	bp := tls.Alloc(72)
	defer tls.Free(72)

	// var numBytes int32 at bp+32, 4
	// Number of bytes supplied in the test string
	// var offset int32 at bp+36, 4
	// Number of bytes we are permitted to read
	var bytes uintptr
	var result uintptr
	var first uintptr
	// var buffer [32]int8 at bp+40, 32

	var p uintptr = uintptr(unsafe.Pointer(&tobetested))
	_ = dummy

	if objc < 2 || objc > 3 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+7715 /* "string ?numBytes..." */)
		return TCL_ERROR
	}

	bytes = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp+32 /* &numBytes */)

	*(*int32)(unsafe.Pointer(bp + 36 /* offset */)) = *(*int32)(unsafe.Pointer(bp + 32)) + TCL_UTF_MAX - 1 // If no constraint is given, allow
	// the terminating NUL to limit
	// operations.

	if objc == 3 {
		if TCL_OK != (*struct {
			f func(*libc.TLS, uintptr, uintptr, int32, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclGetIntForIndex})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 2*8)), *(*int32)(unsafe.Pointer(bp + 32)), bp+36) {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 36)) < 0 {
			*(*int32)(unsafe.Pointer(bp + 36 /* offset */)) = 0
		}
		if *(*int32)(unsafe.Pointer(bp + 36)) > *(*int32)(unsafe.Pointer(bp + 32))+TCL_UTF_MAX-1 {
			*(*int32)(unsafe.Pointer(bp + 36 /* offset */)) = *(*int32)(unsafe.Pointer(bp + 32)) + TCL_UTF_MAX - 1
		}
	}

	if *(*int32)(unsafe.Pointer(bp + 32)) > int32(unsafe.Sizeof([32]int8{}))-3 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
			f func(*libc.TLS, uintptr, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ObjPrintf})).f(tls,
			ts+7733,
			libc.VaList(bp, int32(unsafe.Sizeof([32]int8{}))-4)))
		return TCL_ERROR
	}

	libc.Xmemcpy(tls, bp+40+uintptr(1), bytes, uint64(*(*int32)(unsafe.Pointer(bp + 32 /* numBytes */))))
	*(*int8)(unsafe.Pointer(bp + 40)) = libc.AssignPtrInt8(bp+40+uintptr(*(*int32)(unsafe.Pointer(bp + 32))+1), libc.AssignPtrInt8(bp+40+uintptr(*(*int32)(unsafe.Pointer(bp + 32))+2), libc.AssignPtrInt8(bp+40+uintptr(*(*int32)(unsafe.Pointer(bp + 32))+3), int8(-96))))

	if !((*struct {
		f func(*libc.TLS, uintptr, int32) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UtfCharComplete})).f(tls, bp+40+uintptr(1), *(*int32)(unsafe.Pointer(bp + 36))) != 0) {

		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
			f func(*libc.TLS, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, 0))
		return TCL_OK
	}

	first = libc.AssignUintptr(&result, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UtfNext})).f(tls, bp+40 /* &buffer[0] */ +uintptr(1)))
	for int32(libc.AssignPtrInt8(bp+40, *(*int8)(unsafe.Pointer(libc.PostIncUintptr(&p, 1))))) != 0 {
		// Run Tcl_UtfNext with many more possible bytes at src[-1], all should give the same result
		result = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UtfNext})).f(tls, bp+40 /* &buffer[0] */ +uintptr(1))
		if first != result {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+8, ts+7772 /* "Tcl_UtfNext is n..." */, uintptr(0)))
			return TCL_ERROR
		}
	}
	p = uintptr(unsafe.Pointer(&tobetested))
	for int32(libc.AssignPtrInt8(bp+40+uintptr(*(*int32)(unsafe.Pointer(bp + 32))+1), *(*int8)(unsafe.Pointer(libc.PostIncUintptr(&p, 1))))) != 0 {
		// Run Tcl_UtfNext with many more possible bytes at src[end], all should give the same result
		result = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UtfNext})).f(tls, bp+40 /* &buffer[0] */ +uintptr(1))
		if first != result {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
				f func(*libc.TLS, uintptr, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ObjPrintf})).f(tls,

				ts+7816, libc.VaList(bp+24, int32(uint8(*(*int8)(unsafe.Pointer(p + libc.UintptrFromInt32(-1))))))))
			return TCL_ERROR
		}
	}

	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, int32(int64((first-(bp+40)) /* &buffer[0] */ /1)-int64(1))))

	return TCL_OK
}

var tobetested = *(*[14]int8)(unsafe.Pointer(ts + 7899)) /* tclTest.c:6770:23 */

// Used to check operations of Tcl_UtfPrev.
//
// Usage: testutfprev $bytes $offset

func TestUtfPrevCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:6846:1: */
	bp := tls.Alloc(8)
	defer tls.Free(8)

	// var numBytes int32 at bp, 4

	// var offset int32 at bp+4, 4

	var bytes uintptr
	var result uintptr

	if objc < 2 || objc > 3 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+7913 /* "bytes ?offset?" */)
		return TCL_ERROR
	}

	bytes = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp /* &numBytes */)

	if objc == 3 {
		if TCL_OK != (*struct {
			f func(*libc.TLS, uintptr, uintptr, int32, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclGetIntForIndex})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 2*8)), *(*int32)(unsafe.Pointer(bp)), bp+4) {
			return TCL_ERROR
		}
		if *(*int32)(unsafe.Pointer(bp + 4)) < 0 {
			*(*int32)(unsafe.Pointer(bp + 4 /* offset */)) = 0
		}
		if *(*int32)(unsafe.Pointer(bp + 4)) > *(*int32)(unsafe.Pointer(bp)) {
			*(*int32)(unsafe.Pointer(bp + 4 /* offset */)) = *(*int32)(unsafe.Pointer(bp /* numBytes */))
		}
	} else {
		*(*int32)(unsafe.Pointer(bp + 4 /* offset */)) = *(*int32)(unsafe.Pointer(bp /* numBytes */))
	}
	result = func() uintptr {
		if bytes+uintptr(*(*int32)(unsafe.Pointer(bp + 4))) < bytes+uintptr(2) {
			return bytes
		}
		return func() uintptr {
			if int32(uint8(*(*int8)(unsafe.Pointer(bytes + uintptr(*(*int32)(unsafe.Pointer(bp + 4))) - uintptr(1))))) < 0x80 {
				return bytes + uintptr(*(*int32)(unsafe.Pointer(bp + 4))) - uintptr(1)
			}
			return (*struct {
				f func(*libc.TLS, uintptr, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UtfPrev})).f(tls, bytes+uintptr(*(*int32)(unsafe.Pointer(bp + 4))), bytes)
		}()
	}()
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, int32((int64(result)-int64(bytes))/1)))
	return TCL_OK
}

// Used to check correct string-length determining in Tcl_NumUtfChars

func TestNumUtfCharsCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:6886:1: */
	bp := tls.Alloc(8)
	defer tls.Free(8)

	if objc > 1 {
		// var numBytes int32 at bp, 4

		var len int32
		*(*int32)(unsafe.Pointer(bp + 4 /* limit */)) = -1
		var bytes uintptr = (*struct {
			f func(*libc.TLS, uintptr, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp /* &numBytes */)

		if objc > 2 {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, int32, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclGetIntForIndex})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 2*8)), *(*int32)(unsafe.Pointer(bp)), bp+4) != TCL_OK {
				return TCL_ERROR
			}
			if *(*int32)(unsafe.Pointer(bp + 4)) > *(*int32)(unsafe.Pointer(bp))+1 {
				*(*int32)(unsafe.Pointer(bp + 4 /* limit */)) = *(*int32)(unsafe.Pointer(bp)) + 1
			}
		}
		len = (*struct {
			f func(*libc.TLS, uintptr, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NumUtfChars})).f(tls, bytes, *(*int32)(unsafe.Pointer(bp + 4 /* limit */)))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
			f func(*libc.TLS, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, len))
	}
	return TCL_OK
}

// Used to check correct operation of Tcl_UtfFindFirst

func TestFindFirstCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:6915:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	if objc > 1 {
		*(*int32)(unsafe.Pointer(bp /* len */)) = -1

		if objc > 2 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 2*8)), bp /* &len */)
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
			f func(*libc.TLS, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, (*struct {
			f func(*libc.TLS, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UtfFindFirst})).f(tls, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8))), *(*int32)(unsafe.Pointer(bp /* len */))), -1))
	}
	return TCL_OK
}

// Used to check correct operation of Tcl_UtfFindLast

func TestFindLastCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:6937:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	if objc > 1 {
		*(*int32)(unsafe.Pointer(bp /* len */)) = -1

		if objc > 2 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 2*8)), bp /* &len */)
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
			f func(*libc.TLS, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, (*struct {
			f func(*libc.TLS, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_UtfFindLast})).f(tls, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8))), *(*int32)(unsafe.Pointer(bp /* len */))), -1))
	}
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestcpuidCmd --
//
//	Retrieves CPU ID information.
//
// Usage:
//	testwincpuid <eax>
//
// Parameters:
//	eax - The value to pass in the EAX register to a CPUID instruction.
//
// Results:
//	Returns a four-element list containing the values from the EAX, EBX,
//	ECX and EDX registers returned from the CPUID instruction.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestcpuidCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:6979:1: */
	bp := tls.Alloc(56)
	defer tls.Free(56)

	var status int32
	// var index int32 at bp, 4

	var i int32
	// var regs [4]uint32 at bp+4, 16

	// var regsObjs [4]uintptr at bp+24, 32

	if objc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+7928 /* "eax" */)
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp) != TCL_OK {
		return TCL_ERROR
	}
	status = (*struct {
		f func(*libc.TLS, uint32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntPlatStubs)(unsafe.Pointer(tcl.XtclIntPlatStubsPtr)).tclWinCPUID})).f(tls, uint32(*(*int32)(unsafe.Pointer(bp /* index */))), bp+4 /* &regs[0] */)
	if status != TCL_OK {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp,
			(*struct {
				f func(*libc.TLS, uintptr, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+7932 /* "operation not av..." */, -1))
		return status
	}
	for i = 0; i < 4; i++ {
		*(*uintptr)(unsafe.Pointer(bp + 24 + uintptr(i)*8)) = (*struct {
			f func(*libc.TLS, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, int32(*(*uint32)(unsafe.Pointer(bp + 4 /* &regs[0] */ + uintptr(i)*4))))
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewListObj})).f(tls, 4, bp+24 /* &regsObjs[0] */))
	return TCL_OK
}

// Used to do basic checks of the TCL_HASH_KEY_SYSTEM_HASH flag

func TestHashSystemHashCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:7015:1: */
	bp := tls.Alloc(164)
	defer tls.Free(164)

	// var hash Tcl_HashTable at bp+72, 88

	var hPtr uintptr
	var i int32
	// var isNew int32 at bp+160, 4

	*(*int32)(unsafe.Pointer(bp + 64 /* limit */)) = 100
	_ = dummy

	if objc > 1 && (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp+64) != TCL_OK {
		return TCL_ERROR
	}

	(*struct {
		f func(*libc.TLS, uintptr, int32, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_InitCustomHashTable})).f(tls, bp+72 /* &hash */, -2, uintptr(unsafe.Pointer(&hkType)))

	if (*Tcl_HashTable)(unsafe.Pointer(bp+72)).numEntries != 0 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+7956 /* "non-zero initial..." */, uintptr(0)))
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteHashTable})).f(tls, bp+72 /* &hash */)
		return TCL_ERROR
	}

	for i = 0; i < *(*int32)(unsafe.Pointer(bp + 64 /* limit */)); i++ {
		hPtr = (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*Tcl_HashTable)(unsafe.Pointer(bp + 72 /* &hash */)).createProc})).f(tls, bp+72 /* &hash */, uintptr(intptr_t(i)), bp+160 /* &isNew */)
		if !(*(*int32)(unsafe.Pointer(bp + 160)) != 0) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
				f func(*libc.TLS, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, i))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, int32)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendToObj})).f(tls, (*struct {
				f func(*libc.TLS, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), ts+7978 /* " creation proble..." */, -1)
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteHashTable})).f(tls, bp+72 /* &hash */)
			return TCL_ERROR
		}
		(*Tcl_HashEntry)(unsafe.Pointer(hPtr)).clientData = uintptr(intptr_t(i + 42))
	}

	if (*Tcl_HashTable)(unsafe.Pointer(bp+72)).numEntries != *(*int32)(unsafe.Pointer(bp + 64)) {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+16, ts+7996 /* "unexpected maxim..." */, uintptr(0)))
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteHashTable})).f(tls, bp+72 /* &hash */)
		return TCL_ERROR
	}

	for i = 0; i < *(*int32)(unsafe.Pointer(bp + 64 /* limit */)); i++ {
		hPtr = (*struct {
			f func(*libc.TLS, uintptr, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*Tcl_HashTable)(unsafe.Pointer(bp + 72 /* &hash */)).findProc})).f(tls, bp+72 /* &hash */, uintptr(intptr_t(i)))
		if hPtr == uintptr(0) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
				f func(*libc.TLS, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, i))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, int32)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendToObj})).f(tls, (*struct {
				f func(*libc.TLS, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), ts+8020 /* " lookup problem" */, -1)
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteHashTable})).f(tls, bp+72 /* &hash */)
			return TCL_ERROR
		}
		if int32((*Tcl_HashEntry)(unsafe.Pointer(hPtr)).clientData) != i+42 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
				f func(*libc.TLS, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, i))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, int32)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendToObj})).f(tls, (*struct {
				f func(*libc.TLS, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), ts+8036 /* " value problem" */, -1)
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteHashTable})).f(tls, bp+72 /* &hash */)
			return TCL_ERROR
		}
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteHashEntry})).f(tls, hPtr)
	}

	if (*Tcl_HashTable)(unsafe.Pointer(bp+72)).numEntries != 0 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+32, ts+8051 /* "non-zero final s..." */, uintptr(0)))
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteHashTable})).f(tls, bp+72 /* &hash */)
		return TCL_ERROR
	}

	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteHashTable})).f(tls, bp+72 /* &hash */)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+48, ts+8071 /* "OK" */, uintptr(0)))
	return TCL_OK
}

var hkType = Tcl_HashKeyType{
	version: TCL_HASH_KEY_TYPE_VERSION, flags: TCL_HASH_KEY_SYSTEM_HASH,
} /* tclTest.c:7021:34 */

// Used for testing Tcl_GetInt which is no longer used directly by the
// core very much.
func TestgetintCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:7092:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	_ = dummy

	if argc < 2 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetResult})).f(tls, interp, ts+1270 /* "wrong # args" */, uintptr(0))
		return TCL_ERROR
	} else {
		// var val int32 at bp, 4

		var i int32
		var total int32 = 0

		for i = 1; i < argc; i++ {
			if (*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, *(*uintptr)(unsafe.Pointer(argv + uintptr(i)*8)), bp) != TCL_OK {
				return TCL_ERROR
			}
			total = total + *(*int32)(unsafe.Pointer(bp))
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
			f func(*libc.TLS, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, total))
		return TCL_OK
	}
	return int32(0)
}

func NREUnwind_callback(tls *libc.TLS, data uintptr, interp uintptr, result int32) int32 { /* tclTest.c:7118:1: */
	bp := tls.Alloc(32)
	defer tls.Free(32)

	// var none int32 at bp, 4

	_ = result

	if *(*ClientData)(unsafe.Pointer(data)) == libc.UintptrFromInt64(int64(-1)) {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, ClientData, ClientData, ClientData, ClientData)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NRAddCallback})).f(tls, interp, *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, uintptr, uintptr, int32) int32
		}{NREUnwind_callback})), bp /* &none */, libc.UintptrFromInt64(int64(-1)),
			libc.UintptrFromInt64(int64(-1)), uintptr(0))
	} else if *(*ClientData)(unsafe.Pointer(data + 1*8)) == libc.UintptrFromInt64(int64(-1)) {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, ClientData, ClientData, ClientData, ClientData)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NRAddCallback})).f(tls, interp, *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, uintptr, uintptr, int32) int32
		}{NREUnwind_callback})), *(*ClientData)(unsafe.Pointer(data)), bp, /* &none */
			libc.UintptrFromInt64(int64(-1)), uintptr(0))
	} else if *(*ClientData)(unsafe.Pointer(data + 2*8)) == libc.UintptrFromInt64(int64(-1)) {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, ClientData, ClientData, ClientData, ClientData)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NRAddCallback})).f(tls, interp, *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, uintptr, uintptr, int32) int32
		}{NREUnwind_callback})), *(*ClientData)(unsafe.Pointer(data)), *(*ClientData)(unsafe.Pointer(data + 1*8)),
			bp, uintptr(0))
	} else {
		// var idata [3]uintptr at bp+8, 24

		*(*uintptr)(unsafe.Pointer(bp + 8)) = (*struct {
			f func(*libc.TLS, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, int32((int64(*(*ClientData)(unsafe.Pointer(data + 1*8)))-int64(*(*ClientData)(unsafe.Pointer(data))))/1))
		*(*uintptr)(unsafe.Pointer(bp + 8 + 1*8)) = (*struct {
			f func(*libc.TLS, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, int32((int64(*(*ClientData)(unsafe.Pointer(data + 2*8)))-int64(*(*ClientData)(unsafe.Pointer(data))))/1))
		*(*uintptr)(unsafe.Pointer(bp + 8 + 2*8)) = (*struct {
			f func(*libc.TLS, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, int32((int64(bp /* &none */)-int64(*(*ClientData)(unsafe.Pointer(data))))/1))
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
			f func(*libc.TLS, int32, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewListObj})).f(tls, 3, bp+8 /* &idata[0] */))
	}
	return TCL_OK
}

func TestNREUnwind(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:7146:1: */
	_ = dummy
	_ = objc
	_ = objv

	// Insure that callbacks effectively run at the proper level during the
	// unwinding of the NRE stack.

	(*struct {
		f func(*libc.TLS, uintptr, uintptr, ClientData, ClientData, ClientData, ClientData)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NRAddCallback})).f(tls, interp, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, uintptr, uintptr, int32) int32
	}{NREUnwind_callback})), libc.UintptrFromInt64(int64(-1)), libc.UintptrFromInt64(int64(-1)),
		libc.UintptrFromInt64(int64(-1)), uintptr(0))
	return TCL_OK
}

func TestNRELevels(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:7168:1: */
	bp := tls.Alloc(56)
	defer tls.Free(56)

	var iPtr uintptr = interp
	// var depth ptrdiff_t at bp, 8

	// var levels [6]uintptr at bp+8, 48

	var i int32 = 0
	var cbPtr uintptr = (*ExecEnv1)(unsafe.Pointer((*Interp)(unsafe.Pointer(iPtr)).execEnvPtr)).callbackPtr
	_ = dummy
	_ = objc
	_ = objv

	if refDepth == uintptr(0) {
		refDepth = bp /* &depth */
	}

	*(*ptrdiff_t)(unsafe.Pointer(bp /* depth */)) = (int64(refDepth) - int64(bp)) / 8

	*(*uintptr)(unsafe.Pointer(bp + 8)) = (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, int32(*(*ptrdiff_t)(unsafe.Pointer(bp /* depth */))))
	*(*uintptr)(unsafe.Pointer(bp + 8 + 1*8)) = (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, (*Interp)(unsafe.Pointer(iPtr)).numLevels)
	*(*uintptr)(unsafe.Pointer(bp + 8 + 2*8)) = (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, (*CmdFrame)(unsafe.Pointer((*Interp)(unsafe.Pointer(iPtr)).cmdFramePtr)).level)
	*(*uintptr)(unsafe.Pointer(bp + 8 + 3*8)) = (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, (*CallFrame)(unsafe.Pointer((*Interp)(unsafe.Pointer(iPtr)).varFramePtr)).level)
	*(*uintptr)(unsafe.Pointer(bp + 8 + 4*8)) = (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, int32(int64(((*ExecStack)(unsafe.Pointer((*ExecEnv1)(unsafe.Pointer((*Interp)(unsafe.Pointer(iPtr)).execEnvPtr)).execStackPtr)).tosPtr-
		((*ExecEnv1)(unsafe.Pointer((*Interp)(unsafe.Pointer(iPtr)).execEnvPtr)).execStackPtr+40))/8)))

	for cbPtr != 0 {
		i++
		cbPtr = (*NRE_callback)(unsafe.Pointer(cbPtr)).nextPtr
	}
	*(*uintptr)(unsafe.Pointer(bp + 8 + 5*8)) = (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, i)

	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewListObj})).f(tls, 6, bp+8 /* &levels[0] */))
	return TCL_OK
}

var refDepth uintptr = uintptr(0) /* tclTest.c:7175:22 */

//----------------------------------------------------------------------
//
// TestconcatobjCmd --
//
//	This procedure implements the "testconcatobj" command. It is used
//	to test that Tcl_ConcatObj does indeed return a fresh Tcl_Obj in all
//	cases and thet it never corrupts its arguments. In other words, that
//	[Bug 1447328] was fixed properly.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestconcatobjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, argc int32, argv uintptr) int32 { /* tclTest.c:7227:1: */
	bp := tls.Alloc(576)
	defer tls.Free(576)

	var list1Ptr uintptr
	var list2Ptr uintptr
	var emptyPtr uintptr
	var concatPtr uintptr
	var tmpPtr uintptr
	var result int32 = TCL_OK
	// var len int32 at bp+544, 4

	// var objv [3]uintptr at bp+552, 24

	// Set the start of the error message as obj result; it will be cleared at
	// the end if no errors were found.

	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp,
		(*struct {
			f func(*libc.TLS, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+8074 /* "Tcl_ConcatObj is..." */, -1))

	emptyPtr = (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewObj})).f(tls)

	list1Ptr = (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+8099 /* "foo bar sum" */, -1)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjLength})).f(tls, uintptr(0), list1Ptr, bp+544 /* &len */)
	if (*Tcl_Obj)(unsafe.Pointer(list1Ptr)).bytes != uintptr(0) {
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, (*Tcl_Obj)(unsafe.Pointer(list1Ptr)).bytes)
		(*Tcl_Obj)(unsafe.Pointer(list1Ptr)).bytes = uintptr(0)
	}

	list2Ptr = (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+8111 /* "eeny meeny" */, -1)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjLength})).f(tls, uintptr(0), list2Ptr, bp+544 /* &len */)
	if (*Tcl_Obj)(unsafe.Pointer(list2Ptr)).bytes != uintptr(0) {
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, (*Tcl_Obj)(unsafe.Pointer(list2Ptr)).bytes)
		(*Tcl_Obj)(unsafe.Pointer(list2Ptr)).bytes = uintptr(0)
	}

	// Verify that concat'ing a list obj with one or more empty strings does
	// return a fresh Tcl_Obj (see also [Bug 2055782]).

	tmpPtr = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, list1Ptr)

	*(*uintptr)(unsafe.Pointer(bp + 552)) = tmpPtr
	*(*uintptr)(unsafe.Pointer(bp + 552 + 1*8)) = emptyPtr
	concatPtr = (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ConcatObj})).f(tls, 2, bp+552 /* &objv[0] */)
	if (*Tcl_Obj)(unsafe.Pointer(concatPtr)).refCount != 0 {
		result = TCL_ERROR
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp,
			libc.VaList(bp, ts+8122, uintptr(0)))
	}
	if concatPtr == tmpPtr {
		result = TCL_ERROR
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+16, ts+8165, /* "\n\t* (a) concatOb..." */
			uintptr(0)))
		switch (*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount {
		case 0:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+32, ts+8201 /* "(no new refCount..." */, uintptr(0)))
			break
			fallthrough
		case 1:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+48, ts+8219 /* "(refCount added)" */, uintptr(0)))
			break
			fallthrough
		default:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+64, ts+8236 /* "(more than one r..." */, uintptr(0)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Panic})).f(tls, ts+8268 /* "extremely unsafe..." */, 0)
		}
		tmpPtr = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, list1Ptr)
		*(*uintptr)(unsafe.Pointer(bp + 552)) = tmpPtr
	}
	for ok := true; ok; ok = 0 != 0 {
		var _objPtr uintptr = concatPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}

	(*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount++
	concatPtr = (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ConcatObj})).f(tls, 2, bp+552 /* &objv[0] */)
	if (*Tcl_Obj)(unsafe.Pointer(concatPtr)).refCount != 0 {
		result = TCL_ERROR
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp,
			libc.VaList(bp+80, ts+8314, uintptr(0)))
	}
	if concatPtr == tmpPtr {
		result = TCL_ERROR
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+96, ts+8357, /* "\n\t* (b) concatOb..." */
			uintptr(0)))
		switch (*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount {
		case 0:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+112, ts+8393 /* "(refCount remove..." */, uintptr(0)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Panic})).f(tls, ts+8268 /* "extremely unsafe..." */, 0)
			break
			fallthrough
		case 1:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+128, ts+8201 /* "(no new refCount..." */, uintptr(0)))
			break
			fallthrough
		case 2:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+144, ts+8219 /* "(refCount added)" */, uintptr(0)))
			for ok1 := true; ok1; ok1 = 0 != 0 {
				var _objPtr uintptr = tmpPtr
				if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
				}
			}
			break
			fallthrough
		default:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+160, ts+8236 /* "(more than one r..." */, uintptr(0)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Panic})).f(tls, ts+8268 /* "extremely unsafe..." */, 0)
		}
		tmpPtr = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, list1Ptr)
		*(*uintptr)(unsafe.Pointer(bp + 552)) = tmpPtr
	}
	for ok2 := true; ok2; ok2 = 0 != 0 {
		var _objPtr uintptr = concatPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}

	*(*uintptr)(unsafe.Pointer(bp + 552)) = emptyPtr
	*(*uintptr)(unsafe.Pointer(bp + 552 + 1*8)) = tmpPtr
	*(*uintptr)(unsafe.Pointer(bp + 552 + 2*8)) = emptyPtr
	concatPtr = (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ConcatObj})).f(tls, 3, bp+552 /* &objv[0] */)
	if (*Tcl_Obj)(unsafe.Pointer(concatPtr)).refCount != 0 {
		result = TCL_ERROR
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp,
			libc.VaList(bp+176, ts+8413, uintptr(0)))
	}
	if concatPtr == tmpPtr {
		result = TCL_ERROR
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+192, ts+8456, /* "\n\t* (c) concatOb..." */
			uintptr(0)))
		switch (*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount {
		case 0:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+208, ts+8201 /* "(no new refCount..." */, uintptr(0)))
			break
			fallthrough
		case 1:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+224, ts+8219 /* "(refCount added)" */, uintptr(0)))
			break
			fallthrough
		default:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+240, ts+8236 /* "(more than one r..." */, uintptr(0)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Panic})).f(tls, ts+8268 /* "extremely unsafe..." */, 0)
		}
		tmpPtr = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, list1Ptr)
		*(*uintptr)(unsafe.Pointer(bp + 552 + 1*8)) = tmpPtr
	}
	for ok3 := true; ok3; ok3 = 0 != 0 {
		var _objPtr uintptr = concatPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}

	(*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount++
	concatPtr = (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ConcatObj})).f(tls, 3, bp+552 /* &objv[0] */)
	if (*Tcl_Obj)(unsafe.Pointer(concatPtr)).refCount != 0 {
		result = TCL_ERROR
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp,
			libc.VaList(bp+256, ts+8492, uintptr(0)))
	}
	if concatPtr == tmpPtr {
		result = TCL_ERROR
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+272, ts+8535, /* "\n\t* (d) concatOb..." */
			uintptr(0)))
		switch (*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount {
		case 0:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+288, ts+8393 /* "(refCount remove..." */, uintptr(0)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Panic})).f(tls, ts+8268 /* "extremely unsafe..." */, 0)
			break
			fallthrough
		case 1:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+304, ts+8201 /* "(no new refCount..." */, uintptr(0)))
			break
			fallthrough
		case 2:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+320, ts+8219 /* "(refCount added)" */, uintptr(0)))
			for ok4 := true; ok4; ok4 = 0 != 0 {
				var _objPtr uintptr = tmpPtr
				if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
				}
			}
			break
			fallthrough
		default:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+336, ts+8236 /* "(more than one r..." */, uintptr(0)))
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Panic})).f(tls, ts+8268 /* "extremely unsafe..." */, 0)
		}
		tmpPtr = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, list1Ptr)
		*(*uintptr)(unsafe.Pointer(bp + 552 + 1*8)) = tmpPtr
	}
	for ok5 := true; ok5; ok5 = 0 != 0 {
		var _objPtr uintptr = concatPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}

	// Verify that an unshared list is not corrupted when concat'ing things to
	// it.

	*(*uintptr)(unsafe.Pointer(bp + 552)) = tmpPtr
	*(*uintptr)(unsafe.Pointer(bp + 552 + 1*8)) = list2Ptr
	concatPtr = (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ConcatObj})).f(tls, 2, bp+552 /* &objv[0] */)
	if (*Tcl_Obj)(unsafe.Pointer(concatPtr)).refCount != 0 {
		result = TCL_ERROR
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp,
			libc.VaList(bp+352, ts+8571, uintptr(0)))
	}
	if concatPtr == tmpPtr {
		result = TCL_ERROR
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+368, ts+8614, /* "\n\t* (e) concatOb..." */
			uintptr(0)))

		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjLength})).f(tls, uintptr(0), concatPtr, bp+544 /* &len */)
		switch (*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount {
		case 3:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+384, ts+8650 /* "(failed to conca..." */, uintptr(0)))
			break
			fallthrough
		default:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+400, ts+8669 /* "(corrupted input..." */, uintptr(0)))
		}
		if (*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount > 1 {
			for ok6 := true; ok6; ok6 = 0 != 0 {
				var _objPtr uintptr = tmpPtr
				if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
				}
			}
		}
		tmpPtr = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, list1Ptr)
		*(*uintptr)(unsafe.Pointer(bp + 552)) = tmpPtr
	}
	for ok7 := true; ok7; ok7 = 0 != 0 {
		var _objPtr uintptr = concatPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}

	*(*uintptr)(unsafe.Pointer(bp + 552)) = tmpPtr
	*(*uintptr)(unsafe.Pointer(bp + 552 + 1*8)) = list2Ptr
	(*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount++
	concatPtr = (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ConcatObj})).f(tls, 2, bp+552 /* &objv[0] */)
	if (*Tcl_Obj)(unsafe.Pointer(concatPtr)).refCount != 0 {
		result = TCL_ERROR
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp,
			libc.VaList(bp+416, ts+8688, uintptr(0)))
	}
	if concatPtr == tmpPtr {
		result = TCL_ERROR
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+432, ts+8731, /* "\n\t* (f) concatOb..." */
			uintptr(0)))

		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjLength})).f(tls, uintptr(0), concatPtr, bp+544 /* &len */)
		switch (*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount {
		case 3:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+448, ts+8650 /* "(failed to conca..." */, uintptr(0)))
			break
			fallthrough
		default:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+464, ts+8669 /* "(corrupted input..." */, uintptr(0)))
		}
		if (*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount > 1 {
			for ok8 := true; ok8; ok8 = 0 != 0 {
				var _objPtr uintptr = tmpPtr
				if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
				}
			}
		}
		tmpPtr = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, list1Ptr)
		*(*uintptr)(unsafe.Pointer(bp + 552)) = tmpPtr
	}
	for ok9 := true; ok9; ok9 = 0 != 0 {
		var _objPtr uintptr = concatPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}

	*(*uintptr)(unsafe.Pointer(bp + 552)) = tmpPtr
	*(*uintptr)(unsafe.Pointer(bp + 552 + 1*8)) = list2Ptr
	(*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount++
	(*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount++
	concatPtr = (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ConcatObj})).f(tls, 2, bp+552 /* &objv[0] */)
	if (*Tcl_Obj)(unsafe.Pointer(concatPtr)).refCount != 0 {
		result = TCL_ERROR
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp,
			libc.VaList(bp+480, ts+8767, uintptr(0)))
	}
	if concatPtr == tmpPtr {
		result = TCL_ERROR
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+496, ts+8810, /* "\n\t* (g) concatOb..." */
			uintptr(0)))

		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjLength})).f(tls, uintptr(0), concatPtr, bp+544 /* &len */)
		switch (*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount {
		case 3:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+512, ts+8650 /* "(failed to conca..." */, uintptr(0)))
			break
			fallthrough
		default:
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+528, ts+8669 /* "(corrupted input..." */, uintptr(0)))
		}
		for ok10 := true; ok10; ok10 = 0 != 0 {
			var _objPtr uintptr = tmpPtr
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
		if (*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount > 1 {
			for ok11 := true; ok11; ok11 = 0 != 0 {
				var _objPtr uintptr = tmpPtr
				if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
				}
			}
		}
		tmpPtr = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, list1Ptr)
		*(*uintptr)(unsafe.Pointer(bp + 552)) = tmpPtr
	}
	for ok12 := true; ok12; ok12 = 0 != 0 {
		var _objPtr uintptr = concatPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}

	// Clean everything up. Note that we don't actually know how many
	// references there are to tmpPtr here; in the no-error case, it should be
	// five... [Bug 2895367]

	for ok13 := true; ok13; ok13 = 0 != 0 {
		var _objPtr uintptr = list1Ptr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}
	for ok14 := true; ok14; ok14 = 0 != 0 {
		var _objPtr uintptr = list2Ptr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}
	for ok15 := true; ok15; ok15 = 0 != 0 {
		var _objPtr uintptr = emptyPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}
	for (*Tcl_Obj)(unsafe.Pointer(tmpPtr)).refCount > 1 {
		for ok16 := true; ok16; ok16 = 0 != 0 {
			var _objPtr uintptr = tmpPtr
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
	}
	for ok17 := true; ok17; ok17 = 0 != 0 {
		var _objPtr uintptr = tmpPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}

	if result == TCL_OK {
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ResetResult})).f(tls, interp)
	}
	return result
}

//----------------------------------------------------------------------
//
// TestparseargsCmd --
//
//	This procedure implements the "testparseargs" command. It is used to
//	test that Tcl_ParseArgsObjv does indeed return the right number of
//	arguments. In other words, that [Bug 3413857] was fixed properly.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestparseargsCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:7524:1: */
	bp := tls.Alloc(232)
	defer tls.Free(232)

	*(*int32)(unsafe.Pointer(bp + 192 /* count */)) = objc
	// var remObjv uintptr at bp+200, 8

	// var result [3]uintptr at bp+208, 24

	*(*[4]Tcl_ArgvInfo)(unsafe.Pointer(bp /* argTable */)) = [4]Tcl_ArgvInfo{
		{__type: TCL_ARGV_CONSTANT, keyStr: ts + 8846, srcPtr: uintptr(int64(1)), dstPtr: uintptr(unsafe.Pointer(&foo)), helpStr: ts + 8852},
		{__type: TCL_ARGV_REST, keyStr: ts + 4697, helpStr: ts + 8861}, {__type: TCL_ARGV_HELP, keyStr: ts + 8890, helpStr: ts + 8896}, {__type: TCL_ARGV_END},
	}

	foo = 0
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ParseArgsObjv})).f(tls, interp, bp, bp+192, objv, bp+200) != TCL_OK {
		return TCL_ERROR
	}
	*(*uintptr)(unsafe.Pointer(bp + 208)) = (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, foo)
	*(*uintptr)(unsafe.Pointer(bp + 208 + 1*8)) = (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, *(*int32)(unsafe.Pointer(bp + 192 /* count */)))
	*(*uintptr)(unsafe.Pointer(bp + 208 + 2*8)) = (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewListObj})).f(tls, *(*int32)(unsafe.Pointer(bp + 192 /* count */)), *(*uintptr)(unsafe.Pointer(bp + 200 /* remObjv */)))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewListObj})).f(tls, 3, bp+208 /* &result[0] */))
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, *(*uintptr)(unsafe.Pointer(bp + 200 /* remObjv */)))
	return TCL_OK
}

var foo int32 = 0 /* tclTest.c:7530:16 */

// *
// Test harness for command and variable resolvers.

func InterpCmdResolver(tls *libc.TLS, interp uintptr, name uintptr, dummy uintptr, flags int32, rPtr uintptr) int32 { /* tclTest.c:7555:1: */
	var iPtr uintptr = interp
	var varFramePtr uintptr = (*Interp)(unsafe.Pointer(iPtr)).varFramePtr
	var procPtr uintptr
	if (*CallFrame)(unsafe.Pointer(varFramePtr)).isProcCallFrame&FRAME_IS_PROC != 0 {
		procPtr = (*CallFrame)(unsafe.Pointer(varFramePtr)).procPtr
	} else {
		procPtr = uintptr(0)
	}
	var callerNsPtr uintptr = (*CallFrame)(unsafe.Pointer(varFramePtr)).nsPtr
	var resolvedCmdPtr Tcl_Command = uintptr(0)
	_ = dummy

	// Just do something special on a cmd literal "z" in two cases:
	//  A)  when the caller is a proc "x", and the proc is either in "::" or in "::ns2".
	//  B) the caller's namespace is "ctx1" or "ctx2"
	if int32(*(*int8)(unsafe.Pointer(name))) == 'z' && int32(*(*int8)(unsafe.Pointer(name + 1))) == 0 {
		var ns2NsPtr uintptr = (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tcl_FindNamespace})).f(tls, interp, ts+8944 /* "::ns2" */, uintptr(0), 0)

		if procPtr != uintptr(0) &&
			((*Command1)(unsafe.Pointer((*Proc)(unsafe.Pointer(procPtr)).cmdPtr)).nsPtr == (*Interp)(unsafe.Pointer(iPtr)).globalNsPtr ||
				ns2NsPtr != uintptr(0) && (*Command1)(unsafe.Pointer((*Proc)(unsafe.Pointer(procPtr)).cmdPtr)).nsPtr == ns2NsPtr) {
			// Case A)
			//
			//    - The context, in which this resolver becomes active, is
			//      determined by the name of the caller proc, which has to be
			//      named "x".
			//
			//    - To determine the name of the caller proc, the proc is taken
			//      from the topmost stack frame.
			//
			//    - Note that the context is NOT provided during byte-code
			//      compilation (e.g. in TclProcCompileProc)
			//
			//   When these conditions hold, this function resolves the
			//   passed-in cmd literal into a cmd "y", which is taken from the
			//   the global namespace (for simplicity).

			var callingCmdName uintptr = (*struct {
				f func(*libc.TLS, uintptr, Tcl_Command) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetCommandName})).f(tls, interp, (*Proc)(unsafe.Pointer(procPtr)).cmdPtr)

			if int32(*(*int8)(unsafe.Pointer(callingCmdName))) == 'x' && int32(*(*int8)(unsafe.Pointer(callingCmdName + 1))) == 0 {
				resolvedCmdPtr = (*struct {
					f func(*libc.TLS, uintptr, uintptr, uintptr, int32) Tcl_Command
				})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tcl_FindCommand})).f(tls, interp, ts+8950 /* "y" */, uintptr(0), TCL_GLOBAL_ONLY)
			}
		} else if callerNsPtr != uintptr(0) {
			// Case B)
			//
			//    - The context, in which this resolver becomes active, is
			//      determined by the name of the parent namespace, which has
			//      to be named "ctx1" or "ctx2".
			//
			//    - To determine the name of the parent namesace, it is taken
			//      from the 2nd highest stack frame.
			//
			//    - Note that the context can be provided during byte-code
			//      compilation (e.g. in TclProcCompileProc)
			//
			//   When these conditions hold, this function resolves the
			//   passed-in cmd literal into a cmd "y" or "Y" depending on the
			//   context. The resolved procs are taken from the the global
			//   namespace (for simplicity).

			var parentFramePtr uintptr = (*CallFrame)(unsafe.Pointer(varFramePtr)).callerPtr
			var context uintptr
			if parentFramePtr != uintptr(0) {
				context = (*Namespace)(unsafe.Pointer((*CallFrame)(unsafe.Pointer(parentFramePtr)).nsPtr)).name
			} else {
				context = ts + 8952 /* "(NULL)" */
			}

			if libc.Xstrcmp(tls, context, ts+8959) == 0 && int32(*(*int8)(unsafe.Pointer(name))) == 'z' && int32(*(*int8)(unsafe.Pointer(name + 1))) == 0 {
				resolvedCmdPtr = (*struct {
					f func(*libc.TLS, uintptr, uintptr, uintptr, int32) Tcl_Command
				})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tcl_FindCommand})).f(tls, interp, ts+8950 /* "y" */, uintptr(0), TCL_GLOBAL_ONLY)
				// fprintf(stderr, "... y ==> %p\n", resolvedCmdPtr);

			} else if libc.Xstrcmp(tls, context, ts+8964) == 0 && int32(*(*int8)(unsafe.Pointer(name))) == 'z' && int32(*(*int8)(unsafe.Pointer(name + 1))) == 0 {
				resolvedCmdPtr = (*struct {
					f func(*libc.TLS, uintptr, uintptr, uintptr, int32) Tcl_Command
				})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tcl_FindCommand})).f(tls, interp, ts+8969 /* "Y" */, uintptr(0), TCL_GLOBAL_ONLY)
				//fprintf(stderr, "... Y ==> %p\n", resolvedCmdPtr);
			}
		}

		if resolvedCmdPtr != uintptr(0) {
			*(*Tcl_Command)(unsafe.Pointer(rPtr)) = resolvedCmdPtr
			return TCL_OK
		}
	}
	return TCL_CONTINUE
}

func InterpVarResolver(tls *libc.TLS, interp uintptr, name uintptr, context uintptr, flags int32, rPtr uintptr) int32 { /* tclTest.c:7649:1: */
	// Don't resolve the variable; use standard rules.

	return TCL_CONTINUE
}

type MyResolvedVarInfo1 = struct {
	vInfo   Tcl_ResolvedVarInfo
	__var   Tcl_Var
	nameObj uintptr
} /* tclTest.c:7663:9 */

type MyResolvedVarInfo = MyResolvedVarInfo1 /* tclTest.c:7667:3 */

func HashVarFree(tls *libc.TLS, var1 Tcl_Var) { /* tclTest.c:7670:1: */
	if (*VarInHash)(unsafe.Pointer(var1)).refCount < 2 {
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, var1)
	} else {
		(*VarInHash)(unsafe.Pointer(var1)).refCount--
	}
}

func MyCompiledVarFree(tls *libc.TLS, vInfoPtr uintptr) { /* tclTest.c:7681:1: */
	var resVarInfo uintptr = vInfoPtr

	for ok := true; ok; ok = 0 != 0 {
		var _objPtr uintptr = (*MyResolvedVarInfo)(unsafe.Pointer(resVarInfo)).nameObj
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}
	if (*MyResolvedVarInfo)(unsafe.Pointer(resVarInfo)).__var != 0 {
		HashVarFree(tls, (*MyResolvedVarInfo)(unsafe.Pointer(resVarInfo)).__var)
	}
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, vInfoPtr)
}

func MyCompiledVarFetch(tls *libc.TLS, interp uintptr, vinfoPtr uintptr) Tcl_Var { /* tclTest.c:7697:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	var resVarInfo uintptr = vinfoPtr
	var var1 Tcl_Var = (*MyResolvedVarInfo)(unsafe.Pointer(resVarInfo)).__var
	// var isNewVar int32 at bp, 4

	var iPtr uintptr = interp
	var hPtr uintptr

	if var1 != uintptr(0) {
		if !((*Var)(unsafe.Pointer(var1)).flags&VAR_DEAD_HASH != 0) {
			// The cached variable is valid, return it.

			return var1
		}

		// The variable is not valid anymore. Clean it up.

		HashVarFree(tls, var1)
	}

	hPtr = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*Tcl_HashTable)(unsafe.Pointer((*Interp)(unsafe.Pointer(iPtr)).globalNsPtr + 248 /* &.varTable */)).createProc})).f(tls, (*Interp)(unsafe.Pointer(iPtr)).globalNsPtr+248 /* &.varTable */, (*MyResolvedVarInfo)(unsafe.Pointer(resVarInfo)).nameObj, bp /* &isNewVar */)
	if hPtr != 0 {
		var1 = hPtr - uintptr(int32(uintptr(0)+24))
	} else {
		var1 = uintptr(0)
	}
	(*MyResolvedVarInfo)(unsafe.Pointer(resVarInfo)).__var = var1

	// Increment the reference counter to avoid ckfree() of the variable in
	// Tcl's FreeVarEntry(); for cleanup, we provide our own HashVarFree();

	(*VarInHash)(unsafe.Pointer(var1)).refCount++
	return var1
}

func InterpCompiledVarResolver(tls *libc.TLS, interp uintptr, name uintptr, length int32, context uintptr, rPtr uintptr) int32 { /* tclTest.c:7742:1: */
	if int32(*(*int8)(unsafe.Pointer(name))) == 'T' {
		var resVarInfo uintptr = (*struct {
			f func(*libc.TLS, uint32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(unsafe.Sizeof(MyResolvedVarInfo{})))

		(*MyResolvedVarInfo)(unsafe.Pointer(resVarInfo)).vInfo.fetchProc = *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, uintptr, uintptr) Tcl_Var
		}{MyCompiledVarFetch}))
		(*MyResolvedVarInfo)(unsafe.Pointer(resVarInfo)).vInfo.deleteProc = *(*uintptr)(unsafe.Pointer(&struct{ f func(*libc.TLS, uintptr) }{MyCompiledVarFree}))
		(*MyResolvedVarInfo)(unsafe.Pointer(resVarInfo)).__var = uintptr(0)
		(*MyResolvedVarInfo)(unsafe.Pointer(resVarInfo)).nameObj = (*struct {
			f func(*libc.TLS, uintptr, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, name, -1)
		(*Tcl_Obj)(unsafe.Pointer((*MyResolvedVarInfo)(unsafe.Pointer(resVarInfo)).nameObj)).refCount++
		*(*uintptr)(unsafe.Pointer(rPtr)) = resVarInfo
		return TCL_OK
	}
	return TCL_CONTINUE
}

func TestInterpResolverCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTest.c:7764:1: */
	bp := tls.Alloc(36)
	defer tls.Free(36)

	// var idx int32 at bp+32, 4

	if objc < 2 || objc > 3 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+8971 /* "up|down ?interp?" */)
		return TCL_ERROR
	}
	if objc == 3 {
		interp = (*struct {
			f func(*libc.TLS, uintptr, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetSlave})).f(tls, interp, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8))))
		if interp == uintptr(0) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+8988 /* "provided interpr..." */, uintptr(0)))
			return TCL_ERROR
		}
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), uintptr(unsafe.Pointer(&table)), int32(unsafe.Sizeof(uintptr(0))), ts+9019, TCL_EXACT, bp+32) != TCL_OK {
		return TCL_ERROR
	}
	switch *(*int32)(unsafe.Pointer(bp + 32 /* idx */)) {
	case 1: // up
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tcl_AddInterpResolvers})).f(tls, interp, ts+9029 /* "testInterpResolv..." */, *(*uintptr)(unsafe.Pointer(&struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr) int32
		}{InterpCmdResolver})),
			*(*uintptr)(unsafe.Pointer(&struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr) int32
			}{InterpVarResolver})), *(*uintptr)(unsafe.Pointer(&struct {
				f func(*libc.TLS, uintptr, uintptr, int32, uintptr, uintptr) int32
			}{InterpCompiledVarResolver})))
		break
	case 0: //down
		if !((*struct {
			f func(*libc.TLS, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tcl_RemoveInterpResolvers})).f(tls, interp, ts+9029) != 0) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+16, ts+9048, /* "could not remove..." */
				uintptr(0)))
			return TCL_ERROR
		}
	}
	return TCL_OK
}

var table = [3]uintptr{
	ts + 9085, ts + 9090, uintptr(0),
} /* tclTest.c:7770:23 */

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// tab-width: 8
// indent-tabs-mode: nil
// End:

type Tcl_OldStat_1 = uintptr /* tcl.h:660:21 */

type TclStubs1 = struct {
	magic                                  int32
	_                                      [4]byte
	hooks                                  uintptr
	tcl_PkgProvideEx                       uintptr
	tcl_PkgRequireEx                       uintptr
	tcl_Panic                              uintptr
	tcl_Alloc                              uintptr
	tcl_Free                               uintptr
	tcl_Realloc                            uintptr
	tcl_DbCkalloc                          uintptr
	tcl_DbCkfree                           uintptr
	tcl_DbCkrealloc                        uintptr
	reserved9                              uintptr
	reserved10                             uintptr
	tcl_SetTimer                           uintptr
	tcl_Sleep                              uintptr
	tcl_WaitForEvent                       uintptr
	tcl_AppendAllObjTypes                  uintptr
	tcl_AppendStringsToObj                 uintptr
	tcl_AppendToObj                        uintptr
	tcl_ConcatObj                          uintptr
	tcl_ConvertToType                      uintptr
	tcl_DbDecrRefCount                     uintptr
	tcl_DbIncrRefCount                     uintptr
	tcl_DbIsShared                         uintptr
	tcl_DbNewBooleanObj                    uintptr
	tcl_DbNewByteArrayObj                  uintptr
	tcl_DbNewDoubleObj                     uintptr
	tcl_DbNewListObj                       uintptr
	tcl_DbNewLongObj                       uintptr
	tcl_DbNewObj                           uintptr
	tcl_DbNewStringObj                     uintptr
	tcl_DuplicateObj                       uintptr
	tclFreeObj                             uintptr
	tcl_GetBoolean                         uintptr
	tcl_GetBooleanFromObj                  uintptr
	tcl_GetByteArrayFromObj                uintptr
	tcl_GetDouble                          uintptr
	tcl_GetDoubleFromObj                   uintptr
	tcl_GetIndexFromObj                    uintptr
	tcl_GetInt                             uintptr
	tcl_GetIntFromObj                      uintptr
	tcl_GetLongFromObj                     uintptr
	tcl_GetObjType                         uintptr
	tcl_GetStringFromObj                   uintptr
	tcl_InvalidateStringRep                uintptr
	tcl_ListObjAppendList                  uintptr
	tcl_ListObjAppendElement               uintptr
	tcl_ListObjGetElements                 uintptr
	tcl_ListObjIndex                       uintptr
	tcl_ListObjLength                      uintptr
	tcl_ListObjReplace                     uintptr
	tcl_NewBooleanObj                      uintptr
	tcl_NewByteArrayObj                    uintptr
	tcl_NewDoubleObj                       uintptr
	tcl_NewIntObj                          uintptr
	tcl_NewListObj                         uintptr
	tcl_NewLongObj                         uintptr
	tcl_NewObj                             uintptr
	tcl_NewStringObj                       uintptr
	tcl_SetBooleanObj                      uintptr
	tcl_SetByteArrayLength                 uintptr
	tcl_SetByteArrayObj                    uintptr
	tcl_SetDoubleObj                       uintptr
	tcl_SetIntObj                          uintptr
	tcl_SetListObj                         uintptr
	tcl_SetLongObj                         uintptr
	tcl_SetObjLength                       uintptr
	tcl_SetStringObj                       uintptr
	tcl_AddErrorInfo                       uintptr
	tcl_AddObjErrorInfo                    uintptr
	tcl_AllowExceptions                    uintptr
	tcl_AppendElement                      uintptr
	tcl_AppendResult                       uintptr
	tcl_AsyncCreate                        uintptr
	tcl_AsyncDelete                        uintptr
	tcl_AsyncInvoke                        uintptr
	tcl_AsyncMark                          uintptr
	tcl_AsyncReady                         uintptr
	tcl_BackgroundError                    uintptr
	tcl_Backslash                          uintptr
	tcl_BadChannelOption                   uintptr
	tcl_CallWhenDeleted                    uintptr
	tcl_CancelIdleCall                     uintptr
	tcl_Close                              uintptr
	tcl_CommandComplete                    uintptr
	tcl_Concat                             uintptr
	tcl_ConvertElement                     uintptr
	tcl_ConvertCountedElement              uintptr
	tcl_CreateAlias                        uintptr
	tcl_CreateAliasObj                     uintptr
	tcl_CreateChannel                      uintptr
	tcl_CreateChannelHandler               uintptr
	tcl_CreateCloseHandler                 uintptr
	tcl_CreateCommand                      uintptr
	tcl_CreateEventSource                  uintptr
	tcl_CreateExitHandler                  uintptr
	tcl_CreateInterp                       uintptr
	tcl_CreateMathFunc                     uintptr
	tcl_CreateObjCommand                   uintptr
	tcl_CreateSlave                        uintptr
	tcl_CreateTimerHandler                 uintptr
	tcl_CreateTrace                        uintptr
	tcl_DeleteAssocData                    uintptr
	tcl_DeleteChannelHandler               uintptr
	tcl_DeleteCloseHandler                 uintptr
	tcl_DeleteCommand                      uintptr
	tcl_DeleteCommandFromToken             uintptr
	tcl_DeleteEvents                       uintptr
	tcl_DeleteEventSource                  uintptr
	tcl_DeleteExitHandler                  uintptr
	tcl_DeleteHashEntry                    uintptr
	tcl_DeleteHashTable                    uintptr
	tcl_DeleteInterp                       uintptr
	tcl_DetachPids                         uintptr
	tcl_DeleteTimerHandler                 uintptr
	tcl_DeleteTrace                        uintptr
	tcl_DontCallWhenDeleted                uintptr
	tcl_DoOneEvent                         uintptr
	tcl_DoWhenIdle                         uintptr
	tcl_DStringAppend                      uintptr
	tcl_DStringAppendElement               uintptr
	tcl_DStringEndSublist                  uintptr
	tcl_DStringFree                        uintptr
	tcl_DStringGetResult                   uintptr
	tcl_DStringInit                        uintptr
	tcl_DStringResult                      uintptr
	tcl_DStringSetLength                   uintptr
	tcl_DStringStartSublist                uintptr
	tcl_Eof                                uintptr
	tcl_ErrnoId                            uintptr
	tcl_ErrnoMsg                           uintptr
	tcl_Eval                               uintptr
	tcl_EvalFile                           uintptr
	tcl_EvalObj                            uintptr
	tcl_EventuallyFree                     uintptr
	tcl_Exit                               uintptr
	tcl_ExposeCommand                      uintptr
	tcl_ExprBoolean                        uintptr
	tcl_ExprBooleanObj                     uintptr
	tcl_ExprDouble                         uintptr
	tcl_ExprDoubleObj                      uintptr
	tcl_ExprLong                           uintptr
	tcl_ExprLongObj                        uintptr
	tcl_ExprObj                            uintptr
	tcl_ExprString                         uintptr
	tcl_Finalize                           uintptr
	tcl_FindExecutable                     uintptr
	tcl_FirstHashEntry                     uintptr
	tcl_Flush                              uintptr
	tcl_FreeResult                         uintptr
	tcl_GetAlias                           uintptr
	tcl_GetAliasObj                        uintptr
	tcl_GetAssocData                       uintptr
	tcl_GetChannel                         uintptr
	tcl_GetChannelBufferSize               uintptr
	tcl_GetChannelHandle                   uintptr
	tcl_GetChannelInstanceData             uintptr
	tcl_GetChannelMode                     uintptr
	tcl_GetChannelName                     uintptr
	tcl_GetChannelOption                   uintptr
	tcl_GetChannelType                     uintptr
	tcl_GetCommandInfo                     uintptr
	tcl_GetCommandName                     uintptr
	tcl_GetErrno                           uintptr
	tcl_GetHostName                        uintptr
	tcl_GetInterpPath                      uintptr
	tcl_GetMaster                          uintptr
	tcl_GetNameOfExecutable                uintptr
	tcl_GetObjResult                       uintptr
	reserved167                            uintptr
	tcl_GetPathType                        uintptr
	tcl_Gets                               uintptr
	tcl_GetsObj                            uintptr
	tcl_GetServiceMode                     uintptr
	tcl_GetSlave                           uintptr
	tcl_GetStdChannel                      uintptr
	tcl_GetStringResult                    uintptr
	tcl_GetVar                             uintptr
	tcl_GetVar2                            uintptr
	tcl_GlobalEval                         uintptr
	tcl_GlobalEvalObj                      uintptr
	tcl_HideCommand                        uintptr
	tcl_Init                               uintptr
	tcl_InitHashTable                      uintptr
	tcl_InputBlocked                       uintptr
	tcl_InputBuffered                      uintptr
	tcl_InterpDeleted                      uintptr
	tcl_IsSafe                             uintptr
	tcl_JoinPath                           uintptr
	tcl_LinkVar                            uintptr
	reserved188                            uintptr
	tcl_MakeFileChannel                    uintptr
	tcl_MakeSafe                           uintptr
	tcl_MakeTcpClientChannel               uintptr
	tcl_Merge                              uintptr
	tcl_NextHashEntry                      uintptr
	tcl_NotifyChannel                      uintptr
	tcl_ObjGetVar2                         uintptr
	tcl_ObjSetVar2                         uintptr
	tcl_OpenCommandChannel                 uintptr
	tcl_OpenFileChannel                    uintptr
	tcl_OpenTcpClient                      uintptr
	tcl_OpenTcpServer                      uintptr
	tcl_Preserve                           uintptr
	tcl_PrintDouble                        uintptr
	tcl_PutEnv                             uintptr
	tcl_PosixError                         uintptr
	tcl_QueueEvent                         uintptr
	tcl_Read                               uintptr
	tcl_ReapDetachedProcs                  uintptr
	tcl_RecordAndEval                      uintptr
	tcl_RecordAndEvalObj                   uintptr
	tcl_RegisterChannel                    uintptr
	tcl_RegisterObjType                    uintptr
	tcl_RegExpCompile                      uintptr
	tcl_RegExpExec                         uintptr
	tcl_RegExpMatch                        uintptr
	tcl_RegExpRange                        uintptr
	tcl_Release                            uintptr
	tcl_ResetResult                        uintptr
	tcl_ScanElement                        uintptr
	tcl_ScanCountedElement                 uintptr
	tcl_SeekOld                            uintptr
	tcl_ServiceAll                         uintptr
	tcl_ServiceEvent                       uintptr
	tcl_SetAssocData                       uintptr
	tcl_SetChannelBufferSize               uintptr
	tcl_SetChannelOption                   uintptr
	tcl_SetCommandInfo                     uintptr
	tcl_SetErrno                           uintptr
	tcl_SetErrorCode                       uintptr
	tcl_SetMaxBlockTime                    uintptr
	tcl_SetPanicProc                       uintptr
	tcl_SetRecursionLimit                  uintptr
	tcl_SetResult                          uintptr
	tcl_SetServiceMode                     uintptr
	tcl_SetObjErrorCode                    uintptr
	tcl_SetObjResult                       uintptr
	tcl_SetStdChannel                      uintptr
	tcl_SetVar                             uintptr
	tcl_SetVar2                            uintptr
	tcl_SignalId                           uintptr
	tcl_SignalMsg                          uintptr
	tcl_SourceRCFile                       uintptr
	tcl_SplitList                          uintptr
	tcl_SplitPath                          uintptr
	tcl_StaticPackage                      uintptr
	tcl_StringMatch                        uintptr
	tcl_TellOld                            uintptr
	tcl_TraceVar                           uintptr
	tcl_TraceVar2                          uintptr
	tcl_TranslateFileName                  uintptr
	tcl_Ungets                             uintptr
	tcl_UnlinkVar                          uintptr
	tcl_UnregisterChannel                  uintptr
	tcl_UnsetVar                           uintptr
	tcl_UnsetVar2                          uintptr
	tcl_UntraceVar                         uintptr
	tcl_UntraceVar2                        uintptr
	tcl_UpdateLinkedVar                    uintptr
	tcl_UpVar                              uintptr
	tcl_UpVar2                             uintptr
	tcl_VarEval                            uintptr
	tcl_VarTraceInfo                       uintptr
	tcl_VarTraceInfo2                      uintptr
	tcl_Write                              uintptr
	tcl_WrongNumArgs                       uintptr
	tcl_DumpActiveMemory                   uintptr
	tcl_ValidateAllMemory                  uintptr
	tcl_AppendResultVA                     uintptr
	tcl_AppendStringsToObjVA               uintptr
	tcl_HashStats                          uintptr
	tcl_ParseVar                           uintptr
	tcl_PkgPresent                         uintptr
	tcl_PkgPresentEx                       uintptr
	tcl_PkgProvide                         uintptr
	tcl_PkgRequire                         uintptr
	tcl_SetErrorCodeVA                     uintptr
	tcl_VarEvalVA                          uintptr
	tcl_WaitPid                            uintptr
	tcl_PanicVA                            uintptr
	tcl_GetVersion                         uintptr
	tcl_InitMemory                         uintptr
	tcl_StackChannel                       uintptr
	tcl_UnstackChannel                     uintptr
	tcl_GetStackedChannel                  uintptr
	tcl_SetMainLoop                        uintptr
	reserved285                            uintptr
	tcl_AppendObjToObj                     uintptr
	tcl_CreateEncoding                     uintptr
	tcl_CreateThreadExitHandler            uintptr
	tcl_DeleteThreadExitHandler            uintptr
	tcl_DiscardResult                      uintptr
	tcl_EvalEx                             uintptr
	tcl_EvalObjv                           uintptr
	tcl_EvalObjEx                          uintptr
	tcl_ExitThread                         uintptr
	tcl_ExternalToUtf                      uintptr
	tcl_ExternalToUtfDString               uintptr
	tcl_FinalizeThread                     uintptr
	tcl_FinalizeNotifier                   uintptr
	tcl_FreeEncoding                       uintptr
	tcl_GetCurrentThread                   uintptr
	tcl_GetEncoding                        uintptr
	tcl_GetEncodingName                    uintptr
	tcl_GetEncodingNames                   uintptr
	tcl_GetIndexFromObjStruct              uintptr
	tcl_GetThreadData                      uintptr
	tcl_GetVar2Ex                          uintptr
	tcl_InitNotifier                       uintptr
	tcl_MutexLock                          uintptr
	tcl_MutexUnlock                        uintptr
	tcl_ConditionNotify                    uintptr
	tcl_ConditionWait                      uintptr
	tcl_NumUtfChars                        uintptr
	tcl_ReadChars                          uintptr
	tcl_RestoreResult                      uintptr
	tcl_SaveResult                         uintptr
	tcl_SetSystemEncoding                  uintptr
	tcl_SetVar2Ex                          uintptr
	tcl_ThreadAlert                        uintptr
	tcl_ThreadQueueEvent                   uintptr
	tcl_UniCharAtIndex                     uintptr
	tcl_UniCharToLower                     uintptr
	tcl_UniCharToTitle                     uintptr
	tcl_UniCharToUpper                     uintptr
	tcl_UniCharToUtf                       uintptr
	tcl_UtfAtIndex                         uintptr
	tcl_UtfCharComplete                    uintptr
	tcl_UtfBackslash                       uintptr
	tcl_UtfFindFirst                       uintptr
	tcl_UtfFindLast                        uintptr
	tcl_UtfNext                            uintptr
	tcl_UtfPrev                            uintptr
	tcl_UtfToExternal                      uintptr
	tcl_UtfToExternalDString               uintptr
	tcl_UtfToLower                         uintptr
	tcl_UtfToTitle                         uintptr
	tcl_UtfToUniChar                       uintptr
	tcl_UtfToUpper                         uintptr
	tcl_WriteChars                         uintptr
	tcl_WriteObj                           uintptr
	tcl_GetString                          uintptr
	tcl_GetDefaultEncodingDir              uintptr
	tcl_SetDefaultEncodingDir              uintptr
	tcl_AlertNotifier                      uintptr
	tcl_ServiceModeHook                    uintptr
	tcl_UniCharIsAlnum                     uintptr
	tcl_UniCharIsAlpha                     uintptr
	tcl_UniCharIsDigit                     uintptr
	tcl_UniCharIsLower                     uintptr
	tcl_UniCharIsSpace                     uintptr
	tcl_UniCharIsUpper                     uintptr
	tcl_UniCharIsWordChar                  uintptr
	tcl_UniCharLen                         uintptr
	tcl_UniCharNcmp                        uintptr
	tcl_UniCharToUtfDString                uintptr
	tcl_UtfToUniCharDString                uintptr
	tcl_GetRegExpFromObj                   uintptr
	tcl_EvalTokens                         uintptr
	tcl_FreeParse                          uintptr
	tcl_LogCommandInfo                     uintptr
	tcl_ParseBraces                        uintptr
	tcl_ParseCommand                       uintptr
	tcl_ParseExpr                          uintptr
	tcl_ParseQuotedString                  uintptr
	tcl_ParseVarName                       uintptr
	tcl_GetCwd                             uintptr
	tcl_Chdir                              uintptr
	tcl_Access                             uintptr
	tcl_Stat                               uintptr
	tcl_UtfNcmp                            uintptr
	tcl_UtfNcasecmp                        uintptr
	tcl_StringCaseMatch                    uintptr
	tcl_UniCharIsControl                   uintptr
	tcl_UniCharIsGraph                     uintptr
	tcl_UniCharIsPrint                     uintptr
	tcl_UniCharIsPunct                     uintptr
	tcl_RegExpExecObj                      uintptr
	tcl_RegExpGetInfo                      uintptr
	tcl_NewUnicodeObj                      uintptr
	tcl_SetUnicodeObj                      uintptr
	tcl_GetCharLength                      uintptr
	tcl_GetUniChar                         uintptr
	tcl_GetUnicode                         uintptr
	tcl_GetRange                           uintptr
	tcl_AppendUnicodeToObj                 uintptr
	tcl_RegExpMatchObj                     uintptr
	tcl_SetNotifier                        uintptr
	tcl_GetAllocMutex                      uintptr
	tcl_GetChannelNames                    uintptr
	tcl_GetChannelNamesEx                  uintptr
	tcl_ProcObjCmd                         uintptr
	tcl_ConditionFinalize                  uintptr
	tcl_MutexFinalize                      uintptr
	tcl_CreateThread                       uintptr
	tcl_ReadRaw                            uintptr
	tcl_WriteRaw                           uintptr
	tcl_GetTopChannel                      uintptr
	tcl_ChannelBuffered                    uintptr
	tcl_ChannelName                        uintptr
	tcl_ChannelVersion                     uintptr
	tcl_ChannelBlockModeProc               uintptr
	tcl_ChannelCloseProc                   uintptr
	tcl_ChannelClose2Proc                  uintptr
	tcl_ChannelInputProc                   uintptr
	tcl_ChannelOutputProc                  uintptr
	tcl_ChannelSeekProc                    uintptr
	tcl_ChannelSetOptionProc               uintptr
	tcl_ChannelGetOptionProc               uintptr
	tcl_ChannelWatchProc                   uintptr
	tcl_ChannelGetHandleProc               uintptr
	tcl_ChannelFlushProc                   uintptr
	tcl_ChannelHandlerProc                 uintptr
	tcl_JoinThread                         uintptr
	tcl_IsChannelShared                    uintptr
	tcl_IsChannelRegistered                uintptr
	tcl_CutChannel                         uintptr
	tcl_SpliceChannel                      uintptr
	tcl_ClearChannelHandlers               uintptr
	tcl_IsChannelExisting                  uintptr
	tcl_UniCharNcasecmp                    uintptr
	tcl_UniCharCaseMatch                   uintptr
	tcl_FindHashEntry                      uintptr
	tcl_CreateHashEntry                    uintptr
	tcl_InitCustomHashTable                uintptr
	tcl_InitObjHashTable                   uintptr
	tcl_CommandTraceInfo                   uintptr
	tcl_TraceCommand                       uintptr
	tcl_UntraceCommand                     uintptr
	tcl_AttemptAlloc                       uintptr
	tcl_AttemptDbCkalloc                   uintptr
	tcl_AttemptRealloc                     uintptr
	tcl_AttemptDbCkrealloc                 uintptr
	tcl_AttemptSetObjLength                uintptr
	tcl_GetChannelThread                   uintptr
	tcl_GetUnicodeFromObj                  uintptr
	tcl_GetMathFuncInfo                    uintptr
	tcl_ListMathFuncs                      uintptr
	tcl_SubstObj                           uintptr
	tcl_DetachChannel                      uintptr
	tcl_IsStandardChannel                  uintptr
	tcl_FSCopyFile                         uintptr
	tcl_FSCopyDirectory                    uintptr
	tcl_FSCreateDirectory                  uintptr
	tcl_FSDeleteFile                       uintptr
	tcl_FSLoadFile                         uintptr
	tcl_FSMatchInDirectory                 uintptr
	tcl_FSLink                             uintptr
	tcl_FSRemoveDirectory                  uintptr
	tcl_FSRenameFile                       uintptr
	tcl_FSLstat                            uintptr
	tcl_FSUtime                            uintptr
	tcl_FSFileAttrsGet                     uintptr
	tcl_FSFileAttrsSet                     uintptr
	tcl_FSFileAttrStrings                  uintptr
	tcl_FSStat                             uintptr
	tcl_FSAccess                           uintptr
	tcl_FSOpenFileChannel                  uintptr
	tcl_FSGetCwd                           uintptr
	tcl_FSChdir                            uintptr
	tcl_FSConvertToPathType                uintptr
	tcl_FSJoinPath                         uintptr
	tcl_FSSplitPath                        uintptr
	tcl_FSEqualPaths                       uintptr
	tcl_FSGetNormalizedPath                uintptr
	tcl_FSJoinToPath                       uintptr
	tcl_FSGetInternalRep                   uintptr
	tcl_FSGetTranslatedPath                uintptr
	tcl_FSEvalFile                         uintptr
	tcl_FSNewNativePath                    uintptr
	tcl_FSGetNativePath                    uintptr
	tcl_FSFileSystemInfo                   uintptr
	tcl_FSPathSeparator                    uintptr
	tcl_FSListVolumes                      uintptr
	tcl_FSRegister                         uintptr
	tcl_FSUnregister                       uintptr
	tcl_FSData                             uintptr
	tcl_FSGetTranslatedStringPath          uintptr
	tcl_FSGetFileSystemForPath             uintptr
	tcl_FSGetPathType                      uintptr
	tcl_OutputBuffered                     uintptr
	tcl_FSMountsChanged                    uintptr
	tcl_EvalTokensStandard                 uintptr
	tcl_GetTime                            uintptr
	tcl_CreateObjTrace                     uintptr
	tcl_GetCommandInfoFromToken            uintptr
	tcl_SetCommandInfoFromToken            uintptr
	tcl_DbNewWideIntObj                    uintptr
	tcl_GetWideIntFromObj                  uintptr
	tcl_NewWideIntObj                      uintptr
	tcl_SetWideIntObj                      uintptr
	tcl_AllocStatBuf                       uintptr
	tcl_Seek                               uintptr
	tcl_Tell                               uintptr
	tcl_ChannelWideSeekProc                uintptr
	tcl_DictObjPut                         uintptr
	tcl_DictObjGet                         uintptr
	tcl_DictObjRemove                      uintptr
	tcl_DictObjSize                        uintptr
	tcl_DictObjFirst                       uintptr
	tcl_DictObjNext                        uintptr
	tcl_DictObjDone                        uintptr
	tcl_DictObjPutKeyList                  uintptr
	tcl_DictObjRemoveKeyList               uintptr
	tcl_NewDictObj                         uintptr
	tcl_DbNewDictObj                       uintptr
	tcl_RegisterConfig                     uintptr
	tcl_CreateNamespace                    uintptr
	tcl_DeleteNamespace                    uintptr
	tcl_AppendExportList                   uintptr
	tcl_Export                             uintptr
	tcl_Import                             uintptr
	tcl_ForgetImport                       uintptr
	tcl_GetCurrentNamespace                uintptr
	tcl_GetGlobalNamespace                 uintptr
	tcl_FindNamespace                      uintptr
	tcl_FindCommand                        uintptr
	tcl_GetCommandFromObj                  uintptr
	tcl_GetCommandFullName                 uintptr
	tcl_FSEvalFileEx                       uintptr
	tcl_SetExitProc                        uintptr
	tcl_LimitAddHandler                    uintptr
	tcl_LimitRemoveHandler                 uintptr
	tcl_LimitReady                         uintptr
	tcl_LimitCheck                         uintptr
	tcl_LimitExceeded                      uintptr
	tcl_LimitSetCommands                   uintptr
	tcl_LimitSetTime                       uintptr
	tcl_LimitSetGranularity                uintptr
	tcl_LimitTypeEnabled                   uintptr
	tcl_LimitTypeExceeded                  uintptr
	tcl_LimitTypeSet                       uintptr
	tcl_LimitTypeReset                     uintptr
	tcl_LimitGetCommands                   uintptr
	tcl_LimitGetTime                       uintptr
	tcl_LimitGetGranularity                uintptr
	tcl_SaveInterpState                    uintptr
	tcl_RestoreInterpState                 uintptr
	tcl_DiscardInterpState                 uintptr
	tcl_SetReturnOptions                   uintptr
	tcl_GetReturnOptions                   uintptr
	tcl_IsEnsemble                         uintptr
	tcl_CreateEnsemble                     uintptr
	tcl_FindEnsemble                       uintptr
	tcl_SetEnsembleSubcommandList          uintptr
	tcl_SetEnsembleMappingDict             uintptr
	tcl_SetEnsembleUnknownHandler          uintptr
	tcl_SetEnsembleFlags                   uintptr
	tcl_GetEnsembleSubcommandList          uintptr
	tcl_GetEnsembleMappingDict             uintptr
	tcl_GetEnsembleUnknownHandler          uintptr
	tcl_GetEnsembleFlags                   uintptr
	tcl_GetEnsembleNamespace               uintptr
	tcl_SetTimeProc                        uintptr
	tcl_QueryTimeProc                      uintptr
	tcl_ChannelThreadActionProc            uintptr
	tcl_NewBignumObj                       uintptr
	tcl_DbNewBignumObj                     uintptr
	tcl_SetBignumObj                       uintptr
	tcl_GetBignumFromObj                   uintptr
	tcl_TakeBignumFromObj                  uintptr
	tcl_TruncateChannel                    uintptr
	tcl_ChannelTruncateProc                uintptr
	tcl_SetChannelErrorInterp              uintptr
	tcl_GetChannelErrorInterp              uintptr
	tcl_SetChannelError                    uintptr
	tcl_GetChannelError                    uintptr
	tcl_InitBignumFromDouble               uintptr
	tcl_GetNamespaceUnknownHandler         uintptr
	tcl_SetNamespaceUnknownHandler         uintptr
	tcl_GetEncodingFromObj                 uintptr
	tcl_GetEncodingSearchPath              uintptr
	tcl_SetEncodingSearchPath              uintptr
	tcl_GetEncodingNameFromEnvironment     uintptr
	tcl_PkgRequireProc                     uintptr
	tcl_AppendObjToErrorInfo               uintptr
	tcl_AppendLimitedToObj                 uintptr
	tcl_Format                             uintptr
	tcl_AppendFormatToObj                  uintptr
	tcl_ObjPrintf                          uintptr
	tcl_AppendPrintfToObj                  uintptr
	tcl_CancelEval                         uintptr
	tcl_Canceled                           uintptr
	tcl_CreatePipe                         uintptr
	tcl_NRCreateCommand                    uintptr
	tcl_NREvalObj                          uintptr
	tcl_NREvalObjv                         uintptr
	tcl_NRCmdSwap                          uintptr
	tcl_NRAddCallback                      uintptr
	tcl_NRCallObjProc                      uintptr
	tcl_GetFSDeviceFromStat                uintptr
	tcl_GetFSInodeFromStat                 uintptr
	tcl_GetModeFromStat                    uintptr
	tcl_GetLinkCountFromStat               uintptr
	tcl_GetUserIdFromStat                  uintptr
	tcl_GetGroupIdFromStat                 uintptr
	tcl_GetDeviceTypeFromStat              uintptr
	tcl_GetAccessTimeFromStat              uintptr
	tcl_GetModificationTimeFromStat        uintptr
	tcl_GetChangeTimeFromStat              uintptr
	tcl_GetSizeFromStat                    uintptr
	tcl_GetBlocksFromStat                  uintptr
	tcl_GetBlockSizeFromStat               uintptr
	tcl_SetEnsembleParameterList           uintptr
	tcl_GetEnsembleParameterList           uintptr
	tcl_ParseArgsObjv                      uintptr
	tcl_GetErrorLine                       uintptr
	tcl_SetErrorLine                       uintptr
	tcl_TransferResult                     uintptr
	tcl_InterpActive                       uintptr
	tcl_BackgroundException                uintptr
	tcl_ZlibDeflate                        uintptr
	tcl_ZlibInflate                        uintptr
	tcl_ZlibCRC32                          uintptr
	tcl_ZlibAdler32                        uintptr
	tcl_ZlibStreamInit                     uintptr
	tcl_ZlibStreamGetCommandName           uintptr
	tcl_ZlibStreamEof                      uintptr
	tcl_ZlibStreamChecksum                 uintptr
	tcl_ZlibStreamPut                      uintptr
	tcl_ZlibStreamGet                      uintptr
	tcl_ZlibStreamClose                    uintptr
	tcl_ZlibStreamReset                    uintptr
	tcl_SetStartupScript                   uintptr
	tcl_GetStartupScript                   uintptr
	tcl_CloseEx                            uintptr
	tcl_NRExprObj                          uintptr
	tcl_NRSubstObj                         uintptr
	tcl_LoadFile                           uintptr
	tcl_FindSymbol                         uintptr
	tcl_FSUnloadFile                       uintptr
	tcl_ZlibStreamSetCompressionDictionary uintptr
	reserved631                            uintptr
	reserved632                            uintptr
	reserved633                            uintptr
	reserved634                            uintptr
	reserved635                            uintptr
	reserved636                            uintptr
	reserved637                            uintptr
	reserved638                            uintptr
	reserved639                            uintptr
	reserved640                            uintptr
	reserved641                            uintptr
	reserved642                            uintptr
	reserved643                            uintptr
	reserved644                            uintptr
	reserved645                            uintptr
	reserved646                            uintptr
	reserved647                            uintptr
	reserved648                            uintptr
	reserved649                            uintptr
	reserved650                            uintptr
	reserved651                            uintptr
	reserved652                            uintptr
	reserved653                            uintptr
	reserved654                            uintptr
	reserved655                            uintptr
	reserved656                            uintptr
	reserved657                            uintptr
	reserved658                            uintptr
	reserved659                            uintptr
	tclUnusedStubEntry                     uintptr
} /* tclDecls.h:2545:3 */

// Deprecated Tcl procedures:

// Include platform specific public function declarations that are accessible
// via the stubs table. Make all TclOO symbols MODULE_SCOPE (which only
// has effect on building it as a shared library). See ticket [3010352].

// tclPlatDecls.h --
//
//	Declarations of platform specific Tcl APIs.
//
// Copyright (c) 1998-1999 by Scriptics Corporation.
// All rights reserved.

// WARNING: This file is automatically generated by the tools/genStubs.tcl
// script.  Any modifications to the function declarations below should be made
// in the generic/tcl.decls script.

// TCHAR is needed here for win32, so if it is not defined yet do it here.
// This way, we don't need to include <tchar.h> just for one define.
type TCHAR1 = wchar_t /* tclPlatDecls.h:36:18 */

type LPTCH1 = LPWSTR        /* winnt.h:353:18 */
type PTCH1 = LPWSTR         /* winnt.h:353:24 */
type PTSTR1 = LPWSTR        /* winnt.h:354:18 */
type LPTSTR1 = LPWSTR       /* winnt.h:354:24 */
type PCTSTR1 = LPCWSTR      /* winnt.h:355:19 */
type LPCTSTR1 = LPCWSTR     /* winnt.h:355:26 */
type PUTSTR1 = LPUWSTR      /* winnt.h:356:19 */
type LPUTSTR1 = LPUWSTR     /* winnt.h:356:26 */
type PCUTSTR1 = LPCUWSTR    /* winnt.h:357:20 */
type LPCUTSTR1 = LPCUWSTR   /* winnt.h:357:28 */
type LP = LPWSTR            /* winnt.h:358:18 */
type PZZTSTR1 = PZZWSTR     /* winnt.h:359:19 */
type PCZZTSTR1 = PCZZWSTR   /* winnt.h:360:20 */
type PUZZTSTR1 = PUZZWSTR   /* winnt.h:361:20 */
type PCUZZTSTR1 = PCUZZWSTR /* winnt.h:362:21 */
type PZPTSTR1 = PZPWSTR     /* winnt.h:363:19 */
type PNZTCH1 = PNZWCH       /* winnt.h:364:18 */
type PCNZTCH1 = PCNZWCH     /* winnt.h:365:19 */
type PUNZTCH1 = PUNZWCH     /* winnt.h:366:19 */
type PCUNZTCH1 = PCUNZWCH   /* winnt.h:367:20 */

type OSVERSIONINFO1 = OSVERSIONINFOW     /* winnt.h:7950:5 */
type POSVERSIONINFO1 = POSVERSIONINFOW   /* winnt.h:7951:5 */
type LPOSVERSIONINFO1 = LPOSVERSIONINFOW /* winnt.h:7952:5 */

type OSVERSIONINFOEX1 = OSVERSIONINFOEXW     /* winnt.h:7982:5 */
type POSVERSIONINFOEX1 = POSVERSIONINFOEXW   /* winnt.h:7983:5 */
type LPOSVERSIONINFOEX1 = LPOSVERSIONINFOEXW /* winnt.h:7984:5 */

type WIN32_FIND_DATA1 = WIN32_FIND_DATAW     /* minwinbase.h:97:3 */
type PWIN32_FIND_DATA1 = PWIN32_FIND_DATAW   /* minwinbase.h:98:3 */
type LPWIN32_FIND_DATA1 = LPWIN32_FIND_DATAW /* minwinbase.h:99:3 */

type STARTUPINFO1 = STARTUPINFOW     /* processthreadsapi.h:93:3 */
type LPSTARTUPINFO1 = LPSTARTUPINFOW /* processthreadsapi.h:94:3 */

type HW_PROFILE_INFO1 = HW_PROFILE_INFOW     /* winbase.h:2490:3 */
type LPHW_PROFILE_INFO1 = LPHW_PROFILE_INFOW /* winbase.h:2491:3 */

type ACTCTX1 = ACTCTXW   /* winbase.h:2673:3 */
type PACTCTX1 = PACTCTXW /* winbase.h:2674:3 */

type PCACTCTX1 = PCACTCTXW /* winbase.h:2679:3 */

type LOGCOLORSPACE1 = LOGCOLORSPACEW     /* wingdi.h:578:3 */
type LPLOGCOLORSPACE1 = LPLOGCOLORSPACEW /* wingdi.h:579:3 */

type BCHAR1 = WCHAR /* wingdi.h:807:17 */

type TEXTMETRIC1 = TEXTMETRICW     /* wingdi.h:864:3 */
type PTEXTMETRIC1 = PTEXTMETRICW   /* wingdi.h:865:3 */
type NPTEXTMETRIC1 = NPTEXTMETRICW /* wingdi.h:866:3 */
type LPTEXTMETRIC1 = LPTEXTMETRICW /* wingdi.h:867:3 */

type NEWTEXTMETRIC1 = NEWTEXTMETRICW     /* wingdi.h:939:3 */
type PNEWTEXTMETRIC1 = PNEWTEXTMETRICW   /* wingdi.h:940:3 */
type NPNEWTEXTMETRIC1 = NPNEWTEXTMETRICW /* wingdi.h:941:3 */
type LPNEWTEXTMETRIC1 = LPNEWTEXTMETRICW /* wingdi.h:942:3 */

type NEWTEXTMETRICEX1 = NEWTEXTMETRICEXW /* wingdi.h:956:3 */

type LOGFONT1 = LOGFONTW     /* wingdi.h:1077:3 */
type PLOGFONT1 = PLOGFONTW   /* wingdi.h:1078:3 */
type NPLOGFONT1 = NPLOGFONTW /* wingdi.h:1079:3 */
type LPLOGFONT1 = LPLOGFONTW /* wingdi.h:1080:3 */

type ENUMLOGFONT1 = ENUMLOGFONTW     /* wingdi.h:1098:3 */
type LPENUMLOGFONT1 = LPENUMLOGFONTW /* wingdi.h:1099:3 */

type ENUMLOGFONTEX1 = ENUMLOGFONTEXW     /* wingdi.h:1115:3 */
type LPENUMLOGFONTEX1 = LPENUMLOGFONTEXW /* wingdi.h:1116:3 */

type EXTLOGFONT1 = EXTLOGFONTW     /* wingdi.h:1384:3 */
type PEXTLOGFONT1 = PEXTLOGFONTW   /* wingdi.h:1385:3 */
type NPEXTLOGFONT1 = NPEXTLOGFONTW /* wingdi.h:1386:3 */
type LPEXTLOGFONT1 = LPEXTLOGFONTW /* wingdi.h:1387:3 */

type DEVMODE1 = DEVMODEW     /* wingdi.h:1769:3 */
type PDEVMODE1 = PDEVMODEW   /* wingdi.h:1770:3 */
type NPDEVMODE1 = NPDEVMODEW /* wingdi.h:1771:3 */
type LPDEVMODE1 = LPDEVMODEW /* wingdi.h:1772:3 */

type DISPLAY_DEVICE1 = DISPLAY_DEVICEW     /* wingdi.h:2041:3 */
type PDISPLAY_DEVICE1 = PDISPLAY_DEVICEW   /* wingdi.h:2042:3 */
type LPDISPLAY_DEVICE1 = LPDISPLAY_DEVICEW /* wingdi.h:2043:3 */

type OUTLINETEXTMETRIC1 = OUTLINETEXTMETRICW     /* wingdi.h:2525:3 */
type POUTLINETEXTMETRIC1 = POUTLINETEXTMETRICW   /* wingdi.h:2526:3 */
type NPOUTLINETEXTMETRIC1 = NPOUTLINETEXTMETRICW /* wingdi.h:2527:3 */
type LPOUTLINETEXTMETRIC1 = LPOUTLINETEXTMETRICW /* wingdi.h:2528:3 */

type POLYTEXT1 = POLYTEXTW     /* wingdi.h:2553:3 */
type PPOLYTEXT1 = PPOLYTEXTW   /* wingdi.h:2554:3 */
type NPPOLYTEXT1 = NPPOLYTEXTW /* wingdi.h:2555:3 */
type LPPOLYTEXT1 = LPPOLYTEXTW /* wingdi.h:2556:3 */

type GCP_RESULTS1 = GCP_RESULTSW     /* wingdi.h:2679:3 */
type LPGCP_RESULTS1 = LPGCP_RESULTSW /* wingdi.h:2680:3 */

type FONTENUMPROC1 = FONTENUMPROCW /* wingdi.h:2767:3 */

type AXISINFO1 = AXISINFOW     /* wingdi.h:3079:3 */
type PAXISINFO1 = PAXISINFOW   /* wingdi.h:3080:3 */
type LPAXISINFO1 = LPAXISINFOW /* wingdi.h:3081:3 */

type AXESLIST1 = AXESLISTW     /* wingdi.h:3095:3 */
type PAXESLIST1 = PAXESLISTW   /* wingdi.h:3096:3 */
type LPAXESLIST1 = LPAXESLISTW /* wingdi.h:3097:3 */

type ENUMLOGFONTEXDV1 = ENUMLOGFONTEXDVW     /* wingdi.h:3109:3 */
type PENUMLOGFONTEXDV1 = PENUMLOGFONTEXDVW   /* wingdi.h:3110:3 */
type LPENUMLOGFONTEXDV1 = LPENUMLOGFONTEXDVW /* wingdi.h:3111:3 */

type ENUMTEXTMETRIC1 = ENUMTEXTMETRICW     /* wingdi.h:3129:3 */
type PENUMTEXTMETRIC1 = PENUMTEXTMETRICW   /* wingdi.h:3130:3 */
type LPENUMTEXTMETRIC1 = LPENUMTEXTMETRICW /* wingdi.h:3131:3 */

type DOCINFO1 = DOCINFOW     /* wingdi.h:3416:3 */
type LPDOCINFO1 = LPDOCINFOW /* wingdi.h:3417:3 */

type PROPENUMPROC1 = PROPENUMPROCW           /* winuser.h:93:3 */
type PROPENUMPROCEX1 = PROPENUMPROCEXW       /* winuser.h:94:3 */
type EDITWORDBREAKPROC1 = EDITWORDBREAKPROCW /* winuser.h:95:3 */

type WINSTAENUMPROC1 = WINSTAENUMPROCW   /* winuser.h:113:3 */
type DESKTOPENUMPROC1 = DESKTOPENUMPROCW /* winuser.h:114:3 */

type CBT_CREATEWND1 = CBT_CREATEWNDW     /* winuser.h:504:3 */
type LPCBT_CREATEWND1 = LPCBT_CREATEWNDW /* winuser.h:505:3 */

type WNDCLASSEX1 = WNDCLASSEXW     /* winuser.h:913:3 */
type PWNDCLASSEX1 = PWNDCLASSEXW   /* winuser.h:914:3 */
type NPWNDCLASSEX1 = NPWNDCLASSEXW /* winuser.h:915:3 */
type LPWNDCLASSEX1 = LPWNDCLASSEXW /* winuser.h:916:3 */

type WNDCLASS1 = WNDCLASSW     /* winuser.h:944:3 */
type PWNDCLASS1 = PWNDCLASSW   /* winuser.h:945:3 */
type NPWNDCLASS1 = NPWNDCLASSW /* winuser.h:946:3 */
type LPWNDCLASS1 = LPWNDCLASSW /* winuser.h:947:3 */

type POWERBROADCAST_SETTING = struct {
	PowerSetting GUID
	DataLength   DWORD
	Data         [1]UCHAR
	_            [3]byte
}                                      /* winuser.h:1317:5 */
type PPOWERBROADCAST_SETTING = uintptr /* winuser.h:1317:28 */

type CREATESTRUCT1 = CREATESTRUCTW     /* winuser.h:1862:3 */
type LPCREATESTRUCT1 = LPCREATESTRUCTW /* winuser.h:1863:3 */

type HPOWERNOTIFY = HANDLE   /* winuser.h:2120:18 */
type PHPOWERNOTIFY = uintptr /* winuser.h:2121:24 */

type MENUITEMINFO1 = MENUITEMINFOW     /* winuser.h:3357:3 */
type LPMENUITEMINFO1 = LPMENUITEMINFOW /* winuser.h:3358:3 */

type LPCMENUITEMINFO1 = LPCMENUITEMINFOW /* winuser.h:3363:3 */

type MSGBOXPARAMS1 = MSGBOXPARAMSW     /* winuser.h:3744:3 */
type PMSGBOXPARAMS1 = PMSGBOXPARAMSW   /* winuser.h:3745:3 */
type LPMSGBOXPARAMS1 = LPMSGBOXPARAMSW /* winuser.h:3746:3 */

type MDICREATESTRUCT1 = MDICREATESTRUCTW     /* winuser.h:4933:3 */
type LPMDICREATESTRUCT1 = LPMDICREATESTRUCTW /* winuser.h:4934:3 */

type MULTIKEYHELP1 = MULTIKEYHELPW     /* winuser.h:4979:3 */
type PMULTIKEYHELP1 = PMULTIKEYHELPW   /* winuser.h:4980:3 */
type LPMULTIKEYHELP1 = LPMULTIKEYHELPW /* winuser.h:4981:3 */

type HELPWININFO1 = HELPWININFOW     /* winuser.h:5003:3 */
type PHELPWININFO1 = PHELPWININFOW   /* winuser.h:5004:3 */
type LPHELPWININFO1 = LPHELPWININFOW /* winuser.h:5005:3 */

type NONCLIENTMETRICS1 = NONCLIENTMETRICSW     /* winuser.h:5450:3 */
type PNONCLIENTMETRICS1 = PNONCLIENTMETRICSW   /* winuser.h:5451:3 */
type LPNONCLIENTMETRICS1 = LPNONCLIENTMETRICSW /* winuser.h:5452:3 */

type ICONMETRICS1 = ICONMETRICSW     /* winuser.h:5498:3 */
type PICONMETRICS1 = PICONMETRICSW   /* winuser.h:5499:3 */
type LPICONMETRICS1 = LPICONMETRICSW /* winuser.h:5500:3 */

type SERIALKEYS1 = SERIALKEYSW     /* winuser.h:5529:3 */
type LPSERIALKEYS1 = LPSERIALKEYSW /* winuser.h:5530:3 */

type HIGHCONTRAST1 = HIGHCONTRASTW     /* winuser.h:5544:3 */
type LPHIGHCONTRAST1 = LPHIGHCONTRASTW /* winuser.h:5545:3 */

type SOUNDSENTRY1 = SOUNDSENTRYW     /* winuser.h:5774:3 */
type LPSOUNDSENTRY1 = LPSOUNDSENTRYW /* winuser.h:5775:3 */

type MONITORINFOEX1 = MONITORINFOEXW     /* winuser.h:5839:3 */
type LPMONITORINFOEX1 = LPMONITORINFOEXW /* winuser.h:5840:3 */

type CPINFOEX1 = CPINFOEXW     /* winnls.h:672:3 */
type LPCPINFOEX1 = LPCPINFOEXW /* winnls.h:673:3 */

type NUMBERFMT1 = NUMBERFMTW     /* winnls.h:692:3 */
type LPNUMBERFMT1 = LPNUMBERFMTW /* winnls.h:693:3 */

type CURRENCYFMT1 = CURRENCYFMTW     /* winnls.h:717:3 */
type LPCURRENCYFMT1 = LPCURRENCYFMTW /* winnls.h:718:3 */

type PVALUE1 = PVALUEW   /* winreg.h:84:3 */
type PPVALUE1 = PPVALUEW /* winreg.h:85:3 */

type VALENT1 = VALENTW   /* winreg.h:116:3 */
type PVALENT1 = PVALENTW /* winreg.h:117:3 */

type NETRESOURCE1 = NETRESOURCEW     /* winnetwk.h:74:3 */
type LPNETRESOURCE1 = LPNETRESOURCEW /* winnetwk.h:75:3 */

type CONNECTDLGSTRUCT1 = CONNECTDLGSTRUCTW     /* winnetwk.h:145:3 */
type LPCONNECTDLGSTRUCT1 = LPCONNECTDLGSTRUCTW /* winnetwk.h:146:3 */

type DISCDLGSTRUCT1 = DISCDLGSTRUCTW     /* winnetwk.h:177:3 */
type LPDISCDLGSTRUCT1 = LPDISCDLGSTRUCTW /* winnetwk.h:178:3 */

type UNIVERSAL_NAME_INFO1 = UNIVERSAL_NAME_INFOW     /* winnetwk.h:212:3 */
type LPUNIVERSAL_NAME_INFO1 = LPUNIVERSAL_NAME_INFOW /* winnetwk.h:213:3 */

type REMOTE_NAME_INFO1 = REMOTE_NAME_INFOW     /* winnetwk.h:227:3 */
type LPREMOTE_NAME_INFO1 = LPREMOTE_NAME_INFOW /* winnetwk.h:228:3 */

type SERVICE_DESCRIPTION1 = SERVICE_DESCRIPTIONW     /* winsvc.h:103:3 */
type LPSERVICE_DESCRIPTION1 = LPSERVICE_DESCRIPTIONW /* winsvc.h:104:3 */

type SERVICE_FAILURE_ACTIONS1 = SERVICE_FAILURE_ACTIONSW     /* winsvc.h:131:3 */
type LPSERVICE_FAILURE_ACTIONS1 = LPSERVICE_FAILURE_ACTIONSW /* winsvc.h:132:3 */

type ENUM_SERVICE_STATUS1 = ENUM_SERVICE_STATUSW     /* winsvc.h:181:3 */
type LPENUM_SERVICE_STATUS1 = LPENUM_SERVICE_STATUSW /* winsvc.h:182:3 */

type ENUM_SERVICE_STATUS_PROCESS1 = ENUM_SERVICE_STATUS_PROCESSW     /* winsvc.h:196:3 */
type LPENUM_SERVICE_STATUS_PROCESS1 = LPENUM_SERVICE_STATUS_PROCESSW /* winsvc.h:197:3 */

type QUERY_SERVICE_LOCK_STATUS1 = QUERY_SERVICE_LOCK_STATUSW     /* winsvc.h:213:3 */
type LPQUERY_SERVICE_LOCK_STATUS1 = LPQUERY_SERVICE_LOCK_STATUSW /* winsvc.h:214:3 */

type QUERY_SERVICE_CONFIG1 = QUERY_SERVICE_CONFIGW     /* winsvc.h:240:3 */
type LPQUERY_SERVICE_CONFIG1 = LPQUERY_SERVICE_CONFIGW /* winsvc.h:241:3 */

type SERVICE_TABLE_ENTRY1 = SERVICE_TABLE_ENTRYW     /* winsvc.h:258:3 */
type LPSERVICE_TABLE_ENTRY1 = LPSERVICE_TABLE_ENTRYW /* winsvc.h:259:3 */

type REGISTERWORD1 = REGISTERWORDW     /* imm.h:60:3 */
type PREGISTERWORD1 = PREGISTERWORDW   /* imm.h:61:3 */
type NPREGISTERWORD1 = NPREGISTERWORDW /* imm.h:62:3 */
type LPREGISTERWORD1 = LPREGISTERWORDW /* imm.h:63:3 */

type STYLEBUF1 = STYLEBUFW     /* imm.h:88:3 */
type PSTYLEBUF1 = PSTYLEBUFW   /* imm.h:89:3 */
type NPSTYLEBUF1 = NPSTYLEBUFW /* imm.h:90:3 */
type LPSTYLEBUF1 = LPSTYLEBUFW /* imm.h:91:3 */

type IMEMENUITEMINFO1 = IMEMENUITEMINFOW     /* imm.h:119:3 */
type PIMEMENUITEMINFO1 = PIMEMENUITEMINFOW   /* imm.h:120:3 */
type NPIMEMENUITEMINFO1 = NPIMEMENUITEMINFOW /* imm.h:121:3 */
type LPIMEMENUITEMINFO1 = LPIMEMENUITEMINFOW /* imm.h:122:3 */

type _TCHAR1 = wchar_t  /* tchar.h:110:19 */
type _TSCHAR1 = wchar_t /* tchar.h:111:19 */
type _TUCHAR1 = wchar_t /* tchar.h:112:19 */
type _TXCHAR1 = wchar_t /* tchar.h:113:19 */
type _TINT1 = wint_t    /* tchar.h:114:18 */

var _dowildcard int32 = 0 /* tclAppInit.c:39:5 */

// The following #if block allows you to change how Tcl finds the startup
// script, prime the library or encoding paths, fiddle with the argv, etc.,
// without needing to rewrite Tcl_Main()

//----------------------------------------------------------------------
//
// main --
//
//	This is the main program for the application.
//
// Results:
//	None: Tcl_Main never returns here, so this procedure never returns
//	either.
//
// Side effects:
//	Just about anything, since from here we call arbitrary Tcl code.
//
//----------------------------------------------------------------------

func main1(tls *libc.TLS, argc int32, dummy uintptr) int32 { /* tclAppInit.c:88:1: */
	bp := tls.Alloc(16)
	defer tls.Free(16)
	*(*int32)(unsafe.Pointer(bp)) = argc

	// var argv uintptr at bp+8, 8

	var p uintptr

	// Set up the default locale to be standard "C" locale so parsing is
	// performed correctly.

	libc.Xsetlocale(tls, LC_ALL, ts+9093)

	// Get our args from the c-runtime. Ignore command line.

	setargv(tls, bp, bp+8)

	// Forward slashes substituted for backslashes.

	for p = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(bp + 8 /* argv */)))); int32(*(*TCHAR1)(unsafe.Pointer(p))) != 0; p += 2 {
		if int32(*(*TCHAR1)(unsafe.Pointer(p))) == '\\' {
			*(*TCHAR1)(unsafe.Pointer(p)) = TCHAR1('/')
		}
	}

	tcl.XTcl_MainExW(tls, *(*int32)(unsafe.Pointer(bp /* argc */)), *(*uintptr)(unsafe.Pointer(bp + 8 /* argv */)), *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, uintptr) int32
	}{Tcl_AppInit})), tcl.XTcl_CreateInterp(tls))
	return 0 // Needed only to prevent compiler warning.
}

//----------------------------------------------------------------------
//
// Tcl_AppInit --
//
//	This procedure performs application-specific initialization. Most
//	applications, especially those that incorporate additional packages,
//	will have their own version of this procedure.
//
// Results:
//	Returns a standard Tcl completion code, and leaves an error message in
//	the interp's result if an error occurs.
//
// Side effects:
//	Depends on the startup script.
//
//----------------------------------------------------------------------

func Tcl_AppInit(tls *libc.TLS, interp uintptr) int32 { /* tclAppInit.c:155:1: */
	if tcl.XTcl_Init(tls, interp) == TCL_ERROR {
		return TCL_ERROR
	}

	if Tcltest_Init(tls, interp) == TCL_ERROR {
		return TCL_ERROR
	}
	tcl.XTcl_StaticPackage(tls, interp, ts+27, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, uintptr) int32
	}{Tcltest_Init})), *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, uintptr) int32
	}{Tcltest_SafeInit})))

	// Call the init procedures for included packages. Each call should look
	// like this:
	//
	// if (Mod_Init(interp) == TCL_ERROR) {
	//     return TCL_ERROR;
	// }
	//
	// where "Mod" is the name of the module. (Dynamically-loadable packages
	// should have the same entry-point name.)

	// Call Tcl_CreateCommand for application-specific commands, if they
	// weren't already created by the init procedures called above.

	// Specify a user-specific startup file to invoke if the application is
	// run interactively. Typically the startup file is "~/.apprc" where "app"
	// is the name of the application. If this line is deleted then no
	// user-specific startup file will be run under any conditions.

	tcl.XTcl_ObjSetVar2(tls, interp, tcl.XTcl_NewStringObj(tls, ts+1166, -1), uintptr(0),
		tcl.XTcl_NewStringObj(tls, ts+9095, -1), TCL_GLOBAL_ONLY)
	return TCL_OK
}

//-------------------------------------------------------------------------
//
// setargv --
//
//	Parse the Windows command line string into argc/argv. Done here
//	because we don't trust the builtin argument parser in crt0. Windows
//	applications are responsible for breaking their command line into
//	arguments.
//
//	2N backslashes + quote -> N backslashes + begin quoted string
//	2N + 1 backslashes + quote -> literal
//	N backslashes + non-quote -> literal
//	quote + quote in a quoted string -> single quote
//	quote + quote not in quoted string -> empty string
//	quote -> begin quoted string
//
// Results:
//	Fills argcPtr with the number of arguments and argvPtr with the array
//	of arguments.
//
// Side effects:
//	Memory allocated.
//
//--------------------------------------------------------------------------

func setargv(tls *libc.TLS, argcPtr uintptr, argvPtr uintptr) { /* tclAppInit.c:239:1: */
	var cmdLine uintptr
	var p uintptr
	var arg uintptr
	var argSpace uintptr
	var argv uintptr
	var argc int32
	var size int32
	var inquote int32
	var copy int32
	var slashes int32

	cmdLine = libc.XGetCommandLineW(tls)

	// Precompute an overly pessimistic guess at the number of arguments in
	// the command line by counting non-space spans.

	size = 2
	for p = cmdLine; int32(*(*TCHAR1)(unsafe.Pointer(p))) != 0; p += 2 {
		if int32(*(*TCHAR1)(unsafe.Pointer(p))) == ' ' || int32(*(*TCHAR1)(unsafe.Pointer(p))) == '\t' { // INTL: ISO space.
			size++
			for int32(*(*TCHAR1)(unsafe.Pointer(p))) == ' ' || int32(*(*TCHAR1)(unsafe.Pointer(p))) == '\t' { // INTL: ISO space.
				p += 2
			}
			if int32(*(*TCHAR1)(unsafe.Pointer(p))) == 0 {
				break
			}
		}
	}

	// Make sure we don't call ckalloc through the (not yet initialized) stub table

	argSpace = tcl.XTcl_Alloc(tls, uint32(uint64(size)*uint64(unsafe.Sizeof(uintptr(0)))+libc.Xwcslen(tls, cmdLine)*size_t(unsafe.Sizeof(TCHAR1(0)))+uint64(unsafe.Sizeof(TCHAR1(0)))))
	argv = argSpace
	argSpace += 2 * uintptr(uint64(size)*(uint64(unsafe.Sizeof(uintptr(0)))/uint64(unsafe.Sizeof(TCHAR1(0)))))
	size--

	p = cmdLine
	for argc = 0; argc < size; argc++ {
		*(*uintptr)(unsafe.Pointer(argv + uintptr(argc)*8)) = libc.AssignUintptr(&arg, argSpace)
		for int32(*(*TCHAR1)(unsafe.Pointer(p))) == ' ' || int32(*(*TCHAR1)(unsafe.Pointer(p))) == '\t' { // INTL: ISO space.
			p += 2
		}
		if int32(*(*TCHAR1)(unsafe.Pointer(p))) == 0 {
			break
		}

		inquote = 0
		slashes = 0
		for 1 != 0 {
			copy = 1
			for int32(*(*TCHAR1)(unsafe.Pointer(p))) == '\\' {
				slashes++
				p += 2
			}
			if int32(*(*TCHAR1)(unsafe.Pointer(p))) == '"' {
				if slashes&1 == 0 {
					copy = 0
					if inquote != 0 && int32(*(*TCHAR1)(unsafe.Pointer(p + 1*2))) == '"' {
						p += 2
						copy = 1
					} else {
						inquote = libc.BoolInt32(!(inquote != 0))
					}
				}
				slashes >>= 1
			}

			for slashes != 0 {
				*(*TCHAR1)(unsafe.Pointer(arg)) = TCHAR1('\\')
				arg += 2
				slashes--
			}

			if int32(*(*TCHAR1)(unsafe.Pointer(p))) == 0 || !(inquote != 0) && (int32(*(*TCHAR1)(unsafe.Pointer(p))) == ' ' || int32(*(*TCHAR1)(unsafe.Pointer(p))) == '\t') { // INTL: ISO space.
				break
			}
			if copy != 0 {
				*(*TCHAR1)(unsafe.Pointer(arg)) = *(*TCHAR1)(unsafe.Pointer(p))
				arg += 2
			}
			p += 2
		}
		*(*TCHAR1)(unsafe.Pointer(arg)) = TCHAR1(0)
		argSpace = arg + uintptr(1)*2
	}
	*(*uintptr)(unsafe.Pointer(argv + uintptr(argc)*8)) = uintptr(0)

	*(*int32)(unsafe.Pointer(argcPtr)) = argc
	*(*uintptr)(unsafe.Pointer(argvPtr)) = argv
}

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:

type TCHAR2 = int8 /* winnt.h:373:16 */

type LPTCH2 = LPSTR       /* winnt.h:377:17 */
type PTCH2 = LPSTR        /* winnt.h:377:23 */
type PTSTR2 = LPSTR       /* winnt.h:379:17 */
type LPTSTR2 = LPSTR      /* winnt.h:379:23 */
type PUTSTR2 = LPSTR      /* winnt.h:379:30 */
type LPUTSTR2 = LPSTR     /* winnt.h:379:37 */
type PCTSTR2 = LPCSTR     /* winnt.h:380:18 */
type LPCTSTR2 = LPCSTR    /* winnt.h:380:25 */
type PCUTSTR2 = LPCSTR    /* winnt.h:380:33 */
type LPCUTSTR2 = LPCSTR   /* winnt.h:380:41 */
type PZZTSTR2 = PZZSTR    /* winnt.h:381:18 */
type PUZZTSTR2 = PZZSTR   /* winnt.h:381:27 */
type PCZZTSTR2 = PCZZSTR  /* winnt.h:382:19 */
type PCUZZTSTR2 = PCZZSTR /* winnt.h:382:29 */
type PZPTSTR2 = PZPSTR    /* winnt.h:383:18 */
type PNZTCH2 = PNZCH      /* winnt.h:384:17 */
type PUNZTCH2 = PNZCH     /* winnt.h:384:25 */
type PCNZTCH2 = PCNZCH    /* winnt.h:385:18 */
type PCUNZTCH2 = PCNZCH   /* winnt.h:385:27 */

type OSVERSIONINFO2 = OSVERSIONINFOA     /* winnt.h:7950:5 */
type POSVERSIONINFO2 = POSVERSIONINFOA   /* winnt.h:7951:5 */
type LPOSVERSIONINFO2 = LPOSVERSIONINFOA /* winnt.h:7952:5 */

type OSVERSIONINFOEX2 = OSVERSIONINFOEXA     /* winnt.h:7982:5 */
type POSVERSIONINFOEX2 = POSVERSIONINFOEXA   /* winnt.h:7983:5 */
type LPOSVERSIONINFOEX2 = LPOSVERSIONINFOEXA /* winnt.h:7984:5 */

type WIN32_FIND_DATA2 = WIN32_FIND_DATAA     /* minwinbase.h:97:3 */
type PWIN32_FIND_DATA2 = PWIN32_FIND_DATAA   /* minwinbase.h:98:3 */
type LPWIN32_FIND_DATA2 = LPWIN32_FIND_DATAA /* minwinbase.h:99:3 */

type STARTUPINFO2 = STARTUPINFOA     /* processthreadsapi.h:93:3 */
type LPSTARTUPINFO2 = LPSTARTUPINFOA /* processthreadsapi.h:94:3 */

type HW_PROFILE_INFO2 = HW_PROFILE_INFOA     /* winbase.h:2490:3 */
type LPHW_PROFILE_INFO2 = LPHW_PROFILE_INFOA /* winbase.h:2491:3 */

type ACTCTX2 = ACTCTXA   /* winbase.h:2673:3 */
type PACTCTX2 = PACTCTXA /* winbase.h:2674:3 */

type PCACTCTX2 = PCACTCTXA /* winbase.h:2679:3 */

type LOGCOLORSPACE2 = LOGCOLORSPACEA     /* wingdi.h:578:3 */
type LPLOGCOLORSPACE2 = LPLOGCOLORSPACEA /* wingdi.h:579:3 */

type BCHAR2 = BYTE /* wingdi.h:809:16 */

type TEXTMETRIC2 = TEXTMETRICA     /* wingdi.h:864:3 */
type PTEXTMETRIC2 = PTEXTMETRICA   /* wingdi.h:865:3 */
type NPTEXTMETRIC2 = NPTEXTMETRICA /* wingdi.h:866:3 */
type LPTEXTMETRIC2 = LPTEXTMETRICA /* wingdi.h:867:3 */

type NEWTEXTMETRIC2 = NEWTEXTMETRICA     /* wingdi.h:939:3 */
type PNEWTEXTMETRIC2 = PNEWTEXTMETRICA   /* wingdi.h:940:3 */
type NPNEWTEXTMETRIC2 = NPNEWTEXTMETRICA /* wingdi.h:941:3 */
type LPNEWTEXTMETRIC2 = LPNEWTEXTMETRICA /* wingdi.h:942:3 */

type NEWTEXTMETRICEX2 = NEWTEXTMETRICEXA /* wingdi.h:956:3 */

type LOGFONT2 = LOGFONTA     /* wingdi.h:1077:3 */
type PLOGFONT2 = PLOGFONTA   /* wingdi.h:1078:3 */
type NPLOGFONT2 = NPLOGFONTA /* wingdi.h:1079:3 */
type LPLOGFONT2 = LPLOGFONTA /* wingdi.h:1080:3 */

type ENUMLOGFONT2 = ENUMLOGFONTA     /* wingdi.h:1098:3 */
type LPENUMLOGFONT2 = LPENUMLOGFONTA /* wingdi.h:1099:3 */

type ENUMLOGFONTEX2 = ENUMLOGFONTEXA     /* wingdi.h:1115:3 */
type LPENUMLOGFONTEX2 = LPENUMLOGFONTEXA /* wingdi.h:1116:3 */

type EXTLOGFONT2 = EXTLOGFONTA     /* wingdi.h:1384:3 */
type PEXTLOGFONT2 = PEXTLOGFONTA   /* wingdi.h:1385:3 */
type NPEXTLOGFONT2 = NPEXTLOGFONTA /* wingdi.h:1386:3 */
type LPEXTLOGFONT2 = LPEXTLOGFONTA /* wingdi.h:1387:3 */

type DEVMODE2 = DEVMODEA     /* wingdi.h:1769:3 */
type PDEVMODE2 = PDEVMODEA   /* wingdi.h:1770:3 */
type NPDEVMODE2 = NPDEVMODEA /* wingdi.h:1771:3 */
type LPDEVMODE2 = LPDEVMODEA /* wingdi.h:1772:3 */

type DISPLAY_DEVICE2 = DISPLAY_DEVICEA     /* wingdi.h:2041:3 */
type PDISPLAY_DEVICE2 = PDISPLAY_DEVICEA   /* wingdi.h:2042:3 */
type LPDISPLAY_DEVICE2 = LPDISPLAY_DEVICEA /* wingdi.h:2043:3 */

type OUTLINETEXTMETRIC2 = OUTLINETEXTMETRICA     /* wingdi.h:2525:3 */
type POUTLINETEXTMETRIC2 = POUTLINETEXTMETRICA   /* wingdi.h:2526:3 */
type NPOUTLINETEXTMETRIC2 = NPOUTLINETEXTMETRICA /* wingdi.h:2527:3 */
type LPOUTLINETEXTMETRIC2 = LPOUTLINETEXTMETRICA /* wingdi.h:2528:3 */

type POLYTEXT2 = POLYTEXTA     /* wingdi.h:2553:3 */
type PPOLYTEXT2 = PPOLYTEXTA   /* wingdi.h:2554:3 */
type NPPOLYTEXT2 = NPPOLYTEXTA /* wingdi.h:2555:3 */
type LPPOLYTEXT2 = LPPOLYTEXTA /* wingdi.h:2556:3 */

type GCP_RESULTS2 = GCP_RESULTSA     /* wingdi.h:2679:3 */
type LPGCP_RESULTS2 = LPGCP_RESULTSA /* wingdi.h:2680:3 */

type FONTENUMPROC2 = FONTENUMPROCA /* wingdi.h:2767:3 */

type AXISINFO2 = AXISINFOA     /* wingdi.h:3079:3 */
type PAXISINFO2 = PAXISINFOA   /* wingdi.h:3080:3 */
type LPAXISINFO2 = LPAXISINFOA /* wingdi.h:3081:3 */

type AXESLIST2 = AXESLISTA     /* wingdi.h:3095:3 */
type PAXESLIST2 = PAXESLISTA   /* wingdi.h:3096:3 */
type LPAXESLIST2 = LPAXESLISTA /* wingdi.h:3097:3 */

type ENUMLOGFONTEXDV2 = ENUMLOGFONTEXDVA     /* wingdi.h:3109:3 */
type PENUMLOGFONTEXDV2 = PENUMLOGFONTEXDVA   /* wingdi.h:3110:3 */
type LPENUMLOGFONTEXDV2 = LPENUMLOGFONTEXDVA /* wingdi.h:3111:3 */

type ENUMTEXTMETRIC2 = ENUMTEXTMETRICA     /* wingdi.h:3129:3 */
type PENUMTEXTMETRIC2 = PENUMTEXTMETRICA   /* wingdi.h:3130:3 */
type LPENUMTEXTMETRIC2 = LPENUMTEXTMETRICA /* wingdi.h:3131:3 */

type DOCINFO2 = DOCINFOA     /* wingdi.h:3416:3 */
type LPDOCINFO2 = LPDOCINFOA /* wingdi.h:3417:3 */

type PROPENUMPROC2 = PROPENUMPROCA           /* winuser.h:93:3 */
type PROPENUMPROCEX2 = PROPENUMPROCEXA       /* winuser.h:94:3 */
type EDITWORDBREAKPROC2 = EDITWORDBREAKPROCA /* winuser.h:95:3 */

type WINSTAENUMPROC2 = WINSTAENUMPROCA   /* winuser.h:113:3 */
type DESKTOPENUMPROC2 = DESKTOPENUMPROCA /* winuser.h:114:3 */

type CBT_CREATEWND2 = CBT_CREATEWNDA     /* winuser.h:504:3 */
type LPCBT_CREATEWND2 = LPCBT_CREATEWNDA /* winuser.h:505:3 */

type WNDCLASSEX2 = WNDCLASSEXA     /* winuser.h:913:3 */
type PWNDCLASSEX2 = PWNDCLASSEXA   /* winuser.h:914:3 */
type NPWNDCLASSEX2 = NPWNDCLASSEXA /* winuser.h:915:3 */
type LPWNDCLASSEX2 = LPWNDCLASSEXA /* winuser.h:916:3 */

type WNDCLASS2 = WNDCLASSA     /* winuser.h:944:3 */
type PWNDCLASS2 = PWNDCLASSA   /* winuser.h:945:3 */
type NPWNDCLASS2 = NPWNDCLASSA /* winuser.h:946:3 */
type LPWNDCLASS2 = LPWNDCLASSA /* winuser.h:947:3 */

type CREATESTRUCT2 = CREATESTRUCTA     /* winuser.h:1862:3 */
type LPCREATESTRUCT2 = LPCREATESTRUCTA /* winuser.h:1863:3 */

type MENUITEMINFO2 = MENUITEMINFOA     /* winuser.h:3357:3 */
type LPMENUITEMINFO2 = LPMENUITEMINFOA /* winuser.h:3358:3 */

type LPCMENUITEMINFO2 = LPCMENUITEMINFOA /* winuser.h:3363:3 */

type MSGBOXPARAMS2 = MSGBOXPARAMSA     /* winuser.h:3744:3 */
type PMSGBOXPARAMS2 = PMSGBOXPARAMSA   /* winuser.h:3745:3 */
type LPMSGBOXPARAMS2 = LPMSGBOXPARAMSA /* winuser.h:3746:3 */

type MDICREATESTRUCT2 = MDICREATESTRUCTA     /* winuser.h:4933:3 */
type LPMDICREATESTRUCT2 = LPMDICREATESTRUCTA /* winuser.h:4934:3 */

type MULTIKEYHELP2 = MULTIKEYHELPA     /* winuser.h:4979:3 */
type PMULTIKEYHELP2 = PMULTIKEYHELPA   /* winuser.h:4980:3 */
type LPMULTIKEYHELP2 = LPMULTIKEYHELPA /* winuser.h:4981:3 */

type HELPWININFO2 = HELPWININFOA     /* winuser.h:5003:3 */
type PHELPWININFO2 = PHELPWININFOA   /* winuser.h:5004:3 */
type LPHELPWININFO2 = LPHELPWININFOA /* winuser.h:5005:3 */

type NONCLIENTMETRICS2 = NONCLIENTMETRICSA     /* winuser.h:5450:3 */
type PNONCLIENTMETRICS2 = PNONCLIENTMETRICSA   /* winuser.h:5451:3 */
type LPNONCLIENTMETRICS2 = LPNONCLIENTMETRICSA /* winuser.h:5452:3 */

type ICONMETRICS2 = ICONMETRICSA     /* winuser.h:5498:3 */
type PICONMETRICS2 = PICONMETRICSA   /* winuser.h:5499:3 */
type LPICONMETRICS2 = LPICONMETRICSA /* winuser.h:5500:3 */

type SERIALKEYS2 = SERIALKEYSA     /* winuser.h:5529:3 */
type LPSERIALKEYS2 = LPSERIALKEYSA /* winuser.h:5530:3 */

type HIGHCONTRAST2 = HIGHCONTRASTA     /* winuser.h:5544:3 */
type LPHIGHCONTRAST2 = LPHIGHCONTRASTA /* winuser.h:5545:3 */

type SOUNDSENTRY2 = SOUNDSENTRYA     /* winuser.h:5774:3 */
type LPSOUNDSENTRY2 = LPSOUNDSENTRYA /* winuser.h:5775:3 */

type MONITORINFOEX2 = MONITORINFOEXA     /* winuser.h:5839:3 */
type LPMONITORINFOEX2 = LPMONITORINFOEXA /* winuser.h:5840:3 */

type CPINFOEX2 = CPINFOEXA     /* winnls.h:672:3 */
type LPCPINFOEX2 = LPCPINFOEXA /* winnls.h:673:3 */

type NUMBERFMT2 = NUMBERFMTA     /* winnls.h:692:3 */
type LPNUMBERFMT2 = LPNUMBERFMTA /* winnls.h:693:3 */

type CURRENCYFMT2 = CURRENCYFMTA     /* winnls.h:717:3 */
type LPCURRENCYFMT2 = LPCURRENCYFMTA /* winnls.h:718:3 */

type PVALUE2 = PVALUEA   /* winreg.h:84:3 */
type PPVALUE2 = PPVALUEA /* winreg.h:85:3 */

type VALENT2 = VALENTA   /* winreg.h:116:3 */
type PVALENT2 = PVALENTA /* winreg.h:117:3 */

type NETRESOURCE2 = NETRESOURCEA     /* winnetwk.h:74:3 */
type LPNETRESOURCE2 = LPNETRESOURCEA /* winnetwk.h:75:3 */

type CONNECTDLGSTRUCT2 = CONNECTDLGSTRUCTA     /* winnetwk.h:145:3 */
type LPCONNECTDLGSTRUCT2 = LPCONNECTDLGSTRUCTA /* winnetwk.h:146:3 */

type DISCDLGSTRUCT2 = DISCDLGSTRUCTA     /* winnetwk.h:177:3 */
type LPDISCDLGSTRUCT2 = LPDISCDLGSTRUCTA /* winnetwk.h:178:3 */

type UNIVERSAL_NAME_INFO2 = UNIVERSAL_NAME_INFOA     /* winnetwk.h:212:3 */
type LPUNIVERSAL_NAME_INFO2 = LPUNIVERSAL_NAME_INFOA /* winnetwk.h:213:3 */

type REMOTE_NAME_INFO2 = REMOTE_NAME_INFOA     /* winnetwk.h:227:3 */
type LPREMOTE_NAME_INFO2 = LPREMOTE_NAME_INFOA /* winnetwk.h:228:3 */

type SERVICE_DESCRIPTION2 = SERVICE_DESCRIPTIONA     /* winsvc.h:103:3 */
type LPSERVICE_DESCRIPTION2 = LPSERVICE_DESCRIPTIONA /* winsvc.h:104:3 */

type SERVICE_FAILURE_ACTIONS2 = SERVICE_FAILURE_ACTIONSA     /* winsvc.h:131:3 */
type LPSERVICE_FAILURE_ACTIONS2 = LPSERVICE_FAILURE_ACTIONSA /* winsvc.h:132:3 */

type ENUM_SERVICE_STATUS2 = ENUM_SERVICE_STATUSA     /* winsvc.h:181:3 */
type LPENUM_SERVICE_STATUS2 = LPENUM_SERVICE_STATUSA /* winsvc.h:182:3 */

type ENUM_SERVICE_STATUS_PROCESS2 = ENUM_SERVICE_STATUS_PROCESSA     /* winsvc.h:196:3 */
type LPENUM_SERVICE_STATUS_PROCESS2 = LPENUM_SERVICE_STATUS_PROCESSA /* winsvc.h:197:3 */

type QUERY_SERVICE_LOCK_STATUS2 = QUERY_SERVICE_LOCK_STATUSA     /* winsvc.h:213:3 */
type LPQUERY_SERVICE_LOCK_STATUS2 = LPQUERY_SERVICE_LOCK_STATUSA /* winsvc.h:214:3 */

type QUERY_SERVICE_CONFIG2 = QUERY_SERVICE_CONFIGA     /* winsvc.h:240:3 */
type LPQUERY_SERVICE_CONFIG2 = LPQUERY_SERVICE_CONFIGA /* winsvc.h:241:3 */

type SERVICE_TABLE_ENTRY2 = SERVICE_TABLE_ENTRYA     /* winsvc.h:258:3 */
type LPSERVICE_TABLE_ENTRY2 = LPSERVICE_TABLE_ENTRYA /* winsvc.h:259:3 */

type REGISTERWORD2 = REGISTERWORDA     /* imm.h:60:3 */
type PREGISTERWORD2 = PREGISTERWORDA   /* imm.h:61:3 */
type NPREGISTERWORD2 = NPREGISTERWORDA /* imm.h:62:3 */
type LPREGISTERWORD2 = LPREGISTERWORDA /* imm.h:63:3 */

type STYLEBUF2 = STYLEBUFA     /* imm.h:88:3 */
type PSTYLEBUF2 = PSTYLEBUFA   /* imm.h:89:3 */
type NPSTYLEBUF2 = NPSTYLEBUFA /* imm.h:90:3 */
type LPSTYLEBUF2 = LPSTYLEBUFA /* imm.h:91:3 */

type IMEMENUITEMINFO2 = IMEMENUITEMINFOA     /* imm.h:119:3 */
type PIMEMENUITEMINFO2 = PIMEMENUITEMINFOA   /* imm.h:120:3 */
type NPIMEMENUITEMINFO2 = NPIMEMENUITEMINFOA /* imm.h:121:3 */
type LPIMEMENUITEMINFO2 = LPIMEMENUITEMINFOA /* imm.h:122:3 */

//  Pull in the typedef of TCHAR for windows.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _TCHAR2 = int8          /* tchar.h:967:16 */
type _TSCHAR2 = int8         /* tchar.h:968:23 */
type _TUCHAR2 = uint8        /* tchar.h:969:25 */
type _TXCHAR2 = int8         /* tchar.h:970:16 */
type _TINT2 = int32          /* tchar.h:971:15 */
type Tcl_OldStat_2 = uintptr /* tcl.h:660:21 */

type TclStubs2 = struct {
	magic                                  int32
	_                                      [4]byte
	hooks                                  uintptr
	tcl_PkgProvideEx                       uintptr
	tcl_PkgRequireEx                       uintptr
	tcl_Panic                              uintptr
	tcl_Alloc                              uintptr
	tcl_Free                               uintptr
	tcl_Realloc                            uintptr
	tcl_DbCkalloc                          uintptr
	tcl_DbCkfree                           uintptr
	tcl_DbCkrealloc                        uintptr
	reserved9                              uintptr
	reserved10                             uintptr
	tcl_SetTimer                           uintptr
	tcl_Sleep                              uintptr
	tcl_WaitForEvent                       uintptr
	tcl_AppendAllObjTypes                  uintptr
	tcl_AppendStringsToObj                 uintptr
	tcl_AppendToObj                        uintptr
	tcl_ConcatObj                          uintptr
	tcl_ConvertToType                      uintptr
	tcl_DbDecrRefCount                     uintptr
	tcl_DbIncrRefCount                     uintptr
	tcl_DbIsShared                         uintptr
	tcl_DbNewBooleanObj                    uintptr
	tcl_DbNewByteArrayObj                  uintptr
	tcl_DbNewDoubleObj                     uintptr
	tcl_DbNewListObj                       uintptr
	tcl_DbNewLongObj                       uintptr
	tcl_DbNewObj                           uintptr
	tcl_DbNewStringObj                     uintptr
	tcl_DuplicateObj                       uintptr
	tclFreeObj                             uintptr
	tcl_GetBoolean                         uintptr
	tcl_GetBooleanFromObj                  uintptr
	tcl_GetByteArrayFromObj                uintptr
	tcl_GetDouble                          uintptr
	tcl_GetDoubleFromObj                   uintptr
	tcl_GetIndexFromObj                    uintptr
	tcl_GetInt                             uintptr
	tcl_GetIntFromObj                      uintptr
	tcl_GetLongFromObj                     uintptr
	tcl_GetObjType                         uintptr
	tcl_GetStringFromObj                   uintptr
	tcl_InvalidateStringRep                uintptr
	tcl_ListObjAppendList                  uintptr
	tcl_ListObjAppendElement               uintptr
	tcl_ListObjGetElements                 uintptr
	tcl_ListObjIndex                       uintptr
	tcl_ListObjLength                      uintptr
	tcl_ListObjReplace                     uintptr
	tcl_NewBooleanObj                      uintptr
	tcl_NewByteArrayObj                    uintptr
	tcl_NewDoubleObj                       uintptr
	tcl_NewIntObj                          uintptr
	tcl_NewListObj                         uintptr
	tcl_NewLongObj                         uintptr
	tcl_NewObj                             uintptr
	tcl_NewStringObj                       uintptr
	tcl_SetBooleanObj                      uintptr
	tcl_SetByteArrayLength                 uintptr
	tcl_SetByteArrayObj                    uintptr
	tcl_SetDoubleObj                       uintptr
	tcl_SetIntObj                          uintptr
	tcl_SetListObj                         uintptr
	tcl_SetLongObj                         uintptr
	tcl_SetObjLength                       uintptr
	tcl_SetStringObj                       uintptr
	tcl_AddErrorInfo                       uintptr
	tcl_AddObjErrorInfo                    uintptr
	tcl_AllowExceptions                    uintptr
	tcl_AppendElement                      uintptr
	tcl_AppendResult                       uintptr
	tcl_AsyncCreate                        uintptr
	tcl_AsyncDelete                        uintptr
	tcl_AsyncInvoke                        uintptr
	tcl_AsyncMark                          uintptr
	tcl_AsyncReady                         uintptr
	tcl_BackgroundError                    uintptr
	tcl_Backslash                          uintptr
	tcl_BadChannelOption                   uintptr
	tcl_CallWhenDeleted                    uintptr
	tcl_CancelIdleCall                     uintptr
	tcl_Close                              uintptr
	tcl_CommandComplete                    uintptr
	tcl_Concat                             uintptr
	tcl_ConvertElement                     uintptr
	tcl_ConvertCountedElement              uintptr
	tcl_CreateAlias                        uintptr
	tcl_CreateAliasObj                     uintptr
	tcl_CreateChannel                      uintptr
	tcl_CreateChannelHandler               uintptr
	tcl_CreateCloseHandler                 uintptr
	tcl_CreateCommand                      uintptr
	tcl_CreateEventSource                  uintptr
	tcl_CreateExitHandler                  uintptr
	tcl_CreateInterp                       uintptr
	tcl_CreateMathFunc                     uintptr
	tcl_CreateObjCommand                   uintptr
	tcl_CreateSlave                        uintptr
	tcl_CreateTimerHandler                 uintptr
	tcl_CreateTrace                        uintptr
	tcl_DeleteAssocData                    uintptr
	tcl_DeleteChannelHandler               uintptr
	tcl_DeleteCloseHandler                 uintptr
	tcl_DeleteCommand                      uintptr
	tcl_DeleteCommandFromToken             uintptr
	tcl_DeleteEvents                       uintptr
	tcl_DeleteEventSource                  uintptr
	tcl_DeleteExitHandler                  uintptr
	tcl_DeleteHashEntry                    uintptr
	tcl_DeleteHashTable                    uintptr
	tcl_DeleteInterp                       uintptr
	tcl_DetachPids                         uintptr
	tcl_DeleteTimerHandler                 uintptr
	tcl_DeleteTrace                        uintptr
	tcl_DontCallWhenDeleted                uintptr
	tcl_DoOneEvent                         uintptr
	tcl_DoWhenIdle                         uintptr
	tcl_DStringAppend                      uintptr
	tcl_DStringAppendElement               uintptr
	tcl_DStringEndSublist                  uintptr
	tcl_DStringFree                        uintptr
	tcl_DStringGetResult                   uintptr
	tcl_DStringInit                        uintptr
	tcl_DStringResult                      uintptr
	tcl_DStringSetLength                   uintptr
	tcl_DStringStartSublist                uintptr
	tcl_Eof                                uintptr
	tcl_ErrnoId                            uintptr
	tcl_ErrnoMsg                           uintptr
	tcl_Eval                               uintptr
	tcl_EvalFile                           uintptr
	tcl_EvalObj                            uintptr
	tcl_EventuallyFree                     uintptr
	tcl_Exit                               uintptr
	tcl_ExposeCommand                      uintptr
	tcl_ExprBoolean                        uintptr
	tcl_ExprBooleanObj                     uintptr
	tcl_ExprDouble                         uintptr
	tcl_ExprDoubleObj                      uintptr
	tcl_ExprLong                           uintptr
	tcl_ExprLongObj                        uintptr
	tcl_ExprObj                            uintptr
	tcl_ExprString                         uintptr
	tcl_Finalize                           uintptr
	tcl_FindExecutable                     uintptr
	tcl_FirstHashEntry                     uintptr
	tcl_Flush                              uintptr
	tcl_FreeResult                         uintptr
	tcl_GetAlias                           uintptr
	tcl_GetAliasObj                        uintptr
	tcl_GetAssocData                       uintptr
	tcl_GetChannel                         uintptr
	tcl_GetChannelBufferSize               uintptr
	tcl_GetChannelHandle                   uintptr
	tcl_GetChannelInstanceData             uintptr
	tcl_GetChannelMode                     uintptr
	tcl_GetChannelName                     uintptr
	tcl_GetChannelOption                   uintptr
	tcl_GetChannelType                     uintptr
	tcl_GetCommandInfo                     uintptr
	tcl_GetCommandName                     uintptr
	tcl_GetErrno                           uintptr
	tcl_GetHostName                        uintptr
	tcl_GetInterpPath                      uintptr
	tcl_GetMaster                          uintptr
	tcl_GetNameOfExecutable                uintptr
	tcl_GetObjResult                       uintptr
	reserved167                            uintptr
	tcl_GetPathType                        uintptr
	tcl_Gets                               uintptr
	tcl_GetsObj                            uintptr
	tcl_GetServiceMode                     uintptr
	tcl_GetSlave                           uintptr
	tcl_GetStdChannel                      uintptr
	tcl_GetStringResult                    uintptr
	tcl_GetVar                             uintptr
	tcl_GetVar2                            uintptr
	tcl_GlobalEval                         uintptr
	tcl_GlobalEvalObj                      uintptr
	tcl_HideCommand                        uintptr
	tcl_Init                               uintptr
	tcl_InitHashTable                      uintptr
	tcl_InputBlocked                       uintptr
	tcl_InputBuffered                      uintptr
	tcl_InterpDeleted                      uintptr
	tcl_IsSafe                             uintptr
	tcl_JoinPath                           uintptr
	tcl_LinkVar                            uintptr
	reserved188                            uintptr
	tcl_MakeFileChannel                    uintptr
	tcl_MakeSafe                           uintptr
	tcl_MakeTcpClientChannel               uintptr
	tcl_Merge                              uintptr
	tcl_NextHashEntry                      uintptr
	tcl_NotifyChannel                      uintptr
	tcl_ObjGetVar2                         uintptr
	tcl_ObjSetVar2                         uintptr
	tcl_OpenCommandChannel                 uintptr
	tcl_OpenFileChannel                    uintptr
	tcl_OpenTcpClient                      uintptr
	tcl_OpenTcpServer                      uintptr
	tcl_Preserve                           uintptr
	tcl_PrintDouble                        uintptr
	tcl_PutEnv                             uintptr
	tcl_PosixError                         uintptr
	tcl_QueueEvent                         uintptr
	tcl_Read                               uintptr
	tcl_ReapDetachedProcs                  uintptr
	tcl_RecordAndEval                      uintptr
	tcl_RecordAndEvalObj                   uintptr
	tcl_RegisterChannel                    uintptr
	tcl_RegisterObjType                    uintptr
	tcl_RegExpCompile                      uintptr
	tcl_RegExpExec                         uintptr
	tcl_RegExpMatch                        uintptr
	tcl_RegExpRange                        uintptr
	tcl_Release                            uintptr
	tcl_ResetResult                        uintptr
	tcl_ScanElement                        uintptr
	tcl_ScanCountedElement                 uintptr
	tcl_SeekOld                            uintptr
	tcl_ServiceAll                         uintptr
	tcl_ServiceEvent                       uintptr
	tcl_SetAssocData                       uintptr
	tcl_SetChannelBufferSize               uintptr
	tcl_SetChannelOption                   uintptr
	tcl_SetCommandInfo                     uintptr
	tcl_SetErrno                           uintptr
	tcl_SetErrorCode                       uintptr
	tcl_SetMaxBlockTime                    uintptr
	tcl_SetPanicProc                       uintptr
	tcl_SetRecursionLimit                  uintptr
	tcl_SetResult                          uintptr
	tcl_SetServiceMode                     uintptr
	tcl_SetObjErrorCode                    uintptr
	tcl_SetObjResult                       uintptr
	tcl_SetStdChannel                      uintptr
	tcl_SetVar                             uintptr
	tcl_SetVar2                            uintptr
	tcl_SignalId                           uintptr
	tcl_SignalMsg                          uintptr
	tcl_SourceRCFile                       uintptr
	tcl_SplitList                          uintptr
	tcl_SplitPath                          uintptr
	tcl_StaticPackage                      uintptr
	tcl_StringMatch                        uintptr
	tcl_TellOld                            uintptr
	tcl_TraceVar                           uintptr
	tcl_TraceVar2                          uintptr
	tcl_TranslateFileName                  uintptr
	tcl_Ungets                             uintptr
	tcl_UnlinkVar                          uintptr
	tcl_UnregisterChannel                  uintptr
	tcl_UnsetVar                           uintptr
	tcl_UnsetVar2                          uintptr
	tcl_UntraceVar                         uintptr
	tcl_UntraceVar2                        uintptr
	tcl_UpdateLinkedVar                    uintptr
	tcl_UpVar                              uintptr
	tcl_UpVar2                             uintptr
	tcl_VarEval                            uintptr
	tcl_VarTraceInfo                       uintptr
	tcl_VarTraceInfo2                      uintptr
	tcl_Write                              uintptr
	tcl_WrongNumArgs                       uintptr
	tcl_DumpActiveMemory                   uintptr
	tcl_ValidateAllMemory                  uintptr
	tcl_AppendResultVA                     uintptr
	tcl_AppendStringsToObjVA               uintptr
	tcl_HashStats                          uintptr
	tcl_ParseVar                           uintptr
	tcl_PkgPresent                         uintptr
	tcl_PkgPresentEx                       uintptr
	tcl_PkgProvide                         uintptr
	tcl_PkgRequire                         uintptr
	tcl_SetErrorCodeVA                     uintptr
	tcl_VarEvalVA                          uintptr
	tcl_WaitPid                            uintptr
	tcl_PanicVA                            uintptr
	tcl_GetVersion                         uintptr
	tcl_InitMemory                         uintptr
	tcl_StackChannel                       uintptr
	tcl_UnstackChannel                     uintptr
	tcl_GetStackedChannel                  uintptr
	tcl_SetMainLoop                        uintptr
	reserved285                            uintptr
	tcl_AppendObjToObj                     uintptr
	tcl_CreateEncoding                     uintptr
	tcl_CreateThreadExitHandler            uintptr
	tcl_DeleteThreadExitHandler            uintptr
	tcl_DiscardResult                      uintptr
	tcl_EvalEx                             uintptr
	tcl_EvalObjv                           uintptr
	tcl_EvalObjEx                          uintptr
	tcl_ExitThread                         uintptr
	tcl_ExternalToUtf                      uintptr
	tcl_ExternalToUtfDString               uintptr
	tcl_FinalizeThread                     uintptr
	tcl_FinalizeNotifier                   uintptr
	tcl_FreeEncoding                       uintptr
	tcl_GetCurrentThread                   uintptr
	tcl_GetEncoding                        uintptr
	tcl_GetEncodingName                    uintptr
	tcl_GetEncodingNames                   uintptr
	tcl_GetIndexFromObjStruct              uintptr
	tcl_GetThreadData                      uintptr
	tcl_GetVar2Ex                          uintptr
	tcl_InitNotifier                       uintptr
	tcl_MutexLock                          uintptr
	tcl_MutexUnlock                        uintptr
	tcl_ConditionNotify                    uintptr
	tcl_ConditionWait                      uintptr
	tcl_NumUtfChars                        uintptr
	tcl_ReadChars                          uintptr
	tcl_RestoreResult                      uintptr
	tcl_SaveResult                         uintptr
	tcl_SetSystemEncoding                  uintptr
	tcl_SetVar2Ex                          uintptr
	tcl_ThreadAlert                        uintptr
	tcl_ThreadQueueEvent                   uintptr
	tcl_UniCharAtIndex                     uintptr
	tcl_UniCharToLower                     uintptr
	tcl_UniCharToTitle                     uintptr
	tcl_UniCharToUpper                     uintptr
	tcl_UniCharToUtf                       uintptr
	tcl_UtfAtIndex                         uintptr
	tcl_UtfCharComplete                    uintptr
	tcl_UtfBackslash                       uintptr
	tcl_UtfFindFirst                       uintptr
	tcl_UtfFindLast                        uintptr
	tcl_UtfNext                            uintptr
	tcl_UtfPrev                            uintptr
	tcl_UtfToExternal                      uintptr
	tcl_UtfToExternalDString               uintptr
	tcl_UtfToLower                         uintptr
	tcl_UtfToTitle                         uintptr
	tcl_UtfToUniChar                       uintptr
	tcl_UtfToUpper                         uintptr
	tcl_WriteChars                         uintptr
	tcl_WriteObj                           uintptr
	tcl_GetString                          uintptr
	tcl_GetDefaultEncodingDir              uintptr
	tcl_SetDefaultEncodingDir              uintptr
	tcl_AlertNotifier                      uintptr
	tcl_ServiceModeHook                    uintptr
	tcl_UniCharIsAlnum                     uintptr
	tcl_UniCharIsAlpha                     uintptr
	tcl_UniCharIsDigit                     uintptr
	tcl_UniCharIsLower                     uintptr
	tcl_UniCharIsSpace                     uintptr
	tcl_UniCharIsUpper                     uintptr
	tcl_UniCharIsWordChar                  uintptr
	tcl_UniCharLen                         uintptr
	tcl_UniCharNcmp                        uintptr
	tcl_UniCharToUtfDString                uintptr
	tcl_UtfToUniCharDString                uintptr
	tcl_GetRegExpFromObj                   uintptr
	tcl_EvalTokens                         uintptr
	tcl_FreeParse                          uintptr
	tcl_LogCommandInfo                     uintptr
	tcl_ParseBraces                        uintptr
	tcl_ParseCommand                       uintptr
	tcl_ParseExpr                          uintptr
	tcl_ParseQuotedString                  uintptr
	tcl_ParseVarName                       uintptr
	tcl_GetCwd                             uintptr
	tcl_Chdir                              uintptr
	tcl_Access                             uintptr
	tcl_Stat                               uintptr
	tcl_UtfNcmp                            uintptr
	tcl_UtfNcasecmp                        uintptr
	tcl_StringCaseMatch                    uintptr
	tcl_UniCharIsControl                   uintptr
	tcl_UniCharIsGraph                     uintptr
	tcl_UniCharIsPrint                     uintptr
	tcl_UniCharIsPunct                     uintptr
	tcl_RegExpExecObj                      uintptr
	tcl_RegExpGetInfo                      uintptr
	tcl_NewUnicodeObj                      uintptr
	tcl_SetUnicodeObj                      uintptr
	tcl_GetCharLength                      uintptr
	tcl_GetUniChar                         uintptr
	tcl_GetUnicode                         uintptr
	tcl_GetRange                           uintptr
	tcl_AppendUnicodeToObj                 uintptr
	tcl_RegExpMatchObj                     uintptr
	tcl_SetNotifier                        uintptr
	tcl_GetAllocMutex                      uintptr
	tcl_GetChannelNames                    uintptr
	tcl_GetChannelNamesEx                  uintptr
	tcl_ProcObjCmd                         uintptr
	tcl_ConditionFinalize                  uintptr
	tcl_MutexFinalize                      uintptr
	tcl_CreateThread                       uintptr
	tcl_ReadRaw                            uintptr
	tcl_WriteRaw                           uintptr
	tcl_GetTopChannel                      uintptr
	tcl_ChannelBuffered                    uintptr
	tcl_ChannelName                        uintptr
	tcl_ChannelVersion                     uintptr
	tcl_ChannelBlockModeProc               uintptr
	tcl_ChannelCloseProc                   uintptr
	tcl_ChannelClose2Proc                  uintptr
	tcl_ChannelInputProc                   uintptr
	tcl_ChannelOutputProc                  uintptr
	tcl_ChannelSeekProc                    uintptr
	tcl_ChannelSetOptionProc               uintptr
	tcl_ChannelGetOptionProc               uintptr
	tcl_ChannelWatchProc                   uintptr
	tcl_ChannelGetHandleProc               uintptr
	tcl_ChannelFlushProc                   uintptr
	tcl_ChannelHandlerProc                 uintptr
	tcl_JoinThread                         uintptr
	tcl_IsChannelShared                    uintptr
	tcl_IsChannelRegistered                uintptr
	tcl_CutChannel                         uintptr
	tcl_SpliceChannel                      uintptr
	tcl_ClearChannelHandlers               uintptr
	tcl_IsChannelExisting                  uintptr
	tcl_UniCharNcasecmp                    uintptr
	tcl_UniCharCaseMatch                   uintptr
	tcl_FindHashEntry                      uintptr
	tcl_CreateHashEntry                    uintptr
	tcl_InitCustomHashTable                uintptr
	tcl_InitObjHashTable                   uintptr
	tcl_CommandTraceInfo                   uintptr
	tcl_TraceCommand                       uintptr
	tcl_UntraceCommand                     uintptr
	tcl_AttemptAlloc                       uintptr
	tcl_AttemptDbCkalloc                   uintptr
	tcl_AttemptRealloc                     uintptr
	tcl_AttemptDbCkrealloc                 uintptr
	tcl_AttemptSetObjLength                uintptr
	tcl_GetChannelThread                   uintptr
	tcl_GetUnicodeFromObj                  uintptr
	tcl_GetMathFuncInfo                    uintptr
	tcl_ListMathFuncs                      uintptr
	tcl_SubstObj                           uintptr
	tcl_DetachChannel                      uintptr
	tcl_IsStandardChannel                  uintptr
	tcl_FSCopyFile                         uintptr
	tcl_FSCopyDirectory                    uintptr
	tcl_FSCreateDirectory                  uintptr
	tcl_FSDeleteFile                       uintptr
	tcl_FSLoadFile                         uintptr
	tcl_FSMatchInDirectory                 uintptr
	tcl_FSLink                             uintptr
	tcl_FSRemoveDirectory                  uintptr
	tcl_FSRenameFile                       uintptr
	tcl_FSLstat                            uintptr
	tcl_FSUtime                            uintptr
	tcl_FSFileAttrsGet                     uintptr
	tcl_FSFileAttrsSet                     uintptr
	tcl_FSFileAttrStrings                  uintptr
	tcl_FSStat                             uintptr
	tcl_FSAccess                           uintptr
	tcl_FSOpenFileChannel                  uintptr
	tcl_FSGetCwd                           uintptr
	tcl_FSChdir                            uintptr
	tcl_FSConvertToPathType                uintptr
	tcl_FSJoinPath                         uintptr
	tcl_FSSplitPath                        uintptr
	tcl_FSEqualPaths                       uintptr
	tcl_FSGetNormalizedPath                uintptr
	tcl_FSJoinToPath                       uintptr
	tcl_FSGetInternalRep                   uintptr
	tcl_FSGetTranslatedPath                uintptr
	tcl_FSEvalFile                         uintptr
	tcl_FSNewNativePath                    uintptr
	tcl_FSGetNativePath                    uintptr
	tcl_FSFileSystemInfo                   uintptr
	tcl_FSPathSeparator                    uintptr
	tcl_FSListVolumes                      uintptr
	tcl_FSRegister                         uintptr
	tcl_FSUnregister                       uintptr
	tcl_FSData                             uintptr
	tcl_FSGetTranslatedStringPath          uintptr
	tcl_FSGetFileSystemForPath             uintptr
	tcl_FSGetPathType                      uintptr
	tcl_OutputBuffered                     uintptr
	tcl_FSMountsChanged                    uintptr
	tcl_EvalTokensStandard                 uintptr
	tcl_GetTime                            uintptr
	tcl_CreateObjTrace                     uintptr
	tcl_GetCommandInfoFromToken            uintptr
	tcl_SetCommandInfoFromToken            uintptr
	tcl_DbNewWideIntObj                    uintptr
	tcl_GetWideIntFromObj                  uintptr
	tcl_NewWideIntObj                      uintptr
	tcl_SetWideIntObj                      uintptr
	tcl_AllocStatBuf                       uintptr
	tcl_Seek                               uintptr
	tcl_Tell                               uintptr
	tcl_ChannelWideSeekProc                uintptr
	tcl_DictObjPut                         uintptr
	tcl_DictObjGet                         uintptr
	tcl_DictObjRemove                      uintptr
	tcl_DictObjSize                        uintptr
	tcl_DictObjFirst                       uintptr
	tcl_DictObjNext                        uintptr
	tcl_DictObjDone                        uintptr
	tcl_DictObjPutKeyList                  uintptr
	tcl_DictObjRemoveKeyList               uintptr
	tcl_NewDictObj                         uintptr
	tcl_DbNewDictObj                       uintptr
	tcl_RegisterConfig                     uintptr
	tcl_CreateNamespace                    uintptr
	tcl_DeleteNamespace                    uintptr
	tcl_AppendExportList                   uintptr
	tcl_Export                             uintptr
	tcl_Import                             uintptr
	tcl_ForgetImport                       uintptr
	tcl_GetCurrentNamespace                uintptr
	tcl_GetGlobalNamespace                 uintptr
	tcl_FindNamespace                      uintptr
	tcl_FindCommand                        uintptr
	tcl_GetCommandFromObj                  uintptr
	tcl_GetCommandFullName                 uintptr
	tcl_FSEvalFileEx                       uintptr
	tcl_SetExitProc                        uintptr
	tcl_LimitAddHandler                    uintptr
	tcl_LimitRemoveHandler                 uintptr
	tcl_LimitReady                         uintptr
	tcl_LimitCheck                         uintptr
	tcl_LimitExceeded                      uintptr
	tcl_LimitSetCommands                   uintptr
	tcl_LimitSetTime                       uintptr
	tcl_LimitSetGranularity                uintptr
	tcl_LimitTypeEnabled                   uintptr
	tcl_LimitTypeExceeded                  uintptr
	tcl_LimitTypeSet                       uintptr
	tcl_LimitTypeReset                     uintptr
	tcl_LimitGetCommands                   uintptr
	tcl_LimitGetTime                       uintptr
	tcl_LimitGetGranularity                uintptr
	tcl_SaveInterpState                    uintptr
	tcl_RestoreInterpState                 uintptr
	tcl_DiscardInterpState                 uintptr
	tcl_SetReturnOptions                   uintptr
	tcl_GetReturnOptions                   uintptr
	tcl_IsEnsemble                         uintptr
	tcl_CreateEnsemble                     uintptr
	tcl_FindEnsemble                       uintptr
	tcl_SetEnsembleSubcommandList          uintptr
	tcl_SetEnsembleMappingDict             uintptr
	tcl_SetEnsembleUnknownHandler          uintptr
	tcl_SetEnsembleFlags                   uintptr
	tcl_GetEnsembleSubcommandList          uintptr
	tcl_GetEnsembleMappingDict             uintptr
	tcl_GetEnsembleUnknownHandler          uintptr
	tcl_GetEnsembleFlags                   uintptr
	tcl_GetEnsembleNamespace               uintptr
	tcl_SetTimeProc                        uintptr
	tcl_QueryTimeProc                      uintptr
	tcl_ChannelThreadActionProc            uintptr
	tcl_NewBignumObj                       uintptr
	tcl_DbNewBignumObj                     uintptr
	tcl_SetBignumObj                       uintptr
	tcl_GetBignumFromObj                   uintptr
	tcl_TakeBignumFromObj                  uintptr
	tcl_TruncateChannel                    uintptr
	tcl_ChannelTruncateProc                uintptr
	tcl_SetChannelErrorInterp              uintptr
	tcl_GetChannelErrorInterp              uintptr
	tcl_SetChannelError                    uintptr
	tcl_GetChannelError                    uintptr
	tcl_InitBignumFromDouble               uintptr
	tcl_GetNamespaceUnknownHandler         uintptr
	tcl_SetNamespaceUnknownHandler         uintptr
	tcl_GetEncodingFromObj                 uintptr
	tcl_GetEncodingSearchPath              uintptr
	tcl_SetEncodingSearchPath              uintptr
	tcl_GetEncodingNameFromEnvironment     uintptr
	tcl_PkgRequireProc                     uintptr
	tcl_AppendObjToErrorInfo               uintptr
	tcl_AppendLimitedToObj                 uintptr
	tcl_Format                             uintptr
	tcl_AppendFormatToObj                  uintptr
	tcl_ObjPrintf                          uintptr
	tcl_AppendPrintfToObj                  uintptr
	tcl_CancelEval                         uintptr
	tcl_Canceled                           uintptr
	tcl_CreatePipe                         uintptr
	tcl_NRCreateCommand                    uintptr
	tcl_NREvalObj                          uintptr
	tcl_NREvalObjv                         uintptr
	tcl_NRCmdSwap                          uintptr
	tcl_NRAddCallback                      uintptr
	tcl_NRCallObjProc                      uintptr
	tcl_GetFSDeviceFromStat                uintptr
	tcl_GetFSInodeFromStat                 uintptr
	tcl_GetModeFromStat                    uintptr
	tcl_GetLinkCountFromStat               uintptr
	tcl_GetUserIdFromStat                  uintptr
	tcl_GetGroupIdFromStat                 uintptr
	tcl_GetDeviceTypeFromStat              uintptr
	tcl_GetAccessTimeFromStat              uintptr
	tcl_GetModificationTimeFromStat        uintptr
	tcl_GetChangeTimeFromStat              uintptr
	tcl_GetSizeFromStat                    uintptr
	tcl_GetBlocksFromStat                  uintptr
	tcl_GetBlockSizeFromStat               uintptr
	tcl_SetEnsembleParameterList           uintptr
	tcl_GetEnsembleParameterList           uintptr
	tcl_ParseArgsObjv                      uintptr
	tcl_GetErrorLine                       uintptr
	tcl_SetErrorLine                       uintptr
	tcl_TransferResult                     uintptr
	tcl_InterpActive                       uintptr
	tcl_BackgroundException                uintptr
	tcl_ZlibDeflate                        uintptr
	tcl_ZlibInflate                        uintptr
	tcl_ZlibCRC32                          uintptr
	tcl_ZlibAdler32                        uintptr
	tcl_ZlibStreamInit                     uintptr
	tcl_ZlibStreamGetCommandName           uintptr
	tcl_ZlibStreamEof                      uintptr
	tcl_ZlibStreamChecksum                 uintptr
	tcl_ZlibStreamPut                      uintptr
	tcl_ZlibStreamGet                      uintptr
	tcl_ZlibStreamClose                    uintptr
	tcl_ZlibStreamReset                    uintptr
	tcl_SetStartupScript                   uintptr
	tcl_GetStartupScript                   uintptr
	tcl_CloseEx                            uintptr
	tcl_NRExprObj                          uintptr
	tcl_NRSubstObj                         uintptr
	tcl_LoadFile                           uintptr
	tcl_FindSymbol                         uintptr
	tcl_FSUnloadFile                       uintptr
	tcl_ZlibStreamSetCompressionDictionary uintptr
	reserved631                            uintptr
	reserved632                            uintptr
	reserved633                            uintptr
	reserved634                            uintptr
	reserved635                            uintptr
	reserved636                            uintptr
	reserved637                            uintptr
	reserved638                            uintptr
	reserved639                            uintptr
	reserved640                            uintptr
	reserved641                            uintptr
	reserved642                            uintptr
	reserved643                            uintptr
	reserved644                            uintptr
	reserved645                            uintptr
	reserved646                            uintptr
	reserved647                            uintptr
	reserved648                            uintptr
	reserved649                            uintptr
	reserved650                            uintptr
	reserved651                            uintptr
	reserved652                            uintptr
	reserved653                            uintptr
	reserved654                            uintptr
	reserved655                            uintptr
	reserved656                            uintptr
	reserved657                            uintptr
	reserved658                            uintptr
	reserved659                            uintptr
	tclUnusedStubEntry                     uintptr
} /* tclDecls.h:2545:3 */ // Epoch of the tcl environment
// (if changed with tcl-env).

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:
// tclInt.h --
//
//	Declarations of things used internally by the Tcl interpreter.
//
// Copyright (c) 1987-1993 The Regents of the University of California.
// Copyright (c) 1993-1997 Lucent Technologies.
// Copyright (c) 1994-1998 Sun Microsystems, Inc.
// Copyright (c) 1998-1999 by Scriptics Corporation.
// Copyright (c) 2001, 2002 by Kevin B. Kenny.  All rights reserved.
// Copyright (c) 2007 Daniel A. Steffen <das@users.sourceforge.net>
// Copyright (c) 2006-2008 by Joe Mistachkin.  All rights reserved.
// Copyright (c) 2008 by Miguel Sofer. All rights reserved.
//
// See the file "license.terms" for information on usage and redistribution of
// this file, and for a DISCLAIMER OF ALL WARRANTIES.

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:
// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// super class file for PK algos

// default ... include all MPI

// RSA only (does not support DH/DSA/ECC)
// #define SC_RSA_1
// #define SC_RSA_1_WITH_TESTS

// For reference.... On an Athlon64 optimizing for speed...
//
//    LTM's mpi.o with all functions [striped] is 142KiB in size.
//

// Works for RSA only, mpi.o is 68KiB
// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// super class file for PK algos

// default ... include all MPI

// RSA only (does not support DH/DSA/ECC)
// #define SC_RSA_1
// #define SC_RSA_1_WITH_TESTS

// For reference.... On an Athlon64 optimizing for speed...
//
//    LTM's mpi.o with all functions [striped] is 142KiB in size.
//

// Works for RSA only, mpi.o is 68KiB
// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// super class file for PK algos

// default ... include all MPI

// RSA only (does not support DH/DSA/ECC)
// #define SC_RSA_1
// #define SC_RSA_1_WITH_TESTS

// For reference.... On an Athlon64 optimizing for speed...
//
//    LTM's mpi.o with all functions [striped] is 142KiB in size.
//

// Works for RSA only, mpi.o is 68KiB
// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// tclStringRep.h --
//
//	This file contains the definition of the Unicode string internal
//	representation and macros to access it.
//
//	A Unicode string is an internationalized string. Conceptually, a
//	Unicode string is an array of 16-bit quantities organized as a
//	sequence of properly formed UTF-8 characters. There is a one-to-one
//	map between Unicode and UTF characters. Because Unicode characters
//	have a fixed width, operations such as indexing operate on Unicode
//	data. The String object is optimized for the case where each UTF char
//	in a string is only one byte. In this case, we store the value of
//	numChars, but we don't store the Unicode data (unless Tcl_GetUnicode
//	is explicitly called).
//
//	The String object type stores one or both formats. The default
//	behavior is to store UTF. Once Unicode is calculated by a function, it
//	is stored in the internal rep for future access (without an additional
//	O(n) cost).
//
//	To allow many appends to be done to an object without constantly
//	reallocating the space for the string or Unicode representation, we
//	allocate double the space for the string or Unicode and use the
//	internal representation to keep track of how much space is used vs.
//	allocated.
//
// Copyright (c) 1995-1997 Sun Microsystems, Inc.
// Copyright (c) 1999 by Scriptics Corporation.
//
// See the file "license.terms" for information on usage and redistribution of
// this file, and for a DISCLAIMER OF ALL WARRANTIES.

// The following structure is the internal rep for a String object. It keeps
// track of how much memory has been used and how much has been allocated for
// the Unicode and UTF string to enable growing and shrinking of the UTF and
// Unicode reps of the String object with fewer mallocs. To optimize string
// length and indexing operations, this structure also stores the number of
// characters (same of UTF and Unicode!) once that value has been computed.
//
// Under normal configurations, what Tcl calls "Unicode" is actually UTF-16
// restricted to the Basic Multilingual Plane (i.e. U+00000 to U+0FFFF). This
// can be officially modified by altering the definition of Tcl_UniChar in
// tcl.h, but do not do that unless you are sure what you're doing!

type String1 = struct {
	_          [0]uint32
	numChars   int32
	allocated  int32
	maxChars   int32
	hasUnicode int32
} /* tclStringRep.h:49:9 */

// Epoch of the tcl environment
// (if changed with tcl-env).

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:
// tclInt.h --
//
//	Declarations of things used internally by the Tcl interpreter.
//
// Copyright (c) 1987-1993 The Regents of the University of California.
// Copyright (c) 1993-1997 Lucent Technologies.
// Copyright (c) 1994-1998 Sun Microsystems, Inc.
// Copyright (c) 1998-1999 by Scriptics Corporation.
// Copyright (c) 2001, 2002 by Kevin B. Kenny.  All rights reserved.
// Copyright (c) 2007 Daniel A. Steffen <das@users.sourceforge.net>
// Copyright (c) 2006-2008 by Joe Mistachkin.  All rights reserved.
// Copyright (c) 2008 by Miguel Sofer. All rights reserved.
//
// See the file "license.terms" for information on usage and redistribution of
// this file, and for a DISCLAIMER OF ALL WARRANTIES.

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:
// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// super class file for PK algos

// default ... include all MPI

// RSA only (does not support DH/DSA/ECC)
// #define SC_RSA_1
// #define SC_RSA_1_WITH_TESTS

// For reference.... On an Athlon64 optimizing for speed...
//
//    LTM's mpi.o with all functions [striped] is 142KiB in size.
//

// Works for RSA only, mpi.o is 68KiB
// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// super class file for PK algos

// default ... include all MPI

// RSA only (does not support DH/DSA/ECC)
// #define SC_RSA_1
// #define SC_RSA_1_WITH_TESTS

// For reference.... On an Athlon64 optimizing for speed...
//
//    LTM's mpi.o with all functions [striped] is 142KiB in size.
//

// Works for RSA only, mpi.o is 68KiB
// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// super class file for PK algos

// default ... include all MPI

// RSA only (does not support DH/DSA/ECC)
// #define SC_RSA_1
// #define SC_RSA_1_WITH_TESTS

// For reference.... On an Athlon64 optimizing for speed...
//
//    LTM's mpi.o with all functions [striped] is 142KiB in size.
//

// Works for RSA only, mpi.o is 68KiB
// LibTomMath, multiple-precision integer library -- Tom St Denis
// SPDX-License-Identifier: Unlicense

// tclStringRep.h --
//
//	This file contains the definition of the Unicode string internal
//	representation and macros to access it.
//
//	A Unicode string is an internationalized string. Conceptually, a
//	Unicode string is an array of 16-bit quantities organized as a
//	sequence of properly formed UTF-8 characters. There is a one-to-one
//	map between Unicode and UTF characters. Because Unicode characters
//	have a fixed width, operations such as indexing operate on Unicode
//	data. The String object is optimized for the case where each UTF char
//	in a string is only one byte. In this case, we store the value of
//	numChars, but we don't store the Unicode data (unless Tcl_GetUnicode
//	is explicitly called).
//
//	The String object type stores one or both formats. The default
//	behavior is to store UTF. Once Unicode is calculated by a function, it
//	is stored in the internal rep for future access (without an additional
//	O(n) cost).
//
//	To allow many appends to be done to an object without constantly
//	reallocating the space for the string or Unicode representation, we
//	allocate double the space for the string or Unicode and use the
//	internal representation to keep track of how much space is used vs.
//	allocated.
//
// Copyright (c) 1995-1997 Sun Microsystems, Inc.
// Copyright (c) 1999 by Scriptics Corporation.
//
// See the file "license.terms" for information on usage and redistribution of
// this file, and for a DISCLAIMER OF ALL WARRANTIES.

// The following structure is the internal rep for a String object. It keeps
// track of how much memory has been used and how much has been allocated for
// the Unicode and UTF string to enable growing and shrinking of the UTF and
// Unicode reps of the String object with fewer mallocs. To optimize string
// length and indexing operations, this structure also stores the number of
// characters (same of UTF and Unicode!) once that value has been computed.
//
// Under normal configurations, what Tcl calls "Unicode" is actually UTF-16
// restricted to the Basic Multilingual Plane (i.e. U+00000 to U+0FFFF). This
// can be officially modified by altering the definition of Tcl_UniChar in
// tcl.h, but do not do that unless you are sure what you're doing!

type String = String1 /* tclStringRep.h:65:3 */

func VarPtrDeleteProc(tls *libc.TLS, clientData ClientData, interp uintptr) { /* tclTestObj.c:54:13: */
	var i int32
	var varPtr uintptr = clientData
	for i = 0; i < NUMBER_OF_OBJECT_VARS; i++ {
		if *(*uintptr)(unsafe.Pointer(varPtr + uintptr(i)*8)) != 0 {
			for ok := true; ok; ok = 0 != 0 {
				var _objPtr uintptr = *(*uintptr)(unsafe.Pointer(varPtr + uintptr(i)*8))
				if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
				}
			}
		}
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DeleteAssocData})).f(tls, interp, ts+9109 /* "TCLOBJTEST_VARPT..." */)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, varPtr)
}

func GetVarPtr(tls *libc.TLS, interp uintptr) uintptr { /* tclTestObj.c:65:16: */
	bp := tls.Alloc(8)
	defer tls.Free(8)

	// var proc uintptr at bp, 8

	return (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) ClientData
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetAssocData})).f(tls, interp, ts+9109 /* "TCLOBJTEST_VARPT..." */, bp /* &proc */)
}

//----------------------------------------------------------------------
//
// TclObjTest_Init --
//
//	This function creates additional commands that are used to test the
//	Tcl object support.
//
// Results:
//	Returns a standard Tcl completion code, and leaves an error
//	message in the interp's result if an error occurs.
//
// Side effects:
//	Creates and registers several new testing commands.
//
//----------------------------------------------------------------------

func TclObjTest_Init(tls *libc.TLS, interp uintptr) int32 { /* tclTestObj.c:91:1: */
	var i int32
	// An array of Tcl_Obj pointers used in the commands that operate on or get
	// the values of Tcl object-valued variables. varPtr[i] is the i-th variable's
	// Tcl_Obj *.
	var varPtr uintptr

	varPtr = (*struct {
		f func(*libc.TLS, uint32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(uint64(NUMBER_OF_OBJECT_VARS)*uint64(unsafe.Sizeof(uintptr(0)))))
	if !(varPtr != 0) {
		return TCL_ERROR
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetAssocData})).f(tls, interp, ts+9109 /* "TCLOBJTEST_VARPT..." */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr)
	}{VarPtrDeleteProc})), varPtr)
	for i = 0; i < NUMBER_OF_OBJECT_VARS; i++ {
		*(*uintptr)(unsafe.Pointer(varPtr + uintptr(i)*8)) = uintptr(0)
	}

	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+9127 /* "testbignumobj" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestbignumobjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+9141 /* "testbooleanobj" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestbooleanobjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+9156 /* "testdoubleobj" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestdoubleobjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+9170 /* "testintobj" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestintobjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+9181 /* "testindexobj" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestindexobjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+9194 /* "testlistobj" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestlistobjCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+9206 /* "testobj" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestobjCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+9214 /* "teststringobj" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TeststringobjCmd})),
		uintptr(0), uintptr(0))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestbignumobjCmd --
//
//	This function implements the "testbignumobj" command.  It is used
//	to exercise the bignum Tcl object type implementation.
//
// Results:
//	Returns a standard Tcl object result.
//
// Side effects:
//	Creates and frees bignum objects; converts objects to have bignum
//	type.
//
//----------------------------------------------------------------------

func TestbignumobjCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTestObj.c:148:1: */
	bp := tls.Alloc(88)
	defer tls.Free(88)

	*(*[7]uintptr)(unsafe.Pointer(bp /* subcmds */)) = [7]uintptr{
		ts + 4039, ts + 1408, ts + 9228, ts + 9235, ts + 9241, ts + 9248, uintptr(0),
	}
	// var index int32 at bp+56, 4

	// var varIndex int32 at bp+60, 4

	var string uintptr
	// var bignumValue mp_int at bp+64, 24

	var varPtr uintptr

	if objc < 3 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+9258 /* "option ?arg ...?" */)
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp, int32(unsafe.Sizeof(uintptr(0))), ts+3234, 0, bp+56) != TCL_OK {
		return TCL_ERROR
	}
	string = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	if GetVariableIndex(tls, interp, string, bp+60) != TCL_OK {
		return TCL_ERROR
	}
	varPtr = GetVarPtr(tls, interp)

	switch *(*int32)(unsafe.Pointer(bp + 56 /* index */)) {
	case 0 /* BIGNUM_SET */ :
		if objc != 4 {
			(*struct {
				f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 2, objv, ts+9275 /* "var value" */)
			return TCL_ERROR
		}
		string = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 3*8)))
		if (*struct {
			f func(*libc.TLS, uintptr) mp_err
		})(unsafe.Pointer(&struct{ uintptr }{(*TclTomMathStubs)(unsafe.Pointer(tcl.XtclTomMathStubsPtr)).tclBN_mp_init})).f(tls, bp+64) != MP_OKAY {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp,
				(*struct {
					f func(*libc.TLS, uintptr, int32) uintptr
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+9285 /* "error in mp_init" */, -1))
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, int32) mp_err
		})(unsafe.Pointer(&struct{ uintptr }{(*TclTomMathStubs)(unsafe.Pointer(tcl.XtclTomMathStubsPtr)).tclBN_mp_read_radix})).f(tls, bp+64, string, 10) != MP_OKAY {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclTomMathStubs)(unsafe.Pointer(tcl.XtclTomMathStubsPtr)).tclBN_mp_clear})).f(tls, bp+64 /* &bignumValue */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp,
				(*struct {
					f func(*libc.TLS, uintptr, int32) uintptr
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+9302 /* "error in mp_read..." */, -1))
			return TCL_ERROR
		}

		// If the object currently bound to the variable with index varIndex
		// has ref count 1 (i.e. the object is unshared) we can modify that
		// object directly.  Otherwise, if RC>1 (i.e. the object is shared),
		// we must create a new object to modify/set and decrement the old
		// formerly-shared object's ref count. This is "copy on write".

		if *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60)))*8)) != uintptr(0) && !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60)))*8)))).refCount > 1) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetBignumObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60 /* varIndex */)))*8)), bp+64 /* &bignumValue */)
		} else {
			SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 60 /* varIndex */)), (*struct {
				f func(*libc.TLS, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewBignumObj})).f(tls, bp+64 /* &bignumValue */))
		}
		break

	case 1 /* BIGNUM_GET */ :
		if objc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 2, objv, ts+9325 /* "varIndex" */)
			return TCL_ERROR
		}
		if CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 60))) != 0 {
			return TCL_ERROR
		}
		break

	case 2 /* BIGNUM_MULT10 */ :
		if objc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 2, objv, ts+9325 /* "varIndex" */)
			return TCL_ERROR
		}
		if CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 60))) != 0 {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBignumFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60)))*8)),
			bp+64) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, mp_digit, uintptr) mp_err
		})(unsafe.Pointer(&struct{ uintptr }{(*TclTomMathStubs)(unsafe.Pointer(tcl.XtclTomMathStubsPtr)).tclBN_mp_mul_d})).f(tls, bp+64, uint32(10), bp+64) != MP_OKAY {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclTomMathStubs)(unsafe.Pointer(tcl.XtclTomMathStubsPtr)).tclBN_mp_clear})).f(tls, bp+64 /* &bignumValue */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp,
				(*struct {
					f func(*libc.TLS, uintptr, int32) uintptr
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+9334 /* "error in mp_mul_..." */, -1))
			return TCL_ERROR
		}
		if !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60)))*8)))).refCount > 1) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetBignumObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60 /* varIndex */)))*8)), bp+64 /* &bignumValue */)
		} else {
			SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 60 /* varIndex */)), (*struct {
				f func(*libc.TLS, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewBignumObj})).f(tls, bp+64 /* &bignumValue */))
		}
		break

	case 3 /* BIGNUM_DIV10 */ :
		if objc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 2, objv, ts+9325 /* "varIndex" */)
			return TCL_ERROR
		}
		if CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 60))) != 0 {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBignumFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60)))*8)),
			bp+64) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, mp_digit, uintptr, uintptr) mp_err
		})(unsafe.Pointer(&struct{ uintptr }{(*TclTomMathStubs)(unsafe.Pointer(tcl.XtclTomMathStubsPtr)).tclBN_mp_div_d})).f(tls, bp+64, uint32(10), bp+64, uintptr(0)) != MP_OKAY {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclTomMathStubs)(unsafe.Pointer(tcl.XtclTomMathStubsPtr)).tclBN_mp_clear})).f(tls, bp+64 /* &bignumValue */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp,
				(*struct {
					f func(*libc.TLS, uintptr, int32) uintptr
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+9352 /* "error in mp_div_..." */, -1))
			return TCL_ERROR
		}
		if !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60)))*8)))).refCount > 1) {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetBignumObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60 /* varIndex */)))*8)), bp+64 /* &bignumValue */)
		} else {
			SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 60 /* varIndex */)), (*struct {
				f func(*libc.TLS, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewBignumObj})).f(tls, bp+64 /* &bignumValue */))
		}
		break

	case 4 /* BIGNUM_ISEVEN */ :
		if objc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 2, objv, ts+9325 /* "varIndex" */)
			return TCL_ERROR
		}
		if CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 60))) != 0 {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBignumFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60)))*8)),
			bp+64) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, int32, uintptr) mp_err
		})(unsafe.Pointer(&struct{ uintptr }{(*TclTomMathStubs)(unsafe.Pointer(tcl.XtclTomMathStubsPtr)).tclBN_mp_mod_2d})).f(tls, bp+64, 1, bp+64) != MP_OKAY {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclTomMathStubs)(unsafe.Pointer(tcl.XtclTomMathStubsPtr)).tclBN_mp_clear})).f(tls, bp+64 /* &bignumValue */)
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp,
				(*struct {
					f func(*libc.TLS, uintptr, int32) uintptr
				})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+9370 /* "error in mp_mod_..." */, -1))
			return TCL_ERROR
		}
		if !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60)))*8)))).refCount > 1) {
			(*struct {
				f func(*libc.TLS, uintptr, int32)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetIntObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60 /* varIndex */)))*8)), func() int32 {
				if (*mp_int)(unsafe.Pointer(bp+64 /* &bignumValue */)).used == 0 {
					return MP_YES
				}
				return MP_NO
			}())
		} else {
			SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 60 /* varIndex */)), (*struct {
				f func(*libc.TLS, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, func() int32 {
				if (*mp_int)(unsafe.Pointer(bp+64)).used == 0 {
					return MP_YES
				}
				return MP_NO
			}()))
		}
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclTomMathStubs)(unsafe.Pointer(tcl.XtclTomMathStubsPtr)).tclBN_mp_clear})).f(tls, bp+64 /* &bignumValue */)
		break

	case 5 /* BIGNUM_RADIXSIZE */ :
		if objc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 2, objv, ts+9325 /* "varIndex" */)
			return TCL_ERROR
		}
		if CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 60))) != 0 {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBignumFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60)))*8)),
			bp+64) != TCL_OK {
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, int32, uintptr) mp_err
		})(unsafe.Pointer(&struct{ uintptr }{(*TclTomMathStubs)(unsafe.Pointer(tcl.XtclTomMathStubsPtr)).tclBN_mp_radix_size})).f(tls, bp+64, 10, bp+56) != MP_OKAY {
			return TCL_ERROR
		}
		if !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60)))*8)))).refCount > 1) {
			(*struct {
				f func(*libc.TLS, uintptr, int32)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetIntObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60 /* varIndex */)))*8)), *(*int32)(unsafe.Pointer(bp + 56 /* index */)))
		} else {
			SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 60 /* varIndex */)), (*struct {
				f func(*libc.TLS, int32) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, *(*int32)(unsafe.Pointer(bp + 56 /* index */))))
		}
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclTomMathStubs)(unsafe.Pointer(tcl.XtclTomMathStubsPtr)).tclBN_mp_clear})).f(tls, bp+64 /* &bignumValue */)
		break
	}

	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 60 /* varIndex */)))*8)))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestbooleanobjCmd --
//
//	This function implements the "testbooleanobj" command.  It is used to
//	test the boolean Tcl object type implementation.
//
// Results:
//	A standard Tcl object result.
//
// Side effects:
//	Creates and frees boolean objects, and also converts objects to
//	have boolean type.
//
//----------------------------------------------------------------------

func TestbooleanobjCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTestObj.c:347:1: */
	bp := tls.Alloc(40)
	defer tls.Free(40)

	// var varIndex int32 at bp+32, 4

	// var boolValue int32 at bp+36, 4

	var index uintptr
	var subCmd uintptr
	var varPtr uintptr

	if !(objc < 3) {
		goto __1
	}
wrongNumArgs:
	(*struct {
		f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+9389 /* "option arg ?arg ..." */)
	return TCL_ERROR
__1:
	;

	index = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	if !(GetVariableIndex(tls, interp, index, bp+32) != TCL_OK) {
		goto __2
	}
	return TCL_ERROR
__2:
	;

	varPtr = GetVarPtr(tls, interp)

	subCmd = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)))
	if !(libc.Xstrcmp(tls, subCmd, ts+4039) == 0) {
		goto __3
	}
	if !(objc != 4) {
		goto __5
	}
	goto wrongNumArgs
__5:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBooleanFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 3*8)), bp+36) != TCL_OK) {
		goto __6
	}
	return TCL_ERROR
__6:
	;

	// If the object currently bound to the variable with index varIndex
	// has ref count 1 (i.e. the object is unshared) we can modify that
	// object directly. Otherwise, if RC>1 (i.e. the object is shared),
	// we must create a new object to modify/set and decrement the old
	// formerly-shared object's ref count. This is "copy on write".

	if !(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)) != uintptr(0) && !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)))).refCount > 1)) {
		goto __7
	}
	(*struct {
		f func(*libc.TLS, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetIntObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)), libc.Bool32(*(*int32)(unsafe.Pointer(bp + 36 /* boolValue */)) != 0))
	goto __8
__7:
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)), (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, libc.Bool32(*(*int32)(unsafe.Pointer(bp + 36 /* boolValue */)) != 0)))
__8:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)))
	goto __4
__3:
	if !(libc.Xstrcmp(tls, subCmd, ts+1408) == 0) {
		goto __9
	}
	if !(objc != 3) {
		goto __11
	}
	goto wrongNumArgs
__11:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 32))) != 0) {
		goto __12
	}
	return TCL_ERROR
__12:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)))
	goto __10
__9:
	if !(libc.Xstrcmp(tls, subCmd, ts+9410) == 0) {
		goto __13
	}
	if !(objc != 3) {
		goto __15
	}
	goto wrongNumArgs
__15:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 32))) != 0) {
		goto __16
	}
	return TCL_ERROR
__16:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBooleanFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)),
		bp+36) != TCL_OK) {
		goto __17
	}
	return TCL_ERROR
__17:
	;
	if !!((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)))).refCount > 1) {
		goto __18
	}
	(*struct {
		f func(*libc.TLS, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetIntObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)), libc.Bool32(libc.BoolInt32(!(*(*int32)(unsafe.Pointer(bp + 36 /* boolValue */)) != 0)) != 0))
	goto __19
__18:
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)), (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, libc.Bool32(libc.BoolInt32(!(*(*int32)(unsafe.Pointer(bp + 36 /* boolValue */)) != 0)) != 0)))
__19:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)))
	goto __14
__13:
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendStringsToObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp),
		libc.VaList(bp, ts+1302, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8))),
			ts+9414, uintptr(0)))
	return TCL_ERROR
__14:
	;
__10:
	;
__4:
	;
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestdoubleobjCmd --
//
//	This function implements the "testdoubleobj" command.  It is used to
//	test the double-precision floating point Tcl object type
//	implementation.
//
// Results:
//	A standard Tcl object result.
//
// Side effects:
//	Creates and frees double objects, and also converts objects to
//	have double type.
//
//----------------------------------------------------------------------

func TestdoubleobjCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTestObj.c:447:1: */
	bp := tls.Alloc(48)
	defer tls.Free(48)

	// var varIndex int32 at bp+32, 4

	// var doubleValue float64 at bp+40, 8

	var index uintptr
	var subCmd uintptr
	var string uintptr
	var varPtr uintptr

	if !(objc < 3) {
		goto __1
	}
wrongNumArgs:
	(*struct {
		f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+9389 /* "option arg ?arg ..." */)
	return TCL_ERROR
__1:
	;

	varPtr = GetVarPtr(tls, interp)

	index = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	if !(GetVariableIndex(tls, interp, index, bp+32) != TCL_OK) {
		goto __2
	}
	return TCL_ERROR
__2:
	;

	subCmd = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)))
	if !(libc.Xstrcmp(tls, subCmd, ts+4039) == 0) {
		goto __3
	}
	if !(objc != 4) {
		goto __5
	}
	goto wrongNumArgs
__5:
	;
	string = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 3*8)))
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetDouble})).f(tls, interp, string, bp+40) != TCL_OK) {
		goto __6
	}
	return TCL_ERROR
__6:
	;

	// If the object currently bound to the variable with index varIndex
	// has ref count 1 (i.e. the object is unshared) we can modify that
	// object directly. Otherwise, if RC>1 (i.e. the object is shared), we
	// must create a new object to modify/set and decrement the old
	// formerly-shared object's ref count. This is "copy on write".

	if !(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)) != uintptr(0) && !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)))).refCount > 1)) {
		goto __7
	}
	(*struct {
		f func(*libc.TLS, uintptr, float64)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetDoubleObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)), *(*float64)(unsafe.Pointer(bp + 40 /* doubleValue */)))
	goto __8
__7:
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)), (*struct {
		f func(*libc.TLS, float64) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewDoubleObj})).f(tls, *(*float64)(unsafe.Pointer(bp + 40 /* doubleValue */))))
__8:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)))
	goto __4
__3:
	if !(libc.Xstrcmp(tls, subCmd, ts+1408) == 0) {
		goto __9
	}
	if !(objc != 3) {
		goto __11
	}
	goto wrongNumArgs
__11:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 32))) != 0) {
		goto __12
	}
	return TCL_ERROR
__12:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)))
	goto __10
__9:
	if !(libc.Xstrcmp(tls, subCmd, ts+9228) == 0) {
		goto __13
	}
	if !(objc != 3) {
		goto __15
	}
	goto wrongNumArgs
__15:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 32))) != 0) {
		goto __16
	}
	return TCL_ERROR
__16:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetDoubleFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)),
		bp+40) != TCL_OK) {
		goto __17
	}
	return TCL_ERROR
__17:
	;
	if !!((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)))).refCount > 1) {
		goto __18
	}
	(*struct {
		f func(*libc.TLS, uintptr, float64)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetDoubleObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)), *(*float64)(unsafe.Pointer(bp + 40 /* doubleValue */))*10.0)
	goto __19
__18:
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)), (*struct {
		f func(*libc.TLS, float64) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewDoubleObj})).f(tls, *(*float64)(unsafe.Pointer(bp + 40 /* doubleValue */))*10.0))
__19:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)))
	goto __14
__13:
	if !(libc.Xstrcmp(tls, subCmd, ts+9235) == 0) {
		goto __20
	}
	if !(objc != 3) {
		goto __22
	}
	goto wrongNumArgs
__22:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 32))) != 0) {
		goto __23
	}
	return TCL_ERROR
__23:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetDoubleFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)),
		bp+40) != TCL_OK) {
		goto __24
	}
	return TCL_ERROR
__24:
	;
	if !!((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)))).refCount > 1) {
		goto __25
	}
	(*struct {
		f func(*libc.TLS, uintptr, float64)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetDoubleObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)), *(*float64)(unsafe.Pointer(bp + 40 /* doubleValue */))/10.0)
	goto __26
__25:
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)), (*struct {
		f func(*libc.TLS, float64) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewDoubleObj})).f(tls, *(*float64)(unsafe.Pointer(bp + 40 /* doubleValue */))/10.0))
__26:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)))
	goto __21
__20:
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendStringsToObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp),
		libc.VaList(bp, ts+1302, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8))),
			ts+9442, uintptr(0)))
	return TCL_ERROR
__21:
	;
__14:
	;
__10:
	;
__4:
	;
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestindexobjCmd --
//
//	This function implements the "testindexobj" command. It is used to
//	test the index Tcl object type implementation.
//
// Results:
//	A standard Tcl object result.
//
// Side effects:
//	Creates and frees int objects, and also converts objects to
//	have int type.
//
//----------------------------------------------------------------------

func TestindexobjCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTestObj.c:565:1: */
	bp := tls.Alloc(16)
	defer tls.Free(16)

	// var allowAbbrev int32 at bp+12, 4

	// var index int32 at bp+4, 4

	// var index2 int32 at bp, 4

	// var setError int32 at bp+8, 4

	var i int32
	var result int32
	var argv uintptr
	var indexRep uintptr

	if objc == 3 && libc.Xstrcmp(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8))),
		ts+9480) == 0 {
		// This code checks to be sure that the results of Tcl_GetIndexFromObj
		// are properly cached in the object and returned on subsequent
		// lookups.

		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 2*8)), bp) != TCL_OK {
			return TCL_ERROR
		}

		(*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, uintptr(0), *(*uintptr)(unsafe.Pointer(objv + 1*8)), uintptr(unsafe.Pointer(&tablePtr)), int32(unsafe.Sizeof(uintptr(0))), ts+9486 /* "token" */, 0, bp+4 /* &index */)
		indexRep = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(objv + 1*8)) + 32))
		(*IndexRep)(unsafe.Pointer(indexRep)).index = *(*int32)(unsafe.Pointer(bp /* index2 */))
		result = (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, uintptr(0), *(*uintptr)(unsafe.Pointer(objv + 1*8)), uintptr(unsafe.Pointer(&tablePtr)), int32(unsafe.Sizeof(uintptr(0))), ts+9486 /* "token" */, 0, bp+4 /* &index */)
		if result == TCL_OK {
			(*struct {
				f func(*libc.TLS, uintptr, int32)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetIntObj})).f(tls, (*struct {
				f func(*libc.TLS, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), *(*int32)(unsafe.Pointer(bp + 4 /* index */)))
		}
		return result
	}

	if objc < 5 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, int32)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendToObj})).f(tls, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), ts+1270 /* "wrong # args" */, -1)
		return TCL_ERROR
	}

	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBooleanFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp+8) != TCL_OK {
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetBooleanFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 2*8)), bp+12) != TCL_OK {
		return TCL_ERROR
	}

	argv = (*struct {
		f func(*libc.TLS, uint32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(uint64(objc-3)*uint64(unsafe.Sizeof(uintptr(0)))))
	for i = 4; i < objc; i++ {
		*(*uintptr)(unsafe.Pointer(argv + uintptr(i-4)*8)) = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + uintptr(i)*8)))
	}
	*(*uintptr)(unsafe.Pointer(argv + uintptr(objc-4)*8)) = uintptr(0)

	// Tcl_GetIndexFromObj assumes that the table is statically-allocated so
	// that its address is different for each index object. If we accidently
	// allocate a table at the same address as that cached in the index
	// object, clear out the object's cached state.

	if (*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(objv + 3*8)))).typePtr != uintptr(0) &&
		!(libc.Xstrcmp(tls, ts+9492, (*Tcl_ObjType)(unsafe.Pointer((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(objv + 3*8)))).typePtr)).name) != 0) {
		indexRep = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(objv + 3*8)) + 32))
		if (*IndexRep)(unsafe.Pointer(indexRep)).tablePtr == argv {
			if (*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(objv + 3*8)))).typePtr != uintptr(0) {
				if (*Tcl_ObjType)(unsafe.Pointer((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(objv + 3*8)))).typePtr)).freeIntRepProc != uintptr(0) {
					(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*Tcl_ObjType)(unsafe.Pointer((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(objv + 3*8)))).typePtr)).freeIntRepProc})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 3*8)))
				}
				(*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(objv + 3*8)))).typePtr = uintptr(0)
			}

		}
	}

	result = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, func() uintptr {
		if *(*int32)(unsafe.Pointer(bp + 8)) != 0 {
			return interp
		}
		return uintptr(0)
	}(), *(*uintptr)(unsafe.Pointer(objv + 3*8)), argv, int32(unsafe.Sizeof(uintptr(0))), ts+9486, func() int32 {
		if *(*int32)(unsafe.Pointer(bp + 12)) != 0 {
			return 0
		}
		return TCL_EXACT
	}(), bp+4)
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, argv)
	if result == TCL_OK {
		(*struct {
			f func(*libc.TLS, uintptr, int32)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetIntObj})).f(tls, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), *(*int32)(unsafe.Pointer(bp + 4 /* index */)))
	}
	return result
}

// Keep this structure declaration in sync with tclIndexObj.c
type IndexRep = struct {
	tablePtr uintptr
	offset   int32
	index    int32
} /* tclTestObj.c:577:5 */

var tablePtr = [4]uintptr{ts + 5774, ts + 7320, ts + 9480, uintptr(0)} /* tclTestObj.c:573:23 */

//----------------------------------------------------------------------
//
// TestintobjCmd --
//
//	This function implements the "testintobj" command. It is used to
//	test the int Tcl object type implementation.
//
// Results:
//	A standard Tcl object result.
//
// Side effects:
//	Creates and frees int objects, and also converts objects to
//	have int type.
//
//----------------------------------------------------------------------

func TestintobjCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTestObj.c:668:1: */
	bp := tls.Alloc(48)
	defer tls.Free(48)

	// var intValue int32 at bp+44, 4

	// var varIndex int32 at bp+32, 4

	// var i int32 at bp+36, 4

	// var longValue int32 at bp+40, 4

	var index uintptr
	var subCmd uintptr
	var string uintptr
	var varPtr uintptr
	var maxLong int32

	if !(objc < 3) {
		goto __1
	}
wrongNumArgs:
	(*struct {
		f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+9389 /* "option arg ?arg ..." */)
	return TCL_ERROR
__1:
	;

	varPtr = GetVarPtr(tls, interp)
	index = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	if !(GetVariableIndex(tls, interp, index, bp+32) != TCL_OK) {
		goto __2
	}
	return TCL_ERROR
__2:
	;

	subCmd = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)))
	if !(libc.Xstrcmp(tls, subCmd, ts+4039) == 0) {
		goto __3
	}
	if !(objc != 4) {
		goto __5
	}
	goto wrongNumArgs
__5:
	;
	string = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 3*8)))
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, string, bp+36) != TCL_OK) {
		goto __6
	}
	return TCL_ERROR
__6:
	;
	*(*int32)(unsafe.Pointer(bp + 44 /* intValue */)) = *(*int32)(unsafe.Pointer(bp + 36 /* i */))

	// If the object currently bound to the variable with index varIndex
	// has ref count 1 (i.e. the object is unshared) we can modify that
	// object directly. Otherwise, if RC>1 (i.e. the object is shared), we
	// must create a new object to modify/set and decrement the old
	// formerly-shared object's ref count. This is "copy on write".

	if !(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)) != uintptr(0) && !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)))).refCount > 1)) {
		goto __7
	}
	(*struct {
		f func(*libc.TLS, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetIntObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)), *(*int32)(unsafe.Pointer(bp + 44 /* intValue */)))
	goto __8
__7:
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)), (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, *(*int32)(unsafe.Pointer(bp + 44 /* intValue */))))
__8:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)))
	goto __4
__3:
	if !(libc.Xstrcmp(tls, subCmd, ts+9498) == 0) {
		goto __9
	} // doesn't set result
	if !(objc != 4) {
		goto __11
	}
	goto wrongNumArgs
__11:
	;
	string = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 3*8)))
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, string, bp+36) != TCL_OK) {
		goto __12
	}
	return TCL_ERROR
__12:
	;
	*(*int32)(unsafe.Pointer(bp + 44 /* intValue */)) = *(*int32)(unsafe.Pointer(bp + 36 /* i */))
	if !(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)) != uintptr(0) && !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)))).refCount > 1)) {
		goto __13
	}
	(*struct {
		f func(*libc.TLS, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetIntObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)), *(*int32)(unsafe.Pointer(bp + 44 /* intValue */)))
	goto __14
__13:
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)), (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, *(*int32)(unsafe.Pointer(bp + 44 /* intValue */))))
__14:
	;
	goto __10
__9:
	if !(libc.Xstrcmp(tls, subCmd, ts+9503) == 0) {
		goto __15
	}
	if !(objc != 4) {
		goto __17
	}
	goto wrongNumArgs
__17:
	;
	string = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 3*8)))
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, string, bp+36) != TCL_OK) {
		goto __18
	}
	return TCL_ERROR
__18:
	;
	*(*int32)(unsafe.Pointer(bp + 44 /* intValue */)) = *(*int32)(unsafe.Pointer(bp + 36 /* i */))
	if !(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)) != uintptr(0) && !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)))).refCount > 1)) {
		goto __19
	}
	(*struct {
		f func(*libc.TLS, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetLongObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)), int32(*(*int32)(unsafe.Pointer(bp + 44 /* intValue */))))
	goto __20
__19:
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)), (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewLongObj})).f(tls, int32(*(*int32)(unsafe.Pointer(bp + 44 /* intValue */)))))
__20:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)))
	goto __16
__15:
	if !(libc.Xstrcmp(tls, subCmd, ts+9511) == 0) {
		goto __21
	}
	maxLong = 0x7fffffff
	if !(objc != 3) {
		goto __23
	}
	goto wrongNumArgs
__23:
	;
	if !(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)) != uintptr(0) && !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)))).refCount > 1)) {
		goto __24
	}
	(*struct {
		f func(*libc.TLS, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetLongObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)), maxLong)
	goto __25
__24:
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)), (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewLongObj})).f(tls, maxLong))
__25:
	;
	goto __22
__21:
	if !(libc.Xstrcmp(tls, subCmd, ts+9522) == 0) {
		goto __26
	}
	if !(objc != 3) {
		goto __28
	}
	goto wrongNumArgs
__28:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 32))) != 0) {
		goto __29
	}
	return TCL_ERROR
__29:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetLongFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)), bp+40) != TCL_OK) {
		goto __30
	}
	return TCL_ERROR
__30:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendToObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp),
		func() uintptr {
			if *(*int32)(unsafe.Pointer(bp + 40)) == 0x7fffffff {
				return ts + 6584 /* "1" */
			}
			return ts + 6586 /* "0" */
		}(), -1)
	goto __27
__26:
	if !(libc.Xstrcmp(tls, subCmd, ts+1408) == 0) {
		goto __31
	}
	if !(objc != 3) {
		goto __33
	}
	goto wrongNumArgs
__33:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 32))) != 0) {
		goto __34
	}
	return TCL_ERROR
__34:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)))
	goto __32
__31:
	if !(libc.Xstrcmp(tls, subCmd, ts+9532) == 0) {
		goto __35
	}
	if !(objc != 3) {
		goto __37
	}
	goto wrongNumArgs
__37:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 32))) != 0) {
		goto __38
	}
	return TCL_ERROR
__38:
	;
	string = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendToObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), string, -1)
	goto __36
__35:
	if !(libc.Xstrcmp(tls, subCmd, ts+9537) == 0) {
		goto __39
	}
	// If long ints have more bits than ints on this platform, verify that
	// Tcl_GetIntFromObj returns an error if the long int held in an
	// integer object's internal representation is too large to fit in an
	// int.

	if !(objc != 3) {
		goto __41
	}
	goto wrongNumArgs
__41:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendToObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), ts+6584 /* "1" */, -1)
	goto __40
__39:
	if !(libc.Xstrcmp(tls, subCmd, ts+9228) == 0) {
		goto __42
	}
	if !(objc != 3) {
		goto __44
	}
	goto wrongNumArgs
__44:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 32))) != 0) {
		goto __45
	}
	return TCL_ERROR
__45:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)),
		bp+44) != TCL_OK) {
		goto __46
	}
	return TCL_ERROR
__46:
	;
	if !!((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)))).refCount > 1) {
		goto __47
	}
	(*struct {
		f func(*libc.TLS, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetIntObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)), *(*int32)(unsafe.Pointer(bp + 44 /* intValue */))*10)
	goto __48
__47:
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)), (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, *(*int32)(unsafe.Pointer(bp + 44 /* intValue */))*10))
__48:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)))
	goto __43
__42:
	if !(libc.Xstrcmp(tls, subCmd, ts+9235) == 0) {
		goto __49
	}
	if !(objc != 3) {
		goto __51
	}
	goto wrongNumArgs
__51:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 32))) != 0) {
		goto __52
	}
	return TCL_ERROR
__52:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)),
		bp+44) != TCL_OK) {
		goto __53
	}
	return TCL_ERROR
__53:
	;
	if !!((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32)))*8)))).refCount > 1) {
		goto __54
	}
	(*struct {
		f func(*libc.TLS, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetIntObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)), *(*int32)(unsafe.Pointer(bp + 44 /* intValue */))/10)
	goto __55
__54:
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)), (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, *(*int32)(unsafe.Pointer(bp + 44 /* intValue */))/10))
__55:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 32 /* varIndex */)))*8)))
	goto __50
__49:
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendStringsToObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp),
		libc.VaList(bp, ts+1302, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8))),
			ts+9551, uintptr(0)))
	return TCL_ERROR
__50:
	;
__43:
	;
__40:
	;
__36:
	;
__32:
	;
__27:
	;
__22:
	;
__16:
	;
__10:
	;
__4:
	;
	return TCL_OK
}

//-----------------------------------------------------------------------------
//
// TestlistobjCmd --
//
//	This function implements the 'testlistobj' command. It is used to
//	test a few possible corner cases in list object manipulation from
//	C code that cannot occur at the Tcl level.
//
// Results:
//	A standard Tcl object result.
//
// Side effects:
//	Creates, manipulates and frees list objects.
//
//-----------------------------------------------------------------------------

func TestlistobjCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTestObj.c:872:1: */
	bp := tls.Alloc(44)
	defer tls.Free(44)

	// Subcommands supported by this command
	*(*[3]uintptr)(unsafe.Pointer(bp + 8 /* subcommands */)) = [3]uintptr{
		ts + 4039,
		ts + 1408,
		ts + 9595,
	}
	var index uintptr // Argument giving the variable number
	// var varIndex int32 at bp, 4
	// Variable number converted to binary
	// var cmdIndex int32 at bp+32, 4
	// Ordinal number of the subcommand
	// var first int32 at bp+36, 4
	// First index in the list
	// var count int32 at bp+40, 4
	// Count of elements in a list
	var varPtr uintptr

	if objc < 3 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+9603 /* "option arg ?arg...." */)
		return TCL_ERROR
	}
	varPtr = GetVarPtr(tls, interp)
	index = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	if GetVariableIndex(tls, interp, index, bp) != TCL_OK {
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp+8, int32(unsafe.Sizeof(uintptr(0))), ts+4469, 0, bp+32) != TCL_OK {
		return TCL_ERROR
	}
	switch *(*int32)(unsafe.Pointer(bp + 32 /* cmdIndex */)) {
	case 0 /* LISTOBJ_SET */ :
		if *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp)))*8)) != uintptr(0) && !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp)))*8)))).refCount > 1) {
			(*struct {
				f func(*libc.TLS, uintptr, int32, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetListObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp /* varIndex */)))*8)), objc-3, objv+uintptr(3)*8)
		} else {
			SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp /* varIndex */)), (*struct {
				f func(*libc.TLS, int32, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewListObj})).f(tls, objc-3, objv+uintptr(3)*8))
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp /* varIndex */)))*8)))
		break

	case 1 /* LISTOBJ_GET */ :
		if objc != 3 {
			(*struct {
				f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 2, objv, ts+9325 /* "varIndex" */)
			return TCL_ERROR
		}
		if CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp))) != 0 {
			return TCL_ERROR
		}
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp /* varIndex */)))*8)))
		break

	case 2 /* LISTOBJ_REPLACE */ :
		if objc < 5 {
			(*struct {
				f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 2, objv,
				ts+9623)
			return TCL_ERROR
		}
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 3*8)), bp+36) != TCL_OK ||
			(*struct {
				f func(*libc.TLS, uintptr, uintptr, uintptr) int32
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 4*8)), bp+40) != TCL_OK {
			return TCL_ERROR
		}
		if (*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp)))*8)))).refCount > 1 {
			SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp /* varIndex */)), (*struct {
				f func(*libc.TLS, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp /* varIndex */)))*8))))
		}
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ResetResult})).f(tls, interp)
		return (*struct {
			f func(*libc.TLS, uintptr, uintptr, int32, int32, int32, uintptr) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjReplace})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp /* varIndex */)))*8)), *(*int32)(unsafe.Pointer(bp + 36 /* first */)), *(*int32)(unsafe.Pointer(bp + 40 /* count */)),
			objc-5, objv+uintptr(5)*8)
	}
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestobjCmd --
//
//	This function implements the "testobj" command. It is used to test
//	the type-independent portions of the Tcl object type implementation.
//
// Results:
//	A standard Tcl object result.
//
// Side effects:
//	Creates and frees objects.
//
//----------------------------------------------------------------------

func TestobjCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTestObj.c:969:1: */
	bp := tls.Alloc(80)
	defer tls.Free(80)

	// var varIndex int32 at bp+64, 4

	// var destIndex int32 at bp+68, 4

	var i int32
	var index uintptr
	var subCmd uintptr
	var string uintptr
	var targetType uintptr
	var varPtr uintptr
	var listObjPtr uintptr
	// var elemObjPtr uintptr at bp+72, 8

	var typeName uintptr
	var _objPtr uintptr
	var typeName1 uintptr

	if !(objc < 2) {
		goto __1
	}
wrongNumArgs:
	(*struct {
		f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+9389 /* "option arg ?arg ..." */)
	return TCL_ERROR
__1:
	;

	varPtr = GetVarPtr(tls, interp)
	subCmd = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)))
	if !(libc.Xstrcmp(tls, subCmd, ts+9657) == 0) {
		goto __2
	}
	if !(objc != 4) {
		goto __4
	}
	goto wrongNumArgs
__4:
	;
	index = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	if !(GetVariableIndex(tls, interp, index, bp+64) != TCL_OK) {
		goto __5
	}
	return TCL_ERROR
__5:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 64))) != 0) {
		goto __6
	}
	return TCL_ERROR
__6:
	;
	string = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 3*8)))
	if !(GetVariableIndex(tls, interp, string, bp+68) != TCL_OK) {
		goto __7
	}
	return TCL_ERROR
__7:
	;
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 68 /* destIndex */)), *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 64 /* varIndex */)))*8)))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 68 /* destIndex */)))*8)))
	goto __3
__2:
	if !(libc.Xstrcmp(tls, subCmd, ts+9664) == 0) {
		goto __8
	}
	if !(objc != 2) {
		goto __10
	}
	goto wrongNumArgs
__10:
	;
	*(*uintptr)(unsafe.Pointer(bp + 72 /* elemObjPtr */)) = (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, 123)
	listObjPtr = (*struct {
		f func(*libc.TLS, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewListObj})).f(tls, 1, bp+72 /* &elemObjPtr */)
	// Replace the single list element through itself, nonsense but legal.
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32, int32, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjReplace})).f(tls, interp, listObjPtr, 0, 1, 1, bp+72 /* &elemObjPtr */)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, listObjPtr)
	return TCL_OK
	goto __9
__8:
	if !(libc.Xstrcmp(tls, subCmd, ts+9675) == 0) {
		goto __11
	}

	if !(objc != 4) {
		goto __13
	}
	goto wrongNumArgs
__13:
	;
	index = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	if !(GetVariableIndex(tls, interp, index, bp+64) != TCL_OK) {
		goto __14
	}
	return TCL_ERROR
__14:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 64))) != 0) {
		goto __15
	}
	return TCL_ERROR
__15:
	;
	typeName = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 3*8)))
	if !(libc.AssignUintptr(&targetType, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjType})).f(tls, typeName)) == uintptr(0)) {
		goto __16
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendStringsToObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp),
		libc.VaList(bp, ts+9683, typeName, ts+9692, uintptr(0)))
	return TCL_ERROR
__16:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ConvertToType})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 64)))*8)), targetType) !=
		TCL_OK) {
		goto __17
	}
	return TCL_ERROR
__17:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 64 /* varIndex */)))*8)))
	goto __12
__11:
	if !(libc.Xstrcmp(tls, subCmd, ts+9699) == 0) {
		goto __18
	}
	if !(objc != 4) {
		goto __20
	}
	goto wrongNumArgs
__20:
	;
	index = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	if !(GetVariableIndex(tls, interp, index, bp+64) != TCL_OK) {
		goto __21
	}
	return TCL_ERROR
__21:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 64))) != 0) {
		goto __22
	}
	return TCL_ERROR
__22:
	;
	string = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 3*8)))
	if !(GetVariableIndex(tls, interp, string, bp+68) != TCL_OK) {
		goto __23
	}
	return TCL_ERROR
__23:
	;
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 68 /* destIndex */)), (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 64 /* varIndex */)))*8))))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 68 /* destIndex */)))*8)))
	goto __19
__18:
	if !(libc.Xstrcmp(tls, subCmd, ts+9709) == 0) {
		goto __24
	}
	if !(objc != 2) {
		goto __26
	}
	goto wrongNumArgs
__26:
	;
	i = 0
__27:
	if !(i < NUMBER_OF_OBJECT_VARS) {
		goto __29
	}
	if !(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(i)*8)) != uintptr(0)) {
		goto __30
	}
__31:
	_objPtr = *(*uintptr)(unsafe.Pointer(varPtr + uintptr(i)*8))
	if !(libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1) {
		goto __34
	}
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
__34:
	;
	goto __32
__32:
	if 0 != 0 {
		goto __31
	}
	goto __33
__33:
	;
	*(*uintptr)(unsafe.Pointer(varPtr + uintptr(i)*8)) = uintptr(0)
__30:
	;
	goto __28
__28:
	i++
	goto __27
	goto __29
__29:
	;
	goto __25
__24:
	if !(libc.Xstrcmp(tls, subCmd, ts+9721) == 0) {
		goto __35
	}
	if !(objc != 3) {
		goto __37
	}
	goto wrongNumArgs
__37:
	;
	index = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	if !(GetVariableIndex(tls, interp, index, bp+64) != TCL_OK) {
		goto __38
	}
	return TCL_ERROR
__38:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 64))) != 0) {
		goto __39
	}
	return TCL_ERROR
__39:
	;
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_InvalidateStringRep})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 64 /* varIndex */)))*8)))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 64 /* varIndex */)))*8)))
	goto __36
__35:
	if !(libc.Xstrcmp(tls, subCmd, ts+9741) == 0) {
		goto __40
	}
	if !(objc != 3) {
		goto __42
	}
	goto wrongNumArgs
__42:
	;
	index = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	if !(GetVariableIndex(tls, interp, index, bp+64) != TCL_OK) {
		goto __43
	}
	return TCL_ERROR
__43:
	;
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 64 /* varIndex */)), (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewObj})).f(tls))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 64 /* varIndex */)))*8)))
	goto __41
__40:
	if !(libc.Xstrcmp(tls, subCmd, ts+9748) == 0) {
		goto __44
	}

	// Return an object containing the name of the argument's type of
	// internal rep. If none exists, return "none".

	if !(objc != 3) {
		goto __46
	}
	goto wrongNumArgs
__46:
	;
	if !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(objv + 2*8)))).typePtr == uintptr(0)) {
		goto __47
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, ts+6403 /* "none" */, -1))
	goto __48
__47:
	typeName1 = (*Tcl_ObjType)(unsafe.Pointer((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(objv + 2*8)))).typePtr)).name
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, typeName1, -1))
__48:
	;
	goto __45
__44:
	if !(libc.Xstrcmp(tls, subCmd, ts+6597) == 0) {
		goto __49
	}
	if !(objc != 3) {
		goto __51
	}
	goto wrongNumArgs
__51:
	;
	index = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	if !(GetVariableIndex(tls, interp, index, bp+64) != TCL_OK) {
		goto __52
	}
	return TCL_ERROR
__52:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 64))) != 0) {
		goto __53
	}
	return TCL_ERROR
__53:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, (*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 64 /* varIndex */)))*8)))).refCount))
	goto __50
__49:
	if !(libc.Xstrcmp(tls, subCmd, ts+6606) == 0) {
		goto __54
	}
	if !(objc != 3) {
		goto __56
	}
	goto wrongNumArgs
__56:
	;
	index = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	if !(GetVariableIndex(tls, interp, index, bp+64) != TCL_OK) {
		goto __57
	}
	return TCL_ERROR
__57:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 64))) != 0) {
		goto __58
	}
	return TCL_ERROR
__58:
	;
	if !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 64)))*8)))).typePtr == uintptr(0)) {
		goto __59
	} // a string!
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendToObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), ts+3981 /* "string" */, -1)
	goto __60
__59:
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendToObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp),
		(*Tcl_ObjType)(unsafe.Pointer((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 64 /* varIndex */)))*8)))).typePtr)).name, -1)
__60:
	;
	goto __55
__54:
	if !(libc.Xstrcmp(tls, subCmd, ts+9756) == 0) {
		goto __61
	}
	if !(objc != 2) {
		goto __63
	}
	goto wrongNumArgs
__63:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendAllObjTypes})).f(tls, interp,
		(*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp)) != TCL_OK) {
		goto __64
	}
	return TCL_ERROR
__64:
	;
	goto __62
__61:
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendStringsToObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp),
		libc.VaList(bp+32, ts+1302, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8))),

			ts+9762, uintptr(0)))
	return TCL_ERROR
__62:
	;
__55:
	;
__50:
	;
__45:
	;
__41:
	;
__36:
	;
__25:
	;
__19:
	;
__12:
	;
__9:
	;
__3:
	;
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TeststringobjCmd --
//
//	This function implements the "teststringobj" command. It is used to
//	test the string Tcl object type implementation.
//
// Results:
//	A standard Tcl object result.
//
// Side effects:
//	Creates and frees string objects, and also converts objects to
//	have string type.
//
//----------------------------------------------------------------------

func TeststringobjCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTestObj.c:1173:1: */
	bp := tls.Alloc(212)
	defer tls.Free(212)

	var unicode uintptr
	// var varIndex int32 at bp+96, 4

	// var option int32 at bp+100, 4

	// var i int32 at bp+208, 4

	// var length int32 at bp+104, 4

	var index uintptr
	var string uintptr
	// var strings [12]uintptr at bp+112, 96

	var strPtr uintptr
	var varPtr uintptr

	if !(objc < 3) {
		goto __1
	}
wrongNumArgs:
	(*struct {
		f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+9389 /* "option arg ?arg ..." */)
	return TCL_ERROR
__1:
	;

	varPtr = GetVarPtr(tls, interp)
	index = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 2*8)))
	if !(GetVariableIndex(tls, interp, index, bp+96) != TCL_OK) {
		goto __2
	}
	return TCL_ERROR
__2:
	;

	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), uintptr(unsafe.Pointer(&options2)), int32(unsafe.Sizeof(uintptr(0))), ts+3234, 0, bp+100) !=
		TCL_OK) {
		goto __3
	}
	return TCL_ERROR
__3:
	;
	switch *(*int32)(unsafe.Pointer(bp + 100 /* option */)) {
	case 0:
		goto __5
	case 1:
		goto __6
	case 2:
		goto __7
	case 3:
		goto __8
	case 4:
		goto __9
	case 5:
		goto __10
	case 6:
		goto __11
	case 7:
		goto __12
	case 8:
		goto __13
	case 9:
		goto __14
	case 10:
		goto __15
	case 11:
		goto __16
	case 12:
		goto __17
	}
	goto __4
__5: // append
	if !(objc != 5) {
		goto __18
	}
	goto wrongNumArgs
__18:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 4*8)), bp+104) != TCL_OK) {
		goto __19
	}
	return TCL_ERROR
__19:
	;
	if !(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)) == uintptr(0)) {
		goto __20
	}
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)), (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewObj})).f(tls))
__20:
	;

	// If the object bound to variable "varIndex" is shared, we must
	// "copy on write" and append to a copy of the object.

	if !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)))).refCount > 1) {
		goto __21
	}
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)), (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8))))
__21:
	;
	string = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 3*8)))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendToObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)), string, *(*int32)(unsafe.Pointer(bp + 104 /* length */)))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)))
	goto __4
__6: // appendstrings
	if !(objc > MAX_STRINGS+3) {
		goto __22
	}
	goto wrongNumArgs
__22:
	;
	if !(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)) == uintptr(0)) {
		goto __23
	}
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)), (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewObj})).f(tls))
__23:
	;

	// If the object bound to variable "varIndex" is shared, we must
	// "copy on write" and append to a copy of the object.

	if !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)))).refCount > 1) {
		goto __24
	}
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)), (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8))))
__24:
	;
	*(*int32)(unsafe.Pointer(bp + 208 /* i */)) = 3
__25:
	if !(*(*int32)(unsafe.Pointer(bp + 208)) < objc) {
		goto __27
	}
	*(*uintptr)(unsafe.Pointer(bp + 112 + uintptr(*(*int32)(unsafe.Pointer(bp + 208))-3)*8)) = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + uintptr(*(*int32)(unsafe.Pointer(bp + 208 /* i */)))*8)))
	goto __26
__26:
	*(*int32)(unsafe.Pointer(bp + 208 /* i */))++
	goto __25
	goto __27
__27:
	;
__28:
	if !(*(*int32)(unsafe.Pointer(bp + 208)) < 12+3) {
		goto __30
	}
	*(*uintptr)(unsafe.Pointer(bp + 112 + uintptr(*(*int32)(unsafe.Pointer(bp + 208))-3)*8)) = uintptr(0)
	goto __29
__29:
	*(*int32)(unsafe.Pointer(bp + 208 /* i */))++
	goto __28
	goto __30
__30:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendStringsToObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)), libc.VaList(bp, *(*uintptr)(unsafe.Pointer(bp + 112 /* &strings[0] */)), *(*uintptr)(unsafe.Pointer(bp + 112 /* &strings[0] */ + 1*8)),
		*(*uintptr)(unsafe.Pointer(bp + 112 + 2*8)), *(*uintptr)(unsafe.Pointer(bp + 112 + 3*8)), *(*uintptr)(unsafe.Pointer(bp + 112 + 4*8)), *(*uintptr)(unsafe.Pointer(bp + 112 + 5*8)),
		*(*uintptr)(unsafe.Pointer(bp + 112 + 6*8)), *(*uintptr)(unsafe.Pointer(bp + 112 + 7*8)), *(*uintptr)(unsafe.Pointer(bp + 112 + 8*8)), *(*uintptr)(unsafe.Pointer(bp + 112 + 9*8)),
		*(*uintptr)(unsafe.Pointer(bp + 112 + 10*8)), *(*uintptr)(unsafe.Pointer(bp + 112 + 11*8))))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)))
	goto __4
__7: // get
	if !(objc != 3) {
		goto __31
	}
	goto wrongNumArgs
__31:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 96))) != 0) {
		goto __32
	}
	return TCL_ERROR
__32:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)))
	goto __4
__8: // get2
	if !(objc != 3) {
		goto __33
	}
	goto wrongNumArgs
__33:
	;
	if !(CheckIfVarUnset(tls, interp, varPtr, *(*int32)(unsafe.Pointer(bp + 96))) != 0) {
		goto __34
	}
	return TCL_ERROR
__34:
	;
	string = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendToObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), string, -1)
	goto __4
__9: // length
	if !(objc != 3) {
		goto __35
	}
	goto wrongNumArgs
__35:
	;
	(*struct {
		f func(*libc.TLS, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetIntObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), func() int32 {
		if *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)) != uintptr(0) {
			return (*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)))).length
		}
		return -1
	}())
	goto __4
__10: // length2
	if !(objc != 3) {
		goto __36
	}
	goto wrongNumArgs
__36:
	;
	if !(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)) != uintptr(0)) {
		goto __37
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ConvertToType})).f(tls, uintptr(0), *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)),
		(*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjType})).f(tls, ts+3981 /* "string" */))
	strPtr = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)) + 32))
	*(*int32)(unsafe.Pointer(bp + 104 /* length */)) = (*String)(unsafe.Pointer(strPtr)).allocated
	goto __38
__37:
	*(*int32)(unsafe.Pointer(bp + 104 /* length */)) = -1
__38:
	;
	(*struct {
		f func(*libc.TLS, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetIntObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), *(*int32)(unsafe.Pointer(bp + 104 /* length */)))
	goto __4
__11: // set
	if !(objc != 4) {
		goto __39
	}
	goto wrongNumArgs
__39:
	;

	// If the object currently bound to the variable with index
	// varIndex has ref count 1 (i.e. the object is unshared) we can
	// modify that object directly. Otherwise, if RC>1 (i.e. the
	// object is shared), we must create a new object to modify/set
	// and decrement the old formerly-shared object's ref count. This
	// is "copy on write".

	string = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 3*8)), bp+104 /* &length */)
	if !(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)) != uintptr(0) &&
		!((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)))).refCount > 1)) {
		goto __40
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetStringObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)), string, *(*int32)(unsafe.Pointer(bp + 104 /* length */)))
	goto __41
__40:
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)), (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls, string, *(*int32)(unsafe.Pointer(bp + 104 /* length */))))
__41:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)))
	goto __4
__12: // set2
	if !(objc != 4) {
		goto __42
	}
	goto wrongNumArgs
__42:
	;
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)), *(*uintptr)(unsafe.Pointer(objv + 3*8)))
	goto __4
__13: // setlength
	if !(objc != 4) {
		goto __43
	}
	goto wrongNumArgs
__43:
	;
	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 3*8)), bp+104) != TCL_OK) {
		goto __44
	}
	return TCL_ERROR
__44:
	;
	if !(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)) != uintptr(0)) {
		goto __45
	}
	(*struct {
		f func(*libc.TLS, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjLength})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)), *(*int32)(unsafe.Pointer(bp + 104 /* length */)))
__45:
	;
	goto __4
__14: // maxchars
	if !(objc != 3) {
		goto __46
	}
	goto wrongNumArgs
__46:
	;
	if !(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)) != uintptr(0)) {
		goto __47
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ConvertToType})).f(tls, uintptr(0), *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)),
		(*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjType})).f(tls, ts+3981 /* "string" */))
	strPtr = *(*uintptr)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)) + 32))
	*(*int32)(unsafe.Pointer(bp + 104 /* length */)) = (*String)(unsafe.Pointer(strPtr)).maxChars
	goto __48
__47:
	*(*int32)(unsafe.Pointer(bp + 104 /* length */)) = -1
__48:
	;
	(*struct {
		f func(*libc.TLS, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetIntObj})).f(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), *(*int32)(unsafe.Pointer(bp + 104 /* length */)))
	goto __4
__15: // getunicode
	if !(objc != 3) {
		goto __49
	}
	goto wrongNumArgs
__49:
	;
	(*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetUnicodeFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)), uintptr(0))
	goto __4
__16: // appendself
	if !(objc != 4) {
		goto __50
	}
	goto wrongNumArgs
__50:
	;
	if !(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)) == uintptr(0)) {
		goto __51
	}
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)), (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewObj})).f(tls))
__51:
	;

	// If the object bound to variable "varIndex" is shared, we must
	// "copy on write" and append to a copy of the object.

	if !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)))).refCount > 1) {
		goto __52
	}
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)), (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8))))
__52:
	;

	string = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetStringFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)), bp+104 /* &length */)

	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 3*8)), bp+208) != TCL_OK) {
		goto __53
	}
	return TCL_ERROR
__53:
	;
	if !(*(*int32)(unsafe.Pointer(bp + 208)) < 0 || *(*int32)(unsafe.Pointer(bp + 208)) > *(*int32)(unsafe.Pointer(bp + 104))) {
		goto __54
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls,
		ts+9866, -1))
	return TCL_ERROR
__54:
	;

	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendToObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)), string+uintptr(*(*int32)(unsafe.Pointer(bp + 208 /* i */))), *(*int32)(unsafe.Pointer(bp + 104 /* length */))-*(*int32)(unsafe.Pointer(bp + 208 /* i */)))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)))
	goto __4
__17: // appendself2
	if !(objc != 4) {
		goto __55
	}
	goto wrongNumArgs
__55:
	;
	if !(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)) == uintptr(0)) {
		goto __56
	}
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)), (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewObj})).f(tls))
__56:
	;

	// If the object bound to variable "varIndex" is shared, we must
	// "copy on write" and append to a copy of the object.

	if !((*Tcl_Obj)(unsafe.Pointer(*(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96)))*8)))).refCount > 1) {
		goto __57
	}
	SetVarToObj(tls, varPtr, *(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)), (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DuplicateObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8))))
__57:
	;

	unicode = (*struct {
		f func(*libc.TLS, uintptr, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetUnicodeFromObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)), bp+104 /* &length */)

	if !((*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 3*8)), bp+208) != TCL_OK) {
		goto __58
	}
	return TCL_ERROR
__58:
	;
	if !(*(*int32)(unsafe.Pointer(bp + 208)) < 0 || *(*int32)(unsafe.Pointer(bp + 208)) > *(*int32)(unsafe.Pointer(bp + 104))) {
		goto __59
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, uintptr, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewStringObj})).f(tls,
		ts+9866, -1))
	return TCL_ERROR
__59:
	;

	(*struct {
		f func(*libc.TLS, uintptr, uintptr, int32)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendUnicodeToObj})).f(tls, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)), unicode+uintptr(*(*int32)(unsafe.Pointer(bp + 208 /* i */)))*2, *(*int32)(unsafe.Pointer(bp + 104 /* length */))-*(*int32)(unsafe.Pointer(bp + 208 /* i */)))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, *(*uintptr)(unsafe.Pointer(varPtr + uintptr(*(*int32)(unsafe.Pointer(bp + 96 /* varIndex */)))*8)))
	goto __4
__4:
	;

	return TCL_OK
}

var options2 = [14]uintptr{
	ts + 2392, ts + 9891, ts + 1408, ts + 9532, ts + 3132, ts + 9905,
	ts + 4039, ts + 9498, ts + 9913, ts + 9923, ts + 9932,
	ts + 9943, ts + 9954, uintptr(0),
} /* tclTestObj.c:1185:23 */

//----------------------------------------------------------------------
//
// SetVarToObj --
//
//	Utility routine to assign a Tcl_Obj* to a test variable. The
//	Tcl_Obj* can be NULL.
//
// Results:
//	None.
//
// Side effects:
//	This routine handles ref counting details for assignment: i.e. the old
//	value's ref count must be decremented (if not NULL) and the new one
//	incremented (also if not NULL).
//
//----------------------------------------------------------------------

func SetVarToObj(tls *libc.TLS, varPtr uintptr, varIndex int32, objPtr uintptr) { /* tclTestObj.c:1446:1: */
	if *(*uintptr)(unsafe.Pointer(varPtr + uintptr(varIndex)*8)) != uintptr(0) {
		for ok := true; ok; ok = 0 != 0 {
			var _objPtr uintptr = *(*uintptr)(unsafe.Pointer(varPtr + uintptr(varIndex)*8))
			if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
				(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
			}
		}
	}
	*(*uintptr)(unsafe.Pointer(varPtr + uintptr(varIndex)*8)) = objPtr
	if objPtr != uintptr(0) {
		(*Tcl_Obj)(unsafe.Pointer(objPtr)).refCount++
	}
}

//----------------------------------------------------------------------
//
// GetVariableIndex --
//
//	Utility routine to get a test variable index from the command line.
//
// Results:
//	A standard Tcl object result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func GetVariableIndex(tls *libc.TLS, interp uintptr, string uintptr, indexPtr uintptr) int32 { /* tclTestObj.c:1477:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	// var index int32 at bp, 4

	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetInt})).f(tls, interp, string, bp) != TCL_OK {
		return TCL_ERROR
	}
	if *(*int32)(unsafe.Pointer(bp)) < 0 || *(*int32)(unsafe.Pointer(bp)) >= NUMBER_OF_OBJECT_VARS {
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ResetResult})).f(tls, interp)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, int32)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendToObj})).f(tls, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), ts+9966 /* "bad variable ind..." */, -1)
		return TCL_ERROR
	}

	*(*int32)(unsafe.Pointer(indexPtr)) = *(*int32)(unsafe.Pointer(bp /* index */))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// CheckIfVarUnset --
//
//	Utility function that checks whether a test variable is readable:
//	i.e., that varPtr[varIndex] is non-NULL.
//
// Results:
//	1 if the test variable is unset (NULL); 0 otherwise.
//
// Side effects:
//	Sets the interpreter result to an error message if the variable is
//	unset (NULL).
//
//----------------------------------------------------------------------

func CheckIfVarUnset(tls *libc.TLS, interp uintptr, varPtr uintptr, varIndex int32) int32 { /* tclTestObj.c:1518:1: */
	bp := tls.Alloc(64)
	defer tls.Free(64)

	if *(*uintptr)(unsafe.Pointer(varPtr + uintptr(varIndex)*8)) == uintptr(0) {
		// var buf [56]int8 at bp+8, 56

		libc.Xsprintf(tls, bp+8, ts+9985, libc.VaList(bp, varIndex))
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ResetResult})).f(tls, interp)
		(*struct {
			f func(*libc.TLS, uintptr, uintptr, int32)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendToObj})).f(tls, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), bp+8 /* &buf[0] */, -1)
		return 1
	}
	return 0
}

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:
// Epoch of the tcl environment
// (if changed with tcl-env).

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:

// name and version of this package

var packageName = *(*[13]int8)(unsafe.Pointer(ts + 10013))               /* tclTestProcBodyObj.c:23:19 */
var packageVersion = *(*[4]int8)(unsafe.Pointer(ts + 10026 /* "1.1" */)) /* tclTestProcBodyObj.c:24:19 */

// Name of the commands exported by this package

var procCommand = *(*[5]int8)(unsafe.Pointer(ts + 10030))               /* tclTestProcBodyObj.c:30:19 */
var checkCommand = *(*[6]int8)(unsafe.Pointer(ts + 9480 /* "check" */)) /* tclTestProcBodyObj.c:31:19 */

// this struct describes an entry in the table of command names and command
// procs

type CmdTable1 = struct {
	cmdName  uintptr
	proc     uintptr
	exportIt int32
	_        [4]byte
} /* tclTestProcBodyObj.c:38:9 */

// this struct describes an entry in the table of command names and command
// procs

type CmdTable = CmdTable1 /* tclTestProcBodyObj.c:42:3 */

// List of commands to create when the package is loaded; must go after the
// declarations of the enable command procedure.

var commands = [3]CmdTable{
	{cmdName: 0, proc: 0, exportIt: 1},
	{cmdName: 0, proc: 0, exportIt: 1},
	{},
} /* tclTestProcBodyObj.c:61:23 */

var safeCommands = [3]CmdTable{
	{cmdName: 0, proc: 0, exportIt: 1},
	{cmdName: 0, proc: 0, exportIt: 1},
	{},
} /* tclTestProcBodyObj.c:67:23 */

//----------------------------------------------------------------------
//
// Procbodytest_Init --
//
//	This function initializes the "procbodytest" package.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func Procbodytest_Init(tls *libc.TLS, interp uintptr) int32 { /* tclTestProcBodyObj.c:90:1: */
	return ProcBodyTestInitInternal(tls, interp, 0)
}

//----------------------------------------------------------------------
//
// Procbodytest_SafeInit --
//
//	This function initializes the "procbodytest" package.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func Procbodytest_SafeInit(tls *libc.TLS, interp uintptr) int32 { /* tclTestProcBodyObj.c:114:1: */
	return ProcBodyTestInitInternal(tls, interp, 1)
}

//----------------------------------------------------------------------
//
// RegisterCommand --
//
//	This function registers a command in the context of the given
//	namespace.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func RegisterCommand(tls *libc.TLS, interp uintptr, namespace uintptr, cmdTablePtr uintptr) int32 { /* tclTestProcBodyObj.c:139:1: */
	bp := tls.Alloc(160)
	defer tls.Free(160)

	// var buf [128]int8 at bp+32, 128

	if (*CmdTable)(unsafe.Pointer(cmdTablePtr)).exportIt != 0 {
		libc.Xsprintf(tls, bp+32, ts+10035,
			libc.VaList(bp, namespace, (*CmdTable)(unsafe.Pointer(cmdTablePtr)).cmdName))
		if (*struct {
			f func(*libc.TLS, uintptr, uintptr, int32, int32) int32
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_EvalEx})).f(tls, interp, bp+32, -1, 0) != TCL_OK {
			return TCL_ERROR
		}
	}

	libc.Xsprintf(tls, bp+32, ts+10077, libc.VaList(bp+16, namespace, (*CmdTable)(unsafe.Pointer(cmdTablePtr)).cmdName))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, bp+32 /* &buf[0] */, (*CmdTable)(unsafe.Pointer(cmdTablePtr)).proc, uintptr(0), uintptr(0))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// ProcBodyTestInitInternal --
//
//  This function initializes the Loader package.
//  The isSafe flag is 1 if the interpreter is safe, 0 otherwise.
//
// Results:
//  A standard Tcl result.
//
// Side effects:
//  None.
//
//----------------------------------------------------------------------

func ProcBodyTestInitInternal(tls *libc.TLS, interp uintptr, isSafe int32) int32 { /* tclTestProcBodyObj.c:179:1: */
	var cmdTablePtr uintptr

	if isSafe != 0 {
		cmdTablePtr = uintptr(unsafe.Pointer(&safeCommands))
	} else {
		cmdTablePtr = uintptr(unsafe.Pointer(&commands))
	}
	for ; (*CmdTable)(unsafe.Pointer(cmdTablePtr)).cmdName != 0; cmdTablePtr += 24 {
		if RegisterCommand(tls, interp, uintptr(unsafe.Pointer(&packageName)), cmdTablePtr) != TCL_OK {
			return TCL_ERROR
		}
	}

	return (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_PkgProvideEx})).f(tls, interp, uintptr(unsafe.Pointer(&packageName)), uintptr(unsafe.Pointer(&packageVersion)), uintptr(0))
}

//----------------------------------------------------------------------
//
// ProcBodyTestProcObjCmd --
//
//  Implements the "procbodytest::proc" command. Here is the command
//  description:
//	procbodytest::proc newName argList bodyName
//  Looks up a procedure called $bodyName and, if the procedure exists,
//  constructs a Tcl_Obj of type "procbody" and calls Tcl_ProcObjCmd.
//  Arguments:
//    newName		the name of the procedure to be created
//    argList		the argument list for the procedure
//    bodyName		the name of an existing procedure from which the
//			body is to be copied.
//  This command can be used to trigger the branches in Tcl_ProcObjCmd that
//  construct a proc from a "procbody", for example:
//	proc a {x} {return $x}
//	a 123
//	procbodytest::proc b {x} a
//  Note the call to "a 123", which is necessary so that the Proc pointer
//  for "a" is filled in by the internal compiler; this is a hack.
//
// Results:
//  Returns a standard Tcl code.
//
// Side effects:
//  A new procedure is created.
//  Leaves an error message in the interp's result on error.
//
//----------------------------------------------------------------------

func ProcBodyTestProcObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTestProcBodyObj.c:230:1: */
	bp := tls.Alloc(136)
	defer tls.Free(136)

	var fullName uintptr
	var procCmd Tcl_Command
	var cmdPtr uintptr
	var procPtr uintptr = uintptr(0)
	var bodyObjPtr uintptr
	// var myobjv [5]uintptr at bp+96, 40

	var result int32

	if objc != 4 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+10084 /* "newName argsList..." */)
		return TCL_ERROR
	}

	// Find the Command pointer to this procedure

	fullName = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 3*8)))
	procCmd = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tcl_FindCommand})).f(tls, interp, fullName, uintptr(0), TCL_LEAVE_ERR_MSG)
	if procCmd == uintptr(0) {
		return TCL_ERROR
	}

	cmdPtr = procCmd

	// check that this is a procedure and not a builtin command:
	// If a procedure, cmdPtr->objClientData is TclIsProc(cmdPtr).

	if (*Command)(unsafe.Pointer(cmdPtr)).objClientData != (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclIsProc})).f(tls, cmdPtr) {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendStringsToObj})).f(tls, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp),
			libc.VaList(bp, ts+10110, fullName, ts+10120, uintptr(0)))
		return TCL_ERROR
	}

	// it is a Tcl procedure: the client data is the Proc structure

	procPtr = (*Command)(unsafe.Pointer(cmdPtr)).objClientData
	if procPtr == uintptr(0) {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendStringsToObj})).f(tls, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp), libc.VaList(bp+32, ts+10145, /* "procedure \"" */
			fullName, ts+10157, uintptr(0)))
		return TCL_ERROR
	}

	// create a new object, initialize our argument vector, call into Tcl

	bodyObjPtr = (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclIntStubs)(unsafe.Pointer(tcl.XtclIntStubsPtr)).tclNewProcBodyObj})).f(tls, procPtr)
	if bodyObjPtr == uintptr(0) {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendStringsToObj})).f(tls, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetObjResult})).f(tls, interp),
			libc.VaList(bp+64, ts+10188,
				fullName, ts+1677, uintptr(0)))
		return TCL_ERROR
	}
	(*Tcl_Obj)(unsafe.Pointer(bodyObjPtr)).refCount++

	*(*uintptr)(unsafe.Pointer(bp + 96)) = *(*uintptr)(unsafe.Pointer(objv))
	*(*uintptr)(unsafe.Pointer(bp + 96 + 1*8)) = *(*uintptr)(unsafe.Pointer(objv + 1*8))
	*(*uintptr)(unsafe.Pointer(bp + 96 + 2*8)) = *(*uintptr)(unsafe.Pointer(objv + 2*8))
	*(*uintptr)(unsafe.Pointer(bp + 96 + 3*8)) = bodyObjPtr
	*(*uintptr)(unsafe.Pointer(bp + 96 + 4*8)) = uintptr(0)

	result = (*struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ProcObjCmd})).f(tls, uintptr(0), interp, objc, bp+96 /* &myobjv[0] */)
	for ok := true; ok; ok = 0 != 0 {
		var _objPtr uintptr = bodyObjPtr
		if libc.PostDecInt32(&(*Tcl_Obj)(unsafe.Pointer(_objPtr)).refCount, 1) <= 1 {
			(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tclFreeObj})).f(tls, _objPtr)
		}
	}

	return result
}

//----------------------------------------------------------------------
//
// ProcBodyTestCheckObjCmd --
//
//  Implements the "procbodytest::check" command. Here is the command
//  description:
//	procbodytest::check
//
//  Performs an internal check that the Tcl_PkgPresent() command returns
//  the same version number as was registered when the procbodytest package
//  was provided.  Places a boolean in the interp result indicating the
//  test outcome.
//
// Results:
//  Returns a standard Tcl code.
//
//----------------------------------------------------------------------

func ProcBodyTestCheckObjCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclTestProcBodyObj.c:329:1: */
	var version uintptr

	if objc != 1 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+1355 /* "" */)
		return TCL_ERROR
	}

	version = (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_PkgPresentEx})).f(tls, interp, uintptr(unsafe.Pointer(&packageName)), uintptr(unsafe.Pointer(&packageVersion)), 1, uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, libc.Bool32(libc.Bool32(libc.Xstrcmp(tls, version, uintptr(unsafe.Pointer(&packageVersion))) == 0) != 0)))
	return TCL_OK
}

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:
// Epoch of the tcl environment
// (if changed with tcl-env).

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:
// Epoch of the tcl environment
// (if changed with tcl-env).

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:

// For TestplatformChmod on Windows
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

//** Autogenerated by WIDL 4.12.1 from include/wtypes.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type I_RPC_HANDLE = uintptr /* rpc.h:48:16 */
type RPC_STATUS = int32     /* rpc.h:49:20 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type RPC_CSTR = uintptr                /* rpcdce.h:33:25 */
type RPC_WSTR = uintptr                /* rpcdce.h:34:26 */
type RPC_BINDING_HANDLE = I_RPC_HANDLE /* rpcdce.h:35:24 */
type handle_t = RPC_BINDING_HANDLE     /* rpcdce.h:36:30 */

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// __declspec(selectany) must be applied to initialized objects on GCC 5 hence must not be used here.

type UUID = GUID /* rpcdce.h:44:16 */

type _RPC_BINDING_VECTOR = struct {
	Count    uint32
	_        [4]byte
	BindingH [1]RPC_BINDING_HANDLE
} /* rpcdce.h:50:11 */

type RPC_BINDING_VECTOR = _RPC_BINDING_VECTOR /* rpcdce.h:53:5 */

type _UUID_VECTOR = struct {
	Count uint32
	_     [4]byte
	Uuid  [1]uintptr
} /* rpcdce.h:58:11 */

type UUID_VECTOR = _UUID_VECTOR /* rpcdce.h:61:5 */

type RPC_IF_HANDLE = uintptr /* rpcdce.h:66:16 */

type _RPC_IF_ID = struct {
	Uuid      UUID
	VersMajor uint16
	VersMinor uint16
} /* rpcdce.h:70:11 */

type RPC_IF_ID = _RPC_IF_ID /* rpcdce.h:74:5 */

type _RPC_PROTSEQ_VECTORA = struct {
	Count   uint32
	_       [4]byte
	Protseq [1]uintptr
} /* rpcdce.h:124:11 */

type RPC_PROTSEQ_VECTORA = _RPC_PROTSEQ_VECTORA /* rpcdce.h:127:5 */

type _RPC_PROTSEQ_VECTORW = struct {
	Count   uint32
	_       [4]byte
	Protseq [1]uintptr
} /* rpcdce.h:129:11 */

type RPC_PROTSEQ_VECTORW = _RPC_PROTSEQ_VECTORW /* rpcdce.h:132:5 */

type _RPC_POLICY = struct {
	Length        uint32
	EndpointFlags uint32
	NICFlags      uint32
} /* rpcdce.h:136:11 */

type RPC_POLICY = _RPC_POLICY /* rpcdce.h:140:5 */
type PRPC_POLICY = uintptr    /* rpcdce.h:140:16 */

type RPC_STATS_VECTOR = struct {
	Count uint32
	Stats [1]uint32
} /* rpcdce.h:151:5 */

type RPC_IF_ID_VECTOR = struct {
	Count uint32
	_     [4]byte
	IfId  [1]uintptr
} /* rpcdce.h:161:5 */

type RPC_AUTH_IDENTITY_HANDLE = uintptr /* rpcdce.h:257:16 */
type RPC_AUTHZ_HANDLE = uintptr         /* rpcdce.h:258:16 */

type _RPC_SECURITY_QOS = struct {
	Version           uint32
	Capabilities      uint32
	IdentityTracking  uint32
	ImpersonationType uint32
} /* rpcdce.h:311:11 */

type RPC_SECURITY_QOS = _RPC_SECURITY_QOS /* rpcdce.h:316:5 */
type PRPC_SECURITY_QOS = uintptr          /* rpcdce.h:316:22 */

type _SEC_WINNT_AUTH_IDENTITY_W = struct {
	User           uintptr
	UserLength     uint32
	_              [4]byte
	Domain         uintptr
	DomainLength   uint32
	_              [4]byte
	Password       uintptr
	PasswordLength uint32
	Flags          uint32
} /* rpcdce.h:324:11 */

type SEC_WINNT_AUTH_IDENTITY_W = _SEC_WINNT_AUTH_IDENTITY_W /* rpcdce.h:332:5 */
type PSEC_WINNT_AUTH_IDENTITY_W = uintptr                   /* rpcdce.h:332:31 */

type _SEC_WINNT_AUTH_IDENTITY_A = struct {
	User           uintptr
	UserLength     uint32
	_              [4]byte
	Domain         uintptr
	DomainLength   uint32
	_              [4]byte
	Password       uintptr
	PasswordLength uint32
	Flags          uint32
} /* rpcdce.h:334:11 */

type SEC_WINNT_AUTH_IDENTITY_A = _SEC_WINNT_AUTH_IDENTITY_A /* rpcdce.h:342:5 */
type PSEC_WINNT_AUTH_IDENTITY_A = uintptr                   /* rpcdce.h:342:31 */

type _RPC_HTTP_TRANSPORT_CREDENTIALS_W = struct {
	TransportCredentials     uintptr
	Flags                    uint32
	AuthenticationTarget     uint32
	NumberOfAuthnSchemes     uint32
	_                        [4]byte
	AuthnSchemes             uintptr
	ServerCertificateSubject uintptr
} /* rpcdce.h:366:11 */

type RPC_HTTP_TRANSPORT_CREDENTIALS_W = _RPC_HTTP_TRANSPORT_CREDENTIALS_W /* rpcdce.h:373:5 */
type PRPC_HTTP_TRANSPORT_CREDENTIALS_W = uintptr                          /* rpcdce.h:373:38 */

type _RPC_HTTP_TRANSPORT_CREDENTIALS_A = struct {
	TransportCredentials     uintptr
	Flags                    uint32
	AuthenticationTarget     uint32
	NumberOfAuthnSchemes     uint32
	_                        [4]byte
	AuthnSchemes             uintptr
	ServerCertificateSubject uintptr
} /* rpcdce.h:375:11 */

type RPC_HTTP_TRANSPORT_CREDENTIALS_A = _RPC_HTTP_TRANSPORT_CREDENTIALS_A /* rpcdce.h:382:5 */
type PRPC_HTTP_TRANSPORT_CREDENTIALS_A = uintptr                          /* rpcdce.h:382:38 */

type _RPC_SECURITY_QOS_V2_W = struct {
	Version                    uint32
	Capabilities               uint32
	IdentityTracking           uint32
	ImpersonationType          uint32
	AdditionalSecurityInfoType uint32
	_                          [4]byte
	u                          struct{ HttpCredentials uintptr }
} /* rpcdce.h:384:11 */

type RPC_SECURITY_QOS_V2_W = _RPC_SECURITY_QOS_V2_W /* rpcdce.h:393:5 */
type PRPC_SECURITY_QOS_V2_W = uintptr               /* rpcdce.h:393:27 */

type _RPC_SECURITY_QOS_V2_A = struct {
	Version                    uint32
	Capabilities               uint32
	IdentityTracking           uint32
	ImpersonationType          uint32
	AdditionalSecurityInfoType uint32
	_                          [4]byte
	u                          struct{ HttpCredentials uintptr }
} /* rpcdce.h:395:11 */

type RPC_SECURITY_QOS_V2_A = _RPC_SECURITY_QOS_V2_A /* rpcdce.h:404:5 */
type PRPC_SECURITY_QOS_V2_A = uintptr               /* rpcdce.h:404:27 */

type _RPC_SECURITY_QOS_V3_W = struct {
	Version                    uint32
	Capabilities               uint32
	IdentityTracking           uint32
	ImpersonationType          uint32
	AdditionalSecurityInfoType uint32
	_                          [4]byte
	u                          struct{ HttpCredentials uintptr }
	Sid                        uintptr
} /* rpcdce.h:408:11 */

type RPC_SECURITY_QOS_V3_W = _RPC_SECURITY_QOS_V3_W /* rpcdce.h:418:5 */
type PRPC_SECURITY_QOS_V3_W = uintptr               /* rpcdce.h:418:27 */

type _RPC_SECURITY_QOS_V3_A = struct {
	Version                    uint32
	Capabilities               uint32
	IdentityTracking           uint32
	ImpersonationType          uint32
	AdditionalSecurityInfoType uint32
	_                          [4]byte
	u                          struct{ HttpCredentials uintptr }
	Sid                        uintptr
} /* rpcdce.h:420:11 */

type RPC_SECURITY_QOS_V3_A = _RPC_SECURITY_QOS_V3_A /* rpcdce.h:430:5 */
type PRPC_SECURITY_QOS_V3_A = uintptr               /* rpcdce.h:430:27 */

type RPC_HTTP_REDIRECTOR_STAGE = uint32 /* rpcdce.h:445:5 */

type RPC_NEW_HTTP_PROXY_CHANNEL = uintptr /* rpcdce.h:447:22 */
type RPC_HTTP_PROXY_FREE_STRING = uintptr /* rpcdce.h:448:16 */

type RPC_AUTH_KEY_RETRIEVAL_FN = uintptr /* rpcdce.h:471:16 */

type RPC_CLIENT_INFORMATION1 = struct {
	UserName     uintptr
	ComputerName uintptr
	Privilege    uint16
	_            [2]byte
	AuthFlags    uint32
}                                       /* rpcdce.h:490:5 */
type PRPC_CLIENT_INFORMATION1 = uintptr /* rpcdce.h:490:29 */

type RPC_EP_INQ_HANDLE = uintptr /* rpcdce.h:526:24 */

type RPC_MGMT_AUTHORIZATION_FN = uintptr /* rpcdce.h:547:15 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type _RPC_VERSION = struct {
	MajorVersion uint16
	MinorVersion uint16
} /* rpcdcep.h:15:11 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type RPC_VERSION = _RPC_VERSION /* rpcdcep.h:18:5 */

type _RPC_SYNTAX_IDENTIFIER = struct {
	SyntaxGUID    GUID
	SyntaxVersion RPC_VERSION
} /* rpcdcep.h:20:11 */

type RPC_SYNTAX_IDENTIFIER = _RPC_SYNTAX_IDENTIFIER /* rpcdcep.h:23:5 */
type PRPC_SYNTAX_IDENTIFIER = uintptr               /* rpcdcep.h:23:27 */

type _RPC_MESSAGE = struct {
	Handle                  RPC_BINDING_HANDLE
	DataRepresentation      uint32
	_                       [4]byte
	Buffer                  uintptr
	BufferLength            uint32
	ProcNum                 uint32
	TransferSyntax          PRPC_SYNTAX_IDENTIFIER
	RpcInterfaceInformation uintptr
	ReservedForRuntime      uintptr
	ManagerEpv              uintptr
	ImportContext           uintptr
	RpcFlags                uint32
	_                       [4]byte
} /* rpcdcep.h:25:11 */

type RPC_MESSAGE = _RPC_MESSAGE /* rpcdcep.h:37:5 */
type PRPC_MESSAGE = uintptr     /* rpcdcep.h:37:17 */

type RPC_DISPATCH_FUNCTION = uintptr /* rpcdcep.h:77:16 */

type RPC_DISPATCH_TABLE = struct {
	DispatchTableCount uint32
	_                  [4]byte
	DispatchTable      uintptr
	Reserved           LONG_PTR
}                                  /* rpcdcep.h:83:5 */
type PRPC_DISPATCH_TABLE = uintptr /* rpcdcep.h:83:24 */

type _RPC_PROTSEQ_ENDPOINT = struct {
	RpcProtocolSequence uintptr
	Endpoint            uintptr
} /* rpcdcep.h:85:11 */

type RPC_PROTSEQ_ENDPOINT = _RPC_PROTSEQ_ENDPOINT /* rpcdcep.h:88:5 */
type PRPC_PROTSEQ_ENDPOINT = uintptr              /* rpcdcep.h:88:26 */

type _RPC_SERVER_INTERFACE = struct {
	Length                  uint32
	InterfaceId             RPC_SYNTAX_IDENTIFIER
	TransferSyntax          RPC_SYNTAX_IDENTIFIER
	_                       [4]byte
	DispatchTable           PRPC_DISPATCH_TABLE
	RpcProtseqEndpointCount uint32
	_                       [4]byte
	RpcProtseqEndpoint      PRPC_PROTSEQ_ENDPOINT
	DefaultManagerEpv       uintptr
	InterpreterInfo         uintptr
	Flags                   uint32
	_                       [4]byte
} /* rpcdcep.h:93:11 */

type RPC_SERVER_INTERFACE = _RPC_SERVER_INTERFACE /* rpcdcep.h:103:5 */
type PRPC_SERVER_INTERFACE = uintptr              /* rpcdcep.h:103:26 */

type _RPC_CLIENT_INTERFACE = struct {
	Length                  uint32
	InterfaceId             RPC_SYNTAX_IDENTIFIER
	TransferSyntax          RPC_SYNTAX_IDENTIFIER
	_                       [4]byte
	DispatchTable           PRPC_DISPATCH_TABLE
	RpcProtseqEndpointCount uint32
	_                       [4]byte
	RpcProtseqEndpoint      PRPC_PROTSEQ_ENDPOINT
	Reserved                ULONG_PTR
	InterpreterInfo         uintptr
	Flags                   uint32
	_                       [4]byte
} /* rpcdcep.h:105:11 */

type RPC_CLIENT_INTERFACE = _RPC_CLIENT_INTERFACE /* rpcdcep.h:115:5 */
type PRPC_CLIENT_INTERFACE = uintptr              /* rpcdcep.h:115:26 */

type I_RPC_MUTEX = uintptr /* rpcdcep.h:127:16 */

type PRPC_RUNDOWN = uintptr /* rpcdcep.h:142:16 */

type _RPC_TRANSFER_SYNTAX = struct {
	Uuid      UUID
	VersMajor uint16
	VersMinor uint16
} /* rpcdcep.h:175:11 */

type RPC_TRANSFER_SYNTAX = _RPC_TRANSFER_SYNTAX /* rpcdcep.h:179:5 */

type RPCLT_PDU_FILTER_FUNC = uintptr /* rpcdcep.h:201:16 */
type RPC_SETFILTER_FUNC = uintptr    /* rpcdcep.h:202:16 */

type _RPC_C_OPT_METADATA_DESCRIPTOR = struct {
	BufferSize uint32
	_          [4]byte
	Buffer     uintptr
} /* rpcdcep.h:222:11 */

type RPC_C_OPT_METADATA_DESCRIPTOR = _RPC_C_OPT_METADATA_DESCRIPTOR /* rpcdcep.h:225:5 */

type _RDR_CALLOUT_STATE = struct {
	LastError           RPC_STATUS
	_                   [4]byte
	LastEEInfo          uintptr
	LastCalledStage     RPC_HTTP_REDIRECTOR_STAGE
	_                   [4]byte
	ServerName          uintptr
	ServerPort          uintptr
	RemoteUser          uintptr
	AuthType            uintptr
	ResourceTypePresent uint8
	MetadataPresent     uint8
	SessionIdPresent    uint8
	InterfacePresent    uint8
	ResourceType        UUID
	_                   [4]byte
	Metadata            RPC_C_OPT_METADATA_DESCRIPTOR
	SessionId           UUID
	Interface           RPC_SYNTAX_IDENTIFIER
	_                   [4]byte
	CertContext         uintptr
} /* rpcdcep.h:227:11 */

type RDR_CALLOUT_STATE = _RDR_CALLOUT_STATE /* rpcdcep.h:244:5 */

type I_RpcProxyIsValidMachineFn = uintptr       /* rpcdcep.h:246:22 */
type I_RpcProxyGetClientAddressFn = uintptr     /* rpcdcep.h:247:22 */
type I_RpcProxyGetConnectionTimeoutFn = uintptr /* rpcdcep.h:248:22 */
type I_RpcPerformCalloutFn = uintptr            /* rpcdcep.h:249:22 */
type I_RpcFreeCalloutStateFn = uintptr          /* rpcdcep.h:250:16 */

type tagI_RpcProxyCallbackInterface = struct {
	IsValidMachineFn       I_RpcProxyIsValidMachineFn
	GetClientAddressFn     I_RpcProxyGetClientAddressFn
	GetConnectionTimeoutFn I_RpcProxyGetConnectionTimeoutFn
	PerformCalloutFn       I_RpcPerformCalloutFn
	FreeCalloutStateFn     I_RpcFreeCalloutStateFn
} /* rpcdcep.h:252:11 */

type I_RpcProxyCallbackInterface = tagI_RpcProxyCallbackInterface /* rpcdcep.h:258:5 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type RPC_NS_HANDLE = uintptr /* rpcnsi.h:11:14 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// TODO:  This isn't actual working on gcc.  Either we need to implement
//    their __try/__except/__finally feature, or we need to do at least for x64
//    emulation-code via inline-assembler ...

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type RPC_NOTIFICATION_TYPES = uint32 /* rpcasync.h:23:5 */

type RPC_ASYNC_EVENT = uint32 /* rpcasync.h:27:5 */

type _RPC_ASYNC_STATE = struct {
	Size             uint32
	Signature        uint32
	Lock             int32
	Flags            uint32
	StubInfo         uintptr
	UserInfo         uintptr
	RuntimeInfo      uintptr
	Event            RPC_ASYNC_EVENT
	NotificationType RPC_NOTIFICATION_TYPES
	u                struct {
		APC struct {
			NotificationRoutine PFN_RPCNOTIFICATION_ROUTINE
			hThread             HANDLE
		}
		_ [16]byte
	}
	Reserved [4]LONG_PTR
} /* rpcasync.h:29:3 */

type PFN_RPCNOTIFICATION_ROUTINE = uintptr /* rpcasync.h:32:35 */

type RPC_ASYNC_STATE = _RPC_ASYNC_STATE /* rpcasync.h:63:5 */
type PRPC_ASYNC_STATE = uintptr         /* rpcasync.h:63:21 */

type ExtendedErrorParamTypes = uint32 /* rpcasync.h:80:5 */

type tagBinaryParam = struct {
	Buffer uintptr
	Size   int16
	_      [6]byte
} /* rpcasync.h:85:11 */

type BinaryParam = tagBinaryParam /* rpcasync.h:88:5 */

type tagRPC_EE_INFO_PARAM = struct {
	ParameterType ExtendedErrorParamTypes
	_             [4]byte
	u             struct {
		AnsiString LPSTR
		_          [8]byte
	}
} /* rpcasync.h:90:11 */

type RPC_EE_INFO_PARAM = tagRPC_EE_INFO_PARAM /* rpcasync.h:100:5 */

type tagRPC_EXTENDED_ERROR_INFO = struct {
	Version      ULONG
	_            [4]byte
	ComputerName LPWSTR
	ProcessID    ULONG
	u            struct {
		_          [0]uint32
		SystemTime SYSTEMTIME
	}
	GeneratingComponent ULONG
	Status              ULONG
	DetectionLocation   USHORT
	Flags               USHORT
	NumberOfParameters  int32
	_                   [4]byte
	Parameters          [4]RPC_EE_INFO_PARAM
} /* rpcasync.h:109:11 */

type RPC_EXTENDED_ERROR_INFO = tagRPC_EXTENDED_ERROR_INFO /* rpcasync.h:123:5 */

type tagRPC_ERROR_ENUM_HANDLE = struct {
	Signature  ULONG
	_          [4]byte
	CurrentPos uintptr
	Head       uintptr
} /* rpcasync.h:125:11 */

type RPC_ERROR_ENUM_HANDLE = tagRPC_ERROR_ENUM_HANDLE /* rpcasync.h:129:5 */

type tagRPC_CALL_ATTRIBUTES_V1_W = struct {
	Version                         uint32
	Flags                           uint32
	ServerPrincipalNameBufferLength uint32
	_                               [4]byte
	ServerPrincipalName             uintptr
	ClientPrincipalNameBufferLength uint32
	_                               [4]byte
	ClientPrincipalName             uintptr
	AuthenticationLevel             uint32
	AuthenticationService           uint32
	NullSession                     WINBOOL
	_                               [4]byte
} /* rpcasync.h:149:11 */

type RPC_CALL_ATTRIBUTES_V1_W = tagRPC_CALL_ATTRIBUTES_V1_W /* rpcasync.h:159:5 */

type tagRPC_CALL_ATTRIBUTES_V1_A = struct {
	Version                         uint32
	Flags                           uint32
	ServerPrincipalNameBufferLength uint32
	_                               [4]byte
	ServerPrincipalName             uintptr
	ClientPrincipalNameBufferLength uint32
	_                               [4]byte
	ClientPrincipalName             uintptr
	AuthenticationLevel             uint32
	AuthenticationService           uint32
	NullSession                     WINBOOL
	_                               [4]byte
} /* rpcasync.h:161:11 */

type RPC_CALL_ATTRIBUTES_V1_A = tagRPC_CALL_ATTRIBUTES_V1_A /* rpcasync.h:171:5 */

type RPC_CALL_ATTRIBUTES = RPC_CALL_ATTRIBUTES_V1_A /* rpcasync.h:179:34 */

type _RPC_ASYNC_NOTIFICATION_INFO = struct {
	APC struct {
		NotificationRoutine PFN_RPCNOTIFICATION_ROUTINE
		hThread             HANDLE
	}
	_ [16]byte
} /* rpcasync.h:185:9 */

type RPC_ASYNC_NOTIFICATION_INFO = _RPC_ASYNC_NOTIFICATION_INFO /* rpcasync.h:202:3 */
type PRPC_ASYNC_NOTIFICATION_INFO = uintptr                     /* rpcasync.h:202:32 */

type RpcCallType = uint32 /* rpcasync.h:219:3 */

type RpcLocalAddressFormat = uint32 /* rpcasync.h:225:3 */

type RPC_NOTIFICATIONS = uint32 /* rpcasync.h:231:3 */

type RpcCallClientLocality = uint32 /* rpcasync.h:238:3 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type RPC_IMPORT_CONTEXT_P = struct {
	LookupContext  RPC_NS_HANDLE
	ProposedHandle RPC_BINDING_HANDLE
	Bindings       uintptr
}                                    /* rpcnsip.h:17:5 */
type PRPC_IMPORT_CONTEXT_P = uintptr /* rpcnsip.h:17:26 */

// Copyright (C) 2011 Francois Gouget
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA

type byte = uint8    /* rpcndr.h:63:25 */
type cs_byte = byte  /* rpcndr.h:64:16 */
type boolean = uint8 /* rpcndr.h:65:25 */

type NDR_CCONTEXT = uintptr /* rpcndr.h:128:16 */

type _NDR_SCONTEXT = struct {
	pad         [2]uintptr
	userContext uintptr
} /* rpcndr.h:130:11 */

type NDR_SCONTEXT = uintptr /* rpcndr.h:133:5 */

type NDR_RUNDOWN = uintptr         /* rpcndr.h:139:16 */
type NDR_NOTIFY_ROUTINE = uintptr  /* rpcndr.h:140:16 */
type NDR_NOTIFY2_ROUTINE = uintptr /* rpcndr.h:141:16 */

type _SCONTEXT_QUEUE = struct {
	NumberOfObjects uint32
	_               [4]byte
	ArrayOfObjects  uintptr
} /* rpcndr.h:143:11 */

type SCONTEXT_QUEUE = _SCONTEXT_QUEUE /* rpcndr.h:146:5 */
type PSCONTEXT_QUEUE = uintptr        /* rpcndr.h:146:20 */

type error_status_t = uint32 /* rpcndr.h:173:27 */

type _MIDL_STUB_MESSAGE = struct {
	RpcMsg                 PRPC_MESSAGE
	Buffer                 uintptr
	BufferStart            uintptr
	BufferEnd              uintptr
	BufferMark             uintptr
	BufferLength           uint32
	MemorySize             uint32
	Memory                 uintptr
	IsClient               uint8
	Pad                    uint8
	uFlags2                uint16
	ReuseBuffer            int32
	pAllocAllNodesContext  uintptr
	pPointerQueueState     uintptr
	IgnoreEmbeddedPointers int32
	_                      [4]byte
	PointerBufferMark      uintptr
	fBufferValid           uint8
	uFlags                 uint8
	UniquePtrCount         uint16
	_                      [4]byte
	MaxCount               ULONG_PTR
	Offset                 uint32
	ActualCount            uint32
	pfnAllocate            uintptr
	pfnFree                uintptr
	StackTop               uintptr
	pPresentedType         uintptr
	pTransmitType          uintptr
	SavedHandle            handle_t
	StubDesc               uintptr
	FullPtrXlatTables      uintptr
	FullPtrRefId           uint32
	PointerLength          uint32
	fInDontFree            uint32 /* int fInDontFree: 1, int fDontCallFreeInst: 1, int fInOnlyParam: 1, int fHasReturn: 1, int fHasExtensions: 1, int fHasNewCorrDesc: 1, int fIsOicfServer: 1, int fHasMemoryValidateCallback: 1, int fUnused: 8, int fUnused2: 16 */
	_                      [4]byte
	dwDestContext          uint32
	_                      [4]byte
	pvDestContext          uintptr
	SavedContextHandles    uintptr
	ParamNumber            int32
	_                      [4]byte
	pRpcChannelBuffer      uintptr
	pArrayInfo             PARRAY_INFO
	SizePtrCountArray      uintptr
	SizePtrOffsetArray     uintptr
	SizePtrLengthArray     uintptr
	pArgQueue              uintptr
	dwStubPhase            uint32
	_                      [4]byte
	LowStackMark           uintptr
	pAsyncMsg              PNDR_ASYNC_MESSAGE
	pCorrInfo              PNDR_CORRELATION_INFO
	pCorrMemory            uintptr
	pMemoryList            uintptr
	pCSInfo                uintptr
	ConformanceMark        uintptr
	VarianceMark           uintptr
	Unused                 INT_PTR
	pContext               uintptr
	pUserMarshalList       uintptr
	Reserved51_2           INT_PTR
	Reserved51_3           INT_PTR
	Reserved51_4           INT_PTR
	Reserved51_5           INT_PTR
} /* rpcndr.h:211:3 */

type _MIDL_STUB_DESC = struct {
	RpcInterfaceInformation     uintptr
	pfnAllocate                 uintptr
	pfnFree                     uintptr
	IMPLICIT_HANDLE_INFO        struct{ pAutoHandle uintptr }
	apfnNdrRundownRoutines      uintptr
	aGenericBindingRoutinePairs uintptr
	apfnExprEval                uintptr
	aXmitQuintuple              uintptr
	pFormatTypes                uintptr
	fCheckBounds                int32
	Version                     uint32
	pMallocFreeStruct           uintptr
	MIDLVersion                 int32
	_                           [4]byte
	CommFaultOffsets            uintptr
	aUserMarshalQuadruple       uintptr
	NotifyRoutineTable          uintptr
	mFlags                      ULONG_PTR
	CsRoutineTables             uintptr
	Reserved4                   uintptr
	Reserved5                   ULONG_PTR
} /* rpcndr.h:211:3 */

type _FULL_PTR_XLAT_TABLES = struct {
	RefIdToPointer struct {
		XlatTable       uintptr
		StateTable      uintptr
		NumberOfEntries uint32
		_               [4]byte
	}
	PointerToRefId struct {
		XlatTable       uintptr
		NumberOfBuckets uint32
		HashMask        uint32
	}
	NextRefId uint32
	XlatSide  XLAT_SIDE
} /* rpcndr.h:211:3 */

type RPC_BUFPTR = uintptr     /* rpcndr.h:215:25 */
type RPC_LENGTH = uint32      /* rpcndr.h:216:29 */
type EXPR_EVAL = uintptr      /* rpcndr.h:217:16 */
type PFORMAT_STRING = uintptr /* rpcndr.h:218:31 */

type ARRAY_INFO = struct {
	Dimension             int32
	_                     [4]byte
	BufferConformanceMark uintptr
	BufferVarianceMark    uintptr
	MaxCountArray         uintptr
	OffsetArray           uintptr
	ActualCountArray      uintptr
}                          /* rpcndr.h:227:5 */
type PARRAY_INFO = uintptr /* rpcndr.h:227:16 */

type PNDR_ASYNC_MESSAGE = uintptr    /* rpcndr.h:229:37 */
type PNDR_CORRELATION_INFO = uintptr /* rpcndr.h:230:40 */

type CS_STUB_INFO = struct {
	WireCodeset             uint32
	DesiredReceivingCodeset uint32
	CSArrayInfo             uintptr
} /* rpcndr.h:236:5 */

type _MIDL_SYNTAX_INFO = struct {
	TransferSyntax        RPC_SYNTAX_IDENTIFIER
	_                     [4]byte
	DispatchTable         uintptr
	ProcString            PFORMAT_STRING
	FmtStringOffset       uintptr
	TypeString            PFORMAT_STRING
	aUserMarshalQuadruple uintptr
	pReserved1            ULONG_PTR
	pReserved2            ULONG_PTR
} /* rpcndr.h:238:3 */

type MIDL_SYNTAX_INFO = _MIDL_SYNTAX_INFO /* rpcndr.h:239:36 */
type PMIDL_SYNTAX_INFO = uintptr          /* rpcndr.h:239:53 */

type IRpcChannelBuffer1 = struct{ lpVtbl uintptr } /* rpcndr.h:211:3 */

type MIDL_STUB_MESSAGE = _MIDL_STUB_MESSAGE /* rpcndr.h:318:5 */
type PMIDL_STUB_MESSAGE = uintptr           /* rpcndr.h:318:23 */

type GENERIC_BINDING_ROUTINE = uintptr /* rpcndr.h:320:16 */
type GENERIC_UNBIND_ROUTINE = uintptr  /* rpcndr.h:321:16 */

type _GENERIC_BINDING_ROUTINE_PAIR = struct {
	pfnBind   GENERIC_BINDING_ROUTINE
	pfnUnbind GENERIC_UNBIND_ROUTINE
} /* rpcndr.h:211:3 */

type GENERIC_BINDING_ROUTINE_PAIR = _GENERIC_BINDING_ROUTINE_PAIR /* rpcndr.h:326:5 */
type PGENERIC_BINDING_ROUTINE_PAIR = uintptr                      /* rpcndr.h:326:34 */

type __GENERIC_BINDING_INFO = struct {
	pObj      uintptr
	Size      uint32
	_         [4]byte
	pfnBind   GENERIC_BINDING_ROUTINE
	pfnUnbind GENERIC_UNBIND_ROUTINE
} /* rpcndr.h:328:11 */

type GENERIC_BINDING_INFO = __GENERIC_BINDING_INFO /* rpcndr.h:333:5 */
type PGENERIC_BINDING_INFO = uintptr               /* rpcndr.h:333:26 */

type XMIT_HELPER_ROUTINE = uintptr /* rpcndr.h:337:16 */

type _XMIT_ROUTINE_QUINTUPLE = struct {
	pfnTranslateToXmit   XMIT_HELPER_ROUTINE
	pfnTranslateFromXmit XMIT_HELPER_ROUTINE
	pfnFreeXmit          XMIT_HELPER_ROUTINE
	pfnFreeInst          XMIT_HELPER_ROUTINE
} /* rpcndr.h:211:3 */

type XMIT_ROUTINE_QUINTUPLE = _XMIT_ROUTINE_QUINTUPLE /* rpcndr.h:344:5 */
type PXMIT_ROUTINE_QUINTUPLE = uintptr                /* rpcndr.h:344:28 */

type USER_MARSHAL_SIZING_ROUTINE = uintptr        /* rpcndr.h:346:17 */
type USER_MARSHAL_MARSHALLING_ROUTINE = uintptr   /* rpcndr.h:347:25 */
type USER_MARSHAL_UNMARSHALLING_ROUTINE = uintptr /* rpcndr.h:348:25 */
type USER_MARSHAL_FREEING_ROUTINE = uintptr       /* rpcndr.h:349:16 */

type _USER_MARSHAL_ROUTINE_QUADRUPLE = struct {
	pfnBufferSize USER_MARSHAL_SIZING_ROUTINE
	pfnMarshall   USER_MARSHAL_MARSHALLING_ROUTINE
	pfnUnmarshall USER_MARSHAL_UNMARSHALLING_ROUTINE
	pfnFree       USER_MARSHAL_FREEING_ROUTINE
} /* rpcndr.h:211:3 */

type USER_MARSHAL_ROUTINE_QUADRUPLE = _USER_MARSHAL_ROUTINE_QUADRUPLE /* rpcndr.h:356:5 */

type USER_MARSHAL_CB_TYPE = uint32 /* rpcndr.h:362:5 */

type _USER_MARSHAL_CB = struct {
	Flags       uint32
	_           [4]byte
	pStubMsg    PMIDL_STUB_MESSAGE
	pReserve    PFORMAT_STRING
	Signature   uint32
	CBType      USER_MARSHAL_CB_TYPE
	pFormat     PFORMAT_STRING
	pTypeFormat PFORMAT_STRING
} /* rpcndr.h:364:11 */

type USER_MARSHAL_CB = _USER_MARSHAL_CB /* rpcndr.h:372:5 */

type _MALLOC_FREE_STRUCT = struct {
	pfnAllocate uintptr
	pfnFree     uintptr
} /* rpcndr.h:211:3 */

type MALLOC_FREE_STRUCT = _MALLOC_FREE_STRUCT /* rpcndr.h:384:5 */

type _COMM_FAULT_OFFSETS = struct {
	CommOffset  int16
	FaultOffset int16
} /* rpcndr.h:211:3 */

type COMM_FAULT_OFFSETS = _COMM_FAULT_OFFSETS /* rpcndr.h:389:5 */

type IDL_CS_CONVERT = uint32 /* rpcndr.h:393:5 */

type CS_TYPE_NET_SIZE_ROUTINE = uintptr   /* rpcndr.h:395:16 */
type CS_TYPE_LOCAL_SIZE_ROUTINE = uintptr /* rpcndr.h:396:16 */
type CS_TYPE_TO_NETCS_ROUTINE = uintptr   /* rpcndr.h:397:16 */
type CS_TYPE_FROM_NETCS_ROUTINE = uintptr /* rpcndr.h:398:16 */
type CS_TAG_GETTING_ROUTINE = uintptr     /* rpcndr.h:399:16 */

type _NDR_CS_SIZE_CONVERT_ROUTINES = struct {
	pfnNetSize   CS_TYPE_NET_SIZE_ROUTINE
	pfnToNetCs   CS_TYPE_TO_NETCS_ROUTINE
	pfnLocalSize CS_TYPE_LOCAL_SIZE_ROUTINE
	pfnFromNetCs CS_TYPE_FROM_NETCS_ROUTINE
} /* rpcndr.h:211:3 */

type NDR_CS_SIZE_CONVERT_ROUTINES = _NDR_CS_SIZE_CONVERT_ROUTINES /* rpcndr.h:408:5 */

type _NDR_CS_ROUTINES = struct {
	pSizeConvertRoutines uintptr
	pTagGettingRoutines  uintptr
} /* rpcndr.h:211:3 */

type NDR_CS_ROUTINES = _NDR_CS_ROUTINES /* rpcndr.h:413:5 */

type MIDL_STUB_DESC = _MIDL_STUB_DESC /* rpcndr.h:440:5 */

type PMIDL_STUB_DESC = uintptr /* rpcndr.h:442:32 */
type PMIDL_XMIT_TYPE = uintptr /* rpcndr.h:443:16 */

type _MIDL_FORMAT_STRING = struct {
	_   [0]uint16
	Pad int16
} /* rpcndr.h:445:11 */

type MIDL_FORMAT_STRING = _MIDL_FORMAT_STRING /* rpcndr.h:448:5 */

type STUB_THUNK = uintptr     /* rpcndr.h:450:16 */
type SERVER_ROUTINE = uintptr /* rpcndr.h:451:20 */

type _MIDL_SERVER_INFO_ = struct {
	pStubDesc       PMIDL_STUB_DESC
	DispatchTable   uintptr
	ProcString      PFORMAT_STRING
	FmtStringOffset uintptr
	ThunkTable      uintptr
	pTransferSyntax PRPC_SYNTAX_IDENTIFIER
	nCount          ULONG_PTR
	pSyntaxInfo     PMIDL_SYNTAX_INFO
} /* rpcndr.h:453:11 */

type MIDL_SERVER_INFO = _MIDL_SERVER_INFO_ /* rpcndr.h:462:5 */
type PMIDL_SERVER_INFO = uintptr           /* rpcndr.h:462:22 */

type _MIDL_STUBLESS_PROXY_INFO = struct {
	pStubDesc          PMIDL_STUB_DESC
	ProcFormatString   PFORMAT_STRING
	FormatStringOffset uintptr
	pTransferSyntax    PRPC_SYNTAX_IDENTIFIER
	nCount             ULONG_PTR
	pSyntaxInfo        PMIDL_SYNTAX_INFO
} /* rpcndr.h:466:11 */

type MIDL_STUBLESS_PROXY_INFO = _MIDL_STUBLESS_PROXY_INFO /* rpcndr.h:473:5 */

type PMIDL_STUBLESS_PROXY_INFO = uintptr /* rpcndr.h:475:36 */

type PARAM_OFFSETTABLE = uintptr  /* rpcndr.h:488:26 */
type PPARAM_OFFSETTABLE = uintptr /* rpcndr.h:488:45 */

type _CLIENT_CALL_RETURN = struct{ Pointer uintptr } /* rpcndr.h:490:11 */

type CLIENT_CALL_RETURN = _CLIENT_CALL_RETURN /* rpcndr.h:493:5 */

type XLAT_SIDE = uint32 /* rpcndr.h:497:5 */

type _FULL_PTR_TO_REFID_ELEMENT = struct {
	Next    uintptr
	Pointer uintptr
	RefId   uint32
	State   uint8
	_       [3]byte
} /* rpcndr.h:499:11 */

type FULL_PTR_TO_REFID_ELEMENT = _FULL_PTR_TO_REFID_ELEMENT /* rpcndr.h:504:5 */
type PFULL_PTR_TO_REFID_ELEMENT = uintptr                   /* rpcndr.h:504:31 */

type FULL_PTR_XLAT_TABLES = _FULL_PTR_XLAT_TABLES /* rpcndr.h:520:5 */
type PFULL_PTR_XLAT_TABLES = uintptr              /* rpcndr.h:520:26 */

type STUB_PHASE = uint32 /* rpcndr.h:674:5 */

type PROXY_PHASE = uint32 /* rpcndr.h:678:5 */

type IRpcStubBuffer1 = struct{ lpVtbl uintptr } /* rpcndr.h:680:3 */

type RPC_SS_THREAD_HANDLE = uintptr /* rpcndr.h:705:16 */

type _NDR_USER_MARSHAL_INFO_LEVEL1 = struct {
	Buffer            uintptr
	BufferSize        uint32
	_                 [4]byte
	pfnAllocate       uintptr
	pfnFree           uintptr
	pRpcChannelBuffer uintptr
	Reserved          [5]ULONG_PTR
} /* rpcndr.h:763:11 */

type NDR_USER_MARSHAL_INFO_LEVEL1 = _NDR_USER_MARSHAL_INFO_LEVEL1 /* rpcndr.h:770:5 */

type _NDR_USER_MARSHAL_INFO = struct {
	InformationLevel uint32
	_                [4]byte
	__8              struct{ Level1 NDR_USER_MARSHAL_INFO_LEVEL1 }
} /* rpcndr.h:772:11 */

type NDR_USER_MARSHAL_INFO = _NDR_USER_MARSHAL_INFO /* rpcndr.h:777:5 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type REGCLS = uint32 /* combaseapi.h:144:3 */

type IRpcStubBuffer = IRpcStubBuffer1       /* combaseapi.h:146:34 */
type IRpcChannelBuffer = IRpcChannelBuffer1 /* combaseapi.h:147:37 */

type COINITBASE = uint32 /* combaseapi.h:151:3 */

type OLECHAR = WCHAR     /* wtypesbase.h:69:15 */
type LPOLESTR = uintptr  /* wtypesbase.h:70:17 */
type LPCOLESTR = uintptr /* wtypesbase.h:71:23 */
type DOUBLE = float64    /* wtypesbase.h:94:16 */

type _COAUTHIDENTITY = struct {
	User           uintptr
	UserLength     ULONG
	_              [4]byte
	Domain         uintptr
	DomainLength   ULONG
	_              [4]byte
	Password       uintptr
	PasswordLength ULONG
	Flags          ULONG
} /* wtypesbase.h:185:9 */

type COAUTHIDENTITY = _COAUTHIDENTITY /* wtypesbase.h:193:3 */

type _COAUTHINFO = struct {
	dwAuthnSvc           DWORD
	dwAuthzSvc           DWORD
	pwszServerPrincName  LPWSTR
	dwAuthnLevel         DWORD
	dwImpersonationLevel DWORD
	pAuthIdentityData    uintptr
	dwCapabilities       DWORD
	_                    [4]byte
} /* wtypesbase.h:195:9 */

type COAUTHINFO = _COAUTHINFO /* wtypesbase.h:203:3 */

type SCODE = LONG     /* wtypesbase.h:205:14 */
type PSCODE = uintptr /* wtypesbase.h:206:15 */

type MEMCTX = int32 /* wtypesbase.h:239:3 */

type CLSCTX = int32 /* wtypesbase.h:294:3 */

type MSHLFLAGS = uint32 /* wtypesbase.h:307:3 */

type MSHCTX = uint32 /* wtypesbase.h:315:3 */

type _BYTE_BLOB = struct {
	clSize ULONG
	abData [1]byte
	_      [3]byte
} /* wtypesbase.h:317:9 */

type BYTE_BLOB = _BYTE_BLOB /* wtypesbase.h:320:3 */

type UP_BYTE_BLOB = uintptr /* wtypesbase.h:322:19 */

type _WORD_BLOB = struct {
	clSize ULONG
	asData [1]uint16
	_      [2]byte
} /* wtypesbase.h:324:9 */

type WORD_BLOB = _WORD_BLOB /* wtypesbase.h:327:3 */

type UP_WORD_BLOB = uintptr /* wtypesbase.h:329:19 */

type _DWORD_BLOB = struct {
	clSize ULONG
	alData [1]ULONG
} /* wtypesbase.h:331:9 */

type DWORD_BLOB = _DWORD_BLOB /* wtypesbase.h:334:3 */

type UP_DWORD_BLOB = uintptr /* wtypesbase.h:336:20 */

type _FLAGGED_BYTE_BLOB = struct {
	fFlags ULONG
	clSize ULONG
	abData [1]byte
	_      [3]byte
} /* wtypesbase.h:338:9 */

type FLAGGED_BYTE_BLOB = _FLAGGED_BYTE_BLOB /* wtypesbase.h:342:3 */

type UP_FLAGGED_BYTE_BLOB = uintptr /* wtypesbase.h:344:27 */

type _FLAGGED_WORD_BLOB = struct {
	fFlags ULONG
	clSize ULONG
	asData [1]uint16
	_      [2]byte
} /* wtypesbase.h:346:9 */

type FLAGGED_WORD_BLOB = _FLAGGED_WORD_BLOB /* wtypesbase.h:350:3 */

type UP_FLAGGED_WORD_BLOB = uintptr /* wtypesbase.h:352:27 */

type _BYTE_SIZEDARR = struct {
	clSize ULONG
	_      [4]byte
	pData  uintptr
} /* wtypesbase.h:354:9 */

type BYTE_SIZEDARR = _BYTE_SIZEDARR /* wtypesbase.h:357:3 */

type _SHORT_SIZEDARR = struct {
	clSize ULONG
	_      [4]byte
	pData  uintptr
} /* wtypesbase.h:359:9 */

type WORD_SIZEDARR = _SHORT_SIZEDARR /* wtypesbase.h:362:3 */

type _LONG_SIZEDARR = struct {
	clSize ULONG
	_      [4]byte
	pData  uintptr
} /* wtypesbase.h:364:9 */

type DWORD_SIZEDARR = _LONG_SIZEDARR /* wtypesbase.h:367:3 */

type _HYPER_SIZEDARR = struct {
	clSize ULONG
	_      [4]byte
	pData  uintptr
} /* wtypesbase.h:369:9 */

type HYPER_SIZEDARR = _HYPER_SIZEDARR /* wtypesbase.h:372:3 */

// Begin additional prototypes for all interfaces

// End additional prototypes

//** Autogenerated by WIDL 4.14 from include/unknwnbase.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type IUnknown1 = struct{ lpVtbl uintptr } /* unknwnbase.h:23:9 */

// Begin additional prototypes for all interfaces

// End additional prototypes

//** Autogenerated by WIDL 4.14 from include/unknwnbase.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type IUnknown = IUnknown1 /* unknwnbase.h:23:28 */

type AsyncIUnknown1 = struct{ lpVtbl uintptr } /* unknwnbase.h:31:9 */

type AsyncIUnknown = AsyncIUnknown1 /* unknwnbase.h:31:33 */

type IClassFactory1 = struct{ lpVtbl uintptr } /* unknwnbase.h:39:9 */

type IClassFactory = IClassFactory1 /* unknwnbase.h:39:33 */

// Headers for imported files

//** Autogenerated by WIDL 4.12.1 from include/wtypesbase.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// ****************************************************************************
//
// IUnknown interface

type LPUNKNOWN = uintptr /* unknwnbase.h:68:18 */
type IUnknownVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
} /* unknwnbase.h:23:9 */

type IUnknownVtbl = IUnknownVtbl1 /* unknwnbase.h:138:3 */
type AsyncIUnknownVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	Begin_QueryInterface  uintptr
	Finish_QueryInterface uintptr
	Begin_AddRef          uintptr
	Finish_AddRef         uintptr
	Begin_Release         uintptr
	Finish_Release        uintptr
} /* unknwnbase.h:31:9 */

type AsyncIUnknownVtbl = AsyncIUnknownVtbl1 /* unknwnbase.h:244:3 */

// ****************************************************************************
//
// IClassFactory interface

type LPCLASSFACTORY = uintptr /* unknwnbase.h:310:23 */
type IClassFactoryVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	CreateInstance uintptr
	LockServer     uintptr
} /* unknwnbase.h:39:9 */

type IClassFactoryVtbl = IClassFactoryVtbl1 /* unknwnbase.h:357:3 */

// Begin additional prototypes for all interfaces

// End additional prototypes

//** Autogenerated by WIDL 4.12.1 from include/objidlbase.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type IMarshal1 = struct{ lpVtbl uintptr } /* objidlbase.h:23:9 */

// Begin additional prototypes for all interfaces

// End additional prototypes

//** Autogenerated by WIDL 4.12.1 from include/objidlbase.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type IMarshal = IMarshal1 /* objidlbase.h:23:28 */

type INoMarshal1 = struct{ lpVtbl uintptr } /* objidlbase.h:31:9 */

type INoMarshal = INoMarshal1 /* objidlbase.h:31:30 */

type IAgileObject1 = struct{ lpVtbl uintptr } /* objidlbase.h:39:9 */

type IAgileObject = IAgileObject1 /* objidlbase.h:39:32 */

type IAgileReference1 = struct{ lpVtbl uintptr } /* objidlbase.h:47:9 */

type IAgileReference = IAgileReference1 /* objidlbase.h:47:35 */

type IMarshal21 = struct{ lpVtbl uintptr } /* objidlbase.h:55:9 */

type IMarshal2 = IMarshal21 /* objidlbase.h:55:29 */

type IMalloc1 = struct{ lpVtbl uintptr } /* objidlbase.h:63:9 */

type IMalloc = IMalloc1 /* objidlbase.h:63:27 */

type IStdMarshalInfo1 = struct{ lpVtbl uintptr } /* objidlbase.h:71:9 */

type IStdMarshalInfo = IStdMarshalInfo1 /* objidlbase.h:71:35 */

type IExternalConnection1 = struct{ lpVtbl uintptr } /* objidlbase.h:79:9 */

type IExternalConnection = IExternalConnection1 /* objidlbase.h:79:39 */

type IMultiQI1 = struct{ lpVtbl uintptr } /* objidlbase.h:87:9 */

type IMultiQI = IMultiQI1 /* objidlbase.h:87:28 */

type AsyncIMultiQI1 = struct{ lpVtbl uintptr } /* objidlbase.h:95:9 */

type AsyncIMultiQI = AsyncIMultiQI1 /* objidlbase.h:95:33 */

type IInternalUnknown1 = struct{ lpVtbl uintptr } /* objidlbase.h:103:9 */

type IInternalUnknown = IInternalUnknown1 /* objidlbase.h:103:36 */

type IEnumUnknown1 = struct{ lpVtbl uintptr } /* objidlbase.h:111:9 */

type IEnumUnknown = IEnumUnknown1 /* objidlbase.h:111:32 */

type IEnumString1 = struct{ lpVtbl uintptr } /* objidlbase.h:119:9 */

type IEnumString = IEnumString1 /* objidlbase.h:119:31 */

type ISequentialStream1 = struct{ lpVtbl uintptr } /* objidlbase.h:127:9 */

type ISequentialStream = ISequentialStream1 /* objidlbase.h:127:37 */

type IStream1 = struct{ lpVtbl uintptr } /* objidlbase.h:135:9 */

type IStream = IStream1 /* objidlbase.h:135:27 */

type IRpcChannelBuffer21 = struct{ lpVtbl uintptr } /* objidlbase.h:151:9 */

type IRpcChannelBuffer2 = IRpcChannelBuffer21 /* objidlbase.h:151:38 */

type IAsyncRpcChannelBuffer1 = struct{ lpVtbl uintptr } /* objidlbase.h:159:9 */

type IAsyncRpcChannelBuffer = IAsyncRpcChannelBuffer1 /* objidlbase.h:159:42 */

type IRpcChannelBuffer31 = struct{ lpVtbl uintptr } /* objidlbase.h:167:9 */

type IRpcChannelBuffer3 = IRpcChannelBuffer31 /* objidlbase.h:167:38 */

type IRpcSyntaxNegotiate1 = struct{ lpVtbl uintptr } /* objidlbase.h:175:9 */

type IRpcSyntaxNegotiate = IRpcSyntaxNegotiate1 /* objidlbase.h:175:39 */

type IRpcProxyBuffer1 = struct{ lpVtbl uintptr } /* objidlbase.h:183:9 */

type IRpcProxyBuffer = IRpcProxyBuffer1 /* objidlbase.h:183:35 */

type IPSFactoryBuffer1 = struct{ lpVtbl uintptr } /* objidlbase.h:199:9 */

type IPSFactoryBuffer = IPSFactoryBuffer1 /* objidlbase.h:199:36 */

type IChannelHook1 = struct{ lpVtbl uintptr } /* objidlbase.h:207:9 */

type IChannelHook = IChannelHook1 /* objidlbase.h:207:32 */

type IClientSecurity1 = struct{ lpVtbl uintptr } /* objidlbase.h:215:9 */

type IClientSecurity = IClientSecurity1 /* objidlbase.h:215:35 */

type IServerSecurity1 = struct{ lpVtbl uintptr } /* objidlbase.h:223:9 */

type IServerSecurity = IServerSecurity1 /* objidlbase.h:223:35 */

type IRpcOptions1 = struct{ lpVtbl uintptr } /* objidlbase.h:231:9 */

type IRpcOptions = IRpcOptions1 /* objidlbase.h:231:31 */

type IGlobalOptions1 = struct{ lpVtbl uintptr } /* objidlbase.h:239:9 */

type IGlobalOptions = IGlobalOptions1 /* objidlbase.h:239:34 */

type ISurrogate1 = struct{ lpVtbl uintptr } /* objidlbase.h:247:9 */

type ISurrogate = ISurrogate1 /* objidlbase.h:247:30 */

type IGlobalInterfaceTable1 = struct{ lpVtbl uintptr } /* objidlbase.h:255:9 */

type IGlobalInterfaceTable = IGlobalInterfaceTable1 /* objidlbase.h:255:41 */

type ISynchronize1 = struct{ lpVtbl uintptr } /* objidlbase.h:263:9 */

type ISynchronize = ISynchronize1 /* objidlbase.h:263:32 */

type ISynchronizeHandle1 = struct{ lpVtbl uintptr } /* objidlbase.h:271:9 */

type ISynchronizeHandle = ISynchronizeHandle1 /* objidlbase.h:271:38 */

type ISynchronizeEvent1 = struct{ lpVtbl uintptr } /* objidlbase.h:279:9 */

type ISynchronizeEvent = ISynchronizeEvent1 /* objidlbase.h:279:37 */

type ISynchronizeContainer1 = struct{ lpVtbl uintptr } /* objidlbase.h:287:9 */

type ISynchronizeContainer = ISynchronizeContainer1 /* objidlbase.h:287:41 */

type ISynchronizeMutex1 = struct{ lpVtbl uintptr } /* objidlbase.h:295:9 */

type ISynchronizeMutex = ISynchronizeMutex1 /* objidlbase.h:295:37 */

type ICancelMethodCalls1 = struct{ lpVtbl uintptr } /* objidlbase.h:303:9 */

type ICancelMethodCalls = ICancelMethodCalls1 /* objidlbase.h:303:38 */

type IAsyncManager1 = struct{ lpVtbl uintptr } /* objidlbase.h:311:9 */

type IAsyncManager = IAsyncManager1 /* objidlbase.h:311:33 */

type ICallFactory1 = struct{ lpVtbl uintptr } /* objidlbase.h:319:9 */

type ICallFactory = ICallFactory1 /* objidlbase.h:319:32 */

type IRpcHelper1 = struct{ lpVtbl uintptr } /* objidlbase.h:327:9 */

type IRpcHelper = IRpcHelper1 /* objidlbase.h:327:30 */

type IReleaseMarshalBuffers1 = struct{ lpVtbl uintptr } /* objidlbase.h:335:9 */

type IReleaseMarshalBuffers = IReleaseMarshalBuffers1 /* objidlbase.h:335:42 */

type IWaitMultiple1 = struct{ lpVtbl uintptr } /* objidlbase.h:343:9 */

type IWaitMultiple = IWaitMultiple1 /* objidlbase.h:343:33 */

type IAddrTrackingControl1 = struct{ lpVtbl uintptr } /* objidlbase.h:351:9 */

type IAddrTrackingControl = IAddrTrackingControl1 /* objidlbase.h:351:40 */

type IAddrExclusionControl1 = struct{ lpVtbl uintptr } /* objidlbase.h:359:9 */

type IAddrExclusionControl = IAddrExclusionControl1 /* objidlbase.h:359:41 */

type IPipeByte1 = struct{ lpVtbl uintptr } /* objidlbase.h:367:9 */

type IPipeByte = IPipeByte1 /* objidlbase.h:367:29 */

type IPipeLong1 = struct{ lpVtbl uintptr } /* objidlbase.h:375:9 */

type IPipeLong = IPipeLong1 /* objidlbase.h:375:29 */

type IPipeDouble1 = struct{ lpVtbl uintptr } /* objidlbase.h:383:9 */

type IPipeDouble = IPipeDouble1 /* objidlbase.h:383:31 */

type IComThreadingInfo1 = struct{ lpVtbl uintptr } /* objidlbase.h:407:9 */

type IComThreadingInfo = IComThreadingInfo1 /* objidlbase.h:407:37 */

type IProcessInitControl1 = struct{ lpVtbl uintptr } /* objidlbase.h:415:9 */

type IProcessInitControl = IProcessInitControl1 /* objidlbase.h:415:39 */

type IFastRundown1 = struct{ lpVtbl uintptr } /* objidlbase.h:423:9 */

type IFastRundown = IFastRundown1 /* objidlbase.h:423:32 */

type IMarshalingStream1 = struct{ lpVtbl uintptr } /* objidlbase.h:431:9 */

type IMarshalingStream = IMarshalingStream1 /* objidlbase.h:431:37 */

// Headers for imported files

//** Autogenerated by WIDL 4.14 from include/unknwnbase.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

//** Autogenerated by WIDL 4.12.1 from include/wtypesbase.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type _COSERVERINFO = struct {
	dwReserved1 DWORD
	_           [4]byte
	pwszName    LPWSTR
	pAuthInfo   uintptr
	dwReserved2 DWORD
	_           [4]byte
} /* objidlbase.h:522:9 */

// Headers for imported files

//** Autogenerated by WIDL 4.14 from include/unknwnbase.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

//** Autogenerated by WIDL 4.12.1 from include/wtypesbase.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type COSERVERINFO = _COSERVERINFO /* objidlbase.h:527:3 */

// ****************************************************************************
//
// IMarshal interface

type LPMARSHAL = uintptr /* objidlbase.h:535:18 */
type IMarshalVtbl1 = struct {
	QueryInterface     uintptr
	AddRef             uintptr
	Release            uintptr
	GetUnmarshalClass  uintptr
	GetMarshalSizeMax  uintptr
	MarshalInterface   uintptr
	UnmarshalInterface uintptr
	ReleaseMarshalData uintptr
	DisconnectObject   uintptr
} /* objidlbase.h:23:9 */

type IMarshalVtbl = IMarshalVtbl1 /* objidlbase.h:639:3 */
type INoMarshalVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
} /* objidlbase.h:31:9 */

type INoMarshalVtbl = INoMarshalVtbl1 /* objidlbase.h:729:3 */
type IAgileObjectVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
} /* objidlbase.h:39:9 */

type IAgileObjectVtbl = IAgileObjectVtbl1 /* objidlbase.h:793:3 */
type IAgileReferenceVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Resolve        uintptr
} /* objidlbase.h:47:9 */

type IAgileReferenceVtbl = IAgileReferenceVtbl1 /* objidlbase.h:866:3 */

// ****************************************************************************
//
// IMarshal2 interface

type LPMARSHAL2 = uintptr /* objidlbase.h:912:19 */
type IMarshal2Vtbl1 = struct {
	QueryInterface     uintptr
	AddRef             uintptr
	Release            uintptr
	GetUnmarshalClass  uintptr
	GetMarshalSizeMax  uintptr
	MarshalInterface   uintptr
	UnmarshalInterface uintptr
	ReleaseMarshalData uintptr
	DisconnectObject   uintptr
} /* objidlbase.h:55:9 */

type IMarshal2Vtbl = IMarshal2Vtbl1 /* objidlbase.h:981:3 */

// ****************************************************************************
//
// IMalloc interface

type LPMALLOC = uintptr /* objidlbase.h:1045:17 */
type IMallocVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Alloc          uintptr
	Realloc        uintptr
	Free           uintptr
	GetSize        uintptr
	DidAlloc       uintptr
	HeapMinimize   uintptr
} /* objidlbase.h:63:9 */

type IMallocVtbl = IMallocVtbl1 /* objidlbase.h:1117:3 */

// ****************************************************************************
//
// IStdMarshalInfo interface

type LPSTDMARSHALINFO = uintptr /* objidlbase.h:1181:25 */
type IStdMarshalInfoVtbl1 = struct {
	QueryInterface     uintptr
	AddRef             uintptr
	Release            uintptr
	GetClassForHandler uintptr
} /* objidlbase.h:71:9 */

type IStdMarshalInfoVtbl = IStdMarshalInfoVtbl1 /* objidlbase.h:1221:3 */

// ****************************************************************************
//
// IExternalConnection interface

type LPEXTERNALCONNECTION = uintptr /* objidlbase.h:1265:29 */

type EXTCONN = uint32 /* objidlbase.h:1271:3 */
type IExternalConnectionVtbl1 = struct {
	QueryInterface    uintptr
	AddRef            uintptr
	Release           uintptr
	AddConnection     uintptr
	ReleaseConnection uintptr
} /* objidlbase.h:79:9 */

type IExternalConnectionVtbl = IExternalConnectionVtbl1 /* objidlbase.h:1320:3 */

type LPMULTIQI = uintptr /* objidlbase.h:1362:18 */

type tagMULTI_QI = struct {
	pIID uintptr
	pItf uintptr
	hr   HRESULT
	_    [4]byte
} /* objidlbase.h:1366:9 */

type MULTI_QI = tagMULTI_QI /* objidlbase.h:1370:3 */
type IMultiQIVtbl1 = struct {
	QueryInterface          uintptr
	AddRef                  uintptr
	Release                 uintptr
	QueryMultipleInterfaces uintptr
} /* objidlbase.h:87:9 */

type IMultiQIVtbl = IMultiQIVtbl1 /* objidlbase.h:1414:3 */
type AsyncIMultiQIVtbl1 = struct {
	QueryInterface                 uintptr
	AddRef                         uintptr
	Release                        uintptr
	Begin_QueryMultipleInterfaces  uintptr
	Finish_QueryMultipleInterfaces uintptr
} /* objidlbase.h:95:9 */

type AsyncIMultiQIVtbl = AsyncIMultiQIVtbl1 /* objidlbase.h:1500:3 */
type IInternalUnknownVtbl1 = struct {
	QueryInterface         uintptr
	AddRef                 uintptr
	Release                uintptr
	QueryInternalInterface uintptr
} /* objidlbase.h:103:9 */

type IInternalUnknownVtbl = IInternalUnknownVtbl1 /* objidlbase.h:1586:3 */

// ****************************************************************************
//
// IEnumUnknown interface

type LPENUMUNKNOWN = uintptr /* objidlbase.h:1632:22 */
type IEnumUnknownVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Next           uintptr
	Skip           uintptr
	Reset          uintptr
	Clone          uintptr
} /* objidlbase.h:111:9 */

type IEnumUnknownVtbl = IEnumUnknownVtbl1 /* objidlbase.h:1692:3 */

// ****************************************************************************
//
// IEnumString interface

type LPENUMSTRING = uintptr /* objidlbase.h:1768:21 */
type IEnumStringVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Next           uintptr
	Skip           uintptr
	Reset          uintptr
	Clone          uintptr
} /* objidlbase.h:119:9 */

type IEnumStringVtbl = IEnumStringVtbl1 /* objidlbase.h:1828:3 */
type ISequentialStreamVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Read           uintptr
	Write          uintptr
} /* objidlbase.h:127:9 */

type ISequentialStreamVtbl = ISequentialStreamVtbl1 /* objidlbase.h:1953:3 */

// ****************************************************************************
//
// IStream interface

type LPSTREAM = uintptr /* objidlbase.h:2041:17 */

type tagSTATSTG = struct {
	pwcsName          LPOLESTR
	__type            DWORD
	_                 [4]byte
	cbSize            ULARGE_INTEGER
	mtime             FILETIME
	ctime             FILETIME
	atime             FILETIME
	grfMode           DWORD
	grfLocksSupported DWORD
	clsid             CLSID
	grfStateBits      DWORD
	reserved          DWORD
} /* objidlbase.h:2043:9 */

type STATSTG = tagSTATSTG /* objidlbase.h:2055:3 */

type STGTY = uint32 /* objidlbase.h:2062:3 */

type STREAM_SEEK = uint32 /* objidlbase.h:2068:3 */

type LOCKTYPE = uint32 /* objidlbase.h:2074:3 */
type IStreamVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Read           uintptr
	Write          uintptr
	Seek           uintptr
	SetSize        uintptr
	CopyTo         uintptr
	Commit         uintptr
	Revert         uintptr
	LockRegion     uintptr
	UnlockRegion   uintptr
	Stat           uintptr
	Clone          uintptr
} /* objidlbase.h:135:9 */

type IStreamVtbl = IStreamVtbl1 /* objidlbase.h:2198:3 */

// ****************************************************************************
//
// IRpcChannelBuffer interface

type RPCOLEDATAREP = ULONG /* objidlbase.h:2327:15 */

type tagRPCOLEMESSAGE = struct {
	reserved1          uintptr
	dataRepresentation RPCOLEDATAREP
	_                  [4]byte
	Buffer             uintptr
	cbBuffer           ULONG
	iMethod            ULONG
	reserved2          [5]uintptr
	rpcFlags           ULONG
	_                  [4]byte
} /* objidlbase.h:2329:9 */

type RPCOLEMESSAGE = tagRPCOLEMESSAGE /* objidlbase.h:2337:3 */

type PRPCOLEMESSAGE = uintptr /* objidlbase.h:2339:23 */
type IRpcChannelBufferVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetBuffer      uintptr
	SendReceive    uintptr
	FreeBuffer     uintptr
	GetDestCtx     uintptr
	IsConnected    uintptr
} /* rpcndr.h:211:3 */

type IRpcChannelBufferVtbl = IRpcChannelBufferVtbl1 /* objidlbase.h:2408:3 */
type IRpcChannelBuffer2Vtbl1 = struct {
	QueryInterface     uintptr
	AddRef             uintptr
	Release            uintptr
	GetBuffer          uintptr
	SendReceive        uintptr
	FreeBuffer         uintptr
	GetDestCtx         uintptr
	IsConnected        uintptr
	GetProtocolVersion uintptr
} /* objidlbase.h:151:9 */

type IRpcChannelBuffer2Vtbl = IRpcChannelBuffer2Vtbl1 /* objidlbase.h:2527:3 */
type IAsyncRpcChannelBufferVtbl1 = struct {
	QueryInterface     uintptr
	AddRef             uintptr
	Release            uintptr
	GetBuffer          uintptr
	SendReceive        uintptr
	FreeBuffer         uintptr
	GetDestCtx         uintptr
	IsConnected        uintptr
	GetProtocolVersion uintptr
	Send               uintptr
	Receive            uintptr
	GetDestCtxEx       uintptr
} /* objidlbase.h:159:9 */

type IAsyncRpcChannelBufferVtbl = IAsyncRpcChannelBufferVtbl1 /* objidlbase.h:2679:3 */
type IRpcChannelBuffer3Vtbl1 = struct {
	QueryInterface     uintptr
	AddRef             uintptr
	Release            uintptr
	GetBuffer          uintptr
	SendReceive        uintptr
	FreeBuffer         uintptr
	GetDestCtx         uintptr
	IsConnected        uintptr
	GetProtocolVersion uintptr
	Send               uintptr
	Receive            uintptr
	Cancel             uintptr
	GetCallContext     uintptr
	GetDestCtxEx       uintptr
	GetState           uintptr
	RegisterAsync      uintptr
} /* objidlbase.h:167:9 */

type IRpcChannelBuffer3Vtbl = IRpcChannelBuffer3Vtbl1 /* objidlbase.h:2881:3 */
type IRpcSyntaxNegotiateVtbl1 = struct {
	QueryInterface  uintptr
	AddRef          uintptr
	Release         uintptr
	NegotiateSyntax uintptr
} /* objidlbase.h:175:9 */

type IRpcSyntaxNegotiateVtbl = IRpcSyntaxNegotiateVtbl1 /* objidlbase.h:3011:3 */
type IRpcProxyBufferVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Connect        uintptr
	Disconnect     uintptr
} /* objidlbase.h:183:9 */

type IRpcProxyBufferVtbl = IRpcProxyBufferVtbl1 /* objidlbase.h:3095:3 */
type IRpcStubBufferVtbl1 = struct {
	QueryInterface            uintptr
	AddRef                    uintptr
	Release                   uintptr
	Connect                   uintptr
	Disconnect                uintptr
	Invoke                    uintptr
	IsIIDSupported            uintptr
	CountRefs                 uintptr
	DebugServerQueryInterface uintptr
	DebugServerRelease        uintptr
} /* rpcndr.h:680:3 */

type IRpcStubBufferVtbl = IRpcStubBufferVtbl1 /* objidlbase.h:3221:3 */
type IPSFactoryBufferVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	CreateProxy    uintptr
	CreateStub     uintptr
} /* objidlbase.h:199:9 */

type IPSFactoryBufferVtbl = IPSFactoryBufferVtbl1 /* objidlbase.h:3340:3 */

type SChannelHookCallInfo1 = struct {
	iid         IID
	cbSize      DWORD
	uCausality  GUID
	dwServerPid DWORD
	iMethod     DWORD
	_           [4]byte
	pObject     uintptr
} /* objidlbase.h:3385:9 */

type SChannelHookCallInfo = SChannelHookCallInfo1 /* objidlbase.h:3392:3 */
type IChannelHookVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	ClientGetSize    uintptr
	ClientFillBuffer uintptr
	ClientNotify     uintptr
	ServerNotify     uintptr
	ServerGetSize    uintptr
	ServerFillBuffer uintptr
} /* objidlbase.h:207:9 */

type IChannelHookVtbl = IChannelHookVtbl1 /* objidlbase.h:3511:3 */

// ****************************************************************************
//
// IClientSecurity interface

type tagSOLE_AUTHENTICATION_SERVICE = struct {
	dwAuthnSvc     DWORD
	dwAuthzSvc     DWORD
	pPrincipalName uintptr
	hr             HRESULT
	_              [4]byte
} /* objidlbase.h:3579:9 */

// ****************************************************************************
//
// IClientSecurity interface

type SOLE_AUTHENTICATION_SERVICE = tagSOLE_AUTHENTICATION_SERVICE /* objidlbase.h:3584:3 */

type PSOLE_AUTHENTICATION_SERVICE = uintptr /* objidlbase.h:3586:37 */

type EOLE_AUTHENTICATION_CAPABILITIES = uint32 /* objidlbase.h:3604:3 */

type tagSOLE_AUTHENTICATION_INFO = struct {
	dwAuthnSvc DWORD
	dwAuthzSvc DWORD
	pAuthInfo  uintptr
} /* objidlbase.h:3611:9 */

type SOLE_AUTHENTICATION_INFO = tagSOLE_AUTHENTICATION_INFO /* objidlbase.h:3615:3 */
type PSOLE_AUTHENTICATION_INFO = uintptr                    /* objidlbase.h:3616:44 */

type tagSOLE_AUTHENTICATION_LIST = struct {
	cAuthInfo DWORD
	_         [4]byte
	aAuthInfo uintptr
} /* objidlbase.h:3618:9 */

type SOLE_AUTHENTICATION_LIST = tagSOLE_AUTHENTICATION_LIST /* objidlbase.h:3621:3 */
type PSOLE_AUTHENTICATION_LIST = uintptr                    /* objidlbase.h:3622:44 */
type IClientSecurityVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	QueryBlanket   uintptr
	SetBlanket     uintptr
	CopyProxy      uintptr
} /* objidlbase.h:215:9 */

type IClientSecurityVtbl = IClientSecurityVtbl1 /* objidlbase.h:3702:3 */
type IServerSecurityVtbl1 = struct {
	QueryInterface    uintptr
	AddRef            uintptr
	Release           uintptr
	QueryBlanket      uintptr
	ImpersonateClient uintptr
	RevertToSelf      uintptr
	IsImpersonating   uintptr
} /* objidlbase.h:223:9 */

type IServerSecurityVtbl = IServerSecurityVtbl1 /* objidlbase.h:3820:3 */

type RPCOPT_PROPERTIES = uint32 /* objidlbase.h:3874:3 */

type RPCOPT_SERVER_LOCALITY_VALUES = uint32 /* objidlbase.h:3880:3 */
type IRpcOptionsVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Set            uintptr
	Query          uintptr
} /* objidlbase.h:231:9 */

type IRpcOptionsVtbl = IRpcOptionsVtbl1 /* objidlbase.h:3937:3 */

type GLOBALOPT_PROPERTIES = uint32 /* objidlbase.h:3987:3 */

type GLOBALOPT_EH_VALUES = uint32 /* objidlbase.h:3994:3 */

type GLOBALOPT_RPCTP_VALUES = uint32 /* objidlbase.h:3999:3 */

type GLOBALOPT_RO_FLAGS = uint32 /* objidlbase.h:4010:3 */

type GLOBALOPT_UNMARSHALING_POLICY_VALUES = uint32 /* objidlbase.h:4016:3 */
type IGlobalOptionsVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Set            uintptr
	Query          uintptr
} /* objidlbase.h:239:9 */

type IGlobalOptionsVtbl = IGlobalOptionsVtbl1 /* objidlbase.h:4069:3 */

// ****************************************************************************
//
// ISurrogate interface

type LPSURROGATE = uintptr /* objidlbase.h:4120:20 */
type ISurrogateVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	LoadDllServer  uintptr
	FreeSurrogate  uintptr
} /* objidlbase.h:247:9 */

type ISurrogateVtbl = ISurrogateVtbl1 /* objidlbase.h:4162:3 */

// ****************************************************************************
//
// IGlobalInterfaceTable interface

type LPGLOBALINTERFACETABLE = uintptr /* objidlbase.h:4210:31 */
type IGlobalInterfaceTableVtbl1 = struct {
	QueryInterface            uintptr
	AddRef                    uintptr
	Release                   uintptr
	RegisterInterfaceInGlobal uintptr
	RevokeInterfaceFromGlobal uintptr
	GetInterfaceFromGlobal    uintptr
} /* objidlbase.h:255:9 */

type IGlobalInterfaceTableVtbl = IGlobalInterfaceTableVtbl1 /* objidlbase.h:4268:3 */
type ISynchronizeVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Wait           uintptr
	Signal         uintptr
	Reset          uintptr
} /* objidlbase.h:263:9 */

type ISynchronizeVtbl = ISynchronizeVtbl1 /* objidlbase.h:4370:3 */
type ISynchronizeHandleVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetHandle      uintptr
} /* objidlbase.h:271:9 */

type ISynchronizeHandleVtbl = ISynchronizeHandleVtbl1 /* objidlbase.h:4456:3 */
type ISynchronizeEventVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetHandle      uintptr
	SetEventHandle uintptr
} /* objidlbase.h:279:9 */

type ISynchronizeEventVtbl = ISynchronizeEventVtbl1 /* objidlbase.h:4539:3 */
type ISynchronizeContainerVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	AddSynchronize uintptr
	WaitMultiple   uintptr
} /* objidlbase.h:287:9 */

type ISynchronizeContainerVtbl = ISynchronizeContainerVtbl1 /* objidlbase.h:4634:3 */
type ISynchronizeMutexVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Wait           uintptr
	Signal         uintptr
	Reset          uintptr
	ReleaseMutex   uintptr
} /* objidlbase.h:295:9 */

type ISynchronizeMutexVtbl = ISynchronizeMutexVtbl1 /* objidlbase.h:4727:3 */

// ****************************************************************************
//
// ICancelMethodCalls interface

type LPCANCELMETHODCALLS = uintptr /* objidlbase.h:4785:28 */
type ICancelMethodCallsVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Cancel         uintptr
	TestCancel     uintptr
} /* objidlbase.h:303:9 */

type ICancelMethodCallsVtbl = ICancelMethodCallsVtbl1 /* objidlbase.h:4827:3 */

// ****************************************************************************
//
// IAsyncManager interface

type DCOM_CALL_STATE = uint32 /* objidlbase.h:4879:3 */
type IAsyncManagerVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	CompleteCall   uintptr
	GetCallContext uintptr
	GetState       uintptr
} /* objidlbase.h:311:9 */

type IAsyncManagerVtbl = IAsyncManagerVtbl1 /* objidlbase.h:4931:3 */
type ICallFactoryVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	CreateCall     uintptr
} /* objidlbase.h:319:9 */

type ICallFactoryVtbl = ICallFactoryVtbl1 /* objidlbase.h:5023:3 */
type IRpcHelperVtbl1 = struct {
	QueryInterface         uintptr
	AddRef                 uintptr
	Release                uintptr
	GetDCOMProtocolVersion uintptr
	GetIIDFromOBJREF       uintptr
} /* objidlbase.h:327:9 */

type IRpcHelperVtbl = IRpcHelperVtbl1 /* objidlbase.h:5110:3 */
type IReleaseMarshalBuffersVtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	ReleaseMarshalBuffer uintptr
} /* objidlbase.h:335:9 */

type IReleaseMarshalBuffersVtbl = IReleaseMarshalBuffersVtbl1 /* objidlbase.h:5196:3 */
type IWaitMultipleVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	WaitMultiple   uintptr
	AddSynchronize uintptr
} /* objidlbase.h:343:9 */

type IWaitMultipleVtbl = IWaitMultipleVtbl1 /* objidlbase.h:5283:3 */

// ****************************************************************************
//
// IAddrTrackingControl interface

type LPADDRTRACKINGCONTROL = uintptr /* objidlbase.h:5331:30 */
type IAddrTrackingControlVtbl1 = struct {
	QueryInterface                uintptr
	AddRef                        uintptr
	Release                       uintptr
	EnableCOMDynamicAddrTracking  uintptr
	DisableCOMDynamicAddrTracking uintptr
} /* objidlbase.h:351:9 */

type IAddrTrackingControlVtbl = IAddrTrackingControlVtbl1 /* objidlbase.h:5371:3 */

// ****************************************************************************
//
// IAddrExclusionControl interface

type LPADDREXCLUSIONCONTROL = uintptr /* objidlbase.h:5419:31 */
type IAddrExclusionControlVtbl1 = struct {
	QueryInterface              uintptr
	AddRef                      uintptr
	Release                     uintptr
	GetCurrentAddrExclusionList uintptr
	UpdateAddrExclusionList     uintptr
} /* objidlbase.h:359:9 */

type IAddrExclusionControlVtbl = IAddrExclusionControlVtbl1 /* objidlbase.h:5463:3 */
type IPipeByteVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Pull           uintptr
	Push           uintptr
} /* objidlbase.h:367:9 */

type IPipeByteVtbl = IPipeByteVtbl1 /* objidlbase.h:5558:3 */
type IPipeLongVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Pull           uintptr
	Push           uintptr
} /* objidlbase.h:375:9 */

type IPipeLongVtbl = IPipeLongVtbl1 /* objidlbase.h:5653:3 */
type IPipeDoubleVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Pull           uintptr
	Push           uintptr
} /* objidlbase.h:383:9 */

type IPipeDoubleVtbl = IPipeDoubleVtbl1 /* objidlbase.h:5748:3 */

type APTTYPEQUALIFIER = uint32 /* objidlbase.h:6057:3 */

type APTTYPE = int32 /* objidlbase.h:6065:3 */

type THDTYPE = uint32 /* objidlbase.h:6072:3 */

type APARTMENTID = DWORD /* objidlbase.h:6074:15 */
type IComThreadingInfoVtbl1 = struct {
	QueryInterface            uintptr
	AddRef                    uintptr
	Release                   uintptr
	GetCurrentApartmentType   uintptr
	GetCurrentThreadType      uintptr
	GetCurrentLogicalThreadId uintptr
	SetCurrentLogicalThreadId uintptr
} /* objidlbase.h:407:9 */

type IComThreadingInfoVtbl = IComThreadingInfoVtbl1 /* objidlbase.h:6137:3 */
type IProcessInitControlVtbl1 = struct {
	QueryInterface          uintptr
	AddRef                  uintptr
	Release                 uintptr
	ResetInitializerTimeout uintptr
} /* objidlbase.h:415:9 */

type IProcessInitControlVtbl = IProcessInitControlVtbl1 /* objidlbase.h:6227:3 */
type IFastRundownVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
} /* objidlbase.h:423:9 */

type IFastRundownVtbl = IFastRundownVtbl1 /* objidlbase.h:6297:3 */

type CO_MARSHALING_CONTEXT_ATTRIBUTES = uint32 /* objidlbase.h:6331:3 */
type IMarshalingStreamVtbl1 = struct {
	QueryInterface                uintptr
	AddRef                        uintptr
	Release                       uintptr
	Read                          uintptr
	Write                         uintptr
	Seek                          uintptr
	SetSize                       uintptr
	CopyTo                        uintptr
	Commit                        uintptr
	Revert                        uintptr
	LockRegion                    uintptr
	UnlockRegion                  uintptr
	Stat                          uintptr
	Clone                         uintptr
	GetMarshalingContextAttribute uintptr
} /* objidlbase.h:431:9 */

type IMarshalingStreamVtbl = IMarshalingStreamVtbl1 /* objidlbase.h:6434:3 */

type STDMSHLFLAGS = uint32 /* combaseapi.h:219:3 */

type tagPROPVARIANT = struct {
	__0 struct {
		__0 struct {
			vt         VARTYPE
			wReserved1 PROPVAR_PAD1
			wReserved2 PROPVAR_PAD2
			wReserved3 PROPVAR_PAD3
			__8        struct {
				_    [0]uint64
				cVal CHAR
				_    [15]byte
			}
		}
	}
} /* combaseapi.h:308:9 */

type PROPVARIANT = tagPROPVARIANT /* combaseapi.h:308:31 */

type COWAIT_FLAGS = uint32 /* combaseapi.h:331:3 */

type LPFNGETCLASSOBJECT = uintptr /* combaseapi.h:358:17 */
type LPFNCANUNLOADNOW = uintptr   /* combaseapi.h:359:17 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

type COINIT = uint32 /* objbase.h:21:3 */

type STGFMT = DWORD /* objbase.h:57:15 */

//** Autogenerated by WIDL 1.6 from include/objidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type IMallocSpy1 = struct{ lpVtbl uintptr } /* objidl.h:277:9 */

//** Autogenerated by WIDL 1.6 from include/objidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type IMallocSpy = IMallocSpy1 /* objidl.h:277:30 */

type IBindCtx1 = struct{ lpVtbl uintptr } /* objidl.h:282:9 */

type IBindCtx = IBindCtx1 /* objidl.h:282:28 */

type IEnumMoniker1 = struct{ lpVtbl uintptr } /* objidl.h:287:9 */

type IEnumMoniker = IEnumMoniker1 /* objidl.h:287:32 */

type IRunnableObject1 = struct{ lpVtbl uintptr } /* objidl.h:292:9 */

type IRunnableObject = IRunnableObject1 /* objidl.h:292:35 */

type IRunningObjectTable1 = struct{ lpVtbl uintptr } /* objidl.h:297:9 */

type IRunningObjectTable = IRunningObjectTable1 /* objidl.h:297:39 */

type IPersist1 = struct{ lpVtbl uintptr } /* objidl.h:302:9 */

type IPersist = IPersist1 /* objidl.h:302:28 */

type IPersistStream1 = struct{ lpVtbl uintptr } /* objidl.h:307:9 */

type IPersistStream = IPersistStream1 /* objidl.h:307:34 */

type IMoniker1 = struct{ lpVtbl uintptr } /* objidl.h:312:9 */

type IMoniker = IMoniker1 /* objidl.h:312:28 */

type IROTData1 = struct{ lpVtbl uintptr } /* objidl.h:317:9 */

type IROTData = IROTData1 /* objidl.h:317:28 */

type IEnumSTATSTG1 = struct{ lpVtbl uintptr } /* objidl.h:322:9 */

type IEnumSTATSTG = IEnumSTATSTG1 /* objidl.h:322:32 */

type IStorage1 = struct{ lpVtbl uintptr } /* objidl.h:327:9 */

type IStorage = IStorage1 /* objidl.h:327:28 */

type IPersistFile1 = struct{ lpVtbl uintptr } /* objidl.h:332:9 */

type IPersistFile = IPersistFile1 /* objidl.h:332:32 */

type IPersistStorage1 = struct{ lpVtbl uintptr } /* objidl.h:337:9 */

type IPersistStorage = IPersistStorage1 /* objidl.h:337:35 */

type ILockBytes1 = struct{ lpVtbl uintptr } /* objidl.h:342:9 */

type ILockBytes = ILockBytes1 /* objidl.h:342:30 */

type IEnumFORMATETC1 = struct{ lpVtbl uintptr } /* objidl.h:347:9 */

type IEnumFORMATETC = IEnumFORMATETC1 /* objidl.h:347:34 */

type IEnumSTATDATA1 = struct{ lpVtbl uintptr } /* objidl.h:352:9 */

type IEnumSTATDATA = IEnumSTATDATA1 /* objidl.h:352:33 */

type IRootStorage1 = struct{ lpVtbl uintptr } /* objidl.h:357:9 */

type IRootStorage = IRootStorage1 /* objidl.h:357:32 */

type IAdviseSink1 = struct{ lpVtbl uintptr } /* objidl.h:362:9 */

type IAdviseSink = IAdviseSink1 /* objidl.h:362:31 */

type AsyncIAdviseSink1 = struct{ lpVtbl uintptr } /* objidl.h:367:9 */

type AsyncIAdviseSink = AsyncIAdviseSink1 /* objidl.h:367:36 */

type IAdviseSink21 = struct{ lpVtbl uintptr } /* objidl.h:372:9 */

type IAdviseSink2 = IAdviseSink21 /* objidl.h:372:32 */

type AsyncIAdviseSink21 = struct{ lpVtbl uintptr } /* objidl.h:377:9 */

type AsyncIAdviseSink2 = AsyncIAdviseSink21 /* objidl.h:377:37 */

type IDataObject1 = struct{ lpVtbl uintptr } /* objidl.h:382:9 */

type IDataObject = IDataObject1 /* objidl.h:382:31 */

type IDataAdviseHolder1 = struct{ lpVtbl uintptr } /* objidl.h:387:9 */

type IDataAdviseHolder = IDataAdviseHolder1 /* objidl.h:387:37 */

type IMessageFilter1 = struct{ lpVtbl uintptr } /* objidl.h:392:9 */

type IMessageFilter = IMessageFilter1 /* objidl.h:392:34 */

type IClassActivator1 = struct{ lpVtbl uintptr } /* objidl.h:397:9 */

type IClassActivator = IClassActivator1 /* objidl.h:397:35 */

type IFillLockBytes1 = struct{ lpVtbl uintptr } /* objidl.h:402:9 */

type IFillLockBytes = IFillLockBytes1 /* objidl.h:402:34 */

type IProgressNotify1 = struct{ lpVtbl uintptr } /* objidl.h:407:9 */

type IProgressNotify = IProgressNotify1 /* objidl.h:407:35 */

type ILayoutStorage1 = struct{ lpVtbl uintptr } /* objidl.h:412:9 */

type ILayoutStorage = ILayoutStorage1 /* objidl.h:412:34 */

type IBlockingLock1 = struct{ lpVtbl uintptr } /* objidl.h:417:9 */

type IBlockingLock = IBlockingLock1 /* objidl.h:417:33 */

type ITimeAndNoticeControl1 = struct{ lpVtbl uintptr } /* objidl.h:422:9 */

type ITimeAndNoticeControl = ITimeAndNoticeControl1 /* objidl.h:422:41 */

type IOplockStorage1 = struct{ lpVtbl uintptr } /* objidl.h:427:9 */

type IOplockStorage = IOplockStorage1 /* objidl.h:427:34 */

type IDirectWriterLock1 = struct{ lpVtbl uintptr } /* objidl.h:432:9 */

type IDirectWriterLock = IDirectWriterLock1 /* objidl.h:432:37 */

type IUrlMon1 = struct{ lpVtbl uintptr } /* objidl.h:437:9 */

type IUrlMon = IUrlMon1 /* objidl.h:437:27 */

type IForegroundTransfer1 = struct{ lpVtbl uintptr } /* objidl.h:442:9 */

type IForegroundTransfer = IForegroundTransfer1 /* objidl.h:442:39 */

type IThumbnailExtractor1 = struct{ lpVtbl uintptr } /* objidl.h:447:9 */

type IThumbnailExtractor = IThumbnailExtractor1 /* objidl.h:447:39 */

type IDummyHICONIncluder1 = struct{ lpVtbl uintptr } /* objidl.h:452:9 */

type IDummyHICONIncluder = IDummyHICONIncluder1 /* objidl.h:452:39 */

type IProcessLock1 = struct{ lpVtbl uintptr } /* objidl.h:457:9 */

type IProcessLock = IProcessLock1 /* objidl.h:457:32 */

type ISurrogateService1 = struct{ lpVtbl uintptr } /* objidl.h:462:9 */

type ISurrogateService = ISurrogateService1 /* objidl.h:462:37 */

type IInitializeSpy1 = struct{ lpVtbl uintptr } /* objidl.h:467:9 */

type IInitializeSpy = IInitializeSpy1 /* objidl.h:467:34 */

type IApartmentShutdown1 = struct{ lpVtbl uintptr } /* objidl.h:472:9 */

type IApartmentShutdown = IApartmentShutdown1 /* objidl.h:472:38 */
type tagRemHGLOBAL = struct {
	fNullHGlobal LONG
	cbData       ULONG
	data         [1]byte
	_            [3]byte
} /* wtypes.h:43:9 */

type RemHGLOBAL = tagRemHGLOBAL /* wtypes.h:47:3 */

type tagRemHMETAFILEPICT = struct {
	mm     LONG
	xExt   LONG
	yExt   LONG
	cbData ULONG
	data   [1]byte
	_      [3]byte
} /* wtypes.h:49:9 */

type RemHMETAFILEPICT = tagRemHMETAFILEPICT /* wtypes.h:55:3 */

type tagRemHENHMETAFILE = struct {
	cbData ULONG
	data   [1]byte
	_      [3]byte
} /* wtypes.h:57:9 */

type RemHENHMETAFILE = tagRemHENHMETAFILE /* wtypes.h:60:3 */
type tagRemHBITMAP = struct {
	cbData ULONG
	data   [1]byte
	_      [3]byte
} /* wtypes.h:61:9 */

type RemHBITMAP = tagRemHBITMAP /* wtypes.h:64:3 */

type tagRemHPALETTE = struct {
	cbData ULONG
	data   [1]byte
	_      [3]byte
} /* wtypes.h:66:9 */

type RemHPALETTE = tagRemHPALETTE /* wtypes.h:69:3 */

type tagRemBRUSH = struct {
	cbData ULONG
	data   [1]byte
	_      [3]byte
} /* wtypes.h:71:9 */

type RemHBRUSH = tagRemBRUSH /* wtypes.h:74:3 */

type DVASPECT = uint32 /* wtypes.h:187:3 */

type STGC = uint32 /* wtypes.h:195:3 */

type STGMOVE = uint32 /* wtypes.h:201:3 */

type STATFLAG = uint32  /* wtypes.h:207:3 */
type HCONTEXT = uintptr /* wtypes.h:208:14 */

type _userCLIPFORMAT = struct {
	fContext LONG
	_        [4]byte
	u        struct {
		_       [0]uint64
		dwValue DWORD
		_       [4]byte
	}
} /* wtypes.h:227:9 */

type userCLIPFORMAT = _userCLIPFORMAT /* wtypes.h:233:3 */

type wireCLIPFORMAT = uintptr /* wtypes.h:235:24 */
type CLIPFORMAT = WORD        /* wtypes.h:236:14 */

type _GDI_NONREMOTE = struct {
	fContext LONG
	_        [4]byte
	u        struct {
		_       [0]uint64
		hInproc LONG
		_       [4]byte
	}
} /* wtypes.h:238:9 */

type GDI_NONREMOTE = _GDI_NONREMOTE /* wtypes.h:244:3 */

type _userHGLOBAL = struct {
	fContext LONG
	_        [4]byte
	u        struct {
		_       [0]uint64
		hInproc LONG
		_       [4]byte
	}
} /* wtypes.h:246:9 */

type userHGLOBAL = _userHGLOBAL /* wtypes.h:253:3 */

type wireHGLOBAL = uintptr /* wtypes.h:255:21 */

type _userHMETAFILE = struct {
	fContext LONG
	_        [4]byte
	u        struct {
		_       [0]uint64
		hInproc LONG
		_       [4]byte
	}
} /* wtypes.h:257:9 */

type userHMETAFILE = _userHMETAFILE /* wtypes.h:264:3 */

type _remoteMETAFILEPICT = struct {
	mm   LONG
	xExt LONG
	yExt LONG
	_    [4]byte
	hMF  uintptr
} /* wtypes.h:266:9 */

type remoteMETAFILEPICT = _remoteMETAFILEPICT /* wtypes.h:271:3 */

type _userHMETAFILEPICT = struct {
	fContext LONG
	_        [4]byte
	u        struct {
		_       [0]uint64
		hInproc LONG
		_       [4]byte
	}
} /* wtypes.h:273:9 */

type userHMETAFILEPICT = _userHMETAFILEPICT /* wtypes.h:280:3 */

type _userHENHMETAFILE = struct {
	fContext LONG
	_        [4]byte
	u        struct {
		_       [0]uint64
		hInproc LONG
		_       [4]byte
	}
} /* wtypes.h:282:9 */

type userHENHMETAFILE = _userHENHMETAFILE /* wtypes.h:289:3 */

type _userBITMAP = struct {
	bmType       LONG
	bmWidth      LONG
	bmHeight     LONG
	bmWidthBytes LONG
	bmPlanes     WORD
	bmBitsPixel  WORD
	cbSize       ULONG
	pBuffer      [1]byte
	_            [3]byte
} /* wtypes.h:291:9 */

type userBITMAP = _userBITMAP /* wtypes.h:300:3 */

type _userHBITMAP = struct {
	fContext LONG
	_        [4]byte
	u        struct {
		_       [0]uint64
		hInproc LONG
		_       [4]byte
	}
} /* wtypes.h:302:9 */

type userHBITMAP = _userHBITMAP /* wtypes.h:309:3 */

type _userHPALETTE = struct {
	fContext LONG
	_        [4]byte
	u        struct {
		_       [0]uint64
		hInproc LONG
		_       [4]byte
	}
} /* wtypes.h:311:9 */

type userHPALETTE = _userHPALETTE /* wtypes.h:318:3 */

type _RemotableHandle = struct {
	fContext LONG
	u        struct{ hInproc LONG }
} /* wtypes.h:320:9 */

type RemotableHandle = _RemotableHandle /* wtypes.h:326:3 */

type wireHWND = uintptr     /* wtypes.h:328:25 */
type wireHMENU = uintptr    /* wtypes.h:329:25 */
type wireHACCEL = uintptr   /* wtypes.h:330:25 */
type wireHBRUSH = uintptr   /* wtypes.h:331:25 */
type wireHFONT = uintptr    /* wtypes.h:332:25 */
type wireHDC = uintptr      /* wtypes.h:333:25 */
type wireHICON = uintptr    /* wtypes.h:334:25 */
type wireHRGN = uintptr     /* wtypes.h:335:25 */
type wireHMONITOR = uintptr /* wtypes.h:336:25 */

type wireHBITMAP = uintptr       /* wtypes.h:401:21 */
type wireHPALETTE = uintptr      /* wtypes.h:402:22 */
type wireHENHMETAFILE = uintptr  /* wtypes.h:403:26 */
type wireHMETAFILE = uintptr     /* wtypes.h:404:23 */
type wireHMETAFILEPICT = uintptr /* wtypes.h:405:27 */

type HMETAFILEPICT = uintptr /* wtypes.h:416:14 */

type DATE = float64 /* wtypes.h:421:16 */

type tagCY = struct {
	_   [0]uint64
	__0 struct {
		Lo uint32
		Hi int32
	}
} /* wtypes.h:432:9 */

type CY = tagCY /* wtypes.h:438:3 */

type LPCY = uintptr /* wtypes.h:442:12 */

type tagDEC = struct {
	wReserved USHORT
	__2       struct {
		_   [0]uint16
		__0 struct {
			scale BYTE
			sign  BYTE
		}
	}
	Hi32 ULONG
	__8  struct {
		_   [0]uint64
		__0 struct {
			Lo32  ULONG
			Mid32 ULONG
		}
	}
} /* wtypes.h:453:9 */

type DECIMAL = tagDEC /* wtypes.h:470:3 */

type LPDECIMAL = uintptr /* wtypes.h:476:17 */

type wireBSTR = uintptr /* wtypes.h:478:27 */
type BSTR = uintptr     /* wtypes.h:479:17 */

type LPBSTR = uintptr /* wtypes.h:481:14 */

type VARIANT_BOOL = int16 /* wtypes.h:483:15 */

type tagBSTRBLOB = struct {
	cbSize ULONG
	_      [4]byte
	pData  uintptr
} /* wtypes.h:493:9 */

type BSTRBLOB = tagBSTRBLOB /* wtypes.h:496:3 */
type LPBSTRBLOB = uintptr   /* wtypes.h:497:28 */

type tagCLIPDATA = struct {
	cbSize    ULONG
	ulClipFmt LONG
	pClipData uintptr
} /* wtypes.h:503:9 */

type CLIPDATA = tagCLIPDATA /* wtypes.h:507:3 */

type VARTYPE = uint16 /* wtypes.h:511:24 */

type PROPID = ULONG /* wtypes.h:568:15 */

type _tagpropertykey = struct {
	fmtid GUID
	pid   DWORD
} /* wtypes.h:573:9 */

type PROPERTYKEY = _tagpropertykey /* wtypes.h:576:3 */

type tagCSPLATFORM = struct {
	dwPlatformId    DWORD
	dwVersionHi     DWORD
	dwVersionLo     DWORD
	dwProcessorArch DWORD
} /* wtypes.h:579:9 */

type CSPLATFORM = tagCSPLATFORM /* wtypes.h:584:3 */

type tagQUERYCONTEXT = struct {
	dwContext   DWORD
	Platform    CSPLATFORM
	Locale      LCID
	dwVersionHi DWORD
	dwVersionLo DWORD
} /* wtypes.h:586:9 */

type QUERYCONTEXT = tagQUERYCONTEXT /* wtypes.h:592:3 */

type TYSPEC = uint32 /* wtypes.h:602:3 */

type __WIDL_wtypes_generated_name_00000001 = struct {
	tyspec       DWORD
	_            [4]byte
	tagged_union struct {
		_     [0]uint64
		clsid CLSID
		_     [16]byte
	}
} /* wtypes.h:604:9 */

type uCLSSPEC = __WIDL_wtypes_generated_name_00000001 /* wtypes.h:621:3 */
// Begin additional prototypes for all interfaces

// End additional prototypes

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// ****************************************************************************
//
// IUnknown interface

// ****************************************************************************
//
// AsyncIUnknown interface

// ****************************************************************************
//
// IClassFactory interface

// Begin additional prototypes for all interfaces

// End additional prototypes

//** Autogenerated by WIDL 4.12.1 from include/wtypes.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// ****************************************************************************
//
// IMallocSpy interface

type LPMALLOCSPY = uintptr /* objidl.h:7612:20 */
type IMallocSpyVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	PreAlloc         uintptr
	PostAlloc        uintptr
	PreFree          uintptr
	PostFree         uintptr
	PreRealloc       uintptr
	PostRealloc      uintptr
	PreGetSize       uintptr
	PostGetSize      uintptr
	PreDidAlloc      uintptr
	PostDidAlloc     uintptr
	PreHeapMinimize  uintptr
	PostHeapMinimize uintptr
} /* objidl.h:277:9 */

type IMallocSpyVtbl = IMallocSpyVtbl1 /* objidl.h:7742:3 */

// ****************************************************************************
//
// IBindCtx interface

type LPBC = uintptr      /* objidl.h:7934:18 */
type LPBINDCTX = uintptr /* objidl.h:7935:18 */
type tagBIND_OPTS = struct {
	cbStruct            DWORD
	grfFlags            DWORD
	grfMode             DWORD
	dwTickCountDeadline DWORD
} /* objidl.h:7944:9 */

type BIND_OPTS = tagBIND_OPTS /* objidl.h:7949:3 */
type LPBIND_OPTS = uintptr    /* objidl.h:7950:29 */
type tagBIND_OPTS2 = struct {
	cbStruct            DWORD
	grfFlags            DWORD
	grfMode             DWORD
	dwTickCountDeadline DWORD
	dwTrackFlags        DWORD
	dwClassContext      DWORD
	locale              LCID
	_                   [4]byte
	pServerInfo         uintptr
} /* objidl.h:7960:9 */

type BIND_OPTS2 = tagBIND_OPTS2 /* objidl.h:7969:3 */
type LPBIND_OPTS2 = uintptr     /* objidl.h:7970:30 */
type tagBIND_OPTS3 = struct {
	cbStruct            DWORD
	grfFlags            DWORD
	grfMode             DWORD
	dwTickCountDeadline DWORD
	dwTrackFlags        DWORD
	dwClassContext      DWORD
	locale              LCID
	_                   [4]byte
	pServerInfo         uintptr
	hwnd                HWND
} /* objidl.h:7977:9 */

type BIND_OPTS3 = tagBIND_OPTS3 /* objidl.h:7987:3 */
type LPBIND_OPTS3 = uintptr     /* objidl.h:7988:30 */
type BIND_FLAGS = uint32        /* objidl.h:7993:3 */
type IBindCtxVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	RegisterObjectBound   uintptr
	RevokeObjectBound     uintptr
	ReleaseBoundObjects   uintptr
	SetBindOptions        uintptr
	GetBindOptions        uintptr
	GetRunningObjectTable uintptr
	RegisterObjectParam   uintptr
	GetObjectParam        uintptr
	EnumObjectParam       uintptr
	RevokeObjectParam     uintptr
} /* objidl.h:282:9 */

type IBindCtxVtbl = IBindCtxVtbl1 /* objidl.h:8094:3 */

// ****************************************************************************
//
// IEnumMoniker interface

type LPENUMMONIKER = uintptr /* objidl.h:8265:22 */
type IEnumMonikerVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Next           uintptr
	Skip           uintptr
	Reset          uintptr
	Clone          uintptr
} /* objidl.h:287:9 */

type IEnumMonikerVtbl = IEnumMonikerVtbl1 /* objidl.h:8324:3 */

// ****************************************************************************
//
// IRunnableObject interface

type LPRUNNABLEOBJECT = uintptr /* objidl.h:8423:25 */
type IRunnableObjectVtbl1 = struct {
	QueryInterface     uintptr
	AddRef             uintptr
	Release            uintptr
	GetRunningClass    uintptr
	Run                uintptr
	IsRunning          uintptr
	LockRunning        uintptr
	SetContainedObject uintptr
} /* objidl.h:292:9 */

type IRunnableObjectVtbl = IRunnableObjectVtbl1 /* objidl.h:8487:3 */

// ****************************************************************************
//
// IRunningObjectTable interface

type LPRUNNINGOBJECTTABLE = uintptr /* objidl.h:8589:29 */
type IRunningObjectTableVtbl1 = struct {
	QueryInterface      uintptr
	AddRef              uintptr
	Release             uintptr
	Register            uintptr
	Revoke              uintptr
	IsRunning           uintptr
	GetObjectA          uintptr
	NoteChangeTime      uintptr
	GetTimeOfLastChange uintptr
	EnumRunning         uintptr
} /* objidl.h:297:9 */

type IRunningObjectTableVtbl = IRunningObjectTableVtbl1 /* objidl.h:8678:3 */

// ****************************************************************************
//
// IPersist interface

type LPPERSIST = uintptr /* objidl.h:8808:18 */
type IPersistVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetClassID     uintptr
} /* objidl.h:302:9 */

type IPersistVtbl = IPersistVtbl1 /* objidl.h:8843:3 */

// ****************************************************************************
//
// IPersistStream interface

type LPPERSISTSTREAM = uintptr /* objidl.h:8893:24 */
type IPersistStreamVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetClassID     uintptr
	IsDirty        uintptr
	Load           uintptr
	Save           uintptr
	GetSizeMax     uintptr
} /* objidl.h:307:9 */

type IPersistStreamVtbl = IPersistStreamVtbl1 /* objidl.h:8955:3 */

// ****************************************************************************
//
// IMoniker interface

type LPMONIKER = uintptr /* objidl.h:9047:18 */
type MKSYS = uint32      /* objidl.h:9059:3 */
type MKRREDUCE = uint32  /* objidl.h:9065:3 */
type IMonikerVtbl1 = struct {
	QueryInterface      uintptr
	AddRef              uintptr
	Release             uintptr
	GetClassID          uintptr
	IsDirty             uintptr
	Load                uintptr
	Save                uintptr
	GetSizeMax          uintptr
	BindToObject        uintptr
	BindToStorage       uintptr
	Reduce              uintptr
	ComposeWith         uintptr
	Enum                uintptr
	IsEqual             uintptr
	Hash                uintptr
	IsRunning           uintptr
	GetTimeOfLastChange uintptr
	Inverse             uintptr
	CommonPrefixWith    uintptr
	RelativePathTo      uintptr
	GetDisplayName      uintptr
	ParseDisplayName    uintptr
	IsSystemMoniker     uintptr
} /* objidl.h:312:9 */

type IMonikerVtbl = IMonikerVtbl1 /* objidl.h:9268:3 */
type IROTDataVtbl1 = struct {
	QueryInterface    uintptr
	AddRef            uintptr
	Release           uintptr
	GetComparisonData uintptr
} /* objidl.h:317:9 */

type IROTDataVtbl = IROTDataVtbl1 /* objidl.h:9598:3 */

// ****************************************************************************
//
// IEnumSTATSTG interface

type LPENUMSTATSTG = uintptr /* objidl.h:9652:22 */
type IEnumSTATSTGVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Next           uintptr
	Skip           uintptr
	Reset          uintptr
	Clone          uintptr
} /* objidl.h:322:9 */

type IEnumSTATSTGVtbl = IEnumSTATSTGVtbl1 /* objidl.h:9711:3 */

// ****************************************************************************
//
// IStorage interface

type LPSTORAGE = uintptr /* objidl.h:9808:18 */
type tagRemSNB = struct {
	ulCntStr  ULONG
	ulCntChar ULONG
	rgString  [1]OLECHAR
	_         [2]byte
} /* objidl.h:9809:9 */

type RemSNB = tagRemSNB /* objidl.h:9813:3 */
type wireSNB = uintptr  /* objidl.h:9814:16 */
type SNB = uintptr      /* objidl.h:9815:18 */
type IStorageVtbl1 = struct {
	QueryInterface  uintptr
	AddRef          uintptr
	Release         uintptr
	CreateStream    uintptr
	OpenStream      uintptr
	CreateStorage   uintptr
	OpenStorage     uintptr
	CopyTo          uintptr
	MoveElementTo   uintptr
	Commit          uintptr
	Revert          uintptr
	EnumElements    uintptr
	DestroyElement  uintptr
	RenameElement   uintptr
	SetElementTimes uintptr
	SetClass        uintptr
	SetStateBits    uintptr
	Stat            uintptr
} /* objidl.h:327:9 */

type IStorageVtbl = IStorageVtbl1 /* objidl.h:10011:3 */

// ****************************************************************************
//
// IPersistFile interface

type LPPERSISTFILE = uintptr /* objidl.h:10304:22 */
type IPersistFileVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetClassID     uintptr
	IsDirty        uintptr
	Load           uintptr
	Save           uintptr
	SaveCompleted  uintptr
	GetCurFile     uintptr
} /* objidl.h:332:9 */

type IPersistFileVtbl = IPersistFileVtbl1 /* objidl.h:10375:3 */

// ****************************************************************************
//
// IPersistStorage interface

type LPPERSISTSTORAGE = uintptr /* objidl.h:10480:25 */
type IPersistStorageVtbl1 = struct {
	QueryInterface  uintptr
	AddRef          uintptr
	Release         uintptr
	GetClassID      uintptr
	IsDirty         uintptr
	InitNew         uintptr
	Load            uintptr
	Save            uintptr
	SaveCompleted   uintptr
	HandsOffStorage uintptr
} /* objidl.h:337:9 */

type IPersistStorageVtbl = IPersistStorageVtbl1 /* objidl.h:10555:3 */

// ****************************************************************************
//
// ILockBytes interface

type LPLOCKBYTES = uintptr /* objidl.h:10672:20 */
type ILockBytesVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	ReadAt         uintptr
	WriteAt        uintptr
	Flush          uintptr
	SetSize        uintptr
	LockRegion     uintptr
	UnlockRegion   uintptr
	Stat           uintptr
} /* objidl.h:342:9 */

type ILockBytesVtbl = ILockBytesVtbl1 /* objidl.h:10770:3 */

// ****************************************************************************
//
// IEnumFORMATETC interface

type LPENUMFORMATETC = uintptr /* objidl.h:10926:24 */
type tagDVTARGETDEVICE = struct {
	tdSize             DWORD
	tdDriverNameOffset WORD
	tdDeviceNameOffset WORD
	tdPortNameOffset   WORD
	tdExtDevmodeOffset WORD
	tdData             [1]BYTE
	_                  [3]byte
} /* objidl.h:10927:9 */

type DVTARGETDEVICE = tagDVTARGETDEVICE /* objidl.h:10934:3 */
type LPCLIPFORMAT = uintptr             /* objidl.h:10935:20 */
type tagFORMATETC = struct {
	cfFormat CLIPFORMAT
	_        [6]byte
	ptd      uintptr
	dwAspect DWORD
	lindex   LONG
	tymed    DWORD
	_        [4]byte
} /* objidl.h:10936:9 */

type FORMATETC = tagFORMATETC /* objidl.h:10942:3 */
type LPFORMATETC = uintptr    /* objidl.h:10943:29 */
type IEnumFORMATETCVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Next           uintptr
	Skip           uintptr
	Reset          uintptr
	Clone          uintptr
} /* objidl.h:347:9 */

type IEnumFORMATETCVtbl = IEnumFORMATETCVtbl1 /* objidl.h:11002:3 */

// ****************************************************************************
//
// IEnumSTATDATA interface

type LPENUMSTATDATA = uintptr /* objidl.h:11099:23 */
type ADVF = uint32            /* objidl.h:11108:3 */
type tagSTATDATA = struct {
	formatetc    FORMATETC
	advf         DWORD
	_            [4]byte
	pAdvSink     uintptr
	dwConnection DWORD
	_            [4]byte
} /* objidl.h:11109:9 */

type STATDATA = tagSTATDATA /* objidl.h:11114:3 */
type LPSTATDATA = uintptr   /* objidl.h:11115:18 */
type IEnumSTATDATAVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Next           uintptr
	Skip           uintptr
	Reset          uintptr
	Clone          uintptr
} /* objidl.h:352:9 */

type IEnumSTATDATAVtbl = IEnumSTATDATAVtbl1 /* objidl.h:11174:3 */

// ****************************************************************************
//
// IRootStorage interface

type LPROOTSTORAGE = uintptr /* objidl.h:11271:22 */
type IRootStorageVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	SwitchToFile   uintptr
} /* objidl.h:357:9 */

type IRootStorageVtbl = IRootStorageVtbl1 /* objidl.h:11306:3 */

// ****************************************************************************
//
// IAdviseSink interface

type LPADVISESINK = uintptr /* objidl.h:11356:21 */
type TYMED = uint32         /* objidl.h:11366:3 */
type tagRemSTGMEDIUM = struct {
	tymed          DWORD
	dwHandleType   DWORD
	pData          ULONG
	pUnkForRelease ULONG
	cbData         ULONG
	data           [1]byte
	_              [3]byte
} /* objidl.h:11367:9 */

type RemSTGMEDIUM = tagRemSTGMEDIUM /* objidl.h:11374:3 */
type tagSTGMEDIUM = struct {
	tymed          DWORD
	_              [4]byte
	__8            struct{ hBitmap HBITMAP }
	pUnkForRelease uintptr
} /* objidl.h:11390:9 */

type uSTGMEDIUM = tagSTGMEDIUM /* objidl.h:11402:3 */
type _GDI_OBJECT = struct {
	ObjectType DWORD
	_          [4]byte
	u          struct{ hBitmap wireHBITMAP }
} /* objidl.h:11404:9 */

type GDI_OBJECT = _GDI_OBJECT /* objidl.h:11411:3 */
type _userSTGMEDIUM = struct {
	__0 struct {
		tymed DWORD
		_     [4]byte
		u     struct{ hMetaFilePict wireHMETAFILEPICT }
	}
	pUnkForRelease uintptr
} /* objidl.h:11412:9 */

type _STGMEDIUM_UNION = struct {
	tymed DWORD
	_     [4]byte
	u     struct{ hMetaFilePict wireHMETAFILEPICT }
} /* objidl.h:11412:9 */

type userSTGMEDIUM = _userSTGMEDIUM /* objidl.h:11426:3 */
type wireSTGMEDIUM = uintptr        /* objidl.h:11427:23 */
type STGMEDIUM = uSTGMEDIUM         /* objidl.h:11428:20 */
type wireASYNC_STGMEDIUM = uintptr  /* objidl.h:11429:23 */
type ASYNC_STGMEDIUM = STGMEDIUM    /* objidl.h:11430:19 */
type LPSTGMEDIUM = uintptr          /* objidl.h:11431:19 */
type _userFLAG_STGMEDIUM = struct {
	ContextFlags   LONG
	fPassOwnership LONG
	Stgmed         userSTGMEDIUM
} /* objidl.h:11432:9 */

type userFLAG_STGMEDIUM = _userFLAG_STGMEDIUM /* objidl.h:11436:3 */
type wireFLAG_STGMEDIUM = uintptr             /* objidl.h:11437:28 */
type _FLAG_STGMEDIUM = struct {
	ContextFlags   LONG
	fPassOwnership LONG
	Stgmed         STGMEDIUM
} /* objidl.h:11438:9 */

type FLAG_STGMEDIUM = _FLAG_STGMEDIUM /* objidl.h:11442:3 */
type IAdviseSinkVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	OnDataChange   uintptr
	OnViewChange   uintptr
	OnRename       uintptr
	OnSave         uintptr
	OnClose        uintptr
} /* objidl.h:362:9 */

type IAdviseSinkVtbl = IAdviseSinkVtbl1 /* objidl.h:11507:3 */
type AsyncIAdviseSinkVtbl1 = struct {
	QueryInterface      uintptr
	AddRef              uintptr
	Release             uintptr
	Begin_OnDataChange  uintptr
	Finish_OnDataChange uintptr
	Begin_OnViewChange  uintptr
	Finish_OnViewChange uintptr
	Begin_OnRename      uintptr
	Finish_OnRename     uintptr
	Begin_OnSave        uintptr
	Finish_OnSave       uintptr
	Begin_OnClose       uintptr
	Finish_OnClose      uintptr
} /* objidl.h:367:9 */

type AsyncIAdviseSinkVtbl = AsyncIAdviseSinkVtbl1 /* objidl.h:11729:3 */

// ****************************************************************************
//
// IAdviseSink2 interface

type LPADVISESINK2 = uintptr /* objidl.h:11944:22 */
type IAdviseSink2Vtbl1 = struct {
	QueryInterface  uintptr
	AddRef          uintptr
	Release         uintptr
	OnDataChange    uintptr
	OnViewChange    uintptr
	OnRename        uintptr
	OnSave          uintptr
	OnClose         uintptr
	OnLinkSrcChange uintptr
} /* objidl.h:372:9 */

type IAdviseSink2Vtbl = IAdviseSink2Vtbl1 /* objidl.h:12000:3 */
type AsyncIAdviseSink2Vtbl1 = struct {
	QueryInterface         uintptr
	AddRef                 uintptr
	Release                uintptr
	Begin_OnDataChange     uintptr
	Finish_OnDataChange    uintptr
	Begin_OnViewChange     uintptr
	Finish_OnViewChange    uintptr
	Begin_OnRename         uintptr
	Finish_OnRename        uintptr
	Begin_OnSave           uintptr
	Finish_OnSave          uintptr
	Begin_OnClose          uintptr
	Finish_OnClose         uintptr
	Begin_OnLinkSrcChange  uintptr
	Finish_OnLinkSrcChange uintptr
} /* objidl.h:377:9 */

type AsyncIAdviseSink2Vtbl = AsyncIAdviseSink2Vtbl1 /* objidl.h:12154:3 */

// ****************************************************************************
//
// IDataObject interface

type LPDATAOBJECT = uintptr /* objidl.h:12271:21 */
type DATADIR = uint32       /* objidl.h:12275:3 */
type IDataObjectVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetData               uintptr
	GetDataHere           uintptr
	QueryGetData          uintptr
	GetCanonicalFormatEtc uintptr
	SetData               uintptr
	EnumFormatEtc         uintptr
	DAdvise               uintptr
	DUnadvise             uintptr
	EnumDAdvise           uintptr
} /* objidl.h:382:9 */

type IDataObjectVtbl = IDataObjectVtbl1 /* objidl.h:12384:3 */

// ****************************************************************************
//
// IDataAdviseHolder interface

type LPDATAADVISEHOLDER = uintptr /* objidl.h:12567:27 */
type IDataAdviseHolderVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	Advise           uintptr
	Unadvise         uintptr
	EnumAdvise       uintptr
	SendOnDataChange uintptr
} /* objidl.h:387:9 */

type IDataAdviseHolderVtbl = IDataAdviseHolderVtbl1 /* objidl.h:12635:3 */

// ****************************************************************************
//
// IMessageFilter interface

type LPMESSAGEFILTER = uintptr /* objidl.h:12727:24 */
type CALLTYPE = uint32         /* objidl.h:12734:3 */
type SERVERCALL = uint32       /* objidl.h:12739:3 */
type PENDINGTYPE = uint32      /* objidl.h:12743:3 */
type PENDINGMSG = uint32       /* objidl.h:12748:3 */
type tagINTERFACEINFO = struct {
	pUnk    uintptr
	iid     IID
	wMethod WORD
	_       [6]byte
} /* objidl.h:12749:9 */

type INTERFACEINFO = tagINTERFACEINFO /* objidl.h:12753:3 */
type LPINTERFACEINFO = uintptr        /* objidl.h:12754:33 */
type IMessageFilterVtbl1 = struct {
	QueryInterface     uintptr
	AddRef             uintptr
	Release            uintptr
	HandleInComingCall uintptr
	RetryRejectedCall  uintptr
	MessagePending     uintptr
} /* objidl.h:392:9 */

type IMessageFilterVtbl = IMessageFilterVtbl1 /* objidl.h:12817:3 */
type IClassActivatorVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetClassObject uintptr
} /* objidl.h:397:9 */

type IClassActivatorVtbl = IClassActivatorVtbl1 /* objidl.h:12957:3 */
type IFillLockBytesVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	FillAppend     uintptr
	FillAt         uintptr
	SetFillSize    uintptr
	Terminate      uintptr
} /* objidl.h:402:9 */

type IFillLockBytesVtbl = IFillLockBytesVtbl1 /* objidl.h:13078:3 */
type IProgressNotifyVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	OnProgress     uintptr
} /* objidl.h:407:9 */

type IProgressNotifyVtbl = IProgressNotifyVtbl1 /* objidl.h:13233:3 */

// ****************************************************************************
//
// ILayoutStorage interface

type tagStorageLayout = struct {
	LayoutType      DWORD
	_               [4]byte
	pwcsElementName uintptr
	cOffset         LARGE_INTEGER
	cBytes          LARGE_INTEGER
} /* objidl.h:13288:9 */

// ****************************************************************************
//
// ILayoutStorage interface

type StorageLayout = tagStorageLayout /* objidl.h:13293:3 */
type ILayoutStorageVtbl1 = struct {
	QueryInterface              uintptr
	AddRef                      uintptr
	Release                     uintptr
	LayoutScript                uintptr
	BeginMonitor                uintptr
	EndMonitor                  uintptr
	ReLayoutDocfile             uintptr
	ReLayoutDocfileOnILockBytes uintptr
} /* objidl.h:412:9 */

type ILayoutStorageVtbl = ILayoutStorageVtbl1 /* objidl.h:13358:3 */
type IBlockingLockVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Lock           uintptr
	Unlock         uintptr
} /* objidl.h:417:9 */

type IBlockingLockVtbl = IBlockingLockVtbl1 /* objidl.h:13498:3 */
type ITimeAndNoticeControlVtbl1 = struct {
	QueryInterface  uintptr
	AddRef          uintptr
	Release         uintptr
	SuppressChanges uintptr
} /* objidl.h:422:9 */

type ITimeAndNoticeControlVtbl = ITimeAndNoticeControlVtbl1 /* objidl.h:13595:3 */
type IOplockStorageVtbl1 = struct {
	QueryInterface  uintptr
	AddRef          uintptr
	Release         uintptr
	CreateStorageEx uintptr
	OpenStorageEx   uintptr
} /* objidl.h:427:9 */

type IOplockStorageVtbl = IOplockStorageVtbl1 /* objidl.h:13707:3 */
type IDirectWriterLockVtbl1 = struct {
	QueryInterface     uintptr
	AddRef             uintptr
	Release            uintptr
	WaitForWriteAccess uintptr
	ReleaseWriteAccess uintptr
	HaveWriteAccess    uintptr
} /* objidl.h:432:9 */

type IDirectWriterLockVtbl = IDirectWriterLockVtbl1 /* objidl.h:13827:3 */
type IUrlMonVtbl1 = struct {
	QueryInterface    uintptr
	AddRef            uintptr
	Release           uintptr
	AsyncGetClassBits uintptr
} /* objidl.h:437:9 */

type IUrlMonVtbl = IUrlMonVtbl1 /* objidl.h:13953:3 */
type IForegroundTransferVtbl1 = struct {
	QueryInterface          uintptr
	AddRef                  uintptr
	Release                 uintptr
	AllowForegroundTransfer uintptr
} /* objidl.h:442:9 */

type IForegroundTransferVtbl = IForegroundTransferVtbl1 /* objidl.h:14046:3 */
type IThumbnailExtractorVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	ExtractThumbnail uintptr
	OnFileUpdated    uintptr
} /* objidl.h:447:9 */

type IThumbnailExtractorVtbl = IThumbnailExtractorVtbl1 /* objidl.h:14147:3 */
type IDummyHICONIncluderVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Dummy          uintptr
} /* objidl.h:452:9 */

type IDummyHICONIncluderVtbl = IDummyHICONIncluderVtbl1 /* objidl.h:14250:3 */

type ApplicationType = uint32 /* objidl.h:14298:3 */
type ShutdownType = uint32    /* objidl.h:14302:3 */
type IProcessLockVtbl1 = struct {
	QueryInterface      uintptr
	AddRef              uintptr
	Release             uintptr
	AddRefOnProcess     uintptr
	ReleaseRefOnProcess uintptr
} /* objidl.h:457:9 */

type IProcessLockVtbl = IProcessLockVtbl1 /* objidl.h:14348:3 */
type ISurrogateServiceVtbl1 = struct {
	QueryInterface    uintptr
	AddRef            uintptr
	Release           uintptr
	Init              uintptr
	ApplicationLaunch uintptr
	ApplicationFree   uintptr
	CatalogRefresh    uintptr
	ProcessShutdown   uintptr
} /* objidl.h:462:9 */

type ISurrogateServiceVtbl = ISurrogateServiceVtbl1 /* objidl.h:14476:3 */

// ****************************************************************************
//
// IInitializeSpy interface

type LPINITIALIZESPY = uintptr /* objidl.h:14577:24 */
type IInitializeSpyVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	PreInitialize    uintptr
	PostInitialize   uintptr
	PreUninitialize  uintptr
	PostUninitialize uintptr
} /* objidl.h:467:9 */

type IInitializeSpyVtbl = IInitializeSpyVtbl1 /* objidl.h:14639:3 */
type IApartmentShutdownVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	OnUninitialize uintptr
} /* objidl.h:472:9 */

type IApartmentShutdownVtbl = IApartmentShutdownVtbl1 /* objidl.h:14764:3 */

type COMSD = uint32 /* objbase.h:92:3 */

type tagSTGOPTIONS = struct {
	usVersion        USHORT
	reserved         USHORT
	ulSectorSize     ULONG
	pwcsTemplateFile uintptr
} /* objbase.h:130:9 */

type STGOPTIONS = tagSTGOPTIONS /* objbase.h:137:3 */

//** Autogenerated by WIDL 4.12.1 from include/urlmon.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type IPersistMoniker1 = struct{ lpVtbl uintptr } /* urlmon.h:23:9 */

//** Autogenerated by WIDL 4.12.1 from include/urlmon.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type IPersistMoniker = IPersistMoniker1 /* urlmon.h:23:35 */

type IMonikerProp1 = struct{ lpVtbl uintptr } /* urlmon.h:31:9 */

type IMonikerProp = IMonikerProp1 /* urlmon.h:31:32 */

type IBindProtocol1 = struct{ lpVtbl uintptr } /* urlmon.h:39:9 */

type IBindProtocol = IBindProtocol1 /* urlmon.h:39:33 */

type IBinding1 = struct{ lpVtbl uintptr } /* urlmon.h:47:9 */

type IBinding = IBinding1 /* urlmon.h:47:28 */

type IBindStatusCallback1 = struct{ lpVtbl uintptr } /* urlmon.h:55:9 */

type IBindStatusCallback = IBindStatusCallback1 /* urlmon.h:55:39 */

type IBindStatusCallbackEx1 = struct{ lpVtbl uintptr } /* urlmon.h:63:9 */

type IBindStatusCallbackEx = IBindStatusCallbackEx1 /* urlmon.h:63:41 */

type IAuthenticate1 = struct{ lpVtbl uintptr } /* urlmon.h:71:9 */

type IAuthenticate = IAuthenticate1 /* urlmon.h:71:33 */

type IAuthenticateEx1 = struct{ lpVtbl uintptr } /* urlmon.h:79:9 */

type IAuthenticateEx = IAuthenticateEx1 /* urlmon.h:79:35 */

type IHttpNegotiate1 = struct{ lpVtbl uintptr } /* urlmon.h:87:9 */

type IHttpNegotiate = IHttpNegotiate1 /* urlmon.h:87:34 */

type IHttpNegotiate21 = struct{ lpVtbl uintptr } /* urlmon.h:95:9 */

type IHttpNegotiate2 = IHttpNegotiate21 /* urlmon.h:95:35 */

type IHttpNegotiate31 = struct{ lpVtbl uintptr } /* urlmon.h:103:9 */

type IHttpNegotiate3 = IHttpNegotiate31 /* urlmon.h:103:35 */

type IWinInetFileStream1 = struct{ lpVtbl uintptr } /* urlmon.h:111:9 */

type IWinInetFileStream = IWinInetFileStream1 /* urlmon.h:111:38 */

type IWindowForBindingUI1 = struct{ lpVtbl uintptr } /* urlmon.h:119:9 */

type IWindowForBindingUI = IWindowForBindingUI1 /* urlmon.h:119:39 */

type ICodeInstall1 = struct{ lpVtbl uintptr } /* urlmon.h:127:9 */

type ICodeInstall = ICodeInstall1 /* urlmon.h:127:32 */

type IWinInetInfo1 = struct{ lpVtbl uintptr } /* urlmon.h:167:9 */

type IWinInetInfo = IWinInetInfo1 /* urlmon.h:167:32 */

type IHttpSecurity1 = struct{ lpVtbl uintptr } /* urlmon.h:175:9 */

type IHttpSecurity = IHttpSecurity1 /* urlmon.h:175:33 */

type IWinInetHttpInfo1 = struct{ lpVtbl uintptr } /* urlmon.h:183:9 */

type IWinInetHttpInfo = IWinInetHttpInfo1 /* urlmon.h:183:36 */

type IWinInetHttpTimeouts1 = struct{ lpVtbl uintptr } /* urlmon.h:191:9 */

type IWinInetHttpTimeouts = IWinInetHttpTimeouts1 /* urlmon.h:191:40 */

type IBindHost1 = struct{ lpVtbl uintptr } /* urlmon.h:215:9 */

type IBindHost = IBindHost1 /* urlmon.h:215:29 */

type IInternet1 = struct{ lpVtbl uintptr } /* urlmon.h:223:9 */

type IInternet = IInternet1 /* urlmon.h:223:29 */

type IInternetBindInfo1 = struct{ lpVtbl uintptr } /* urlmon.h:231:9 */

type IInternetBindInfo = IInternetBindInfo1 /* urlmon.h:231:37 */

type IInternetBindInfoEx1 = struct{ lpVtbl uintptr } /* urlmon.h:239:9 */

type IInternetBindInfoEx = IInternetBindInfoEx1 /* urlmon.h:239:39 */

type IInternetProtocolRoot1 = struct{ lpVtbl uintptr } /* urlmon.h:247:9 */

type IInternetProtocolRoot = IInternetProtocolRoot1 /* urlmon.h:247:41 */

type IInternetProtocol1 = struct{ lpVtbl uintptr } /* urlmon.h:255:9 */

type IInternetProtocol = IInternetProtocol1 /* urlmon.h:255:37 */

type IInternetProtocolSink1 = struct{ lpVtbl uintptr } /* urlmon.h:271:9 */

type IInternetProtocolSink = IInternetProtocolSink1 /* urlmon.h:271:41 */

type IInternetProtocolSinkStackable1 = struct{ lpVtbl uintptr } /* urlmon.h:279:9 */

type IInternetProtocolSinkStackable = IInternetProtocolSinkStackable1 /* urlmon.h:279:50 */

type IInternetSession1 = struct{ lpVtbl uintptr } /* urlmon.h:287:9 */

type IInternetSession = IInternetSession1 /* urlmon.h:287:36 */

type IInternetThreadSwitch1 = struct{ lpVtbl uintptr } /* urlmon.h:295:9 */

type IInternetThreadSwitch = IInternetThreadSwitch1 /* urlmon.h:295:41 */

type IInternetPriority1 = struct{ lpVtbl uintptr } /* urlmon.h:303:9 */

type IInternetPriority = IInternetPriority1 /* urlmon.h:303:37 */

type IInternetProtocolInfo1 = struct{ lpVtbl uintptr } /* urlmon.h:311:9 */

type IInternetProtocolInfo = IInternetProtocolInfo1 /* urlmon.h:311:41 */

type IInternetSecurityMgrSite1 = struct{ lpVtbl uintptr } /* urlmon.h:319:9 */

type IInternetSecurityMgrSite = IInternetSecurityMgrSite1 /* urlmon.h:319:44 */

type IInternetSecurityManager1 = struct{ lpVtbl uintptr } /* urlmon.h:327:9 */

type IInternetSecurityManager = IInternetSecurityManager1 /* urlmon.h:327:44 */

type IInternetHostSecurityManager1 = struct{ lpVtbl uintptr } /* urlmon.h:359:9 */

type IInternetHostSecurityManager = IInternetHostSecurityManager1 /* urlmon.h:359:48 */

type IInternetZoneManager1 = struct{ lpVtbl uintptr } /* urlmon.h:367:9 */

type IInternetZoneManager = IInternetZoneManager1 /* urlmon.h:367:40 */

type ISoftDistExt1 = struct{ lpVtbl uintptr } /* urlmon.h:391:9 */

type ISoftDistExt = ISoftDistExt1 /* urlmon.h:391:32 */

type ICatalogFileInfo1 = struct{ lpVtbl uintptr } /* urlmon.h:399:9 */

type ICatalogFileInfo = ICatalogFileInfo1 /* urlmon.h:399:36 */

type IDataFilter1 = struct{ lpVtbl uintptr } /* urlmon.h:407:9 */

type IDataFilter = IDataFilter1 /* urlmon.h:407:31 */

type IEncodingFilterFactory1 = struct{ lpVtbl uintptr } /* urlmon.h:415:9 */

type IEncodingFilterFactory = IEncodingFilterFactory1 /* urlmon.h:415:42 */

type IWrappedProtocol1 = struct{ lpVtbl uintptr } /* urlmon.h:423:9 */

type IWrappedProtocol = IWrappedProtocol1 /* urlmon.h:423:36 */

type IGetBindHandle1 = struct{ lpVtbl uintptr } /* urlmon.h:431:9 */

type IGetBindHandle = IGetBindHandle1 /* urlmon.h:431:34 */

type IBindCallbackRedirect1 = struct{ lpVtbl uintptr } /* urlmon.h:439:9 */

type IBindCallbackRedirect = IBindCallbackRedirect1 /* urlmon.h:439:41 */

// Headers for imported files

//** Autogenerated by WIDL 1.6 from include/objidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

//** Autogenerated by WIDL 4.12.1 from include/oleidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type IOleAdviseHolder1 = struct{ lpVtbl uintptr } /* oleidl.h:23:9 */

// Headers for imported files

//** Autogenerated by WIDL 1.6 from include/objidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

//** Autogenerated by WIDL 4.12.1 from include/oleidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type IOleAdviseHolder = IOleAdviseHolder1 /* oleidl.h:23:36 */

type IOleCache1 = struct{ lpVtbl uintptr } /* oleidl.h:31:9 */

type IOleCache = IOleCache1 /* oleidl.h:31:29 */

type IOleCache21 = struct{ lpVtbl uintptr } /* oleidl.h:39:9 */

type IOleCache2 = IOleCache21 /* oleidl.h:39:30 */

type IOleCacheControl1 = struct{ lpVtbl uintptr } /* oleidl.h:47:9 */

type IOleCacheControl = IOleCacheControl1 /* oleidl.h:47:36 */

type IParseDisplayName1 = struct{ lpVtbl uintptr } /* oleidl.h:55:9 */

type IParseDisplayName = IParseDisplayName1 /* oleidl.h:55:37 */

type IOleContainer1 = struct{ lpVtbl uintptr } /* oleidl.h:63:9 */

type IOleContainer = IOleContainer1 /* oleidl.h:63:33 */

type IOleClientSite1 = struct{ lpVtbl uintptr } /* oleidl.h:71:9 */

type IOleClientSite = IOleClientSite1 /* oleidl.h:71:34 */

type IOleObject1 = struct{ lpVtbl uintptr } /* oleidl.h:79:9 */

type IOleObject = IOleObject1 /* oleidl.h:79:30 */

type IOleWindow1 = struct{ lpVtbl uintptr } /* oleidl.h:87:9 */

type IOleWindow = IOleWindow1 /* oleidl.h:87:30 */

type IOleLink1 = struct{ lpVtbl uintptr } /* oleidl.h:95:9 */

type IOleLink = IOleLink1 /* oleidl.h:95:28 */

type IOleItemContainer1 = struct{ lpVtbl uintptr } /* oleidl.h:103:9 */

type IOleItemContainer = IOleItemContainer1 /* oleidl.h:103:37 */

type IOleInPlaceUIWindow1 = struct{ lpVtbl uintptr } /* oleidl.h:111:9 */

type IOleInPlaceUIWindow = IOleInPlaceUIWindow1 /* oleidl.h:111:39 */

type IOleInPlaceActiveObject1 = struct{ lpVtbl uintptr } /* oleidl.h:119:9 */

type IOleInPlaceActiveObject = IOleInPlaceActiveObject1 /* oleidl.h:119:43 */

type IOleInPlaceFrame1 = struct{ lpVtbl uintptr } /* oleidl.h:127:9 */

type IOleInPlaceFrame = IOleInPlaceFrame1 /* oleidl.h:127:36 */

type IOleInPlaceObject1 = struct{ lpVtbl uintptr } /* oleidl.h:135:9 */

type IOleInPlaceObject = IOleInPlaceObject1 /* oleidl.h:135:37 */

type IOleInPlaceSite1 = struct{ lpVtbl uintptr } /* oleidl.h:143:9 */

type IOleInPlaceSite = IOleInPlaceSite1 /* oleidl.h:143:35 */

type IContinue1 = struct{ lpVtbl uintptr } /* oleidl.h:151:9 */

type IContinue = IContinue1 /* oleidl.h:151:29 */

type IViewObject1 = struct{ lpVtbl uintptr } /* oleidl.h:159:9 */

type IViewObject = IViewObject1 /* oleidl.h:159:31 */

type IViewObject21 = struct{ lpVtbl uintptr } /* oleidl.h:167:9 */

type IViewObject2 = IViewObject21 /* oleidl.h:167:32 */

type IDropSource1 = struct{ lpVtbl uintptr } /* oleidl.h:175:9 */

type IDropSource = IDropSource1 /* oleidl.h:175:31 */

type IDropTarget1 = struct{ lpVtbl uintptr } /* oleidl.h:183:9 */

type IDropTarget = IDropTarget1 /* oleidl.h:183:31 */

type IDropSourceNotify1 = struct{ lpVtbl uintptr } /* oleidl.h:191:9 */

type IDropSourceNotify = IDropSourceNotify1 /* oleidl.h:191:37 */

type IEnumOLEVERB1 = struct{ lpVtbl uintptr } /* oleidl.h:199:9 */

type IEnumOLEVERB = IEnumOLEVERB1 /* oleidl.h:199:32 */

// Headers for imported files

//** Autogenerated by WIDL 1.6 from include/objidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// ****************************************************************************
//
// IOleAdviseHolder interface

type LPOLEADVISEHOLDER = uintptr /* oleidl.h:245:26 */
type IOleAdviseHolderVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Advise         uintptr
	Unadvise       uintptr
	EnumAdvise     uintptr
	SendOnRename   uintptr
	SendOnSave     uintptr
	SendOnClose    uintptr
} /* oleidl.h:23:9 */

type IOleAdviseHolderVtbl = IOleAdviseHolderVtbl1 /* oleidl.h:316:3 */

// ****************************************************************************
//
// IOleCache interface

type LPOLECACHE = uintptr /* oleidl.h:382:19 */
type IOleCacheVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Cache          uintptr
	Uncache        uintptr
	EnumCache      uintptr
	InitCache      uintptr
	SetData        uintptr
} /* oleidl.h:31:9 */

type IOleCacheVtbl = IOleCacheVtbl1 /* oleidl.h:454:3 */

// ****************************************************************************
//
// IOleCache2 interface

type LPOLECACHE2 = uintptr /* oleidl.h:514:20 */

type DISCARDCACHE = uint32 /* oleidl.h:538:3 */
type IOleCache2Vtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Cache          uintptr
	Uncache        uintptr
	EnumCache      uintptr
	InitCache      uintptr
	SetData        uintptr
	UpdateCache    uintptr
	DiscardCache   uintptr
} /* oleidl.h:39:9 */

type IOleCache2Vtbl = IOleCache2Vtbl1 /* oleidl.h:610:3 */

// ****************************************************************************
//
// IOleCacheControl interface

type LPOLECACHECONTROL = uintptr /* oleidl.h:702:26 */
type IOleCacheControlVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	OnRun          uintptr
	OnStop         uintptr
} /* oleidl.h:47:9 */

type IOleCacheControlVtbl = IOleCacheControlVtbl1 /* oleidl.h:744:3 */

// ****************************************************************************
//
// IParseDisplayName interface

type LPPARSEDISPLAYNAME = uintptr /* oleidl.h:792:27 */
type IParseDisplayNameVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	ParseDisplayName uintptr
} /* oleidl.h:55:9 */

type IParseDisplayNameVtbl = IParseDisplayNameVtbl1 /* oleidl.h:834:3 */

// ****************************************************************************
//
// IOleContainer interface

type LPOLECONTAINER = uintptr /* oleidl.h:878:23 */
type IOleContainerVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	ParseDisplayName uintptr
	EnumObjects      uintptr
	LockContainer    uintptr
} /* oleidl.h:63:9 */

type IOleContainerVtbl = IOleContainerVtbl1 /* oleidl.h:931:3 */

// ****************************************************************************
//
// IOleClientSite interface

type LPOLECLIENTSITE = uintptr /* oleidl.h:985:24 */
type IOleClientSiteVtbl1 = struct {
	QueryInterface         uintptr
	AddRef                 uintptr
	Release                uintptr
	SaveObject             uintptr
	GetMoniker             uintptr
	GetContainer           uintptr
	ShowObject             uintptr
	OnShowWindow           uintptr
	RequestNewObjectLayout uintptr
} /* oleidl.h:71:9 */

type IOleClientSiteVtbl = IOleClientSiteVtbl1 /* oleidl.h:1057:3 */

// ****************************************************************************
//
// IOleObject interface

type LPOLEOBJECT = uintptr /* oleidl.h:1121:20 */

type OLEGETMONIKER = uint32 /* oleidl.h:1128:3 */

type OLEWHICHMK = uint32 /* oleidl.h:1134:3 */

type USERCLASSTYPE = uint32 /* oleidl.h:1140:3 */

type OLEMISC = uint32  /* oleidl.h:1165:3 */
type OLECLOSE = uint32 /* oleidl.h:1170:3 */
type IOleObjectVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	SetClientSite    uintptr
	GetClientSite    uintptr
	SetHostNames     uintptr
	Close            uintptr
	SetMoniker       uintptr
	GetMoniker       uintptr
	InitFromData     uintptr
	GetClipboardData uintptr
	DoVerb           uintptr
	EnumVerbs        uintptr
	Update           uintptr
	IsUpToDate       uintptr
	GetUserClassID   uintptr
	GetUserType      uintptr
	SetExtent        uintptr
	GetExtent        uintptr
	Advise           uintptr
	Unadvise         uintptr
	EnumAdvise       uintptr
	GetMiscStatus    uintptr
	SetColorScheme   uintptr
} /* oleidl.h:79:9 */

type IOleObjectVtbl = IOleObjectVtbl1 /* oleidl.h:1378:3 */
type OLERENDER = uint32               /* oleidl.h:1509:3 */

type LPOLERENDER = uintptr /* oleidl.h:1511:19 */

type tagOBJECTDESCRIPTOR = struct {
	cbSize             ULONG
	clsid              CLSID
	dwDrawAspect       DWORD
	sizel              SIZEL
	pointl             POINTL
	dwStatus           DWORD
	dwFullUserTypeName DWORD
	dwSrcOfCopy        DWORD
} /* oleidl.h:1513:9 */

type OBJECTDESCRIPTOR = tagOBJECTDESCRIPTOR  /* oleidl.h:1522:3 */
type POBJECTDESCRIPTOR = uintptr             /* oleidl.h:1523:36 */
type LPOBJECTDESCRIPTOR = uintptr            /* oleidl.h:1524:36 */
type LINKSRCDESCRIPTOR = tagOBJECTDESCRIPTOR /* oleidl.h:1525:36 */
type PLINKSRCDESCRIPTOR = uintptr            /* oleidl.h:1526:36 */
type LPLINKSRCDESCRIPTOR = uintptr           /* oleidl.h:1527:36 */

// ****************************************************************************
//
// IOleWindow interface

type LPOLEWINDOW = uintptr /* oleidl.h:1538:20 */
type IOleWindowVtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	GetWindow            uintptr
	ContextSensitiveHelp uintptr
} /* oleidl.h:87:9 */

type IOleWindowVtbl = IOleWindowVtbl1 /* oleidl.h:1581:3 */

// ****************************************************************************
//
// IOleLink interface

type LPOLELINK = uintptr /* oleidl.h:1629:18 */

type OLEUPDATE = uint32 /* oleidl.h:1634:3 */

type LPOLEUPDATE = uintptr /* oleidl.h:1636:19 */
type POLEUPDATE = uintptr  /* oleidl.h:1637:19 */

type OLELINKBIND = uint32 /* oleidl.h:1641:3 */
type IOleLinkVtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	SetUpdateOptions     uintptr
	GetUpdateOptions     uintptr
	SetSourceMoniker     uintptr
	GetSourceMoniker     uintptr
	SetSourceDisplayName uintptr
	GetSourceDisplayName uintptr
	BindToSource         uintptr
	BindIfRunning        uintptr
	GetBoundSource       uintptr
	UnbindSource         uintptr
	Update               uintptr
} /* oleidl.h:95:9 */

type IOleLinkVtbl = IOleLinkVtbl1 /* oleidl.h:1749:3 */

// ****************************************************************************
//
// IOleItemContainer interface

type LPOLEITEMCONTAINER = uintptr /* oleidl.h:1833:27 */

type BINDSPEED = uint32 /* oleidl.h:1839:3 */

type OLECONTF = uint32 /* oleidl.h:1847:3 */
type IOleItemContainerVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	ParseDisplayName uintptr
	EnumObjects      uintptr
	LockContainer    uintptr
	GetObjectA       uintptr
	GetObjectStorage uintptr
	IsRunning        uintptr
} /* oleidl.h:103:9 */

type IOleItemContainerVtbl = IOleItemContainerVtbl1 /* oleidl.h:1929:3 */

// ****************************************************************************
//
// IOleInPlaceUIWindow interface

type LPOLEINPLACEUIWINDOW = uintptr /* oleidl.h:1997:29 */
type BORDERWIDTHS = RECT            /* oleidl.h:1998:14 */
type LPBORDERWIDTHS = LPRECT        /* oleidl.h:1999:16 */
type LPCBORDERWIDTHS = LPCRECT      /* oleidl.h:2000:17 */
type IOleInPlaceUIWindowVtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	GetWindow            uintptr
	ContextSensitiveHelp uintptr
	GetBorder            uintptr
	RequestBorderSpace   uintptr
	SetBorderSpace       uintptr
	SetActiveObject      uintptr
} /* oleidl.h:111:9 */

type IOleInPlaceUIWindowVtbl = IOleInPlaceUIWindowVtbl1 /* oleidl.h:2068:3 */

// ****************************************************************************
//
// IOleInPlaceActiveObject interface

type LPOLEINPLACEACTIVEOBJECT = uintptr /* oleidl.h:2134:33 */
type IOleInPlaceActiveObjectVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetWindow             uintptr
	ContextSensitiveHelp  uintptr
	TranslateAcceleratorA uintptr
	OnFrameWindowActivate uintptr
	OnDocWindowActivate   uintptr
	ResizeBorder          uintptr
	EnableModeless        uintptr
} /* oleidl.h:119:9 */

type IOleInPlaceActiveObjectVtbl = IOleInPlaceActiveObjectVtbl1 /* oleidl.h:2211:3 */

// ****************************************************************************
//
// IOleInPlaceFrame interface

type LPOLEINPLACEFRAME = uintptr /* oleidl.h:2315:26 */

type tagOIFI = struct {
	cb            UINT
	fMDIApp       WINBOOL
	hwndFrame     HWND
	haccel        HACCEL
	cAccelEntries UINT
	_             [4]byte
} /* oleidl.h:2317:9 */

type OLEINPLACEFRAMEINFO = tagOIFI   /* oleidl.h:2323:3 */
type LPOLEINPLACEFRAMEINFO = uintptr /* oleidl.h:2324:24 */

type tagOleMenuGroupWidths = struct{ width [6]LONG } /* oleidl.h:2326:9 */

type OLEMENUGROUPWIDTHS = tagOleMenuGroupWidths /* oleidl.h:2328:3 */
type LPOLEMENUGROUPWIDTHS = uintptr             /* oleidl.h:2329:38 */

type HOLEMENU = HGLOBAL /* oleidl.h:2331:17 */
type IOleInPlaceFrameVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetWindow             uintptr
	ContextSensitiveHelp  uintptr
	GetBorder             uintptr
	RequestBorderSpace    uintptr
	SetBorderSpace        uintptr
	SetActiveObject       uintptr
	InsertMenus           uintptr
	SetMenu               uintptr
	RemoveMenus           uintptr
	SetStatusText         uintptr
	EnableModeless        uintptr
	TranslateAcceleratorA uintptr
} /* oleidl.h:127:9 */

type IOleInPlaceFrameVtbl = IOleInPlaceFrameVtbl1 /* oleidl.h:2437:3 */

// ****************************************************************************
//
// IOleInPlaceObject interface

type LPOLEINPLACEOBJECT = uintptr /* oleidl.h:2529:27 */
type IOleInPlaceObjectVtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	GetWindow            uintptr
	ContextSensitiveHelp uintptr
	InPlaceDeactivate    uintptr
	UIDeactivate         uintptr
	SetObjectRects       uintptr
	ReactivateAndUndo    uintptr
} /* oleidl.h:135:9 */

type IOleInPlaceObjectVtbl = IOleInPlaceObjectVtbl1 /* oleidl.h:2594:3 */

// ****************************************************************************
//
// IOleInPlaceSite interface

type LPOLEINPLACESITE = uintptr /* oleidl.h:2660:25 */
type IOleInPlaceSiteVtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	GetWindow            uintptr
	ContextSensitiveHelp uintptr
	CanInPlaceActivate   uintptr
	OnInPlaceActivate    uintptr
	OnUIActivate         uintptr
	GetWindowContext     uintptr
	Scroll               uintptr
	OnUIDeactivate       uintptr
	OnInPlaceDeactivate  uintptr
	DiscardUndoState     uintptr
	DeactivateAndUndo    uintptr
	OnPosRectChange      uintptr
} /* oleidl.h:143:9 */

type IOleInPlaceSiteVtbl = IOleInPlaceSiteVtbl1 /* oleidl.h:2770:3 */
type IContinueVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	FContinue      uintptr
} /* oleidl.h:151:9 */

type IContinueVtbl = IContinueVtbl1 /* oleidl.h:2893:3 */

// ****************************************************************************
//
// IViewObject interface

type LPVIEWOBJECT = uintptr /* oleidl.h:2937:21 */
type IViewObjectVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Draw           uintptr
	GetColorSet    uintptr
	Freeze         uintptr
	Unfreeze       uintptr
	SetAdvise      uintptr
	GetAdvise      uintptr
} /* oleidl.h:159:9 */

type IViewObjectVtbl = IViewObjectVtbl1 /* oleidl.h:3050:3 */

// ****************************************************************************
//
// IViewObject2 interface

type LPVIEWOBJECT2 = uintptr /* oleidl.h:3225:22 */
type IViewObject2Vtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Draw           uintptr
	GetColorSet    uintptr
	Freeze         uintptr
	Unfreeze       uintptr
	SetAdvise      uintptr
	GetAdvise      uintptr
	GetExtent      uintptr
} /* oleidl.h:167:9 */

type IViewObject2Vtbl = IViewObject2Vtbl1 /* oleidl.h:3313:3 */

// ****************************************************************************
//
// IDropSource interface

type LPDROPSOURCE = uintptr /* oleidl.h:3383:21 */
type IDropSourceVtbl1 = struct {
	QueryInterface    uintptr
	AddRef            uintptr
	Release           uintptr
	QueryContinueDrag uintptr
	GiveFeedback      uintptr
} /* oleidl.h:175:9 */

type IDropSourceVtbl = IDropSourceVtbl1 /* oleidl.h:3428:3 */

// ****************************************************************************
//
// IDropTarget interface

type LPDROPTARGET = uintptr /* oleidl.h:3476:21 */
type IDropTargetVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	DragEnter      uintptr
	DragOver       uintptr
	DragLeave      uintptr
	Drop           uintptr
} /* oleidl.h:183:9 */

type IDropTargetVtbl = IDropTargetVtbl1 /* oleidl.h:3576:3 */
type IDropSourceNotifyVtbl1 = struct {
	QueryInterface  uintptr
	AddRef          uintptr
	Release         uintptr
	DragEnterTarget uintptr
	DragLeaveTarget uintptr
} /* oleidl.h:191:9 */

type IDropSourceNotifyVtbl = IDropSourceNotifyVtbl1 /* oleidl.h:3672:3 */

// ****************************************************************************
//
// IEnumOLEVERB interface

type LPENUMOLEVERB = uintptr /* oleidl.h:3722:22 */

type tagOLEVERB = struct {
	lVerb        LONG
	_            [4]byte
	lpszVerbName LPOLESTR
	fuFlags      DWORD
	grfAttribs   DWORD
} /* oleidl.h:3724:9 */

type OLEVERB = tagOLEVERB /* oleidl.h:3729:3 */
type LPOLEVERB = uintptr  /* oleidl.h:3730:27 */

type OLEVERBATTRIB = uint32 /* oleidl.h:3735:3 */
type IEnumOLEVERBVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Next           uintptr
	Skip           uintptr
	Reset          uintptr
	Clone          uintptr
} /* oleidl.h:199:9 */

type IEnumOLEVERBVtbl = IEnumOLEVERBVtbl1 /* oleidl.h:3795:3 */

// End additional prototypes

//** Autogenerated by WIDL 4.12.1 from include/servprov.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type IServiceProvider1 = struct{ lpVtbl uintptr } /* servprov.h:23:9 */

// End additional prototypes

//** Autogenerated by WIDL 4.12.1 from include/servprov.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type IServiceProvider = IServiceProvider1 /* servprov.h:23:36 */

// Headers for imported files

//** Autogenerated by WIDL 1.6 from include/objidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// ****************************************************************************
//
// IServiceProvider interface

type LPSERVICEPROVIDER = uintptr /* servprov.h:62:26 */
type IServiceProviderVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	QueryService   uintptr
} /* servprov.h:23:9 */

type IServiceProviderVtbl = IServiceProviderVtbl1 /* servprov.h:122:3 */

// Begin additional prototypes for all interfaces

// End additional prototypes

//** Autogenerated by WIDL 4.12.1 from include/msxml.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

// Headers for imported files

//** Autogenerated by WIDL 1.6 from include/unknwn.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

//** Autogenerated by WIDL 1.6 from include/objidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

//** Autogenerated by WIDL 4.12.1 from include/oaidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type ICreateTypeInfo1 = struct{ lpVtbl uintptr } /* oaidl.h:23:9 */

// Begin additional prototypes for all interfaces

// End additional prototypes

//** Autogenerated by WIDL 4.12.1 from include/msxml.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

// Headers for imported files

//** Autogenerated by WIDL 1.6 from include/unknwn.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

//** Autogenerated by WIDL 1.6 from include/objidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

//** Autogenerated by WIDL 4.12.1 from include/oaidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type ICreateTypeInfo = ICreateTypeInfo1 /* oaidl.h:23:35 */

type ICreateTypeInfo21 = struct{ lpVtbl uintptr } /* oaidl.h:31:9 */

type ICreateTypeInfo2 = ICreateTypeInfo21 /* oaidl.h:31:36 */

type ICreateTypeLib1 = struct{ lpVtbl uintptr } /* oaidl.h:39:9 */

type ICreateTypeLib = ICreateTypeLib1 /* oaidl.h:39:34 */

type ICreateTypeLib21 = struct{ lpVtbl uintptr } /* oaidl.h:47:9 */

type ICreateTypeLib2 = ICreateTypeLib21 /* oaidl.h:47:35 */

type IDispatch1 = struct{ lpVtbl uintptr } /* oaidl.h:55:9 */

type IDispatch = IDispatch1 /* oaidl.h:55:29 */

type IEnumVARIANT1 = struct{ lpVtbl uintptr } /* oaidl.h:63:9 */

type IEnumVARIANT = IEnumVARIANT1 /* oaidl.h:63:32 */

type ITypeComp1 = struct{ lpVtbl uintptr } /* oaidl.h:71:9 */

type ITypeComp = ITypeComp1 /* oaidl.h:71:29 */

type ITypeInfo1 = struct{ lpVtbl uintptr } /* oaidl.h:79:9 */

type ITypeInfo = ITypeInfo1 /* oaidl.h:79:29 */

type ITypeInfo21 = struct{ lpVtbl uintptr } /* oaidl.h:87:9 */

type ITypeInfo2 = ITypeInfo21 /* oaidl.h:87:30 */

type ITypeLib1 = struct{ lpVtbl uintptr } /* oaidl.h:95:9 */

type ITypeLib = ITypeLib1 /* oaidl.h:95:28 */

type ITypeLib21 = struct{ lpVtbl uintptr } /* oaidl.h:103:9 */

type ITypeLib2 = ITypeLib21 /* oaidl.h:103:29 */

type ITypeChangeEvents1 = struct{ lpVtbl uintptr } /* oaidl.h:111:9 */

type ITypeChangeEvents = ITypeChangeEvents1 /* oaidl.h:111:37 */

type IErrorInfo1 = struct{ lpVtbl uintptr } /* oaidl.h:119:9 */

type IErrorInfo = IErrorInfo1 /* oaidl.h:119:30 */

type ICreateErrorInfo1 = struct{ lpVtbl uintptr } /* oaidl.h:127:9 */

type ICreateErrorInfo = ICreateErrorInfo1 /* oaidl.h:127:36 */

type ISupportErrorInfo1 = struct{ lpVtbl uintptr } /* oaidl.h:135:9 */

type ISupportErrorInfo = ISupportErrorInfo1 /* oaidl.h:135:37 */

type ITypeFactory1 = struct{ lpVtbl uintptr } /* oaidl.h:143:9 */

type ITypeFactory = ITypeFactory1 /* oaidl.h:143:32 */

type ITypeMarshal1 = struct{ lpVtbl uintptr } /* oaidl.h:151:9 */

type ITypeMarshal = ITypeMarshal1 /* oaidl.h:151:32 */

type IRecordInfo1 = struct{ lpVtbl uintptr } /* oaidl.h:159:9 */

type IRecordInfo = IRecordInfo1 /* oaidl.h:159:31 */

type IErrorLog1 = struct{ lpVtbl uintptr } /* oaidl.h:167:9 */

type IErrorLog = IErrorLog1 /* oaidl.h:167:29 */

type IPropertyBag1 = struct{ lpVtbl uintptr } /* oaidl.h:175:9 */

type IPropertyBag = IPropertyBag1 /* oaidl.h:175:32 */
type CURRENCY = CY                /* oaidl.h:358:12 */
type tagSAFEARRAYBOUND = struct {
	cElements ULONG
	lLbound   LONG
} /* oaidl.h:359:9 */

type SAFEARRAYBOUND = tagSAFEARRAYBOUND /* oaidl.h:362:3 */
type LPSAFEARRAYBOUND = uintptr         /* oaidl.h:363:34 */

type _wireVARIANT = struct {
	clSize      DWORD
	rpcReserved DWORD
	vt          USHORT
	wReserved1  USHORT
	wReserved2  USHORT
	wReserved3  USHORT
	__16        struct {
		llVal LONGLONG
		_     [8]byte
	}
} /* oaidl.h:365:9 */

type wireVARIANT = uintptr /* oaidl.h:365:29 */
type _wireBRECORD = struct {
	fFlags   ULONG
	clSize   ULONG
	pRecInfo uintptr
	pRecord  uintptr
} /* oaidl.h:366:9 */

type wireBRECORD = uintptr /* oaidl.h:366:29 */

type _wireSAFEARR_BSTR = struct {
	Size  ULONG
	_     [4]byte
	aBstr uintptr
} /* oaidl.h:368:9 */

type SAFEARR_BSTR = _wireSAFEARR_BSTR /* oaidl.h:371:3 */

type _wireSAFEARR_UNKNOWN = struct {
	Size      ULONG
	_         [4]byte
	apUnknown uintptr
} /* oaidl.h:373:9 */

type SAFEARR_UNKNOWN = _wireSAFEARR_UNKNOWN /* oaidl.h:376:3 */

type _wireSAFEARR_DISPATCH = struct {
	Size       ULONG
	_          [4]byte
	apDispatch uintptr
} /* oaidl.h:378:9 */

type SAFEARR_DISPATCH = _wireSAFEARR_DISPATCH /* oaidl.h:381:3 */

type _wireSAFEARR_VARIANT = struct {
	Size     ULONG
	_        [4]byte
	aVariant uintptr
} /* oaidl.h:383:9 */

type SAFEARR_VARIANT = _wireSAFEARR_VARIANT /* oaidl.h:386:3 */

type _wireSAFEARR_BRECORD = struct {
	Size    ULONG
	_       [4]byte
	aRecord uintptr
} /* oaidl.h:388:9 */

type SAFEARR_BRECORD = _wireSAFEARR_BRECORD /* oaidl.h:391:3 */

type _wireSAFEARR_HAVEIID = struct {
	Size      ULONG
	_         [4]byte
	apUnknown uintptr
	iid       IID
} /* oaidl.h:393:9 */

type SAFEARR_HAVEIID = _wireSAFEARR_HAVEIID /* oaidl.h:397:3 */

type SF_TYPE = uint32 /* oaidl.h:411:3 */

type _wireSAFEARRAY_UNION = struct {
	sfType ULONG
	_      [4]byte
	u      struct {
		BstrStr SAFEARR_BSTR
		_       [16]byte
	}
} /* oaidl.h:413:9 */

type SAFEARRAYUNION = _wireSAFEARRAY_UNION /* oaidl.h:427:3 */

type _wireSAFEARRAY = struct {
	cDims         USHORT
	fFeatures     USHORT
	cbElements    ULONG
	cLocks        ULONG
	_             [4]byte
	uArrayStructs SAFEARRAYUNION
	rgsabound     [1]SAFEARRAYBOUND
} /* oaidl.h:429:9 */

type wireSAFEARRAY = uintptr  /* oaidl.h:436:3 */
type wirePSAFEARRAY = uintptr /* oaidl.h:437:23 */

type tagSAFEARRAY = struct {
	cDims      USHORT
	fFeatures  USHORT
	cbElements ULONG
	cLocks     ULONG
	_          [4]byte
	pvData     PVOID
	rgsabound  [1]SAFEARRAYBOUND
} /* oaidl.h:439:9 */

type SAFEARRAY = tagSAFEARRAY /* oaidl.h:446:3 */
type LPSAFEARRAY = uintptr    /* oaidl.h:447:19 */

// Kludge for 3.0 release to disable new default-behavior.
// For now we define _FORCENAMELESSUNION.  For 4.0 this define
// will be removed.

type tagVARIANT = struct {
	__0 struct {
		__0 struct {
			vt         VARTYPE
			wReserved1 WORD
			wReserved2 WORD
			wReserved3 WORD
			__8        struct {
				llVal LONGLONG
				_     [8]byte
			}
		}
	}
} /* oaidl.h:495:9 */

// Kludge for 3.0 release to disable new default-behavior.
// For now we define _FORCENAMELESSUNION.  For 4.0 this define
// will be removed.

type VARIANT = tagVARIANT /* oaidl.h:495:27 */

type LPVARIANT = uintptr    /* oaidl.h:558:17 */
type VARIANTARG = VARIANT   /* oaidl.h:559:17 */
type LPVARIANTARG = uintptr /* oaidl.h:560:17 */

type DISPID = LONG     /* oaidl.h:637:14 */
type MEMBERID = DISPID /* oaidl.h:638:16 */
type HREFTYPE = DWORD  /* oaidl.h:639:15 */
type TYPEKIND = uint32 /* oaidl.h:650:3 */

type tagTYPEDESC = struct {
	__0 struct{ lptdesc uintptr }
	vt  VARTYPE
	_   [6]byte
} /* oaidl.h:652:9 */

type tagARRAYDESC = struct {
	tdescElem TYPEDESC
	cDims     USHORT
	_         [2]byte
	rgbounds  [1]SAFEARRAYBOUND
	_         [4]byte
} /* oaidl.h:655:9 */

type TYPEDESC = tagTYPEDESC /* oaidl.h:659:3 */

type ARRAYDESC = tagARRAYDESC /* oaidl.h:665:3 */

type tagPARAMDESCEX = struct {
	cBytes          ULONG
	_               [4]byte
	varDefaultValue VARIANTARG
} /* oaidl.h:667:9 */

type PARAMDESCEX = tagPARAMDESCEX /* oaidl.h:670:3 */
type LPPARAMDESCEX = uintptr      /* oaidl.h:671:31 */

type tagPARAMDESC = struct {
	pparamdescex LPPARAMDESCEX
	wParamFlags  USHORT
	_            [6]byte
} /* oaidl.h:673:9 */

type PARAMDESC = tagPARAMDESC /* oaidl.h:676:3 */
type LPPARAMDESC = uintptr    /* oaidl.h:677:29 */

type tagIDLDESC = struct {
	dwReserved ULONG_PTR
	wIDLFlags  USHORT
	_          [6]byte
} /* oaidl.h:696:9 */

type IDLDESC = tagIDLDESC /* oaidl.h:699:3 */
type LPIDLDESC = uintptr  /* oaidl.h:700:27 */

type tagELEMDESC = struct {
	tdesc TYPEDESC
	__16  struct{ idldesc IDLDESC }
} /* oaidl.h:720:11 */

type ELEMDESC = tagELEMDESC /* oaidl.h:726:5 */
type LPELEMDESC = uintptr   /* oaidl.h:726:14 */

type tagTYPEATTR = struct {
	guid             GUID
	lcid             LCID
	dwReserved       DWORD
	memidConstructor MEMBERID
	memidDestructor  MEMBERID
	lpstrSchema      LPOLESTR
	cbSizeInstance   ULONG
	typekind         TYPEKIND
	cFuncs           WORD
	cVars            WORD
	cImplTypes       WORD
	cbSizeVft        WORD
	cbAlignment      WORD
	wTypeFlags       WORD
	wMajorVerNum     WORD
	wMinorVerNum     WORD
	tdescAlias       TYPEDESC
	idldescType      IDLDESC
} /* oaidl.h:729:9 */

type TYPEATTR = tagTYPEATTR /* oaidl.h:748:3 */
type LPTYPEATTR = uintptr   /* oaidl.h:749:28 */

type tagDISPPARAMS = struct {
	rgvarg            uintptr
	rgdispidNamedArgs uintptr
	cArgs             UINT
	cNamedArgs        UINT
} /* oaidl.h:751:9 */

type DISPPARAMS = tagDISPPARAMS /* oaidl.h:756:3 */

type tagEXCEPINFO = struct {
	wCode             WORD
	wReserved         WORD
	_                 [4]byte
	bstrSource        BSTR
	bstrDescription   BSTR
	bstrHelpFile      BSTR
	dwHelpContext     DWORD
	_                 [4]byte
	pvReserved        PVOID
	pfnDeferredFillIn uintptr
	scode             SCODE
	_                 [4]byte
} /* oaidl.h:771:11 */

type EXCEPINFO = tagEXCEPINFO /* oaidl.h:781:5 */
type LPEXCEPINFO = uintptr    /* oaidl.h:781:16 */

type CALLCONV = uint32 /* oaidl.h:796:3 */

type FUNCKIND = uint32 /* oaidl.h:804:3 */

type INVOKEKIND = uint32 /* oaidl.h:811:3 */

type tagFUNCDESC = struct {
	memid             MEMBERID
	_                 [4]byte
	lprgscode         uintptr
	lprgelemdescParam uintptr
	funckind          FUNCKIND
	invkind           INVOKEKIND
	callconv          CALLCONV
	cParams           SHORT
	cParamsOpt        SHORT
	oVft              SHORT
	cScodes           SHORT
	_                 [4]byte
	elemdescFunc      ELEMDESC
	wFuncFlags        WORD
	_                 [6]byte
} /* oaidl.h:813:9 */

type FUNCDESC = tagFUNCDESC /* oaidl.h:826:3 */
type LPFUNCDESC = uintptr   /* oaidl.h:827:28 */

type VARKIND = uint32 /* oaidl.h:834:3 */

type tagVARDESC = struct {
	memid       MEMBERID
	_           [4]byte
	lpstrSchema LPOLESTR
	__16        struct {
		_     [0]uint64
		oInst ULONG
		_     [4]byte
	}
	elemdescVar ELEMDESC
	wVarFlags   WORD
	_           [2]byte
	varkind     VARKIND
} /* oaidl.h:845:9 */

type VARDESC = tagVARDESC /* oaidl.h:855:3 */
type LPVARDESC = uintptr  /* oaidl.h:856:27 */

type TYPEFLAGS = uint32 /* oaidl.h:874:3 */

type FUNCFLAGS = uint32 /* oaidl.h:890:3 */

type VARFLAGS = uint32 /* oaidl.h:906:3 */

type tagCLEANLOCALSTORAGE = struct {
	pInterface uintptr
	pStorage   PVOID
	flags      DWORD
	_          [4]byte
} /* oaidl.h:908:9 */

type CLEANLOCALSTORAGE = tagCLEANLOCALSTORAGE /* oaidl.h:912:3 */

type tagCUSTDATAITEM = struct {
	guid     GUID
	varValue VARIANTARG
} /* oaidl.h:914:9 */

type CUSTDATAITEM = tagCUSTDATAITEM /* oaidl.h:917:3 */
type LPCUSTDATAITEM = uintptr       /* oaidl.h:918:32 */

type tagCUSTDATA = struct {
	cCustData   DWORD
	_           [4]byte
	prgCustData LPCUSTDATAITEM
} /* oaidl.h:920:9 */

type CUSTDATA = tagCUSTDATA /* oaidl.h:923:3 */
type LPCUSTDATA = uintptr   /* oaidl.h:924:28 */

// ****************************************************************************
//
// ICreateTypeInfo interface

type LPCREATETYPEINFO = uintptr /* oaidl.h:937:25 */
type ICreateTypeInfoVtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	SetGuid              uintptr
	SetTypeFlags         uintptr
	SetDocString         uintptr
	SetHelpContext       uintptr
	SetVersion           uintptr
	AddRefTypeInfo       uintptr
	AddFuncDesc          uintptr
	AddImplType          uintptr
	SetImplTypeFlags     uintptr
	SetAlignment         uintptr
	SetSchema            uintptr
	AddVarDesc           uintptr
	SetFuncAndParamNames uintptr
	SetVarName           uintptr
	SetTypeDescAlias     uintptr
	DefineFuncAsDllEntry uintptr
	SetFuncDocString     uintptr
	SetVarDocString      uintptr
	SetFuncHelpContext   uintptr
	SetVarHelpContext    uintptr
	SetMops              uintptr
	SetTypeIdldesc       uintptr
	LayOut               uintptr
} /* oaidl.h:23:9 */

type ICreateTypeInfoVtbl = ICreateTypeInfoVtbl1 /* oaidl.h:1158:3 */

// ****************************************************************************
//
// ICreateTypeInfo2 interface

type LPCREATETYPEINFO2 = uintptr /* oaidl.h:1290:26 */
type ICreateTypeInfo2Vtbl1 = struct {
	QueryInterface           uintptr
	AddRef                   uintptr
	Release                  uintptr
	SetGuid                  uintptr
	SetTypeFlags             uintptr
	SetDocString             uintptr
	SetHelpContext           uintptr
	SetVersion               uintptr
	AddRefTypeInfo           uintptr
	AddFuncDesc              uintptr
	AddImplType              uintptr
	SetImplTypeFlags         uintptr
	SetAlignment             uintptr
	SetSchema                uintptr
	AddVarDesc               uintptr
	SetFuncAndParamNames     uintptr
	SetVarName               uintptr
	SetTypeDescAlias         uintptr
	DefineFuncAsDllEntry     uintptr
	SetFuncDocString         uintptr
	SetVarDocString          uintptr
	SetFuncHelpContext       uintptr
	SetVarHelpContext        uintptr
	SetMops                  uintptr
	SetTypeIdldesc           uintptr
	LayOut                   uintptr
	DeleteFuncDesc           uintptr
	DeleteFuncDescByMemId    uintptr
	DeleteVarDesc            uintptr
	DeleteVarDescByMemId     uintptr
	DeleteImplType           uintptr
	SetCustData              uintptr
	SetFuncCustData          uintptr
	SetParamCustData         uintptr
	SetVarCustData           uintptr
	SetImplTypeCustData      uintptr
	SetHelpStringContext     uintptr
	SetFuncHelpStringContext uintptr
	SetVarHelpStringContext  uintptr
	Invalidate               uintptr
	SetName                  uintptr
} /* oaidl.h:31:9 */

type ICreateTypeInfo2Vtbl = ICreateTypeInfo2Vtbl1 /* oaidl.h:1557:3 */

// ****************************************************************************
//
// ICreateTypeLib interface

type LPCREATETYPELIB = uintptr /* oaidl.h:1751:24 */
type ICreateTypeLibVtbl1 = struct {
	QueryInterface  uintptr
	AddRef          uintptr
	Release         uintptr
	CreateTypeInfo  uintptr
	SetName         uintptr
	SetVersion      uintptr
	SetGuid         uintptr
	SetDocString    uintptr
	SetHelpFileName uintptr
	SetHelpContext  uintptr
	SetLcid         uintptr
	SetLibFlags     uintptr
	SaveAllChanges  uintptr
} /* oaidl.h:39:9 */

type ICreateTypeLibVtbl = ICreateTypeLibVtbl1 /* oaidl.h:1855:3 */

// ****************************************************************************
//
// ICreateTypeLib2 interface

type LPCREATETYPELIB2 = uintptr /* oaidl.h:1935:25 */
type ICreateTypeLib2Vtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	CreateTypeInfo       uintptr
	SetName              uintptr
	SetVersion           uintptr
	SetGuid              uintptr
	SetDocString         uintptr
	SetHelpFileName      uintptr
	SetHelpContext       uintptr
	SetLcid              uintptr
	SetLibFlags          uintptr
	SaveAllChanges       uintptr
	DeleteTypeInfo       uintptr
	SetCustData          uintptr
	SetHelpStringContext uintptr
	SetHelpStringDll     uintptr
} /* oaidl.h:47:9 */

type ICreateTypeLib2Vtbl = ICreateTypeLib2Vtbl1 /* oaidl.h:2036:3 */

// ****************************************************************************
//
// IDispatch interface

type LPDISPATCH = uintptr /* oaidl.h:2136:19 */
type IDispatchVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	GetTypeInfoCount uintptr
	GetTypeInfo      uintptr
	GetIDsOfNames    uintptr
	Invoke           uintptr
} /* oaidl.h:55:9 */

type IDispatchVtbl = IDispatchVtbl1 /* oaidl.h:2237:3 */

// ****************************************************************************
//
// IEnumVARIANT interface

type LPENUMVARIANT = uintptr /* oaidl.h:2334:22 */
type IEnumVARIANTVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Next           uintptr
	Skip           uintptr
	Reset          uintptr
	Clone          uintptr
} /* oaidl.h:63:9 */

type IEnumVARIANTVtbl = IEnumVARIANTVtbl1 /* oaidl.h:2394:3 */

// ****************************************************************************
//
// ITypeComp interface

type LPTYPECOMP = uintptr /* oaidl.h:2470:19 */

type DESCKIND = uint32 /* oaidl.h:2479:3 */

type tagBINDPTR = struct{ lpfuncdesc uintptr } /* oaidl.h:2481:9 */

type BINDPTR = tagBINDPTR /* oaidl.h:2485:3 */
type LPBINDPTR = uintptr  /* oaidl.h:2486:26 */
type ITypeCompVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Bind           uintptr
	BindType       uintptr
} /* oaidl.h:71:9 */

type ITypeCompVtbl = ITypeCompVtbl1 /* oaidl.h:2545:3 */

// ****************************************************************************
//
// ITypeInfo interface

type LPTYPEINFO = uintptr /* oaidl.h:2651:19 */
type ITypeInfoVtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	GetTypeAttr          uintptr
	GetTypeComp          uintptr
	GetFuncDesc          uintptr
	GetVarDesc           uintptr
	GetNames             uintptr
	GetRefTypeOfImplType uintptr
	GetImplTypeFlags     uintptr
	GetIDsOfNames        uintptr
	Invoke               uintptr
	GetDocumentation     uintptr
	GetDllEntry          uintptr
	GetRefTypeInfo       uintptr
	AddressOfMember      uintptr
	CreateInstance       uintptr
	GetMops              uintptr
	GetContainingTypeLib uintptr
	ReleaseTypeAttr      uintptr
	ReleaseFuncDesc      uintptr
	ReleaseVarDesc       uintptr
} /* oaidl.h:79:9 */

type ITypeInfoVtbl = ITypeInfoVtbl1 /* oaidl.h:2873:3 */

// ****************************************************************************
//
// ITypeInfo2 interface

type LPTYPEINFO2 = uintptr /* oaidl.h:3239:20 */
type ITypeInfo2Vtbl1 = struct {
	QueryInterface         uintptr
	AddRef                 uintptr
	Release                uintptr
	GetTypeAttr            uintptr
	GetTypeComp            uintptr
	GetFuncDesc            uintptr
	GetVarDesc             uintptr
	GetNames               uintptr
	GetRefTypeOfImplType   uintptr
	GetImplTypeFlags       uintptr
	GetIDsOfNames          uintptr
	Invoke                 uintptr
	GetDocumentation       uintptr
	GetDllEntry            uintptr
	GetRefTypeInfo         uintptr
	AddressOfMember        uintptr
	CreateInstance         uintptr
	GetMops                uintptr
	GetContainingTypeLib   uintptr
	ReleaseTypeAttr        uintptr
	ReleaseFuncDesc        uintptr
	ReleaseVarDesc         uintptr
	GetTypeKind            uintptr
	GetTypeFlags           uintptr
	GetFuncIndexOfMemId    uintptr
	GetVarIndexOfMemId     uintptr
	GetCustData            uintptr
	GetFuncCustData        uintptr
	GetParamCustData       uintptr
	GetVarCustData         uintptr
	GetImplTypeCustData    uintptr
	GetDocumentation2      uintptr
	GetAllCustData         uintptr
	GetAllFuncCustData     uintptr
	GetAllParamCustData    uintptr
	GetAllVarCustData      uintptr
	GetAllImplTypeCustData uintptr
} /* oaidl.h:87:9 */

type ITypeInfo2Vtbl = ITypeInfo2Vtbl1 /* oaidl.h:3524:3 */

// ****************************************************************************
//
// ITypeLib interface

type SYSKIND = uint32 /* oaidl.h:3737:3 */

type LIBFLAGS = uint32 /* oaidl.h:3744:3 */

type LPTYPELIB = uintptr /* oaidl.h:3746:18 */

type tagTLIBATTR = struct {
	guid         GUID
	lcid         LCID
	syskind      SYSKIND
	wMajorVerNum WORD
	wMinorVerNum WORD
	wLibFlags    WORD
	_            [2]byte
} /* oaidl.h:3748:9 */

type TLIBATTR = tagTLIBATTR /* oaidl.h:3755:3 */
type LPTLIBATTR = uintptr   /* oaidl.h:3756:28 */
type ITypeLibVtbl1 = struct {
	QueryInterface    uintptr
	AddRef            uintptr
	Release           uintptr
	GetTypeInfoCount  uintptr
	GetTypeInfo       uintptr
	GetTypeInfoType   uintptr
	GetTypeInfoOfGuid uintptr
	GetLibAttr        uintptr
	GetTypeComp       uintptr
	GetDocumentation  uintptr
	IsName            uintptr
	FindName          uintptr
	ReleaseTLibAttr   uintptr
} /* oaidl.h:95:9 */

type ITypeLibVtbl = ITypeLibVtbl1 /* oaidl.h:3880:3 */

// ****************************************************************************
//
// ITypeLib2 interface

type LPTYPELIB2 = uintptr /* oaidl.h:4081:19 */
type ITypeLib2Vtbl1 = struct {
	QueryInterface    uintptr
	AddRef            uintptr
	Release           uintptr
	GetTypeInfoCount  uintptr
	GetTypeInfo       uintptr
	GetTypeInfoType   uintptr
	GetTypeInfoOfGuid uintptr
	GetLibAttr        uintptr
	GetTypeComp       uintptr
	GetDocumentation  uintptr
	IsName            uintptr
	FindName          uintptr
	ReleaseTLibAttr   uintptr
	GetCustData       uintptr
	GetLibStatistics  uintptr
	GetDocumentation2 uintptr
	GetAllCustData    uintptr
} /* oaidl.h:103:9 */

type ITypeLib2Vtbl = ITypeLib2Vtbl1 /* oaidl.h:4203:3 */

// ****************************************************************************
//
// ITypeChangeEvents interface

type LPTYPECHANGEEVENTS = uintptr /* oaidl.h:4346:27 */

type CHANGEKIND = uint32 /* oaidl.h:4357:3 */
type ITypeChangeEventsVtbl1 = struct {
	QueryInterface    uintptr
	AddRef            uintptr
	Release           uintptr
	RequestTypeChange uintptr
	AfterTypeChange   uintptr
} /* oaidl.h:111:9 */

type ITypeChangeEventsVtbl = ITypeChangeEventsVtbl1 /* oaidl.h:4410:3 */

// ****************************************************************************
//
// IErrorInfo interface

type LPERRORINFO = uintptr /* oaidl.h:4458:20 */
type IErrorInfoVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetGUID        uintptr
	GetSource      uintptr
	GetDescription uintptr
	GetHelpFile    uintptr
	GetHelpContext uintptr
} /* oaidl.h:119:9 */

type IErrorInfoVtbl = IErrorInfoVtbl1 /* oaidl.h:4522:3 */

// ****************************************************************************
//
// ICreateErrorInfo interface

type LPCREATEERRORINFO = uintptr /* oaidl.h:4582:26 */
type ICreateErrorInfoVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	SetGUID        uintptr
	SetSource      uintptr
	SetDescription uintptr
	SetHelpFile    uintptr
	SetHelpContext uintptr
} /* oaidl.h:127:9 */

type ICreateErrorInfoVtbl = ICreateErrorInfoVtbl1 /* oaidl.h:4646:3 */

// ****************************************************************************
//
// ISupportErrorInfo interface

type LPSUPPORTERRORINFO = uintptr /* oaidl.h:4706:27 */
type ISupportErrorInfoVtbl1 = struct {
	QueryInterface             uintptr
	AddRef                     uintptr
	Release                    uintptr
	InterfaceSupportsErrorInfo uintptr
} /* oaidl.h:135:9 */

type ISupportErrorInfoVtbl = ISupportErrorInfoVtbl1 /* oaidl.h:4742:3 */
type ITypeFactoryVtbl1 = struct {
	QueryInterface     uintptr
	AddRef             uintptr
	Release            uintptr
	CreateFromTypeInfo uintptr
} /* oaidl.h:143:9 */

type ITypeFactoryVtbl = ITypeFactoryVtbl1 /* oaidl.h:4824:3 */
type ITypeMarshalVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Size           uintptr
	Marshal        uintptr
	Unmarshal      uintptr
	Free           uintptr
} /* oaidl.h:151:9 */

type ITypeMarshalVtbl = ITypeMarshalVtbl1 /* oaidl.h:4947:3 */

// ****************************************************************************
//
// IRecordInfo interface

type LPRECORDINFO = uintptr /* oaidl.h:5003:21 */
type IRecordInfoVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	RecordInit       uintptr
	RecordClear      uintptr
	RecordCopy       uintptr
	GetGuid          uintptr
	GetName          uintptr
	GetSize          uintptr
	GetTypeInfo      uintptr
	GetField         uintptr
	GetFieldNoCopy   uintptr
	PutField         uintptr
	PutFieldNoCopy   uintptr
	GetFieldNames    uintptr
	IsMatchingType   uintptr
	RecordCreate     uintptr
	RecordCreateCopy uintptr
	RecordDestroy    uintptr
} /* oaidl.h:159:9 */

type IRecordInfoVtbl = IRecordInfoVtbl1 /* oaidl.h:5171:3 */

// ****************************************************************************
//
// IErrorLog interface

type LPERRORLOG = uintptr /* oaidl.h:5275:19 */
type IErrorLogVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	AddError       uintptr
} /* oaidl.h:167:9 */

type IErrorLogVtbl = IErrorLogVtbl1 /* oaidl.h:5313:3 */

// ****************************************************************************
//
// IPropertyBag interface

type LPPROPERTYBAG = uintptr /* oaidl.h:5357:22 */
type IPropertyBagVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Read           uintptr
	Write          uintptr
} /* oaidl.h:175:9 */

type IPropertyBagVtbl = IPropertyBagVtbl1 /* oaidl.h:5406:3 */

// End additional prototypes

type IXMLDOMImplementation1 = struct{ lpVtbl uintptr } /* msxml.h:35:9 */

// End additional prototypes

type IXMLDOMImplementation = IXMLDOMImplementation1 /* msxml.h:35:38 */

type IXMLDOMNode1 = struct{ lpVtbl uintptr } /* msxml.h:40:9 */

type IXMLDOMNode = IXMLDOMNode1 /* msxml.h:40:28 */

type IXMLDOMDocumentFragment1 = struct{ lpVtbl uintptr } /* msxml.h:45:9 */

type IXMLDOMDocumentFragment = IXMLDOMDocumentFragment1 /* msxml.h:45:40 */

type IXMLDOMDocument1 = struct{ lpVtbl uintptr } /* msxml.h:50:9 */

type IXMLDOMDocument = IXMLDOMDocument1 /* msxml.h:50:32 */

type IXMLDOMNodeList1 = struct{ lpVtbl uintptr } /* msxml.h:55:9 */

type IXMLDOMNodeList = IXMLDOMNodeList1 /* msxml.h:55:32 */

type IXMLDOMNamedNodeMap1 = struct{ lpVtbl uintptr } /* msxml.h:60:9 */

type IXMLDOMNamedNodeMap = IXMLDOMNamedNodeMap1 /* msxml.h:60:36 */

type IXMLDOMCharacterData1 = struct{ lpVtbl uintptr } /* msxml.h:65:9 */

type IXMLDOMCharacterData = IXMLDOMCharacterData1 /* msxml.h:65:37 */

type IXMLDOMAttribute1 = struct{ lpVtbl uintptr } /* msxml.h:70:9 */

type IXMLDOMAttribute = IXMLDOMAttribute1 /* msxml.h:70:33 */

type IXMLDOMElement1 = struct{ lpVtbl uintptr } /* msxml.h:75:9 */

type IXMLDOMElement = IXMLDOMElement1 /* msxml.h:75:31 */

type IXMLDOMText1 = struct{ lpVtbl uintptr } /* msxml.h:80:9 */

type IXMLDOMText = IXMLDOMText1 /* msxml.h:80:28 */

type IXMLDOMComment1 = struct{ lpVtbl uintptr } /* msxml.h:85:9 */

type IXMLDOMComment = IXMLDOMComment1 /* msxml.h:85:31 */

type IXMLDOMProcessingInstruction1 = struct{ lpVtbl uintptr } /* msxml.h:90:9 */

type IXMLDOMProcessingInstruction = IXMLDOMProcessingInstruction1 /* msxml.h:90:45 */

type IXMLDOMCDATASection1 = struct{ lpVtbl uintptr } /* msxml.h:95:9 */

type IXMLDOMCDATASection = IXMLDOMCDATASection1 /* msxml.h:95:36 */

type IXMLDOMDocumentType1 = struct{ lpVtbl uintptr } /* msxml.h:100:9 */

type IXMLDOMDocumentType = IXMLDOMDocumentType1 /* msxml.h:100:36 */

type IXMLDOMNotation1 = struct{ lpVtbl uintptr } /* msxml.h:105:9 */

type IXMLDOMNotation = IXMLDOMNotation1 /* msxml.h:105:32 */

type IXMLDOMEntity1 = struct{ lpVtbl uintptr } /* msxml.h:110:9 */

type IXMLDOMEntity = IXMLDOMEntity1 /* msxml.h:110:30 */

type IXMLDOMEntityReference1 = struct{ lpVtbl uintptr } /* msxml.h:115:9 */

type IXMLDOMEntityReference = IXMLDOMEntityReference1 /* msxml.h:115:39 */

type IXMLDOMParseError1 = struct{ lpVtbl uintptr } /* msxml.h:120:9 */

type IXMLDOMParseError = IXMLDOMParseError1 /* msxml.h:120:34 */

type IXTLRuntime1 = struct{ lpVtbl uintptr } /* msxml.h:125:9 */

type IXTLRuntime = IXTLRuntime1 /* msxml.h:125:28 */

type XMLDOMDocumentEvents1 = struct{ lpVtbl uintptr } /* msxml.h:130:9 */

type XMLDOMDocumentEvents = XMLDOMDocumentEvents1 /* msxml.h:130:37 */

type IXMLHttpRequest1 = struct{ lpVtbl uintptr } /* msxml.h:153:9 */

type IXMLHttpRequest = IXMLHttpRequest1 /* msxml.h:153:32 */

type IXMLDSOControl1 = struct{ lpVtbl uintptr } /* msxml.h:167:9 */

type IXMLDSOControl = IXMLDSOControl1 /* msxml.h:167:31 */

type IXMLElementCollection1 = struct{ lpVtbl uintptr } /* msxml.h:181:9 */

type IXMLElementCollection = IXMLElementCollection1 /* msxml.h:181:38 */

type IXMLDocument1 = struct{ lpVtbl uintptr } /* msxml.h:186:9 */

type IXMLDocument = IXMLDocument1 /* msxml.h:186:29 */

type IXMLDocument21 = struct{ lpVtbl uintptr } /* msxml.h:191:9 */

type IXMLDocument2 = IXMLDocument21 /* msxml.h:191:30 */

type IXMLElement1 = struct{ lpVtbl uintptr } /* msxml.h:196:9 */

type IXMLElement = IXMLElement1 /* msxml.h:196:28 */

type IXMLElement21 = struct{ lpVtbl uintptr } /* msxml.h:201:9 */

type IXMLElement2 = IXMLElement21 /* msxml.h:201:29 */

type IXMLAttribute1 = struct{ lpVtbl uintptr } /* msxml.h:206:9 */

type IXMLAttribute = IXMLAttribute1 /* msxml.h:206:30 */

type IXMLError1 = struct{ lpVtbl uintptr } /* msxml.h:211:9 */

type IXMLError = IXMLError1 /* msxml.h:211:26 */

type _xml_error = struct {
	_nLine       uint32
	_            [4]byte
	_pchBuf      BSTR
	_cchBuf      uint32
	_ich         uint32
	_pszFound    BSTR
	_pszExpected BSTR
	_reserved1   DWORD
	_reserved2   DWORD
} /* msxml.h:225:11 */

type XML_ERROR = _xml_error /* msxml.h:234:5 */

type DOMNodeType = uint32 /* msxml.h:246:5 */

type XMLELEM_TYPE = uint32 /* msxml.h:251:5 */
type IXMLDOMImplementationVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	GetTypeInfoCount uintptr
	GetTypeInfo      uintptr
	GetIDsOfNames    uintptr
	Invoke           uintptr
	hasFeature       uintptr
} /* msxml.h:35:9 */

type IXMLDOMImplementationVtbl = IXMLDOMImplementationVtbl1 /* msxml.h:275:5 */
type IXMLDOMNodeVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetTypeInfoCount      uintptr
	GetTypeInfo           uintptr
	GetIDsOfNames         uintptr
	Invoke                uintptr
	get_nodeName          uintptr
	get_nodeValue         uintptr
	put_nodeValue         uintptr
	get_nodeType          uintptr
	get_parentNode        uintptr
	get_childNodes        uintptr
	get_firstChild        uintptr
	get_lastChild         uintptr
	get_previousSibling   uintptr
	get_nextSibling       uintptr
	get_attributes        uintptr
	insertBefore          uintptr
	replaceChild          uintptr
	removeChild           uintptr
	appendChild           uintptr
	hasChildNodes         uintptr
	get_ownerDocument     uintptr
	cloneNode             uintptr
	get_nodeTypeString    uintptr
	get_text              uintptr
	put_text              uintptr
	get_specified         uintptr
	get_definition        uintptr
	get_nodeTypedValue    uintptr
	put_nodeTypedValue    uintptr
	get_dataType          uintptr
	put_dataType          uintptr
	get_xml               uintptr
	transformNode         uintptr
	selectNodes           uintptr
	selectSingleNode      uintptr
	get_parsed            uintptr
	get_namespaceURI      uintptr
	get_prefix            uintptr
	get_baseName          uintptr
	transformNodeToObject uintptr
} /* msxml.h:40:9 */

type IXMLDOMNodeVtbl = IXMLDOMNodeVtbl1 /* msxml.h:384:5 */
type IXMLDOMDocumentFragmentVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetTypeInfoCount      uintptr
	GetTypeInfo           uintptr
	GetIDsOfNames         uintptr
	Invoke                uintptr
	get_nodeName          uintptr
	get_nodeValue         uintptr
	put_nodeValue         uintptr
	get_nodeType          uintptr
	get_parentNode        uintptr
	get_childNodes        uintptr
	get_firstChild        uintptr
	get_lastChild         uintptr
	get_previousSibling   uintptr
	get_nextSibling       uintptr
	get_attributes        uintptr
	insertBefore          uintptr
	replaceChild          uintptr
	removeChild           uintptr
	appendChild           uintptr
	hasChildNodes         uintptr
	get_ownerDocument     uintptr
	cloneNode             uintptr
	get_nodeTypeString    uintptr
	get_text              uintptr
	put_text              uintptr
	get_specified         uintptr
	get_definition        uintptr
	get_nodeTypedValue    uintptr
	put_nodeTypedValue    uintptr
	get_dataType          uintptr
	put_dataType          uintptr
	get_xml               uintptr
	transformNode         uintptr
	selectNodes           uintptr
	selectSingleNode      uintptr
	get_parsed            uintptr
	get_namespaceURI      uintptr
	get_prefix            uintptr
	get_baseName          uintptr
	transformNodeToObject uintptr
} /* msxml.h:45:9 */

type IXMLDOMDocumentFragmentVtbl = IXMLDOMDocumentFragmentVtbl1 /* msxml.h:561:5 */
type IXMLDOMDocumentVtbl1 = struct {
	QueryInterface              uintptr
	AddRef                      uintptr
	Release                     uintptr
	GetTypeInfoCount            uintptr
	GetTypeInfo                 uintptr
	GetIDsOfNames               uintptr
	Invoke                      uintptr
	get_nodeName                uintptr
	get_nodeValue               uintptr
	put_nodeValue               uintptr
	get_nodeType                uintptr
	get_parentNode              uintptr
	get_childNodes              uintptr
	get_firstChild              uintptr
	get_lastChild               uintptr
	get_previousSibling         uintptr
	get_nextSibling             uintptr
	get_attributes              uintptr
	insertBefore                uintptr
	replaceChild                uintptr
	removeChild                 uintptr
	appendChild                 uintptr
	hasChildNodes               uintptr
	get_ownerDocument           uintptr
	cloneNode                   uintptr
	get_nodeTypeString          uintptr
	get_text                    uintptr
	put_text                    uintptr
	get_specified               uintptr
	get_definition              uintptr
	get_nodeTypedValue          uintptr
	put_nodeTypedValue          uintptr
	get_dataType                uintptr
	put_dataType                uintptr
	get_xml                     uintptr
	transformNode               uintptr
	selectNodes                 uintptr
	selectSingleNode            uintptr
	get_parsed                  uintptr
	get_namespaceURI            uintptr
	get_prefix                  uintptr
	get_baseName                uintptr
	transformNodeToObject       uintptr
	get_doctype                 uintptr
	get_implementation          uintptr
	get_documentElement         uintptr
	putref_documentElement      uintptr
	createElement               uintptr
	createDocumentFragment      uintptr
	createTextNode              uintptr
	createComment               uintptr
	createCDATASection          uintptr
	createProcessingInstruction uintptr
	createAttribute             uintptr
	createEntityReference       uintptr
	getElementsByTagName        uintptr
	createNode                  uintptr
	nodeFromID                  uintptr
	load                        uintptr
	get_readyState              uintptr
	get_parseError              uintptr
	get_url                     uintptr
	get_async                   uintptr
	put_async                   uintptr
	abort                       uintptr
	loadXML                     uintptr
	save                        uintptr
	get_validateOnParse         uintptr
	put_validateOnParse         uintptr
	get_resolveExternals        uintptr
	put_resolveExternals        uintptr
	get_preserveWhiteSpace      uintptr
	put_preserveWhiteSpace      uintptr
	put_onreadystatechange      uintptr
	put_ondataavailable         uintptr
	put_ontransformnode         uintptr
} /* msxml.h:50:9 */

type IXMLDOMDocumentVtbl = IXMLDOMDocumentVtbl1 /* msxml.h:733:5 */
type IXMLDOMNodeListVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	GetTypeInfoCount uintptr
	GetTypeInfo      uintptr
	GetIDsOfNames    uintptr
	Invoke           uintptr
	get_item         uintptr
	get_length       uintptr
	nextNode         uintptr
	reset            uintptr
	get__newEnum     uintptr
} /* msxml.h:55:9 */

type IXMLDOMNodeListVtbl = IXMLDOMNodeListVtbl1 /* msxml.h:912:5 */
type IXMLDOMNamedNodeMapVtbl1 = struct {
	QueryInterface      uintptr
	AddRef              uintptr
	Release             uintptr
	GetTypeInfoCount    uintptr
	GetTypeInfo         uintptr
	GetIDsOfNames       uintptr
	Invoke              uintptr
	getNamedItem        uintptr
	setNamedItem        uintptr
	removeNamedItem     uintptr
	get_item            uintptr
	get_length          uintptr
	getQualifiedItem    uintptr
	removeQualifiedItem uintptr
	nextNode            uintptr
	reset               uintptr
	get__newEnum        uintptr
} /* msxml.h:60:9 */

type IXMLDOMNamedNodeMapVtbl = IXMLDOMNamedNodeMapVtbl1 /* msxml.h:981:5 */
type IXMLDOMCharacterDataVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetTypeInfoCount      uintptr
	GetTypeInfo           uintptr
	GetIDsOfNames         uintptr
	Invoke                uintptr
	get_nodeName          uintptr
	get_nodeValue         uintptr
	put_nodeValue         uintptr
	get_nodeType          uintptr
	get_parentNode        uintptr
	get_childNodes        uintptr
	get_firstChild        uintptr
	get_lastChild         uintptr
	get_previousSibling   uintptr
	get_nextSibling       uintptr
	get_attributes        uintptr
	insertBefore          uintptr
	replaceChild          uintptr
	removeChild           uintptr
	appendChild           uintptr
	hasChildNodes         uintptr
	get_ownerDocument     uintptr
	cloneNode             uintptr
	get_nodeTypeString    uintptr
	get_text              uintptr
	put_text              uintptr
	get_specified         uintptr
	get_definition        uintptr
	get_nodeTypedValue    uintptr
	put_nodeTypedValue    uintptr
	get_dataType          uintptr
	put_dataType          uintptr
	get_xml               uintptr
	transformNode         uintptr
	selectNodes           uintptr
	selectSingleNode      uintptr
	get_parsed            uintptr
	get_namespaceURI      uintptr
	get_prefix            uintptr
	get_baseName          uintptr
	transformNodeToObject uintptr
	get_data              uintptr
	put_data              uintptr
	get_length            uintptr
	substringData         uintptr
	appendData            uintptr
	insertData            uintptr
	deleteData            uintptr
	replaceData           uintptr
} /* msxml.h:65:9 */

type IXMLDOMCharacterDataVtbl = IXMLDOMCharacterDataVtbl1 /* msxml.h:1097:5 */
type IXMLDOMAttributeVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetTypeInfoCount      uintptr
	GetTypeInfo           uintptr
	GetIDsOfNames         uintptr
	Invoke                uintptr
	get_nodeName          uintptr
	get_nodeValue         uintptr
	put_nodeValue         uintptr
	get_nodeType          uintptr
	get_parentNode        uintptr
	get_childNodes        uintptr
	get_firstChild        uintptr
	get_lastChild         uintptr
	get_previousSibling   uintptr
	get_nextSibling       uintptr
	get_attributes        uintptr
	insertBefore          uintptr
	replaceChild          uintptr
	removeChild           uintptr
	appendChild           uintptr
	hasChildNodes         uintptr
	get_ownerDocument     uintptr
	cloneNode             uintptr
	get_nodeTypeString    uintptr
	get_text              uintptr
	put_text              uintptr
	get_specified         uintptr
	get_definition        uintptr
	get_nodeTypedValue    uintptr
	put_nodeTypedValue    uintptr
	get_dataType          uintptr
	put_dataType          uintptr
	get_xml               uintptr
	transformNode         uintptr
	selectNodes           uintptr
	selectSingleNode      uintptr
	get_parsed            uintptr
	get_namespaceURI      uintptr
	get_prefix            uintptr
	get_baseName          uintptr
	transformNodeToObject uintptr
	get_name              uintptr
	get_value             uintptr
	put_value             uintptr
} /* msxml.h:70:9 */

type IXMLDOMAttributeVtbl = IXMLDOMAttributeVtbl1 /* msxml.h:1233:5 */
type IXMLDOMElementVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetTypeInfoCount      uintptr
	GetTypeInfo           uintptr
	GetIDsOfNames         uintptr
	Invoke                uintptr
	get_nodeName          uintptr
	get_nodeValue         uintptr
	put_nodeValue         uintptr
	get_nodeType          uintptr
	get_parentNode        uintptr
	get_childNodes        uintptr
	get_firstChild        uintptr
	get_lastChild         uintptr
	get_previousSibling   uintptr
	get_nextSibling       uintptr
	get_attributes        uintptr
	insertBefore          uintptr
	replaceChild          uintptr
	removeChild           uintptr
	appendChild           uintptr
	hasChildNodes         uintptr
	get_ownerDocument     uintptr
	cloneNode             uintptr
	get_nodeTypeString    uintptr
	get_text              uintptr
	put_text              uintptr
	get_specified         uintptr
	get_definition        uintptr
	get_nodeTypedValue    uintptr
	put_nodeTypedValue    uintptr
	get_dataType          uintptr
	put_dataType          uintptr
	get_xml               uintptr
	transformNode         uintptr
	selectNodes           uintptr
	selectSingleNode      uintptr
	get_parsed            uintptr
	get_namespaceURI      uintptr
	get_prefix            uintptr
	get_baseName          uintptr
	transformNodeToObject uintptr
	get_tagName           uintptr
	getAttribute          uintptr
	setAttribute          uintptr
	removeAttribute       uintptr
	getAttributeNode      uintptr
	setAttributeNode      uintptr
	removeAttributeNode   uintptr
	getElementsByTagName  uintptr
	normalize             uintptr
} /* msxml.h:75:9 */

type IXMLDOMElementVtbl = IXMLDOMElementVtbl1 /* msxml.h:1366:5 */
type IXMLDOMTextVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetTypeInfoCount      uintptr
	GetTypeInfo           uintptr
	GetIDsOfNames         uintptr
	Invoke                uintptr
	get_nodeName          uintptr
	get_nodeValue         uintptr
	put_nodeValue         uintptr
	get_nodeType          uintptr
	get_parentNode        uintptr
	get_childNodes        uintptr
	get_firstChild        uintptr
	get_lastChild         uintptr
	get_previousSibling   uintptr
	get_nextSibling       uintptr
	get_attributes        uintptr
	insertBefore          uintptr
	replaceChild          uintptr
	removeChild           uintptr
	appendChild           uintptr
	hasChildNodes         uintptr
	get_ownerDocument     uintptr
	cloneNode             uintptr
	get_nodeTypeString    uintptr
	get_text              uintptr
	put_text              uintptr
	get_specified         uintptr
	get_definition        uintptr
	get_nodeTypedValue    uintptr
	put_nodeTypedValue    uintptr
	get_dataType          uintptr
	put_dataType          uintptr
	get_xml               uintptr
	transformNode         uintptr
	selectNodes           uintptr
	selectSingleNode      uintptr
	get_parsed            uintptr
	get_namespaceURI      uintptr
	get_prefix            uintptr
	get_baseName          uintptr
	transformNodeToObject uintptr
	get_data              uintptr
	put_data              uintptr
	get_length            uintptr
	substringData         uintptr
	appendData            uintptr
	insertData            uintptr
	deleteData            uintptr
	replaceData           uintptr
	splitText             uintptr
} /* msxml.h:80:9 */

type IXMLDOMTextVtbl = IXMLDOMTextVtbl1 /* msxml.h:1509:5 */
type IXMLDOMCommentVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetTypeInfoCount      uintptr
	GetTypeInfo           uintptr
	GetIDsOfNames         uintptr
	Invoke                uintptr
	get_nodeName          uintptr
	get_nodeValue         uintptr
	put_nodeValue         uintptr
	get_nodeType          uintptr
	get_parentNode        uintptr
	get_childNodes        uintptr
	get_firstChild        uintptr
	get_lastChild         uintptr
	get_previousSibling   uintptr
	get_nextSibling       uintptr
	get_attributes        uintptr
	insertBefore          uintptr
	replaceChild          uintptr
	removeChild           uintptr
	appendChild           uintptr
	hasChildNodes         uintptr
	get_ownerDocument     uintptr
	cloneNode             uintptr
	get_nodeTypeString    uintptr
	get_text              uintptr
	put_text              uintptr
	get_specified         uintptr
	get_definition        uintptr
	get_nodeTypedValue    uintptr
	put_nodeTypedValue    uintptr
	get_dataType          uintptr
	put_dataType          uintptr
	get_xml               uintptr
	transformNode         uintptr
	selectNodes           uintptr
	selectSingleNode      uintptr
	get_parsed            uintptr
	get_namespaceURI      uintptr
	get_prefix            uintptr
	get_baseName          uintptr
	transformNodeToObject uintptr
	get_data              uintptr
	put_data              uintptr
	get_length            uintptr
	substringData         uintptr
	appendData            uintptr
	insertData            uintptr
	deleteData            uintptr
	replaceData           uintptr
} /* msxml.h:85:9 */

type IXMLDOMCommentVtbl = IXMLDOMCommentVtbl1 /* msxml.h:1633:5 */
type IXMLDOMProcessingInstructionVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetTypeInfoCount      uintptr
	GetTypeInfo           uintptr
	GetIDsOfNames         uintptr
	Invoke                uintptr
	get_nodeName          uintptr
	get_nodeValue         uintptr
	put_nodeValue         uintptr
	get_nodeType          uintptr
	get_parentNode        uintptr
	get_childNodes        uintptr
	get_firstChild        uintptr
	get_lastChild         uintptr
	get_previousSibling   uintptr
	get_nextSibling       uintptr
	get_attributes        uintptr
	insertBefore          uintptr
	replaceChild          uintptr
	removeChild           uintptr
	appendChild           uintptr
	hasChildNodes         uintptr
	get_ownerDocument     uintptr
	cloneNode             uintptr
	get_nodeTypeString    uintptr
	get_text              uintptr
	put_text              uintptr
	get_specified         uintptr
	get_definition        uintptr
	get_nodeTypedValue    uintptr
	put_nodeTypedValue    uintptr
	get_dataType          uintptr
	put_dataType          uintptr
	get_xml               uintptr
	transformNode         uintptr
	selectNodes           uintptr
	selectSingleNode      uintptr
	get_parsed            uintptr
	get_namespaceURI      uintptr
	get_prefix            uintptr
	get_baseName          uintptr
	transformNodeToObject uintptr
	get_target            uintptr
	get_data              uintptr
	put_data              uintptr
} /* msxml.h:90:9 */

type IXMLDOMProcessingInstructionVtbl = IXMLDOMProcessingInstructionVtbl1 /* msxml.h:1753:5 */
type IXMLDOMCDATASectionVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetTypeInfoCount      uintptr
	GetTypeInfo           uintptr
	GetIDsOfNames         uintptr
	Invoke                uintptr
	get_nodeName          uintptr
	get_nodeValue         uintptr
	put_nodeValue         uintptr
	get_nodeType          uintptr
	get_parentNode        uintptr
	get_childNodes        uintptr
	get_firstChild        uintptr
	get_lastChild         uintptr
	get_previousSibling   uintptr
	get_nextSibling       uintptr
	get_attributes        uintptr
	insertBefore          uintptr
	replaceChild          uintptr
	removeChild           uintptr
	appendChild           uintptr
	hasChildNodes         uintptr
	get_ownerDocument     uintptr
	cloneNode             uintptr
	get_nodeTypeString    uintptr
	get_text              uintptr
	put_text              uintptr
	get_specified         uintptr
	get_definition        uintptr
	get_nodeTypedValue    uintptr
	put_nodeTypedValue    uintptr
	get_dataType          uintptr
	put_dataType          uintptr
	get_xml               uintptr
	transformNode         uintptr
	selectNodes           uintptr
	selectSingleNode      uintptr
	get_parsed            uintptr
	get_namespaceURI      uintptr
	get_prefix            uintptr
	get_baseName          uintptr
	transformNodeToObject uintptr
	get_data              uintptr
	put_data              uintptr
	get_length            uintptr
	substringData         uintptr
	appendData            uintptr
	insertData            uintptr
	deleteData            uintptr
	replaceData           uintptr
	splitText             uintptr
} /* msxml.h:95:9 */

type IXMLDOMCDATASectionVtbl = IXMLDOMCDATASectionVtbl1 /* msxml.h:1876:5 */
type IXMLDOMDocumentTypeVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetTypeInfoCount      uintptr
	GetTypeInfo           uintptr
	GetIDsOfNames         uintptr
	Invoke                uintptr
	get_nodeName          uintptr
	get_nodeValue         uintptr
	put_nodeValue         uintptr
	get_nodeType          uintptr
	get_parentNode        uintptr
	get_childNodes        uintptr
	get_firstChild        uintptr
	get_lastChild         uintptr
	get_previousSibling   uintptr
	get_nextSibling       uintptr
	get_attributes        uintptr
	insertBefore          uintptr
	replaceChild          uintptr
	removeChild           uintptr
	appendChild           uintptr
	hasChildNodes         uintptr
	get_ownerDocument     uintptr
	cloneNode             uintptr
	get_nodeTypeString    uintptr
	get_text              uintptr
	put_text              uintptr
	get_specified         uintptr
	get_definition        uintptr
	get_nodeTypedValue    uintptr
	put_nodeTypedValue    uintptr
	get_dataType          uintptr
	put_dataType          uintptr
	get_xml               uintptr
	transformNode         uintptr
	selectNodes           uintptr
	selectSingleNode      uintptr
	get_parsed            uintptr
	get_namespaceURI      uintptr
	get_prefix            uintptr
	get_baseName          uintptr
	transformNodeToObject uintptr
	get_name              uintptr
	get_entities          uintptr
	get_notations         uintptr
} /* msxml.h:100:9 */

type IXMLDOMDocumentTypeVtbl = IXMLDOMDocumentTypeVtbl1 /* msxml.h:1997:5 */
type IXMLDOMNotationVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetTypeInfoCount      uintptr
	GetTypeInfo           uintptr
	GetIDsOfNames         uintptr
	Invoke                uintptr
	get_nodeName          uintptr
	get_nodeValue         uintptr
	put_nodeValue         uintptr
	get_nodeType          uintptr
	get_parentNode        uintptr
	get_childNodes        uintptr
	get_firstChild        uintptr
	get_lastChild         uintptr
	get_previousSibling   uintptr
	get_nextSibling       uintptr
	get_attributes        uintptr
	insertBefore          uintptr
	replaceChild          uintptr
	removeChild           uintptr
	appendChild           uintptr
	hasChildNodes         uintptr
	get_ownerDocument     uintptr
	cloneNode             uintptr
	get_nodeTypeString    uintptr
	get_text              uintptr
	put_text              uintptr
	get_specified         uintptr
	get_definition        uintptr
	get_nodeTypedValue    uintptr
	put_nodeTypedValue    uintptr
	get_dataType          uintptr
	put_dataType          uintptr
	get_xml               uintptr
	transformNode         uintptr
	selectNodes           uintptr
	selectSingleNode      uintptr
	get_parsed            uintptr
	get_namespaceURI      uintptr
	get_prefix            uintptr
	get_baseName          uintptr
	transformNodeToObject uintptr
	get_publicId          uintptr
	get_systemId          uintptr
} /* msxml.h:105:9 */

type IXMLDOMNotationVtbl = IXMLDOMNotationVtbl1 /* msxml.h:2116:5 */
type IXMLDOMEntityVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetTypeInfoCount      uintptr
	GetTypeInfo           uintptr
	GetIDsOfNames         uintptr
	Invoke                uintptr
	get_nodeName          uintptr
	get_nodeValue         uintptr
	put_nodeValue         uintptr
	get_nodeType          uintptr
	get_parentNode        uintptr
	get_childNodes        uintptr
	get_firstChild        uintptr
	get_lastChild         uintptr
	get_previousSibling   uintptr
	get_nextSibling       uintptr
	get_attributes        uintptr
	insertBefore          uintptr
	replaceChild          uintptr
	removeChild           uintptr
	appendChild           uintptr
	hasChildNodes         uintptr
	get_ownerDocument     uintptr
	cloneNode             uintptr
	get_nodeTypeString    uintptr
	get_text              uintptr
	put_text              uintptr
	get_specified         uintptr
	get_definition        uintptr
	get_nodeTypedValue    uintptr
	put_nodeTypedValue    uintptr
	get_dataType          uintptr
	put_dataType          uintptr
	get_xml               uintptr
	transformNode         uintptr
	selectNodes           uintptr
	selectSingleNode      uintptr
	get_parsed            uintptr
	get_namespaceURI      uintptr
	get_prefix            uintptr
	get_baseName          uintptr
	transformNodeToObject uintptr
	get_publicId          uintptr
	get_systemId          uintptr
	get_notationName      uintptr
} /* msxml.h:110:9 */

type IXMLDOMEntityVtbl = IXMLDOMEntityVtbl1 /* msxml.h:2234:5 */
type IXMLDOMEntityReferenceVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetTypeInfoCount      uintptr
	GetTypeInfo           uintptr
	GetIDsOfNames         uintptr
	Invoke                uintptr
	get_nodeName          uintptr
	get_nodeValue         uintptr
	put_nodeValue         uintptr
	get_nodeType          uintptr
	get_parentNode        uintptr
	get_childNodes        uintptr
	get_firstChild        uintptr
	get_lastChild         uintptr
	get_previousSibling   uintptr
	get_nextSibling       uintptr
	get_attributes        uintptr
	insertBefore          uintptr
	replaceChild          uintptr
	removeChild           uintptr
	appendChild           uintptr
	hasChildNodes         uintptr
	get_ownerDocument     uintptr
	cloneNode             uintptr
	get_nodeTypeString    uintptr
	get_text              uintptr
	put_text              uintptr
	get_specified         uintptr
	get_definition        uintptr
	get_nodeTypedValue    uintptr
	put_nodeTypedValue    uintptr
	get_dataType          uintptr
	put_dataType          uintptr
	get_xml               uintptr
	transformNode         uintptr
	selectNodes           uintptr
	selectSingleNode      uintptr
	get_parsed            uintptr
	get_namespaceURI      uintptr
	get_prefix            uintptr
	get_baseName          uintptr
	transformNodeToObject uintptr
} /* msxml.h:115:9 */

type IXMLDOMEntityReferenceVtbl = IXMLDOMEntityReferenceVtbl1 /* msxml.h:2348:5 */
type IXMLDOMParseErrorVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	GetTypeInfoCount uintptr
	GetTypeInfo      uintptr
	GetIDsOfNames    uintptr
	Invoke           uintptr
	get_errorCode    uintptr
	get_url          uintptr
	get_reason       uintptr
	get_srcText      uintptr
	get_line         uintptr
	get_linepos      uintptr
	get_filepos      uintptr
} /* msxml.h:120:9 */

type IXMLDOMParseErrorVtbl = IXMLDOMParseErrorVtbl1 /* msxml.h:2432:5 */
type IXTLRuntimeVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetTypeInfoCount      uintptr
	GetTypeInfo           uintptr
	GetIDsOfNames         uintptr
	Invoke                uintptr
	get_nodeName          uintptr
	get_nodeValue         uintptr
	put_nodeValue         uintptr
	get_nodeType          uintptr
	get_parentNode        uintptr
	get_childNodes        uintptr
	get_firstChild        uintptr
	get_lastChild         uintptr
	get_previousSibling   uintptr
	get_nextSibling       uintptr
	get_attributes        uintptr
	insertBefore          uintptr
	replaceChild          uintptr
	removeChild           uintptr
	appendChild           uintptr
	hasChildNodes         uintptr
	get_ownerDocument     uintptr
	cloneNode             uintptr
	get_nodeTypeString    uintptr
	get_text              uintptr
	put_text              uintptr
	get_specified         uintptr
	get_definition        uintptr
	get_nodeTypedValue    uintptr
	put_nodeTypedValue    uintptr
	get_dataType          uintptr
	put_dataType          uintptr
	get_xml               uintptr
	transformNode         uintptr
	selectNodes           uintptr
	selectSingleNode      uintptr
	get_parsed            uintptr
	get_namespaceURI      uintptr
	get_prefix            uintptr
	get_baseName          uintptr
	transformNodeToObject uintptr
	uniqueID              uintptr
	depth                 uintptr
	childNumber           uintptr
	ancestorChildNumber   uintptr
	absoluteChildNumber   uintptr
	formatIndex           uintptr
	formatNumber          uintptr
	formatDate            uintptr
	formatTime            uintptr
} /* msxml.h:125:9 */

type IXTLRuntimeVtbl = IXTLRuntimeVtbl1 /* msxml.h:2541:5 */
type XMLDOMDocumentEventsVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	GetTypeInfoCount uintptr
	GetTypeInfo      uintptr
	GetIDsOfNames    uintptr
	Invoke           uintptr
} /* msxml.h:130:9 */

type XMLDOMDocumentEventsVtbl = XMLDOMDocumentEventsVtbl1 /* msxml.h:2637:5 */
type IXMLHttpRequestVtbl1 = struct {
	QueryInterface         uintptr
	AddRef                 uintptr
	Release                uintptr
	GetTypeInfoCount       uintptr
	GetTypeInfo            uintptr
	GetIDsOfNames          uintptr
	Invoke                 uintptr
	open                   uintptr
	setRequestHeader       uintptr
	getResponseHeader      uintptr
	getAllResponseHeaders  uintptr
	send                   uintptr
	abort                  uintptr
	get_status             uintptr
	get_statusText         uintptr
	get_responseXML        uintptr
	get_responseText       uintptr
	get_responseBody       uintptr
	get_responseStream     uintptr
	get_readyState         uintptr
	put_onreadystatechange uintptr
} /* msxml.h:153:9 */

type IXMLHttpRequestVtbl = IXMLHttpRequestVtbl1 /* msxml.h:2708:5 */
type IXMLDSOControlVtbl1 = struct {
	QueryInterface        uintptr
	AddRef                uintptr
	Release               uintptr
	GetTypeInfoCount      uintptr
	GetTypeInfo           uintptr
	GetIDsOfNames         uintptr
	Invoke                uintptr
	get_XMLDocument       uintptr
	put_XMLDocument       uintptr
	get_JavaDSOCompatible uintptr
	put_JavaDSOCompatible uintptr
	get_readyState        uintptr
} /* msxml.h:167:9 */

type IXMLDSOControlVtbl = IXMLDSOControlVtbl1 /* msxml.h:2799:5 */
type IXMLElementCollectionVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	GetTypeInfoCount uintptr
	GetTypeInfo      uintptr
	GetIDsOfNames    uintptr
	Invoke           uintptr
	put_length       uintptr
	get_length       uintptr
	get__newEnum     uintptr
	item             uintptr
} /* msxml.h:181:9 */

type IXMLElementCollectionVtbl = IXMLElementCollectionVtbl1 /* msxml.h:2861:5 */
type IXMLDocumentVtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	GetTypeInfoCount     uintptr
	GetTypeInfo          uintptr
	GetIDsOfNames        uintptr
	Invoke               uintptr
	get_root             uintptr
	get_fileSize         uintptr
	get_fileModifiedDate uintptr
	get_fileUpdatedDate  uintptr
	get_URL              uintptr
	put_URL              uintptr
	get_mimeType         uintptr
	get_readyState       uintptr
	get_charset          uintptr
	put_charset          uintptr
	get_version          uintptr
	get_doctype          uintptr
	get_dtdURL           uintptr
	createElement        uintptr
} /* msxml.h:186:9 */

type IXMLDocumentVtbl = IXMLDocumentVtbl1 /* msxml.h:2935:5 */
type IXMLDocument2Vtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	GetTypeInfoCount     uintptr
	GetTypeInfo          uintptr
	GetIDsOfNames        uintptr
	Invoke               uintptr
	get_root             uintptr
	get_fileSize         uintptr
	get_fileModifiedDate uintptr
	get_fileUpdatedDate  uintptr
	get_URL              uintptr
	put_URL              uintptr
	get_mimeType         uintptr
	get_readyState       uintptr
	get_charset          uintptr
	put_charset          uintptr
	get_version          uintptr
	get_doctype          uintptr
	get_dtdURL           uintptr
	createElement        uintptr
	get_async            uintptr
	put_async            uintptr
} /* msxml.h:191:9 */

type IXMLDocument2Vtbl = IXMLDocument2Vtbl1 /* msxml.h:3043:5 */
type IXMLElementVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	GetTypeInfoCount uintptr
	GetTypeInfo      uintptr
	GetIDsOfNames    uintptr
	Invoke           uintptr
	get_tagName      uintptr
	put_tagName      uintptr
	get_parent       uintptr
	setAttribute     uintptr
	getAttribute     uintptr
	removeAttribute  uintptr
	get_children     uintptr
	get_type         uintptr
	get_text         uintptr
	put_text         uintptr
	addChild         uintptr
	removeChild      uintptr
} /* msxml.h:196:9 */

type IXMLElementVtbl = IXMLElementVtbl1 /* msxml.h:3149:5 */
type IXMLElement2Vtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	GetTypeInfoCount uintptr
	GetTypeInfo      uintptr
	GetIDsOfNames    uintptr
	Invoke           uintptr
	get_tagName      uintptr
	put_tagName      uintptr
	get_parent       uintptr
	setAttribute     uintptr
	getAttribute     uintptr
	removeAttribute  uintptr
	get_children     uintptr
	get_type         uintptr
	get_text         uintptr
	put_text         uintptr
	addChild         uintptr
	removeChild      uintptr
	get_attributes   uintptr
} /* msxml.h:201:9 */

type IXMLElement2Vtbl = IXMLElement2Vtbl1 /* msxml.h:3245:5 */
type IXMLAttributeVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	GetTypeInfoCount uintptr
	GetTypeInfo      uintptr
	GetIDsOfNames    uintptr
	Invoke           uintptr
	get_name         uintptr
	get_value        uintptr
} /* msxml.h:206:9 */

type IXMLAttributeVtbl = IXMLAttributeVtbl1 /* msxml.h:3322:5 */
type IXMLErrorVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetErrorInfo   uintptr
} /* msxml.h:211:9 */

type IXMLErrorVtbl = IXMLErrorVtbl1 /* msxml.h:3360:5 */

// ****************************************************************************
//
// IPersistMoniker interface

type LPPERSISTMONIKER = uintptr /* urlmon.h:795:25 */
type IPersistMonikerVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetClassID     uintptr
	IsDirty        uintptr
	Load           uintptr
	Save           uintptr
	SaveCompleted  uintptr
	GetCurMoniker  uintptr
} /* urlmon.h:23:9 */

type IPersistMonikerVtbl = IPersistMonikerVtbl1 /* urlmon.h:877:3 */

// ****************************************************************************
//
// IMonikerProp interface

type LPMONIKERPROP = uintptr /* urlmon.h:944:22 */

type MONIKERPROPERTY = uint32 /* urlmon.h:952:3 */
type IMonikerPropVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	PutProperty    uintptr
} /* urlmon.h:31:9 */

type IMonikerPropVtbl = IMonikerPropVtbl1 /* urlmon.h:990:3 */

// ****************************************************************************
//
// IBindProtocol interface

type LPBINDPROTOCOL = uintptr /* urlmon.h:1038:23 */
type IBindProtocolVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	CreateBinding  uintptr
} /* urlmon.h:39:9 */

type IBindProtocolVtbl = IBindProtocolVtbl1 /* urlmon.h:1078:3 */

// ****************************************************************************
//
// IBinding interface

type LPBINDING = uintptr /* urlmon.h:1126:18 */
type IBindingVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Abort          uintptr
	Suspend        uintptr
	Resume         uintptr
	SetPriority    uintptr
	GetPriority    uintptr
	GetBindResult  uintptr
} /* urlmon.h:47:9 */

type IBindingVtbl = IBindingVtbl1 /* urlmon.h:1200:3 */

// ****************************************************************************
//
// IBindStatusCallback interface

type LPBINDSTATUSCALLBACK = uintptr /* urlmon.h:1293:29 */

type BINDVERB = uint32 /* urlmon.h:1301:3 */

type BINDINFOF = uint32 /* urlmon.h:1306:3 */

type BINDF = uint32 /* urlmon.h:1340:3 */

type URL_ENCODING = uint32 /* urlmon.h:1346:3 */

type _tagBINDINFO = struct {
	cbSize             ULONG
	_                  [4]byte
	szExtraInfo        LPWSTR
	stgmedData         STGMEDIUM
	grfBindInfoF       DWORD
	dwBindVerb         DWORD
	szCustomVerb       LPWSTR
	cbstgmedData       DWORD
	dwOptions          DWORD
	dwOptionsFlags     DWORD
	dwCodePage         DWORD
	securityAttributes SECURITY_ATTRIBUTES
	iid                IID
	pUnk               uintptr
	dwReserved         DWORD
	_                  [4]byte
} /* urlmon.h:1348:9 */

type BINDINFO = _tagBINDINFO /* urlmon.h:1363:3 */

type _REMSECURITY_ATTRIBUTES = struct {
	nLength              DWORD
	lpSecurityDescriptor DWORD
	bInheritHandle       WINBOOL
} /* urlmon.h:1365:9 */

type REMSECURITY_ATTRIBUTES = _REMSECURITY_ATTRIBUTES /* urlmon.h:1369:3 */
type PREMSECURITY_ATTRIBUTES = uintptr                /* urlmon.h:1370:40 */
type LPREMSECURITY_ATTRIBUTES = uintptr               /* urlmon.h:1371:40 */

type _tagRemBINDINFO = struct {
	cbSize             ULONG
	_                  [4]byte
	szExtraInfo        LPWSTR
	grfBindInfoF       DWORD
	dwBindVerb         DWORD
	szCustomVerb       LPWSTR
	cbstgmedData       DWORD
	dwOptions          DWORD
	dwOptionsFlags     DWORD
	dwCodePage         DWORD
	securityAttributes REMSECURITY_ATTRIBUTES
	iid                IID
	_                  [4]byte
	pUnk               uintptr
	dwReserved         DWORD
	_                  [4]byte
} /* urlmon.h:1373:9 */

type RemBINDINFO = _tagRemBINDINFO /* urlmon.h:1387:3 */

type tagRemFORMATETC = struct {
	cfFormat DWORD
	ptd      DWORD
	dwAspect DWORD
	lindex   LONG
	tymed    DWORD
} /* urlmon.h:1389:9 */

type RemFORMATETC = tagRemFORMATETC /* urlmon.h:1395:3 */
type LPREMFORMATETC = uintptr       /* urlmon.h:1396:32 */

type BINDINFO_OPTIONS = int32 /* urlmon.h:1414:3 */

type BSCF = uint32 /* urlmon.h:1424:3 */

type BINDSTATUS = uint32 /* urlmon.h:1495:3 */
type IBindStatusCallbackVtbl1 = struct {
	QueryInterface    uintptr
	AddRef            uintptr
	Release           uintptr
	OnStartBinding    uintptr
	GetPriority       uintptr
	OnLowResource     uintptr
	OnProgress        uintptr
	OnStopBinding     uintptr
	GetBindInfo       uintptr
	OnDataAvailable   uintptr
	OnObjectAvailable uintptr
} /* urlmon.h:55:9 */

type IBindStatusCallbackVtbl = IBindStatusCallbackVtbl1 /* urlmon.h:1600:3 */

// ****************************************************************************
//
// IBindStatusCallbackEx interface

type LPBINDSTATUSCALLBACKEX = uintptr /* urlmon.h:1720:31 */

type BINDF2 = uint32 /* urlmon.h:1746:3 */
type IBindStatusCallbackExVtbl1 = struct {
	QueryInterface    uintptr
	AddRef            uintptr
	Release           uintptr
	OnStartBinding    uintptr
	GetPriority       uintptr
	OnLowResource     uintptr
	OnProgress        uintptr
	OnStopBinding     uintptr
	GetBindInfo       uintptr
	OnDataAvailable   uintptr
	OnObjectAvailable uintptr
	GetBindInfoEx     uintptr
} /* urlmon.h:63:9 */

type IBindStatusCallbackExVtbl = IBindStatusCallbackExVtbl1 /* urlmon.h:1831:3 */

// ****************************************************************************
//
// IAuthenticate interface

type LPAUTHENTICATION = uintptr /* urlmon.h:1938:23 */
type IAuthenticateVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Authenticate   uintptr
} /* urlmon.h:71:9 */

type IAuthenticateVtbl = IAuthenticateVtbl1 /* urlmon.h:1978:3 */

// ****************************************************************************
//
// IAuthenticateEx interface

type LPAUTHENTICATIONEX = uintptr /* urlmon.h:2026:25 */

type AUTHENTICATEF = uint32 /* urlmon.h:2032:3 */

type _tagAUTHENTICATEINFO = struct {
	dwFlags    DWORD
	dwReserved DWORD
} /* urlmon.h:2034:9 */

type AUTHENTICATEINFO = _tagAUTHENTICATEINFO /* urlmon.h:2037:3 */
type IAuthenticateExVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Authenticate   uintptr
	AuthenticateEx uintptr
} /* urlmon.h:79:9 */

type IAuthenticateExVtbl = IAuthenticateExVtbl1 /* urlmon.h:2086:3 */

// ****************************************************************************
//
// IHttpNegotiate interface

type LPHTTPNEGOTIATE = uintptr /* urlmon.h:2140:24 */
type IHttpNegotiateVtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	BeginningTransaction uintptr
	OnResponse           uintptr
} /* urlmon.h:87:9 */

type IHttpNegotiateVtbl = IHttpNegotiateVtbl1 /* urlmon.h:2195:3 */

// ****************************************************************************
//
// IHttpNegotiate2 interface

type LPHTTPNEGOTIATE2 = uintptr /* urlmon.h:2247:25 */
type IHttpNegotiate2Vtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	BeginningTransaction uintptr
	OnResponse           uintptr
	GetRootSecurityId    uintptr
} /* urlmon.h:95:9 */

type IHttpNegotiate2Vtbl = IHttpNegotiate2Vtbl1 /* urlmon.h:2302:3 */

// ****************************************************************************
//
// IHttpNegotiate3 interface

type LPHTTPNEGOTIATE3 = uintptr /* urlmon.h:2360:25 */
type IHttpNegotiate3Vtbl1 = struct {
	QueryInterface                 uintptr
	AddRef                         uintptr
	Release                        uintptr
	BeginningTransaction           uintptr
	OnResponse                     uintptr
	GetRootSecurityId              uintptr
	GetSerializedClientCertContext uintptr
} /* urlmon.h:103:9 */

type IHttpNegotiate3Vtbl = IHttpNegotiate3Vtbl1 /* urlmon.h:2420:3 */

// ****************************************************************************
//
// IWinInetFileStream interface

type LPWININETFILESTREAM = uintptr /* urlmon.h:2484:28 */
type IWinInetFileStreamVtbl1 = struct {
	QueryInterface     uintptr
	AddRef             uintptr
	Release            uintptr
	SetHandleForUnlock uintptr
	SetDeleteFile      uintptr
} /* urlmon.h:111:9 */

type IWinInetFileStreamVtbl = IWinInetFileStreamVtbl1 /* urlmon.h:2529:3 */

// ****************************************************************************
//
// IWindowForBindingUI interface

type LPWINDOWFORBINDINGUI = uintptr /* urlmon.h:2581:29 */
type IWindowForBindingUIVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetWindow      uintptr
} /* urlmon.h:119:9 */

type IWindowForBindingUIVtbl = IWindowForBindingUIVtbl1 /* urlmon.h:2619:3 */

// ****************************************************************************
//
// ICodeInstall interface

type LPCODEINSTALL = uintptr /* urlmon.h:2667:22 */

type CIP_STATUS = uint32 /* urlmon.h:2680:3 */
type ICodeInstallVtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	GetWindow            uintptr
	OnCodeInstallProblem uintptr
} /* urlmon.h:127:9 */

type ICodeInstallVtbl = ICodeInstallVtbl1 /* urlmon.h:2728:3 */

// ****************************************************************************
//
// IWinInetInfo interface

type LPWININETINFO = uintptr /* urlmon.h:3783:22 */
type IWinInetInfoVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	QueryOption    uintptr
} /* urlmon.h:167:9 */

type IWinInetInfoVtbl = IWinInetInfoVtbl1 /* urlmon.h:3822:3 */

// ****************************************************************************
//
// IHttpSecurity interface

type LPHTTPSECURITY = uintptr /* urlmon.h:3892:23 */
type IHttpSecurityVtbl1 = struct {
	QueryInterface    uintptr
	AddRef            uintptr
	Release           uintptr
	GetWindow         uintptr
	OnSecurityProblem uintptr
} /* urlmon.h:175:9 */

type IHttpSecurityVtbl = IHttpSecurityVtbl1 /* urlmon.h:3934:3 */

// ****************************************************************************
//
// IWinInetHttpInfo interface

type LPWININETHTTPINFO = uintptr /* urlmon.h:3988:26 */
type IWinInetHttpInfoVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	QueryOption    uintptr
	QueryInfo      uintptr
} /* urlmon.h:183:9 */

type IWinInetHttpInfoVtbl = IWinInetHttpInfoVtbl1 /* urlmon.h:4039:3 */
type IWinInetHttpTimeoutsVtbl1 = struct {
	QueryInterface     uintptr
	AddRef             uintptr
	Release            uintptr
	GetRequestTimeouts uintptr
} /* urlmon.h:191:9 */

type IWinInetHttpTimeoutsVtbl = IWinInetHttpTimeoutsVtbl1 /* urlmon.h:4156:3 */

// ****************************************************************************
//
// IBindHost interface

type LPBINDHOST = uintptr /* urlmon.h:4412:19 */
type IBindHostVtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	CreateMoniker        uintptr
	MonikerBindToStorage uintptr
	MonikerBindToObject  uintptr
} /* urlmon.h:215:9 */

type IBindHostVtbl = IBindHostVtbl1 /* urlmon.h:4484:3 */

// ****************************************************************************
//
// IInternet interface

type LPIINTERNET = uintptr /* urlmon.h:4703:19 */
type IInternetVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
} /* urlmon.h:223:9 */

type IInternetVtbl = IInternetVtbl1 /* urlmon.h:4730:3 */

// ****************************************************************************
//
// IInternetBindInfo interface

type LPIINTERNETBINDINFO = uintptr /* urlmon.h:4772:27 */

type BINDSTRING = uint32 /* urlmon.h:4798:3 */
type IInternetBindInfoVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetBindInfo    uintptr
	GetBindString  uintptr
} /* urlmon.h:231:9 */

type IInternetBindInfoVtbl = IInternetBindInfoVtbl1 /* urlmon.h:4849:3 */

// ****************************************************************************
//
// IInternetBindInfoEx interface

type LPIINTERNETBINDINFOEX = uintptr /* urlmon.h:4901:29 */
type IInternetBindInfoExVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetBindInfo    uintptr
	GetBindString  uintptr
	GetBindInfoEx  uintptr
} /* urlmon.h:239:9 */

type IInternetBindInfoExVtbl = IInternetBindInfoExVtbl1 /* urlmon.h:4956:3 */

// ****************************************************************************
//
// IInternetProtocolRoot interface

type LPIINTERNETPROTOCOLROOT = uintptr /* urlmon.h:5014:31 */

type PI_FLAGS = uint32 /* urlmon.h:5032:3 */
type _tagPROTOCOLDATA = struct {
	grfFlags DWORD
	dwState  DWORD
	pData    LPVOID
	cbData   ULONG
	_        [4]byte
} /* urlmon.h:5033:9 */

type PROTOCOLDATA = _tagPROTOCOLDATA /* urlmon.h:5038:3 */

type _tagStartParam = struct {
	iid       IID
	pIBindCtx uintptr
	pItf      uintptr
} /* urlmon.h:5040:9 */

type StartParam = _tagStartParam /* urlmon.h:5044:3 */
type IInternetProtocolRootVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Start          uintptr
	Continue       uintptr
	Abort          uintptr
	Terminate      uintptr
	Suspend        uintptr
	Resume         uintptr
} /* urlmon.h:247:9 */

type IInternetProtocolRootVtbl = IInternetProtocolRootVtbl1 /* urlmon.h:5123:3 */

// ****************************************************************************
//
// IInternetProtocol interface

type LPIINTERNETPROTOCOL = uintptr /* urlmon.h:5191:27 */
type IInternetProtocolVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Start          uintptr
	Continue       uintptr
	Abort          uintptr
	Terminate      uintptr
	Suspend        uintptr
	Resume         uintptr
	Read           uintptr
	Seek           uintptr
	LockRequest    uintptr
	UnlockRequest  uintptr
} /* urlmon.h:255:9 */

type IInternetProtocolVtbl = IInternetProtocolVtbl1 /* urlmon.h:5283:3 */

// ****************************************************************************
//
// IInternetProtocolSink interface

type LPIINTERNETPROTOCOLSINK = uintptr /* urlmon.h:5552:31 */
type IInternetProtocolSinkVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Switch         uintptr
	ReportProgress uintptr
	ReportData     uintptr
	ReportResult   uintptr
} /* urlmon.h:271:9 */

type IInternetProtocolSinkVtbl = IInternetProtocolSinkVtbl1 /* urlmon.h:5619:3 */

// ****************************************************************************
//
// IInternetProtocolSinkStackable interface

type LPIINTERNETPROTOCOLSINKStackable = uintptr /* urlmon.h:5679:40 */
type IInternetProtocolSinkStackableVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	SwitchSink     uintptr
	CommitSwitch   uintptr
	RollbackSwitch uintptr
} /* urlmon.h:279:9 */

type IInternetProtocolSinkStackableVtbl = IInternetProtocolSinkStackableVtbl1 /* urlmon.h:5727:3 */

// ****************************************************************************
//
// IInternetSession interface

type LPIINTERNETSESSION = uintptr /* urlmon.h:5783:26 */

type OIBDG_FLAGS = uint32 /* urlmon.h:5788:3 */
type IInternetSessionVtbl1 = struct {
	QueryInterface       uintptr
	AddRef               uintptr
	Release              uintptr
	RegisterNameSpace    uintptr
	UnregisterNameSpace  uintptr
	RegisterMimeFilter   uintptr
	UnregisterMimeFilter uintptr
	CreateBinding        uintptr
	SetSessionOption     uintptr
	GetSessionOption     uintptr
} /* urlmon.h:287:9 */

type IInternetSessionVtbl = IInternetSessionVtbl1 /* urlmon.h:5906:3 */

// ****************************************************************************
//
// IInternetThreadSwitch interface

type LPIINTERNETTHREADSWITCH = uintptr /* urlmon.h:5978:31 */
type IInternetThreadSwitchVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Prepare        uintptr
	Continue       uintptr
} /* urlmon.h:295:9 */

type IInternetThreadSwitchVtbl = IInternetThreadSwitchVtbl1 /* urlmon.h:6019:3 */

// ****************************************************************************
//
// IInternetPriority interface

type LPIINTERNETPRIORITY = uintptr /* urlmon.h:6071:27 */
type IInternetPriorityVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	SetPriority    uintptr
	GetPriority    uintptr
} /* urlmon.h:303:9 */

type IInternetPriorityVtbl = IInternetPriorityVtbl1 /* urlmon.h:6114:3 */

// ****************************************************************************
//
// IInternetProtocolInfo interface

type LPIINTERNETPROTOCOLINFO = uintptr /* urlmon.h:6166:31 */

type PARSEACTION = uint32 /* urlmon.h:6188:3 */

type PSUACTION = uint32 /* urlmon.h:6193:3 */

type QUERYOPTION = uint32 /* urlmon.h:6212:3 */
type IInternetProtocolInfoVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	ParseUrl       uintptr
	CombineUrl     uintptr
	CompareUrl     uintptr
	QueryInfo      uintptr
} /* urlmon.h:311:9 */

type IInternetProtocolInfoVtbl = IInternetProtocolInfoVtbl1 /* urlmon.h:6309:3 */
type IInternetSecurityMgrSiteVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetWindow      uintptr
	EnableModeless uintptr
} /* urlmon.h:319:9 */

type IInternetSecurityMgrSiteVtbl = IInternetSecurityMgrSiteVtbl1 /* urlmon.h:6585:3 */

// ****************************************************************************
//
// IInternetSecurityManager interface

type PUAF = uint32    /* urlmon.h:6675:3 */
type PUAFOUT = uint32 /* urlmon.h:6679:3 */

type SZM_FLAGS = uint32 /* urlmon.h:6685:3 */
type IInternetSecurityManagerVtbl1 = struct {
	QueryInterface    uintptr
	AddRef            uintptr
	Release           uintptr
	SetSecuritySite   uintptr
	GetSecuritySite   uintptr
	MapUrlToZone      uintptr
	GetSecurityId     uintptr
	ProcessUrlAction  uintptr
	QueryCustomPolicy uintptr
	SetZoneMapping    uintptr
	GetZoneMappings   uintptr
} /* urlmon.h:327:9 */

type IInternetSecurityManagerVtbl = IInternetSecurityManagerVtbl1 /* urlmon.h:6814:3 */
type IInternetHostSecurityManagerVtbl1 = struct {
	QueryInterface    uintptr
	AddRef            uintptr
	Release           uintptr
	GetSecurityId     uintptr
	ProcessUrlAction  uintptr
	QueryCustomPolicy uintptr
} /* urlmon.h:359:9 */

type IInternetHostSecurityManagerVtbl = IInternetHostSecurityManagerVtbl1 /* urlmon.h:7521:3 */

// ****************************************************************************
//
// IInternetZoneManager interface

type LPURLZONEMANAGER = uintptr /* urlmon.h:7780:30 */

type URLZONE = int32 /* urlmon.h:7793:3 */

type URLTEMPLATE = uint32 /* urlmon.h:7806:3 */

type ZAFLAGS = uint32 /* urlmon.h:7826:3 */

type _ZONEATTRIBUTES = struct {
	cbSize                 ULONG
	szDisplayName          [260]WCHAR
	szDescription          [200]WCHAR
	szIconPath             [260]WCHAR
	dwTemplateMinLevel     DWORD
	dwTemplateRecommended  DWORD
	dwTemplateCurrentLevel DWORD
	dwFlags                DWORD
} /* urlmon.h:7828:9 */

type ZONEATTRIBUTES = _ZONEATTRIBUTES /* urlmon.h:7837:3 */
type LPZONEATTRIBUTES = uintptr       /* urlmon.h:7838:32 */

type URLZONEREG = uint32 /* urlmon.h:7845:3 */
type IInternetZoneManagerVtbl1 = struct {
	QueryInterface             uintptr
	AddRef                     uintptr
	Release                    uintptr
	GetZoneAttributes          uintptr
	SetZoneAttributes          uintptr
	GetZoneCustomPolicy        uintptr
	SetZoneCustomPolicy        uintptr
	GetZoneActionPolicy        uintptr
	SetZoneActionPolicy        uintptr
	PromptAction               uintptr
	LogAction                  uintptr
	CreateZoneEnumerator       uintptr
	GetZoneAt                  uintptr
	DestroyZoneEnumerator      uintptr
	CopyTemplatePoliciesToZone uintptr
} /* urlmon.h:367:9 */

type IInternetZoneManagerVtbl = IInternetZoneManagerVtbl1 /* urlmon.h:8020:3 */

type _tagCODEBASEHOLD = struct {
	cbSize      ULONG
	_           [4]byte
	szDistUnit  LPWSTR
	szCodeBase  LPWSTR
	dwVersionMS DWORD
	dwVersionLS DWORD
	dwStyle     DWORD
	_           [4]byte
} /* urlmon.h:8657:9 */

type CODEBASEHOLD = _tagCODEBASEHOLD /* urlmon.h:8664:3 */
type LPCODEBASEHOLD = uintptr        /* urlmon.h:8665:33 */

type _tagSOFTDISTINFO = struct {
	cbSize                ULONG
	dwFlags               DWORD
	dwAdState             DWORD
	_                     [4]byte
	szTitle               LPWSTR
	szAbstract            LPWSTR
	szHREF                LPWSTR
	dwInstalledVersionMS  DWORD
	dwInstalledVersionLS  DWORD
	dwUpdateVersionMS     DWORD
	dwUpdateVersionLS     DWORD
	dwAdvertisedVersionMS DWORD
	dwAdvertisedVersionLS DWORD
	dwReserved            DWORD
	_                     [4]byte
} /* urlmon.h:8667:9 */

type SOFTDISTINFO = _tagSOFTDISTINFO /* urlmon.h:8681:3 */
type LPSOFTDISTINFO = uintptr        /* urlmon.h:8682:33 */
type ISoftDistExtVtbl1 = struct {
	QueryInterface               uintptr
	AddRef                       uintptr
	Release                      uintptr
	ProcessSoftDist              uintptr
	GetFirstCodeBase             uintptr
	GetNextCodeBase              uintptr
	AsyncInstallDistributionUnit uintptr
} /* urlmon.h:391:9 */

type ISoftDistExtVtbl = ISoftDistExtVtbl1 /* urlmon.h:8759:3 */

// ****************************************************************************
//
// ICatalogFileInfo interface

type LPCATALOGFILEINFO = uintptr /* urlmon.h:8822:26 */
type ICatalogFileInfoVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetCatalogFile uintptr
	GetJavaTrust   uintptr
} /* urlmon.h:399:9 */

type ICatalogFileInfoVtbl = ICatalogFileInfoVtbl1 /* urlmon.h:8865:3 */

// ****************************************************************************
//
// IDataFilter interface

type LPDATAFILTER = uintptr /* urlmon.h:8917:21 */
type IDataFilterVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	DoEncode         uintptr
	DoDecode         uintptr
	SetEncodingLevel uintptr
} /* urlmon.h:407:9 */

type IDataFilterVtbl = IDataFilterVtbl1 /* urlmon.h:8999:3 */

type _tagPROTOCOLFILTERDATA = struct {
	cbSize        DWORD
	_             [4]byte
	pProtocolSink uintptr
	pProtocol     uintptr
	pUnk          uintptr
	dwFilterFlags DWORD
	_             [4]byte
} /* urlmon.h:9049:9 */

type PROTOCOLFILTERDATA = _tagPROTOCOLFILTERDATA /* urlmon.h:9055:3 */

// ****************************************************************************
//
// IEncodingFilterFactory interface

type LPENCODINGFILTERFACTORY = uintptr /* urlmon.h:9063:32 */

type _tagDATAINFO = struct {
	ulTotalSize      ULONG
	ulavrPacketSize  ULONG
	ulConnectSpeed   ULONG
	ulProcessorSpeed ULONG
} /* urlmon.h:9065:9 */

type DATAINFO = _tagDATAINFO /* urlmon.h:9070:3 */
type IEncodingFilterFactoryVtbl1 = struct {
	QueryInterface   uintptr
	AddRef           uintptr
	Release          uintptr
	FindBestFilter   uintptr
	GetDefaultFilter uintptr
} /* urlmon.h:415:9 */

type IEncodingFilterFactoryVtbl = IEncodingFilterFactoryVtbl1 /* urlmon.h:9123:3 */

type _tagHIT_LOGGING_INFO = struct {
	dwStructSize      DWORD
	_                 [4]byte
	lpszLoggedUrlName LPSTR
	StartTime         SYSTEMTIME
	EndTime           SYSTEMTIME
	lpszExtendedInfo  LPSTR
} /* urlmon.h:9173:9 */

type HIT_LOGGING_INFO = _tagHIT_LOGGING_INFO /* urlmon.h:9179:3 */
type LPHIT_LOGGING_INFO = uintptr            /* urlmon.h:9180:37 */

type CONFIRMSAFETY = struct {
	clsid   CLSID
	pUnk    uintptr
	dwFlags DWORD
	_       [4]byte
} /* urlmon.h:9186:1 */

// ****************************************************************************
//
// IWrappedProtocol interface

type LPIWRAPPEDPROTOCOL = uintptr /* urlmon.h:9204:26 */
type IWrappedProtocolVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetWrapperCode uintptr
} /* urlmon.h:423:9 */

type IWrappedProtocolVtbl = IWrappedProtocolVtbl1 /* urlmon.h:9242:3 */

// ****************************************************************************
//
// IGetBindHandle interface

type LPGETBINDHANDLE = uintptr /* urlmon.h:9290:24 */

type BINDHANDLETYPES = uint32 /* urlmon.h:9296:3 */
type IGetBindHandleVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	GetBindHandle  uintptr
} /* urlmon.h:431:9 */

type IGetBindHandleVtbl = IGetBindHandleVtbl1 /* urlmon.h:9334:3 */

type _tagPROTOCOL_ARGUMENT = struct {
	szMethod    LPCWSTR
	szTargetUrl LPCWSTR
} /* urlmon.h:9376:9 */

type PROTOCOL_ARGUMENT = _tagPROTOCOL_ARGUMENT /* urlmon.h:9379:3 */
type LPPROTOCOL_ARGUMENT = uintptr             /* urlmon.h:9380:38 */

// ****************************************************************************
//
// IBindCallbackRedirect interface

type LPBINDCALLBACKREDIRECT = uintptr /* urlmon.h:9392:31 */
type IBindCallbackRedirectVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Redirect       uintptr
} /* urlmon.h:439:9 */

type IBindCallbackRedirectVtbl = IBindCallbackRedirectVtbl1 /* urlmon.h:9430:3 */

// End additional prototypes

//** Autogenerated by WIDL 4.12.1 from include/propidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type IPropertyStorage1 = struct{ lpVtbl uintptr } /* propidl.h:23:9 */

// End additional prototypes

//** Autogenerated by WIDL 4.12.1 from include/propidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// Forward declarations

type IPropertyStorage = IPropertyStorage1 /* propidl.h:23:36 */

type IPropertySetStorage1 = struct{ lpVtbl uintptr } /* propidl.h:31:9 */

type IPropertySetStorage = IPropertySetStorage1 /* propidl.h:31:39 */

type IEnumSTATPROPSTG1 = struct{ lpVtbl uintptr } /* propidl.h:39:9 */

type IEnumSTATPROPSTG = IEnumSTATPROPSTG1 /* propidl.h:39:36 */

type IEnumSTATPROPSETSTG1 = struct{ lpVtbl uintptr } /* propidl.h:47:9 */

type IEnumSTATPROPSETSTG = IEnumSTATPROPSETSTG1 /* propidl.h:47:39 */

// Headers for imported files

//** Autogenerated by WIDL 4.12.1 from include/wtypes.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

//** Autogenerated by WIDL 1.6 from include/objidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

//** Autogenerated by WIDL 4.12.1 from include/oaidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type tagVersionedStream = struct {
	guidVersion GUID
	pStream     uintptr
} /* propidl.h:97:9 */

// Headers for imported files

//** Autogenerated by WIDL 4.12.1 from include/wtypes.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

//** Autogenerated by WIDL 1.6 from include/objidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

//** Autogenerated by WIDL 4.12.1 from include/oaidl.idl - Do not edit **

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// Make sure we have internals defined.
// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.
// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type VERSIONEDSTREAM = tagVersionedStream /* propidl.h:100:3 */
type LPVERSIONEDSTREAM = uintptr          /* propidl.h:101:35 */

type tagCAC = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:123:9 */

type CAC = tagCAC /* propidl.h:126:3 */
type tagCAUB = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:127:9 */

type CAUB = tagCAUB /* propidl.h:130:3 */
type tagCAI = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:131:9 */

type CAI = tagCAI /* propidl.h:134:3 */
type tagCAUI = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:135:9 */

type CAUI = tagCAUI /* propidl.h:138:3 */
type tagCAL = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:139:9 */

type CAL = tagCAL /* propidl.h:142:3 */
type tagCAUL = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:143:9 */

type CAUL = tagCAUL /* propidl.h:146:3 */
type tagCAFLT = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:147:9 */

type CAFLT = tagCAFLT /* propidl.h:150:3 */
type tagCADBL = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:151:9 */

type CADBL = tagCADBL /* propidl.h:154:3 */
type tagCACY = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:155:9 */

type CACY = tagCACY /* propidl.h:158:3 */
type tagCADATE = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:159:9 */

type CADATE = tagCADATE /* propidl.h:162:3 */
type tagCABSTR = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:163:9 */

type CABSTR = tagCABSTR /* propidl.h:166:3 */
type tagCABSTRBLOB = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:167:9 */

type CABSTRBLOB = tagCABSTRBLOB /* propidl.h:170:3 */
type tagCABOOL = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:171:9 */

type CABOOL = tagCABOOL /* propidl.h:174:3 */
type tagCASCODE = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:175:9 */

type CASCODE = tagCASCODE /* propidl.h:178:3 */
type tagCAPROPVARIANT = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:179:9 */

type CAPROPVARIANT = tagCAPROPVARIANT /* propidl.h:182:3 */
type tagCAH = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:183:9 */

type CAH = tagCAH /* propidl.h:186:3 */
type tagCAUH = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:187:9 */

type CAUH = tagCAUH /* propidl.h:190:3 */
type tagCALPSTR = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:191:9 */

type CALPSTR = tagCALPSTR /* propidl.h:194:3 */
type tagCALPWSTR = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:195:9 */

type CALPWSTR = tagCALPWSTR /* propidl.h:198:3 */
type tagCAFILETIME = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:199:9 */

type CAFILETIME = tagCAFILETIME /* propidl.h:202:3 */
type tagCACLIPDATA = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:203:9 */

type CACLIPDATA = tagCACLIPDATA /* propidl.h:206:3 */
type tagCACLSID = struct {
	cElems ULONG
	_      [4]byte
	pElems uintptr
} /* propidl.h:207:9 */

type CACLSID = tagCACLSID /* propidl.h:210:3 */

type PROPVAR_PAD1 = WORD /* propidl.h:217:14 */
type PROPVAR_PAD2 = WORD /* propidl.h:218:14 */
type PROPVAR_PAD3 = WORD /* propidl.h:219:14 */

type LPPROPVARIANT = uintptr /* propidl.h:315:31 */

type tagPROPSPEC = struct {
	ulKind ULONG
	_      [4]byte
	__8    struct {
		_      [0]uint64
		propid PROPID
		_      [4]byte
	}
} /* propidl.h:424:9 */

type PROPSPEC = tagPROPSPEC /* propidl.h:430:3 */

type tagSTATPROPSTG = struct {
	lpwstrName LPOLESTR
	propid     PROPID
	vt         VARTYPE
	_          [2]byte
} /* propidl.h:432:9 */

type STATPROPSTG = tagSTATPROPSTG /* propidl.h:436:3 */

type tagSTATPROPSETSTG = struct {
	fmtid       FMTID
	clsid       CLSID
	grfFlags    DWORD
	mtime       FILETIME
	ctime       FILETIME
	atime       FILETIME
	dwOSVersion DWORD
} /* propidl.h:443:9 */

type STATPROPSETSTG = tagSTATPROPSETSTG /* propidl.h:451:3 */
type IPropertyStorageVtbl1 = struct {
	QueryInterface      uintptr
	AddRef              uintptr
	Release             uintptr
	ReadMultiple        uintptr
	WriteMultiple       uintptr
	DeleteMultiple      uintptr
	ReadPropertyNames   uintptr
	WritePropertyNames  uintptr
	DeletePropertyNames uintptr
	Commit              uintptr
	Revert              uintptr
	Enum                uintptr
	SetTimes            uintptr
	SetClass            uintptr
	Stat                uintptr
} /* propidl.h:23:9 */

type IPropertyStorageVtbl = IPropertyStorageVtbl1 /* propidl.h:595:3 */

// ****************************************************************************
//
// IPropertySetStorage interface

type LPPROPERTYSETSTORAGE = uintptr /* propidl.h:683:29 */
type IPropertySetStorageVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Create         uintptr
	Open           uintptr
	Delete         uintptr
	Enum           uintptr
} /* propidl.h:31:9 */

type IPropertySetStorageVtbl = IPropertySetStorageVtbl1 /* propidl.h:752:3 */

// ****************************************************************************
//
// IEnumSTATPROPSTG interface

type LPENUMSTATPROPSTG = uintptr /* propidl.h:808:26 */
type IEnumSTATPROPSTGVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Next           uintptr
	Skip           uintptr
	Reset          uintptr
	Clone          uintptr
} /* propidl.h:39:9 */

type IEnumSTATPROPSTGVtbl = IEnumSTATPROPSTGVtbl1 /* propidl.h:868:3 */

// ****************************************************************************
//
// IEnumSTATPROPSETSTG interface

type LPENUMSTATPROPSETSTG = uintptr /* propidl.h:944:29 */
type IEnumSTATPROPSETSTGVtbl1 = struct {
	QueryInterface uintptr
	AddRef         uintptr
	Release        uintptr
	Next           uintptr
	Skip           uintptr
	Reset          uintptr
	Clone          uintptr
} /* propidl.h:47:9 */

type IEnumSTATPROPSETSTGVtbl = IEnumSTATPROPSETSTGVtbl1 /* propidl.h:1004:3 */

type LPPROPERTYSTORAGE = uintptr /* propidl.h:1074:26 */

type tagSERIALIZEDPROPERTYVALUE = struct {
	dwType DWORD
	rgb    [1]BYTE
	_      [3]byte
} /* propidl.h:1100:9 */

type SERIALIZEDPROPERTYVALUE = tagSERIALIZEDPROPERTYVALUE /* propidl.h:1103:3 */

type NUMPARSE = struct {
	cDig       INT
	dwInFlags  ULONG
	dwOutFlags ULONG
	cchUsed    INT
	nBaseShift INT
	nPwr10     INT
} /* oleauto.h:429:3 */

type UDATE = struct {
	st         SYSTEMTIME
	wDayOfYear USHORT
} /* oleauto.h:530:3 */

type REGKIND = uint32 /* oleauto.h:592:3 */

type tagPARAMDATA = struct {
	szName uintptr
	vt     VARTYPE
	_      [6]byte
} /* oleauto.h:611:9 */

type PARAMDATA = tagPARAMDATA /* oleauto.h:614:3 */
type LPPARAMDATA = uintptr    /* oleauto.h:614:13 */

type tagMETHODDATA = struct {
	szName   uintptr
	ppdata   uintptr
	dispid   DISPID
	iMeth    UINT
	cc       CALLCONV
	cArgs    UINT
	wFlags   WORD
	vtReturn VARTYPE
	_        [4]byte
} /* oleauto.h:616:9 */

type METHODDATA = tagMETHODDATA /* oleauto.h:625:3 */
type LPMETHODDATA = uintptr     /* oleauto.h:625:14 */

type tagINTERFACEDATA = struct {
	pmethdata uintptr
	cMembers  UINT
	_         [4]byte
} /* oleauto.h:627:9 */

type INTERFACEDATA = tagINTERFACEDATA /* oleauto.h:630:3 */
type LPINTERFACEDATA = uintptr        /* oleauto.h:630:17 */

type _OLESTREAM = struct{ lpstbl LPOLESTREAMVTBL } /* ole2.h:109:9 */

type LPOLESTREAM = uintptr /* ole2.h:109:27 */

type _OLESTREAMVTBL = struct {
	Get uintptr
	Put uintptr
} /* ole2.h:109:9 */

type OLESTREAMVTBL = _OLESTREAMVTBL /* ole2.h:114:3 */
type LPOLESTREAMVTBL = uintptr      /* ole2.h:115:23 */

type OLESTREAM = _OLESTREAM /* ole2.h:119:3 */

// *
// This file has no copyright assigned and is placed in the Public Domain.
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER.PD within this package.

// *
// This file is part of the mingw-w64 runtime package.
// No warranty is given; refer to the file DISCLAIMER within this package.

type SE_OBJECT_TYPE = uint32 /* accctrl.h:36:5 */

type TRUSTEE_TYPE = uint32 /* accctrl.h:48:5 */
type TRUSTEE_FORM = uint32 /* accctrl.h:55:5 */

type MULTIPLE_TRUSTEE_OPERATION = uint32 /* accctrl.h:60:5 */

type _OBJECTS_AND_SID = struct {
	ObjectsPresent          DWORD
	ObjectTypeGuid          GUID
	InheritedObjectTypeGuid GUID
	_                       [4]byte
	pSid                    uintptr
} /* accctrl.h:62:11 */

type OBJECTS_AND_SID = _OBJECTS_AND_SID /* accctrl.h:67:5 */
type POBJECTS_AND_SID = uintptr         /* accctrl.h:67:22 */

type _OBJECTS_AND_NAME_A = struct {
	ObjectsPresent          DWORD
	ObjectType              SE_OBJECT_TYPE
	ObjectTypeName          LPSTR
	InheritedObjectTypeName LPSTR
	ptstrName               LPSTR
} /* accctrl.h:69:11 */

type OBJECTS_AND_NAME_A = _OBJECTS_AND_NAME_A /* accctrl.h:75:5 */
type POBJECTS_AND_NAME_A = uintptr            /* accctrl.h:75:25 */

type _OBJECTS_AND_NAME_W = struct {
	ObjectsPresent          DWORD
	ObjectType              SE_OBJECT_TYPE
	ObjectTypeName          LPWSTR
	InheritedObjectTypeName LPWSTR
	ptstrName               LPWSTR
} /* accctrl.h:77:11 */

type OBJECTS_AND_NAME_W = _OBJECTS_AND_NAME_W /* accctrl.h:83:5 */
type POBJECTS_AND_NAME_W = uintptr            /* accctrl.h:83:25 */

type OBJECTS_AND_NAME_ = OBJECTS_AND_NAME_A   /* accctrl.h:85:3 */
type POBJECTS_AND_NAME_ = POBJECTS_AND_NAME_A /* accctrl.h:86:3 */

type _TRUSTEE_A = struct {
	pMultipleTrustee         uintptr
	MultipleTrusteeOperation MULTIPLE_TRUSTEE_OPERATION
	TrusteeForm              TRUSTEE_FORM
	TrusteeType              TRUSTEE_TYPE
	_                        [4]byte
	ptstrName                LPSTR
} /* accctrl.h:88:11 */

type TRUSTEE_A = _TRUSTEE_A /* accctrl.h:103:5 */
type PTRUSTEE_A = uintptr   /* accctrl.h:103:16 */
type TRUSTEEA = _TRUSTEE_A  /* accctrl.h:103:29 */
type PTRUSTEEA = uintptr    /* accctrl.h:103:39 */

type _TRUSTEE_W = struct {
	pMultipleTrustee         uintptr
	MultipleTrusteeOperation MULTIPLE_TRUSTEE_OPERATION
	TrusteeForm              TRUSTEE_FORM
	TrusteeType              TRUSTEE_TYPE
	_                        [4]byte
	ptstrName                LPWSTR
} /* accctrl.h:105:11 */

type TRUSTEE_W = _TRUSTEE_W /* accctrl.h:120:5 */
type PTRUSTEE_W = uintptr   /* accctrl.h:120:16 */
type TRUSTEEW = _TRUSTEE_W  /* accctrl.h:120:29 */
type PTRUSTEEW = uintptr    /* accctrl.h:120:39 */

type TRUSTEE_ = TRUSTEE_A   /* accctrl.h:122:3 */
type PTRUSTEE_ = PTRUSTEE_A /* accctrl.h:123:3 */
type TRUSTEE = TRUSTEEA     /* accctrl.h:124:3 */
type PTRUSTEE = PTRUSTEEA   /* accctrl.h:125:3 */

type ACCESS_MODE = uint32 /* accctrl.h:135:5 */

type _EXPLICIT_ACCESS_A = struct {
	grfAccessPermissions DWORD
	grfAccessMode        ACCESS_MODE
	grfInheritance       DWORD
	_                    [4]byte
	Trustee              TRUSTEE_A
} /* accctrl.h:148:11 */

type EXPLICIT_ACCESS_A = _EXPLICIT_ACCESS_A /* accctrl.h:153:5 */
type PEXPLICIT_ACCESS_A = uintptr           /* accctrl.h:153:24 */
type EXPLICIT_ACCESSA = _EXPLICIT_ACCESS_A  /* accctrl.h:153:45 */
type PEXPLICIT_ACCESSA = uintptr            /* accctrl.h:153:63 */

type _EXPLICIT_ACCESS_W = struct {
	grfAccessPermissions DWORD
	grfAccessMode        ACCESS_MODE
	grfInheritance       DWORD
	_                    [4]byte
	Trustee              TRUSTEE_W
} /* accctrl.h:155:11 */

type EXPLICIT_ACCESS_W = _EXPLICIT_ACCESS_W /* accctrl.h:160:5 */
type PEXPLICIT_ACCESS_W = uintptr           /* accctrl.h:160:24 */
type EXPLICIT_ACCESSW = _EXPLICIT_ACCESS_W  /* accctrl.h:160:45 */
type PEXPLICIT_ACCESSW = uintptr            /* accctrl.h:160:63 */

type EXPLICIT_ACCESS_ = EXPLICIT_ACCESS_A   /* accctrl.h:162:3 */
type PEXPLICIT_ACCESS_ = PEXPLICIT_ACCESS_A /* accctrl.h:163:3 */
type EXPLICIT_ACCESS = EXPLICIT_ACCESSA     /* accctrl.h:164:3 */
type PEXPLICIT_ACCESS = PEXPLICIT_ACCESSA   /* accctrl.h:165:3 */

type ACCESS_RIGHTS = ULONG    /* accctrl.h:172:17 */
type PACCESS_RIGHTS = uintptr /* accctrl.h:172:32 */
type INHERIT_FLAGS = ULONG    /* accctrl.h:173:17 */
type PINHERIT_FLAGS = uintptr /* accctrl.h:173:32 */

type _ACTRL_ACCESS_ENTRYA = struct {
	Trustee            TRUSTEE_A
	fAccessFlags       ULONG
	Access             ACCESS_RIGHTS
	ProvSpecificAccess ACCESS_RIGHTS
	Inheritance        INHERIT_FLAGS
	lpInheritProperty  LPSTR
} /* accctrl.h:175:11 */

type ACTRL_ACCESS_ENTRYA = _ACTRL_ACCESS_ENTRYA /* accctrl.h:182:5 */
type PACTRL_ACCESS_ENTRYA = uintptr             /* accctrl.h:182:26 */

type _ACTRL_ACCESS_ENTRYW = struct {
	Trustee            TRUSTEE_W
	fAccessFlags       ULONG
	Access             ACCESS_RIGHTS
	ProvSpecificAccess ACCESS_RIGHTS
	Inheritance        INHERIT_FLAGS
	lpInheritProperty  LPWSTR
} /* accctrl.h:184:11 */

type ACTRL_ACCESS_ENTRYW = _ACTRL_ACCESS_ENTRYW /* accctrl.h:191:5 */
type PACTRL_ACCESS_ENTRYW = uintptr             /* accctrl.h:191:26 */

type ACTRL_ACCESS_ENTRY = ACTRL_ACCESS_ENTRYA   /* accctrl.h:193:3 */
type PACTRL_ACCESS_ENTRY = PACTRL_ACCESS_ENTRYA /* accctrl.h:194:3 */

type _ACTRL_ACCESS_ENTRY_LISTA = struct {
	cEntries    ULONG
	_           [4]byte
	pAccessList uintptr
} /* accctrl.h:196:11 */

type ACTRL_ACCESS_ENTRY_LISTA = _ACTRL_ACCESS_ENTRY_LISTA /* accctrl.h:202:5 */
type PACTRL_ACCESS_ENTRY_LISTA = uintptr                  /* accctrl.h:202:31 */

type _ACTRL_ACCESS_ENTRY_LISTW = struct {
	cEntries    ULONG
	_           [4]byte
	pAccessList uintptr
} /* accctrl.h:204:11 */

type ACTRL_ACCESS_ENTRY_LISTW = _ACTRL_ACCESS_ENTRY_LISTW /* accctrl.h:210:5 */
type PACTRL_ACCESS_ENTRY_LISTW = uintptr                  /* accctrl.h:210:31 */

type ACTRL_ACCESS_ENTRY_LIST = ACTRL_ACCESS_ENTRY_LISTA   /* accctrl.h:212:3 */
type PACTRL_ACCESS_ENTRY_LIST = PACTRL_ACCESS_ENTRY_LISTA /* accctrl.h:213:3 */

type _ACTRL_PROPERTY_ENTRYA = struct {
	lpProperty       LPSTR
	pAccessEntryList PACTRL_ACCESS_ENTRY_LISTA
	fListFlags       ULONG
	_                [4]byte
} /* accctrl.h:215:11 */

type ACTRL_PROPERTY_ENTRYA = _ACTRL_PROPERTY_ENTRYA /* accctrl.h:219:5 */
type PACTRL_PROPERTY_ENTRYA = uintptr               /* accctrl.h:219:28 */

type _ACTRL_PROPERTY_ENTRYW = struct {
	lpProperty       LPWSTR
	pAccessEntryList PACTRL_ACCESS_ENTRY_LISTW
	fListFlags       ULONG
	_                [4]byte
} /* accctrl.h:221:11 */

type ACTRL_PROPERTY_ENTRYW = _ACTRL_PROPERTY_ENTRYW /* accctrl.h:225:5 */
type PACTRL_PROPERTY_ENTRYW = uintptr               /* accctrl.h:225:28 */

type ACTRL_PROPERTY_ENTRY = ACTRL_PROPERTY_ENTRYA   /* accctrl.h:227:3 */
type PACTRL_PROPERTY_ENTRY = PACTRL_PROPERTY_ENTRYA /* accctrl.h:228:3 */

type _ACTRL_ALISTA = struct {
	cEntries            ULONG
	_                   [4]byte
	pPropertyAccessList PACTRL_PROPERTY_ENTRYA
} /* accctrl.h:230:11 */

type ACTRL_ACCESSA = _ACTRL_ALISTA /* accctrl.h:236:5 */
type PACTRL_ACCESSA = uintptr      /* accctrl.h:236:20 */
type ACTRL_AUDITA = _ACTRL_ALISTA  /* accctrl.h:236:37 */
type PACTRL_AUDITA = uintptr       /* accctrl.h:236:51 */

type _ACTRL_ALISTW = struct {
	cEntries            ULONG
	_                   [4]byte
	pPropertyAccessList PACTRL_PROPERTY_ENTRYW
} /* accctrl.h:238:11 */

type ACTRL_ACCESSW = _ACTRL_ALISTW /* accctrl.h:244:5 */
type PACTRL_ACCESSW = uintptr      /* accctrl.h:244:20 */
type ACTRL_AUDITW = _ACTRL_ALISTW  /* accctrl.h:244:37 */
type PACTRL_AUDITW = uintptr       /* accctrl.h:244:51 */

type ACTRL_ACCESS = ACTRL_ACCESSA   /* accctrl.h:246:3 */
type PACTRL_ACCESS = PACTRL_ACCESSA /* accctrl.h:247:3 */
type ACTRL_AUDIT = ACTRL_AUDITA     /* accctrl.h:248:3 */
type PACTRL_AUDIT = PACTRL_AUDITA   /* accctrl.h:249:3 */

type _TRUSTEE_ACCESSA = struct {
	lpProperty      LPSTR
	Access          ACCESS_RIGHTS
	fAccessFlags    ULONG
	fReturnedAccess ULONG
	_               [4]byte
} /* accctrl.h:259:11 */

type TRUSTEE_ACCESSA = _TRUSTEE_ACCESSA /* accctrl.h:264:5 */
type PTRUSTEE_ACCESSA = uintptr         /* accctrl.h:264:22 */

type _TRUSTEE_ACCESSW = struct {
	lpProperty      LPWSTR
	Access          ACCESS_RIGHTS
	fAccessFlags    ULONG
	fReturnedAccess ULONG
	_               [4]byte
} /* accctrl.h:266:11 */

type TRUSTEE_ACCESSW = _TRUSTEE_ACCESSW /* accctrl.h:271:5 */
type PTRUSTEE_ACCESSW = uintptr         /* accctrl.h:271:22 */

type TRUSTEE_ACCESS = TRUSTEE_ACCESSA   /* accctrl.h:273:3 */
type PTRUSTEE_ACCESS = PTRUSTEE_ACCESSA /* accctrl.h:274:3 */

type _ACTRL_OVERLAPPED = struct {
	__0       struct{ Provider PVOID }
	Reserved2 ULONG
	_         [4]byte
	hEvent    HANDLE
} /* accctrl.h:389:11 */

type ACTRL_OVERLAPPED = _ACTRL_OVERLAPPED /* accctrl.h:396:5 */
type PACTRL_OVERLAPPED = uintptr          /* accctrl.h:396:23 */

type _ACTRL_ACCESS_INFOA = struct {
	fAccessPermission      ULONG
	_                      [4]byte
	lpAccessPermissionName LPSTR
} /* accctrl.h:398:11 */

type ACTRL_ACCESS_INFOA = _ACTRL_ACCESS_INFOA /* accctrl.h:401:5 */
type PACTRL_ACCESS_INFOA = uintptr            /* accctrl.h:401:25 */

type _ACTRL_ACCESS_INFOW = struct {
	fAccessPermission      ULONG
	_                      [4]byte
	lpAccessPermissionName LPWSTR
} /* accctrl.h:403:11 */

type ACTRL_ACCESS_INFOW = _ACTRL_ACCESS_INFOW /* accctrl.h:406:5 */
type PACTRL_ACCESS_INFOW = uintptr            /* accctrl.h:406:25 */

type ACTRL_ACCESS_INFO = ACTRL_ACCESS_INFOA   /* accctrl.h:408:3 */
type PACTRL_ACCESS_INFO = PACTRL_ACCESS_INFOA /* accctrl.h:409:3 */

type _ACTRL_CONTROL_INFOA = struct {
	lpControlId   LPSTR
	lpControlName LPSTR
} /* accctrl.h:411:11 */

type ACTRL_CONTROL_INFOA = _ACTRL_CONTROL_INFOA /* accctrl.h:414:5 */
type PACTRL_CONTROL_INFOA = uintptr             /* accctrl.h:414:26 */

type _ACTRL_CONTROL_INFOW = struct {
	lpControlId   LPWSTR
	lpControlName LPWSTR
} /* accctrl.h:416:11 */

type ACTRL_CONTROL_INFOW = _ACTRL_CONTROL_INFOW /* accctrl.h:419:5 */
type PACTRL_CONTROL_INFOW = uintptr             /* accctrl.h:419:26 */

type ACTRL_CONTROL_INFO = ACTRL_CONTROL_INFOA   /* accctrl.h:421:3 */
type PACTRL_CONTROL_INFO = PACTRL_CONTROL_INFOA /* accctrl.h:422:3 */

type PROG_INVOKE_SETTING = uint32   /* accctrl.h:438:5 */
type PPROG_INVOKE_SETTING = uintptr /* accctrl.h:438:26 */

type _FN_OBJECT_MGR_FUNCTIONS = struct{ Placeholder ULONG } /* accctrl.h:440:11 */

type FN_OBJECT_MGR_FUNCTS = _FN_OBJECT_MGR_FUNCTIONS /* accctrl.h:442:5 */
type PFN_OBJECT_MGR_FUNCTS = uintptr                 /* accctrl.h:442:27 */

type _INHERITED_FROMA = struct {
	GenerationGap LONG
	_             [4]byte
	AncestorName  LPSTR
} /* accctrl.h:444:11 */

type INHERITED_FROMA = _INHERITED_FROMA /* accctrl.h:447:5 */
type PINHERITED_FROMA = uintptr         /* accctrl.h:447:22 */

type _INHERITED_FROMW = struct {
	GenerationGap LONG
	_             [4]byte
	AncestorName  LPWSTR
} /* accctrl.h:449:11 */

type INHERITED_FROMW = _INHERITED_FROMW /* accctrl.h:452:5 */
type PINHERITED_FROMW = uintptr         /* accctrl.h:452:22 */

type INHERITED_FROM = INHERITED_FROMA   /* accctrl.h:454:3 */
type PINHERITED_FROM = PINHERITED_FROMA /* accctrl.h:455:3 */

type FN_PROGRESS = uintptr /* aclapi.h:20:16 */

//----------------------------------------------------------------------
//
// TclplatformtestInit --
//
//	Defines commands that test platform specific functionality for Windows
//	platforms.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Defines new commands.
//
//----------------------------------------------------------------------

func TclplatformtestInit(tls *libc.TLS, interp uintptr) int32 { /* tclWinTest.c:69:1: */
	// Add commands for platform specific tests for Windows here.

	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+10239 /* "testchmod" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestchmodCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+10249 /* "testeventloop" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TesteventloopCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+10263 /* "testvolumetype" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestvolumetypeCmd})),
		uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+10278 /* "testwinclock" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestwinclockCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+10291 /* "testwinsleep" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestwinsleepCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+10304 /* "testexcept" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestExceptionCmd})), uintptr(0), uintptr(0))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, ClientData, uintptr) Tcl_Command
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_CreateObjCommand})).f(tls, interp, ts+10315 /* "testsize" */, *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32
	}{TestSizeCmd})), uintptr(0), uintptr(0))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TesteventloopCmd --
//
//	This function implements the "testeventloop" command. It is used to
//	test the Tcl notifier from an "external" event loop (i.e. not
//	Tcl_DoOneEvent()).
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TesteventloopCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclWinTest.c:106:1: */
	bp := tls.Alloc(88)
	defer tls.Free(88)
	// Pointer to integer on stack frame of
	// innermost invocation of the "wait"
	// subcommand.

	if objc < 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+10324 /* "option ..." */)
		return TCL_ERROR
	}
	if libc.Xstrcmp(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8))), ts+10335) == 0 {
		*(*int32)(unsafe.Pointer(framePtr)) = 1
	} else if libc.Xstrcmp(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8))), ts+10340) == 0 {
		var oldFramePtr uintptr
		// var done int32 at bp+32, 4

		var oldMode int32 = (*struct{ f func(*libc.TLS, int32) int32 })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetServiceMode})).f(tls, TCL_SERVICE_ALL)

		// Save the old stack frame pointer and set up the current frame.

		oldFramePtr = framePtr
		framePtr = bp + 32 /* &done */

		// Enter a standard Windows event loop until the flag changes. Note
		// that we do not explicitly call Tcl_ServiceEvent().

		*(*int32)(unsafe.Pointer(bp + 32 /* done */)) = 0
		for !(*(*int32)(unsafe.Pointer(bp + 32)) != 0) {
			// var msg MSG at bp+40, 48

			if !(libc.XGetMessageW(tls, bp+40, uintptr(0), uint32(0), uint32(0)) != 0) {
				// The application is exiting, so repost the quit message and
				// start unwinding.

				libc.XPostQuitMessage(tls, int32((*MSG)(unsafe.Pointer(bp+40 /* &msg */)).wParam))
				break
			}
			libc.XTranslateMessage(tls, bp+40)
			libc.XDispatchMessageW(tls, bp+40)
		}
		(*struct{ f func(*libc.TLS, int32) int32 })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetServiceMode})).f(tls, oldMode)
		framePtr = oldFramePtr
	} else {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+1302 /* "bad option \"" */, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8))),
			ts+10345, uintptr(0)))
		return TCL_ERROR
	}
	return TCL_OK
}

var framePtr uintptr = uintptr(0) /* tclWinTest.c:112:16 */

//----------------------------------------------------------------------
//
// Testvolumetype --
//
//	This function implements the "testvolumetype" command. It is used to
//	check the volume type (FAT, NTFS) of a volume.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestvolumetypeCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclWinTest.c:182:1: */
	bp := tls.Alloc(80)
	defer tls.Free(80)

	var found int32
	// var volType [32]int8 at bp+48, 32

	var path uintptr

	if objc > 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+10369 /* "?name?" */)
		return TCL_ERROR
	}
	if objc == 2 {
		// path has to be really a proper volume, but we don't get query APIs
		// for that until NT5

		path = (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8)))
	} else {
		path = uintptr(0)
	}
	found = libc.XGetVolumeInformationA(tls, path, uintptr(0), uint32(0), uintptr(0), uintptr(0), uintptr(0), bp+48,
		uint32(32))

	if found == 0 {
		(*struct {
			f func(*libc.TLS, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, ts+10376, /* "could not get vo..." */
			func() uintptr {
				if path != 0 {
					return path
				}
				return ts + 1355
			}(), ts+1677, uintptr(0)))
		(*struct{ f func(*libc.TLS, DWORD) })(unsafe.Pointer(&struct{ uintptr }{(*TclIntPlatStubs)(unsafe.Pointer(tcl.XtclIntPlatStubsPtr)).tclWinConvertError})).f(tls, libc.XGetLastError(tls))
		return TCL_ERROR
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp+32, bp+48 /* &volType[0] */, uintptr(0)))
	return TCL_OK
}

//----------------------------------------------------------------------
//
// TestwinclockCmd --
//
//	Command that returns the seconds and microseconds portions of the
//	system clock and of the Tcl clock so that they can be compared to
//	validate that the Tcl clock is staying in sync.
//
// Usage:
//	testclock
//
// Parameters:
//	None.
//
// Results:
//	Returns a standard Tcl result comprising a four-element list: the
//	seconds and microseconds portions of the system clock, and the seconds
//	and microseconds portions of the Tcl clock.
//
// Side effects:
//	None.
//
//----------------------------------------------------------------------

func TestwinclockCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclWinTest.c:248:1: */
	bp := tls.Alloc(56)
	defer tls.Free(56)

	// The Posix epoch, expressed as a Windows
	// FILETIME
	// var tclTime Tcl_Time at bp+16, 8
	// Tcl clock
	// var sysTime FILETIME at bp+24, 8
	// System clock
	var result uintptr // Result of the command
	// var t1 LARGE_INTEGER at bp+32, 8

	// var t2 LARGE_INTEGER at bp+40, 8

	// var p1 LARGE_INTEGER at bp, 8

	// var p2 LARGE_INTEGER at bp+48, 8

	if objc != 1 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+1355 /* "" */)
		return TCL_ERROR
	}

	libc.XQueryPerformanceCounter(tls, bp)

	for ok := true; ok; ok = 0 != 0 {
		// var _t struct {_ [0]uint64;now Tcl_Time;} at bp+8, 8
		*(*int64)(unsafe.Pointer(bp + 8)) = int64(-1)
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetTime})).f(tls, bp+8 /* &_t */ /* &.now */)
		if *(*int64)(unsafe.Pointer(bp + 8 /* &_t */)) != int64(-1) {
			(*Tcl_Time)(unsafe.Pointer(bp + 8 /* &_t */)).usec = int32(*(*int64)(unsafe.Pointer(bp + 8 /* &_t */)))
		}
		*(*Tcl_Time)(unsafe.Pointer(bp + 16 /* &tclTime */)) = *(*Tcl_Time)(unsafe.Pointer(bp + 8 /* &_t */))
	}
	libc.XGetSystemTimeAsFileTime(tls, bp+24)
	*(*DWORD)(unsafe.Pointer(bp + 32)) = posixEpoch.dwLowDateTime
	*(*LONG)(unsafe.Pointer(bp + 32)) = LONG(posixEpoch.dwHighDateTime)
	*(*DWORD)(unsafe.Pointer(bp + 40)) = (*FILETIME)(unsafe.Pointer(bp + 24 /* &sysTime */)).dwLowDateTime
	*(*LONG)(unsafe.Pointer(bp + 40)) = LONG((*FILETIME)(unsafe.Pointer(bp + 24 /* &sysTime */)).dwHighDateTime)
	*(*LONGLONG)(unsafe.Pointer(bp + 40)) -= *(*LONGLONG)(unsafe.Pointer(bp + 32))

	libc.XQueryPerformanceCounter(tls, bp+48)

	result = (*struct{ f func(*libc.TLS) uintptr })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewObj})).f(tls)
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, interp, result,
		(*struct {
			f func(*libc.TLS, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, int32(*(*LONGLONG)(unsafe.Pointer(bp + 40 /* &t2 */))/int64(10000000))))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, interp, result,
		(*struct {
			f func(*libc.TLS, int32) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, int32(*(*LONGLONG)(unsafe.Pointer(bp + 40 /* &t2 */))/int64(10)%int64(1000000))))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, interp, result, (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, int32((*Tcl_Time)(unsafe.Pointer(bp+16 /* &tclTime */)).sec)))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, interp, result, (*struct {
		f func(*libc.TLS, int32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewIntObj})).f(tls, int32((*Tcl_Time)(unsafe.Pointer(bp+16 /* &tclTime */)).usec)))

	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, interp, result, (*struct {
		f func(*libc.TLS, Tcl_WideInt) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewWideIntObj})).f(tls, *(*LONGLONG)(unsafe.Pointer(bp /* &p1 */))))
	(*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_ListObjAppendElement})).f(tls, interp, result, (*struct {
		f func(*libc.TLS, Tcl_WideInt) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewWideIntObj})).f(tls, *(*LONGLONG)(unsafe.Pointer(bp + 48 /* &p2 */))))

	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, result)

	return TCL_OK
}

var posixEpoch = FILETIME{dwLowDateTime: 0xD53E8000, dwHighDateTime: DWORD(0x019DB1DE)} /* tclWinTest.c:254:27 */

func TestwinsleepCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclWinTest.c:297:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	// var ms int32 at bp, 4

	if objc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+10408 /* "ms" */)
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp) != TCL_OK {
		return TCL_ERROR
	}
	libc.XSleep(tls, DWORD(*(*int32)(unsafe.Pointer(bp /* ms */))))
	return TCL_OK
}

func TestSizeCmd(tls *libc.TLS, clientData ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclWinTest.c:317:1: */
	var statPtr uintptr
	_ = statPtr
	if !(objc != 2) {
		goto __1
	}
	goto syntax
__1:
	;
	if !(libc.Xstrcmp(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8))), ts+10411) == 0) {
		goto __2
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, Tcl_WideInt) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewWideIntObj})).f(tls, int64(unsafe.Sizeof(time_t(0)))))
	return TCL_OK
__2:
	;
	if !(libc.Xstrcmp(tls, (*struct {
		f func(*libc.TLS, uintptr) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + 1*8))), ts+10418) == 0) {
		goto __3
	}
	(*struct {
		f func(*libc.TLS, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_SetObjResult})).f(tls, interp, (*struct {
		f func(*libc.TLS, Tcl_WideInt) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_NewWideIntObj})).f(tls, int64(unsafe.Sizeof(int64(0)))))
	return TCL_OK
__3:
	;

syntax:
	(*struct {
		f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+10427 /* "time_t|st_mtime" */)
	return TCL_ERROR
}

//----------------------------------------------------------------------
//
// TestExceptionCmd --
//
//	Causes this process to end with the named exception. Used for testing
//	Tcl_WaitPid().
//
// Usage:
//	testexcept <type>
//
// Parameters:
//	Type of exception.
//
// Results:
//	None, this process closes now and doesn't return.
//
// Side effects:
//	This Tcl process closes, hard... Bang!
//
//----------------------------------------------------------------------

func TestExceptionCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclWinTest.c:365:1: */
	bp := tls.Alloc(4)
	defer tls.Free(4)

	// var cmd int32 at bp, 4

	if objc != 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 0, objv, ts+10443 /* "<type-of-excepti..." */)
		return TCL_ERROR
	}
	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, int32, uintptr, int32, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIndexFromObjStruct})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), uintptr(unsafe.Pointer(&cmds)), int32(unsafe.Sizeof(uintptr(0))), ts+4469, 0, bp) != TCL_OK {
		return TCL_ERROR
	}

	// Make sure the GPF dialog doesn't popup.

	libc.XSetErrorMode(tls, uint32(SEM_FAILCRITICALERRORS|SEM_NOGPFAULTERRORBOX))

	// As Tcl does not handle structured exceptions, this falls all the way
	// back up the instruction stack to the C run-time portion that called
	// main() where the process will now be terminated with this exception
	// code by the default handler the C run-time provides.

	// SMASH!
	libc.XRaiseException(tls, exceptions[*(*int32)(unsafe.Pointer(bp /* cmd */))], uint32(EXCEPTION_NONCONTINUABLE), uint32(0), uintptr(0))

	// NOTREACHED
	return TCL_OK
}

var cmds = [22]uintptr{
	ts + 10463, ts + 10480, ts + 10502,
	ts + 10515, ts + 10530, ts + 10546,
	ts + 10560, ts + 10576, ts + 10591, ts + 10603,
	ts + 10619, ts + 10633, ts + 10646, ts + 10666,
	ts + 10678, ts + 10698, ts + 10710,
	ts + 10725, ts + 10738, ts + 10749, ts + 10764,
	uintptr(0),
} /* tclWinTest.c:371:23 */
var exceptions = [21]DWORD{
	0xC0000005, 0x80000002,
	0xC000008C, 0xC000008D,
	0xC000008E, 0xC000008F,
	0xC0000090, 0xC0000091,
	0xC0000092, 0xC0000093,
	0xC0000094, 0xC0000095,
	0xC0000096, 0xC0000006,
	0xC000001D, 0xC0000025,
	0xC00000FD, 0xC0000026,
	0x80000001, 0xC0000008, 0xC000013A,
} /* tclWinTest.c:380:24 */

func TestplatformChmod(tls *libc.TLS, nativePath uintptr, pmode int32) int32 { /* tclWinTest.c:424:1: */
	bp := tls.Alloc(56)
	defer tls.Free(56)

	// References to security functions (only available on NT and later).

	var set_readOnly WINBOOL
	var acl_readOnly_found WINBOOL
	// var curAclPresent WINBOOL at bp+16, 4

	// var curAclDefaulted WINBOOL at bp+32, 4

	// var userSidAuthority SID_IDENTIFIER_AUTHORITY at bp+8, 6

	var secDesc uintptr
	// var secDescLen DWORD at bp, 4

	var attr DWORD
	var newAclSize DWORD
	// var ACLSize ACL_SIZE_INFORMATION at bp+36, 12

	// var curAcl PACL at bp+24, 8

	var newAcl PACL
	var j WORD
	var userSid uintptr
	var userDomain uintptr
	var res int32
	// var secDescLen2 DWORD at bp+4, 4

	var pACEd uintptr
	// var pACE2 LPVOID at bp+48, 8

	var phACE2 uintptr
	set_readOnly = libc.BoolInt32(!(pmode&0222 != 0))
	acl_readOnly_found = FALSE
	*(*SID_IDENTIFIER_AUTHORITY)(unsafe.Pointer(bp + 8 /* userSidAuthority */)) = SID_IDENTIFIER_AUTHORITY{
		Value: [6]BYTE{BYTE(0), BYTE(0), BYTE(0), BYTE(0), BYTE(0), BYTE(1)},
	}
	secDesc = uintptr(0)
	newAcl = uintptr(0)
	userSid = uintptr(0)
	userDomain = uintptr(0)
	res = 0

	// Process the chmod request.

	attr = libc.XGetFileAttributesA(tls, nativePath)

	// nativePath not found

	if !(attr == 0xFFFFFFFF) {
		goto __1
	}
	res = -1
	goto done
__1:
	;

	// If nativePath is not a directory, there is no special handling.

	if !!(attr&DWORD(FILE_ATTRIBUTE_DIRECTORY) != 0) {
		goto __2
	}
	goto done
__2:
	;

	// Set the result to error, if the ACL change is successful it will be
	// reset to 0.

	res = -1

	// Read the security descriptor for the directory. Note the first call
	// obtains the size of the security descriptor.

	if !!(libc.XGetFileSecurityA(tls, nativePath, infoBits, uintptr(0), uint32(0), bp) != 0) {
		goto __3
	}
	*(*DWORD)(unsafe.Pointer(bp + 4 /* secDescLen2 */)) = DWORD(0)

	if !(libc.XGetLastError(tls) != DWORD(122)) {
		goto __4
	}
	goto done
__4:
	;

	secDesc = (*struct {
		f func(*libc.TLS, uint32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(*(*DWORD)(unsafe.Pointer(bp))))
	if !(!(libc.XGetFileSecurityA(tls, nativePath, infoBits,
		secDesc, *(*DWORD)(unsafe.Pointer(bp)), bp+4) != 0) ||
		*(*DWORD)(unsafe.Pointer(bp)) < *(*DWORD)(unsafe.Pointer(bp + 4))) {
		goto __5
	}
	goto done
__5:
	;
__3:
	;

	// Get the World SID.

	userSid = (*struct {
		f func(*libc.TLS, uint32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(libc.XGetSidLengthRequired(tls, UCHAR(1))))
	libc.XInitializeSid(tls, userSid, bp+8, BYTE(1))
	*(*DWORD)(unsafe.Pointer(libc.XGetSidSubAuthority(tls, userSid, uint32(0)))) = DWORD(0x00000000)

	// If curAclPresent == false then curAcl and curAclDefaulted not valid.

	if !!(libc.XGetSecurityDescriptorDacl(tls, secDesc,
		bp+16, bp+24, bp+32) != 0) {
		goto __6
	}
	goto done
__6:
	;
	if !(!(*(*WINBOOL)(unsafe.Pointer(bp + 16)) != 0) || !(*(*PACL)(unsafe.Pointer(bp + 24)) != 0)) {
		goto __7
	}
	(*ACL_SIZE_INFORMATION)(unsafe.Pointer(bp + 36 /* &ACLSize */)).AclBytesInUse = DWORD(0)
	(*ACL_SIZE_INFORMATION)(unsafe.Pointer(bp + 36 /* &ACLSize */)).AceCount = DWORD(0)
	goto __8
__7:
	if !!(libc.XGetAclInformation(tls, *(*PACL)(unsafe.Pointer(bp + 24)), bp+36, uint32(unsafe.Sizeof(ACL_SIZE_INFORMATION{})),
		AclSizeInformation) != 0) {
		goto __9
	}
	goto done
__9:
	;
__8:
	;

	// Allocate memory for the new ACL.

	newAclSize = DWORD(uint64((*ACL_SIZE_INFORMATION)(unsafe.Pointer(bp+36)).AclBytesInUse) + uint64(unsafe.Sizeof(ACCESS_DENIED_ACE{})) +
		uint64(libc.XGetLengthSid(tls, userSid)) - uint64(unsafe.Sizeof(DWORD(0))))
	newAcl = (*struct {
		f func(*libc.TLS, uint32) uintptr
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Alloc})).f(tls, uint32(newAclSize))

	// Initialize the new ACL.

	if !!(libc.XInitializeAcl(tls, newAcl, newAclSize, uint32(2)) != 0) {
		goto __10
	}
	goto done
__10:
	;

	// Add denied to make readonly, this will be known as a "read-only tag".

	if !(set_readOnly != 0 && !(libc.XAddAccessDeniedAce(tls, newAcl, uint32(2),
		readOnlyMask, userSid) != 0)) {
		goto __11
	}
	goto done
__11:
	;

	acl_readOnly_found = FALSE
	j = WORD(0)
__12:
	if !(DWORD(j) < (*ACL_SIZE_INFORMATION)(unsafe.Pointer(bp+36)).AceCount) {
		goto __14
	}

	if !!(libc.XGetAce(tls, *(*PACL)(unsafe.Pointer(bp + 24)), uint32(j), bp+48) != 0) {
		goto __15
	}
	goto done
__15:
	;

	phACE2 = *(*LPVOID)(unsafe.Pointer(bp + 48 /* pACE2 */))

	// Do NOT propagate inherited ACEs.

	if !(int32((*ACE_HEADER)(unsafe.Pointer(phACE2)).AceFlags)&0x10 != 0) {
		goto __16
	}
	goto __13
__16:
	;

	// Skip the "read-only tag" restriction (either added above, or it is
	// being removed).

	if !(int32((*ACE_HEADER)(unsafe.Pointer(phACE2)).AceType) == 0x1) {
		goto __17
	}
	pACEd = phACE2

	if !((*ACCESS_DENIED_ACE)(unsafe.Pointer(pACEd)).Mask == readOnlyMask &&
		libc.XEqualSid(tls, userSid, pACEd+8) != 0) {
		goto __18
	}
	acl_readOnly_found = TRUE
	goto __13
__18:
	;
__17:
	;

	// Copy the current ACE from the old to the new ACL.

	if !!(libc.XAddAce(tls, newAcl, uint32(2), MAXDWORD, *(*LPVOID)(unsafe.Pointer(bp + 48)),
		uint32((*ACE_HEADER)(unsafe.Pointer(*(*LPVOID)(unsafe.Pointer(bp + 48)))).AceSize)) != 0) {
		goto __19
	}
	goto done
__19:
	;
	goto __13
__13:
	j++
	goto __12
	goto __14
__14:
	;

	// Apply the new ACL. Note PROTECTED_DACL_SECURITY_INFORMATION can be used
	// to remove inherited ACL (we need to overwrite the default ACL's in this case)

	if !(set_readOnly == acl_readOnly_found || libc.XSetNamedSecurityInfoA(tls,
		nativePath, SE_FILE_OBJECT,
		uint32(0x00000004),
		uintptr(0), uintptr(0), newAcl, uintptr(0)) == DWORD(0)) {
		goto __20
	}
	res = 0
__20:
	;

done:
	if !(secDesc != 0) {
		goto __21
	}
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, secDesc)
__21:
	;
	if !(newAcl != 0) {
		goto __22
	}
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, newAcl)
__22:
	;
	if !(userSid != 0) {
		goto __23
	}
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, userSid)
__23:
	;
	if !(userDomain != 0) {
		goto __24
	}
	(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_Free})).f(tls, userDomain)
__24:
	;

	if !(res != 0) {
		goto __25
	}
	return res
__25:
	;

	// Run normal chmod command.

	return libc.Xchmod(tls, nativePath, pmode)
}

var infoBits SECURITY_INFORMATION = SECURITY_INFORMATION(0x00000001 |
	0x00000002 | 0x00000004) /* tclWinTest.c:428:39 */
var readOnlyMask DWORD = DWORD(0x0040 | 0x0002 |
	0x0004 | 0x0010 | 0x0004 |
	0x0002 |
	0x00010000) /* tclWinTest.c:431:24 */

//---------------------------------------------------------------------------
//
// TestchmodCmd --
//
//	Implements the "testchmod" cmd. Used when testing "file" command. The
//	only attribute used by the Windows platform is the user write flag; if
//	this is not set, the file is made read-only. Otherwise, the file is
//	made read-write.
//
// Results:
//	A standard Tcl result.
//
// Side effects:
//	Changes permissions of specified files.
//
//---------------------------------------------------------------------------

func TestchmodCmd(tls *libc.TLS, dummy ClientData, interp uintptr, objc int32, objv uintptr) int32 { /* tclWinTest.c:654:1: */
	bp := tls.Alloc(256)
	defer tls.Free(256)

	var i int32
	// var mode int32 at bp+32, 4

	if objc < 2 {
		(*struct {
			f func(*libc.TLS, uintptr, int32, uintptr, uintptr)
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_WrongNumArgs})).f(tls, interp, 1, objv, ts+10771 /* "mode file ?file ..." */)
		return TCL_ERROR
	}

	if (*struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr) int32
	})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetIntFromObj})).f(tls, interp, *(*uintptr)(unsafe.Pointer(objv + 1*8)), bp+32) != TCL_OK {
		return TCL_ERROR
	}

	for i = 2; i < objc; i++ {
		// var buffer Tcl_DString at bp+40, 216

		var translated uintptr

		translated = (*struct {
			f func(*libc.TLS, uintptr, uintptr, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_TranslateFileName})).f(tls, interp, (*struct {
			f func(*libc.TLS, uintptr) uintptr
		})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_GetString})).f(tls, *(*uintptr)(unsafe.Pointer(objv + uintptr(i)*8))), bp+40 /* &buffer */)
		if translated == uintptr(0) {
			return TCL_ERROR
		}
		if TestplatformChmod(tls, translated, *(*int32)(unsafe.Pointer(bp + 32))) != 0 {
			(*struct {
				f func(*libc.TLS, uintptr, uintptr)
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_AppendResult})).f(tls, interp, libc.VaList(bp, translated, ts+3687 /* ": " */, (*struct {
				f func(*libc.TLS, uintptr) uintptr
			})(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_PosixError})).f(tls, interp),
				uintptr(0)))
			return TCL_ERROR
		}
		(*struct{ f func(*libc.TLS, uintptr) })(unsafe.Pointer(&struct{ uintptr }{(*TclStubs2)(unsafe.Pointer(tcl.XtclStubsPtr)).tcl_DStringFree})).f(tls, bp+40 /* &buffer */)
	}
	return TCL_OK
}

// Local Variables:
// mode: c
// c-basic-offset: 4
// fill-column: 78
// End:

func init() {
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&commands)) + 0 /* .cmdName */)) = uintptr(unsafe.Pointer(&procCommand))                                                   // tclTestProcBodyObj.c:62:7:
	*(*func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&commands)) + 8)) = ProcBodyTestProcObjCmd                              // tclTestProcBodyObj.c:62:20:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&commands)) + 24 /* .cmdName */)) = uintptr(unsafe.Pointer(&checkCommand))                                                 // tclTestProcBodyObj.c:63:7:
	*(*func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&commands)) + 32)) = ProcBodyTestCheckObjCmd                            // tclTestProcBodyObj.c:63:21:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&safeCommands)) + 0 /* .cmdName */)) = uintptr(unsafe.Pointer(&procCommand))                                               // tclTestProcBodyObj.c:68:7:
	*(*func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&safeCommands)) + 8)) = ProcBodyTestProcObjCmd                          // tclTestProcBodyObj.c:68:20:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&safeCommands)) + 24 /* .cmdName */)) = uintptr(unsafe.Pointer(&checkCommand))                                             // tclTestProcBodyObj.c:69:7:
	*(*func(*libc.TLS, ClientData, uintptr, int32, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&safeCommands)) + 32)) = ProcBodyTestCheckObjCmd                        // tclTestProcBodyObj.c:69:21:
	*(*func(*libc.TLS, uintptr, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&simpleFilesystem)) + 24)) = SimplePathInFilesystem                                        // tclTest.c:371:5:
	*(*func(*libc.TLS, uintptr, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&simpleFilesystem)) + 88)) = SimpleStat                                                    // tclTest.c:385:5:
	*(*func(*libc.TLS, uintptr, int32) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&simpleFilesystem)) + 96)) = SimpleAccess                                                    // tclTest.c:386:5:
	*(*func(*libc.TLS, uintptr, uintptr, int32, int32) Tcl_Channel)(unsafe.Pointer(uintptr(unsafe.Pointer(&simpleFilesystem)) + 104)) = SimpleOpenFileChannel                    // tclTest.c:387:5:
	*(*func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&simpleFilesystem)) + 112)) = SimpleMatchInDirectory            // tclTest.c:388:5:
	*(*func(*libc.TLS) uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&simpleFilesystem)) + 136)) = SimpleListVolumes                                                            // tclTest.c:392:5:
	*(*func(*libc.TLS, uintptr, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 24)) = TestReportInFilesystem                                 // tclTest.c:337:5:
	*(*func(*libc.TLS, ClientData) ClientData)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 32)) = TestReportDupInternalRep                                // tclTest.c:338:5:
	*(*func(*libc.TLS, ClientData))(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 40)) = TestReportFreeInternalRep                                          // tclTest.c:339:5:
	*(*func(*libc.TLS, uintptr, uintptr, int32) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 64)) = TestReportNormalizePath                         // tclTest.c:342:5:
	*(*func(*libc.TLS, uintptr, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 88)) = TestReportStat                                         // tclTest.c:345:5:
	*(*func(*libc.TLS, uintptr, int32) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 96)) = TestReportAccess                                         // tclTest.c:346:5:
	*(*func(*libc.TLS, uintptr, uintptr, int32, int32) Tcl_Channel)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 104)) = TestReportOpenFileChannel         // tclTest.c:347:5:
	*(*func(*libc.TLS, uintptr, uintptr, uintptr, uintptr, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 112)) = TestReportMatchInDirectory // tclTest.c:348:5:
	*(*func(*libc.TLS, uintptr, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 120)) = TestReportUtime                                       // tclTest.c:349:5:
	*(*func(*libc.TLS, uintptr, uintptr, int32) uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 128)) = TestReportLink                               // tclTest.c:350:5:
	*(*func(*libc.TLS, uintptr, uintptr) uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 144)) = TestReportFileAttrStrings                           // tclTest.c:352:5:
	*(*func(*libc.TLS, uintptr, int32, uintptr, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 152)) = TestReportFileAttrsGet                // tclTest.c:353:5:
	*(*func(*libc.TLS, uintptr, int32, uintptr, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 160)) = TestReportFileAttrsSet                // tclTest.c:354:5:
	*(*func(*libc.TLS, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 168)) = TestReportCreateDirectory                                      // tclTest.c:355:5:
	*(*func(*libc.TLS, uintptr, int32, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 176)) = TestReportRemoveDirectory                      // tclTest.c:356:5:
	*(*func(*libc.TLS, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 184)) = TestReportDeleteFile                                           // tclTest.c:357:5:
	*(*func(*libc.TLS, uintptr, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 192)) = TestReportCopyFile                                    // tclTest.c:358:5:
	*(*func(*libc.TLS, uintptr, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 200)) = TestReportRenameFile                                  // tclTest.c:359:5:
	*(*func(*libc.TLS, uintptr, uintptr, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 208)) = TestReportCopyDirectory                      // tclTest.c:360:5:
	*(*func(*libc.TLS, uintptr, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 216)) = TestReportLstat                                       // tclTest.c:361:5:
	*(*uintptr)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 224 /* .loadFileProc */)) = *(*uintptr)(unsafe.Pointer(&struct {
		f func(*libc.TLS, uintptr, uintptr, uintptr, uintptr) int32
	}{TestReportLoadFile})) // tclTest.c:362:5:
	*(*func(*libc.TLS, uintptr) int32)(unsafe.Pointer(uintptr(unsafe.Pointer(&testReportingFilesystem)) + 240)) = TestReportChdir // tclTest.c:364:5:
}

var ts1 = "reporting\x00simple\x008.5\x001.1.0\x00Tcltest\x008.6.12\x00gettimes\x00noop\x00testpurebytesobj\x00testsetbytearraylength\x00testbytestring\x00teststringbytes\x00testwrongnumargs\x00testfilesystem\x00testsimplefilesystem\x00testgetindexfromobjstruct\x00testasync\x00testbumpinterpepoch\x00testchannel\x00testchannelevent\x00testcmdtoken\x00testcmdinfo\x00testcmdtrace\x00testconcatobj\x00testcreatecommand\x00testdcall\x00testdel\x00testdelassocdata\x00testdoubledigits\x00testdstring\x00testencoding\x00testevalex\x00testevalobjv\x00testevent\x00testexithandler\x00testexprlong\x00testexprlongobj\x00testexprdouble\x00testexprdoubleobj\x00testexprparser\x00testexprstring\x00testfevent\x00testfilelink\x00testfile\x00testhashsystemhash\x00testgetassocdata\x00testgetint\x00testgetplatform\x00testgetvarfullname\x00testinterpdelete\x00testlink\x00testlocale\x00testpanic\x00testparseargs\x00testparser\x00testparsevar\x00testparsevarname\x00testregexp\x00testreturn\x00testsaveresult\x00testservicemode\x00testsetassocdata\x00testsetnoerr\x00testseterr\x00testset2\x00testseterrorcode\x00testsetobjerrorcode\x00testutfnext\x00testutfprev\x00testnumutfchars\x00testfindfirst\x00testfindlast\x00testsetplatform\x00teststaticpkg\x00testtranslatefilename\x00testupvar\x00T1\x00T2\x00testmainthread\x00testsetmainloop\x00testexitmainloop\x00testcpuid\x00T3\x00testnreunwind\x00testnrelevels\x00testinterpresolver\x00argv\x00stderr\x00tcl_rcFileName\x00-appinitprocerror\x00-appinitprocdeleteinterp\x00-appinitprocclosestderr\x00-appinitprocsetrcfile\x00wrong # args\x00create\x00delete\x00mark\x00bad option \"\x00\": must be create, delete, int, or mark\x00\x00wrong # args: should be \"\x00 option cmdName\"\x00original\x00get\x00??\x00CmdProc1\x00 \x00CmdProc2\x00unknown\x00 CmdDelProc1\x00 CmdDelProc2\x00 unknown\x00 nativeObjectProc\x00 stringProc\x00modify\x00new_command_data\x00new_delete_data\x00\": must be create, delete, get, or modify\x00CmdProc1 \x00CmdProc2 \x00CmdDelProc1 \x00CmdDelProc2 \x00 option arg\"\x00%p\x00name\x00bad command token \"\x00\"\x00\": must be create or name\x00 option script\"\x00tracetest\x00deletetest\x00leveltest\x00resulttest\x00Delete wasn't called\x00doubletest\x00\": must be tracetest, deletetest, doubletest or resulttest\x00Error\x00Break\x00Continue\x00Return\x00OtherStatus\x00 option\"\x00test_ns_basic::createdcommand\x00create2\x00value:at:\x00delete2\x00\": must be create, delete, create2, or delete2\x00CreatedCommandProc could not get command info for test_ns_basic::createdcommand\x00CreatedCommandProc in \x00CreatedCommandProc2 could not get command info for test_ns_basic::createdcommand\x00CreatedCommandProc2 in \x00bogus interpreter argument!\x00wrong # arguments: should be \"\x00 data_key\"\x00fpval ndigits type ?shorten?\x00double\x00conversion type\x00bad value? %g\n\x00shorten\x00bad flag\x00-\x00+\x00shortest\x00Steele\x00e\x00f\x00append\x00element\x00end\x00free\x00gresult\x00staticsmall\x00short\x00staticlarge\x00first0 first1 first2 first3 first4 first5 first6 first7 first8 first9\nsecond0 second1 second2 second3 second4 second5 second6 second7 second8 second9\nthird0 third1 third2 third3 third4 third5 third6 third7 third8 third9\nfourth0 fourth1 fourth2 fourth3 fourth4 fourth5 fourth6 fourth7 fourth8 fourth9\nfifth0 fifth1 fifth2 fifth3 fifth4 fifth5 fifth6 fifth7 fifth8 fifth9\nsixth0 sixth1 sixth2 sixth3 sixth4 sixth5 sixth6 sixth7 sixth8 sixth9\nseventh0 seventh1 seventh2 seventh3 seventh4 seventh5 seventh6 seventh7 seventh8 seventh9\n\x00This is a malloc-ed string\x00special\x00This is a specially-allocated string\x00bad gresult option \"\x00\": must be staticsmall, staticlarge, free, or special\x00length\x00result\x00trunc\x00start\x00\": must be append, element, end, free, get, length, result, trunc, or start\x00option\x00global\x00bad value \"\x00\": must be global\x00script ?global?\x00global word ?word ...?\x00subcommand ?arg ...?\x00subcommand\x00name position script\x00position specifier\x00queue\x00head\x00tail\x00    (command bound to \"testevent\" callback)\x00    (return value from \"testevent\" callback)\x00 create|delete value\"\x00\": must be create or delete\x00odd %d\n\x00ExitProcOdd: unable to write to stdout\x00even %d\n\x00ExitProcEven: unable to write to stdout\x00 expression\"\x00This is a result\x00: %ld\x00expression\x00: \x00source ?target?\x00could not create link from \"\x00\" to \"\x00\": \x00could not read link \"\x00unix\x00mac\x00windows\x00 path\"\x00 option ?arg arg arg arg arg arg arg arg arg arg arg arg arg arg?\"\x00 intRO realRO boolRO stringRO wideRO charRO ucharRO shortRO ushortRO uintRO longRO ulongRO floatRO uwideRO\"\x00int\x00real\x00bool\x00string\x00wide\x00char\x00uchar\x00ushort\x00uint\x00long\x00ulong\x00float\x00uwide\x00set\x00 intValue realValue boolValue stringValue wideValue charValue ucharValue shortValue ushortValue uintValue longValue ulongValue floatValue uwideValue\"\x00update\x00\": should be create, delete, get, set, or update\x00category ?locale?\x00ctype\x00numeric\x00time\x00collate\x00monetary\x00all\x00T3: wrong type for arg 2\x00T3: wrong type for arg 1\x00script length\x00\n    (remainder of script: \"\x00\")\x00expr length\x00\n    (remainder of expr: \"\x00expand\x00word\x00text\x00backslash\x00command\x00variable\x00subexpr\x00operator\x00varName\x00script length append\x00switch\x00?-switch ...? exp string ?matchVar? ?subMatchVar ...?\x00%d %d\x00couldn't set variable \"\x00%ld\x00-indices\x00-nocase\x00-about\x00-expanded\x00-line\x00-linestop\x00-lineanchor\x00-xflags\x00--\x00 data_key data_item\"\x00 platform\"\x00unsupported platform: should be one of unix, or windows\x00 prefix safe loaded\"\x00x\x00loaded\x00 level name ?name2? dest global\"\x00namespace\x00too many args\x00NONE\x00 option ?arg ...?\x00cmd\x00 cmd script\x00called \"testfevent code\" before \"testfevent create\"\x00share\x00%s\x00-force\x00mv\x00cp\x00rm\x00mkdir\x00cpdir\x00rmdir\x00name scope\x00::test_ns_var\x00alloc & free 100000 6 word items\n\x00   %.3f usec per alloc+free\n\x00alloc 5000 6 word items\n\x00   %.3f usec per alloc\n\x00free 5000 6 word items\n\x00   %.3f usec per free\n\x00Tcl_NewObj 5000 times\n\x00   %.3f usec per Tcl_NewObj\n\x00Tcl_DecrRefCount 5000 times\n\x00   %.3f usec per Tcl_DecrRefCount\n\x00TclGetStringFromObj of \"12345\" 100000 times\n\x0012345\x00   %.3f usec per TclGetStringFromObj of \"12345\"\n\x00Tcl_GetIntFromObj of \"12345\" 100000 times\n\x00   %.3f usec per Tcl_GetIntFromObj of \"12345\"\n\x00Tcl_GetInt of \"12345\" 100000 times\n\x00   %.3f usec per Tcl_GetInt of \"12345\"\n\x00sprintf of 12345 100000 times\n\x00%d\x00   %.3f usec per sprintf of 12345\n\x00hashtable lookup of \"gettimes\" 100000 times\n\x00   %.3f usec per hashtable lookup of \"gettimes\"\n\x00Tcl_SetVar of \"12345\" 100000 times\n\x00a\x00   %.3f usec per Tcl_SetVar of a to \"12345\"\n\x00Tcl_GetVar of a==\"12345\" 100000 times\n\x00   %.3f usec per Tcl_GetVar of a==\"12345\"\n\x00value\x00?string?\x00value length\x00bytearray\x00before get\x00before set\x00 varName ?newValue?\"\x00 varName elemName ?newValue?\"\x00type script discard\x00small result\x00append result\x00free result\x00dynamic result\x00object result\x00called\x00notCalled\x00present\x00missing\x00same\x00different\x00dynamic\x00object\x00small\x00Exit MainLoop\n\x00 subcommand ?additional args..?\"\x00splice\x00setchannelerror\x00setchannelerrorinterp\x00cut\x00 cut channelName\"\x00clearchannelhandlers\x00 clearchannelhandlers channelName\"\x00info\x00 info channelName\"\x00read\x00write\x00nonblocking\x00blocking\x00line\x00none\x00full\x00async_flush\x00eof\x00blocked\x00unblocked\x00auto\x00saw_cr\x00lf\x00cr\x00crlf\x00queued_cr\x00inputbuffered\x00channel name required\x00isshared\x00isstandard\x00mode\x00mthread\x00open\x00tclIO\x00outputbuffered\x00queuedcr\x001\x000\x00readable\x00refcount\x00type\x00writable\x00transform\x00 transform channelId -command cmd\"\x00-command\x00bad argument \"\x00\": should be \"-command\"\x00unstack\x00 unstack channel\"\x00\": should be cut, clearchannelhandlers, info, isshared, mode, open, readable, splice, writable, transform, unstack\x00 channelName cmd ?arg1? ?arg2?\"\x00add\x00 channelName add eventSpec script\"\x00bad event name \"\x00\": must be readable, writable, or none\x00 channelName delete index\"\x00bad event index: \x00: must be nonnegative\x00bad event index \x00: out of range\x00TestChannelEventCmd: damaged event script list\x00list\x00 channelName list\"\x00removeall\x00 channelName removeall\"\x00 channelName delete index event\"\x00bad command \x00, must be one of add, delete, list, set, or removeall\x00 ?newmode?\"\x00insufficient arguments\x00b\x00c\x00d\x00argument targetvalue\x00dummy\x00index value comparison failed: got \x00 when \x00 expected\x00boolean\x00registered\x00failed\x00unregistered\x00lappend filesystemReport \x00stat\x00lstat\x00access\x00matchmounts\x00matchindirectory\x00chdir\x00loadfile\x00link\x00renamefile\x00copyfile\x00deletefile\x00createdirectory\x00copydirectory\x00removedirectory\x00fileattributestrings\x00fileattributesget\x00fileattributesset\x00utime\x00normalizepath\x00simplefs:/\x00read-only\x00r\x00string ?numBytes?\x00\"testutfnext\" can only handle %d bytes\x00Tcl_UtfNext is not supposed to read src[-1]\x00Tcl_UtfNext is not supposed to read src[end]\nDifferent result when src[end] is %#x\x00A\xa0\xc0\xc1\xc2\xd0\xe0\xe8\xf2\xf7\xf8\xfe\xff\x00bytes ?offset?\x00eax\x00operation not available\x00non-zero initial size\x00 creation problem\x00unexpected maximal size\x00 lookup problem\x00 value problem\x00non-zero final size\x00OK\x00Tcl_ConcatObj is unsafe:\x00foo bar sum\x00eeny meeny\x00\n\t* (a) concatObj does not have refCount 0\x00\n\t* (a) concatObj is not a new obj \x00(no new refCount)\x00(refCount added)\x00(more than one refCount added!)\x00extremely unsafe behaviour by Tcl_ConcatObj()\x00\n\t* (b) concatObj does not have refCount 0\x00\n\t* (b) concatObj is not a new obj \x00(refCount removed?)\x00\n\t* (c) concatObj does not have refCount 0\x00\n\t* (c) concatObj is not a new obj \x00\n\t* (d) concatObj does not have refCount 0\x00\n\t* (d) concatObj is not a new obj \x00\n\t* (e) concatObj does not have refCount 0\x00\n\t* (e) concatObj is not a new obj \x00(failed to concat)\x00(corrupted input!)\x00\n\t* (f) concatObj does not have refCount 0\x00\n\t* (f) concatObj is not a new obj \x00\n\t* (g) concatObj does not have refCount 0\x00\n\t* (g) concatObj is not a new obj \x00-bool\x00booltest\x00Marks the end of the options\x00-help\x00Print summary of command-line options and abort\x00::ns2\x00y\x00(NULL)\x00ctx1\x00ctx2\x00Y\x00up|down ?interp?\x00provided interpreter not found\x00operation\x00testInterpResolver\x00could not remove the resolver scheme\x00down\x00up\x00C\x00~/tclshrc.tcl\x00TCLOBJTEST_VARPTR\x00testbignumobj\x00testbooleanobj\x00testdoubleobj\x00testintobj\x00testindexobj\x00testlistobj\x00testobj\x00teststringobj\x00mult10\x00div10\x00iseven\x00radixsize\x00option ?arg ...?\x00var value\x00error in mp_init\x00error in mp_read_radix\x00varIndex\x00error in mp_mul_d\x00error in mp_div_d\x00error in mp_mod_2d\x00option arg ?arg ...?\x00not\x00\": must be set, get, or not\x00\": must be set, get, mult10, or div10\x00check\x00token\x00index\x00set2\x00setlong\x00setmaxlong\x00ismaxlong\x00get2\x00inttoobigtest\x00\": must be set, get, get2, mult10, or div10\x00replace\x00option arg ?arg...?\x00varIndex start count ?element...?\x00assign\x00bug3598580\x00convert\x00no type \x00 found\x00duplicate\x00freeallvars\x00invalidateStringRep\x00newobj\x00objtype\x00types\x00\": must be assign, convert, duplicate, freeallvars, newobj, objcount, objtype, refcount, type, or types\x00index value out of range\x00appendstrings\x00length2\x00setlength\x00maxchars\x00getunicode\x00appendself\x00appendself2\x00bad variable index\x00variable %d is unset (NULL)\x00procbodytest\x001.1\x00proc\x00namespace eval %s { namespace export %s }\x00%s::%s\x00newName argsList bodyName\x00command \"\x00\" is not a Tcl procedure\x00procedure \"\x00\" does not have a Proc struct!\x00failed to create a procbody object for procedure \"\x00testchmod\x00testeventloop\x00testvolumetype\x00testwinclock\x00testwinsleep\x00testexcept\x00testsize\x00option ...\x00done\x00wait\x00\": must be done or wait\x00?name?\x00could not get volume type for \"\x00ms\x00time_t\x00st_mtime\x00time_t|st_mtime\x00<type-of-exception>\x00access_violation\x00datatype_misalignment\x00array_bounds\x00float_denormal\x00float_divbyzero\x00float_inexact\x00float_invalidop\x00float_overflow\x00float_stack\x00float_underflow\x00int_divbyzero\x00int_overflow\x00private_instruction\x00inpageerror\x00illegal_instruction\x00noncontinue\x00stack_overflow\x00invalid_disp\x00guard_page\x00invalid_handle\x00ctrl+c\x00mode file ?file ...?\x00"
var ts = (*reflect.StringHeader)(unsafe.Pointer(&ts1)).Data
